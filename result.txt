size in bytes of a plain file; amount of data waiting on some special files., 在 字节 字节 大小 的 ， ， 但 会 引发 " 的 " 的 的, 以 字节 为 单位 的 普通 文件大小 ； 对于 某些 特殊 文件 则 是 所 等待 的 数据量
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
read and return up to size bytes with only one call on the raw stream, 读取 并 返回 一个 字节 的 的 的 的 ， 返回 " true ", 在 原始 流 上 通过 <unk> 调用 读取 并 返回 至多 size 个 字节
signals are groups of exceptional conditions <unk> during the course of computation, 信号 是 由 <unk> 的 的 的 <unk>, 信号 是 在 计算 过程 中 出现 的 异常 条件 组
<unk> may optionally specify a default value, using normal python <unk>, " 可以 可以 可以 使用 使用 python 使用 的 python 的, " field " s 可以 选择 使用 普通 的 python 语法 指定 默认值 :
note that the <unk> implementation always <unk>, 请 注意 " <unk> 实现 实现 实现 " 总是 " ", 请 注意 ， " <unk> " 实现 总是 填充
changed in version 3.7: if the result is not <unk> "valueerror" is raised instead of <unk>, 在 3.7 版 更改 : 如果 结果 ， 则 会 引发 " valueerror " 而 不是 " valueerror ", 在 3.7 版 更改 : 如果 没有 执行 完 ， 会 抛出 " valueerror " 异常 而 不是 " assertionerror "
also, this decorator requires that the "__dict__" attribute on each instance be a mutable mapping, 这 ， 此 函数 会 被 " 的 " 实例 的 实例 都 是 一个 映射, 而且 ， 这个 装饰 器 要求 每个 实例 上 的 " __ dict __ " 是 可变 的 映射
return obj <unk> (" <unk>, 返回 " 1 _ <unk> " , " 1 " " " ", 返回 obj <unk> 的 结果 ( " obj " )
python does automatic memory management <unk> counting for most objects and garbage collection to <unk> <unk>, python python 解释器 内存 内存 管理 管理 ， 大多数 大多数 大多数 垃圾 回收 垃圾 回收 垃圾 回收, python 会 自动 进行 内存 管理 （ 对 大多数 对象 进行 引用 计数 并 使用 garbage collection 来 清除 循环 引用 ）
gives a callable object where <unk> <unk> <unk> + <unk>, <unk> 一个 可 调用 对象 对象 " " " " " " " " " " " " " ", 都 会 给出 一个 可 调用 对象 ， 使得 " <unk> ( <unk> ) <unk> <unk> + 2 " .
note that the exact contents of code info strings are highly implementation dependent and they may change arbitrarily across python <unk> or python <unk>, 请 注意 的 的 的 代码 的 内容 的 " " " " ， 因为 ， 并且 python python python python 的 python 版本 的 python 版本 的 python 版本, 请 注意 ， 代码 信息 字符串 的 <unk> 内容 是 高度 依赖于 实现 的 ， 它们 可能 会 在 python <unk> 或 python 版本 中 任意 更改
<unk> references will be relative to the offset from the beginning of the file, " <unk> " 将 将 从 文件 的 文件 的 文件, <unk> 引用 将 相对 于 从文件 开头 的 偏移
this is the equivalent of the python statement "o1 & o2"., 等价 于 python 语句 " o1 o2 " o2 ", 等价 与 python 语句 " o1 & o2 "
(contributed by antoine pitrou in bpo <unk>, （ 由 antoine pitrou 在 bpo <unk> 中 贡献 。 ）, （ 由 antoine pitrou 在 bpo <unk> 中 贡献 。 ）
if it's a number, it refers to a positional argument, and if it's a keyword, it refers to a named keyword argument, 如果 在 一个 <unk> ， ， 则 如果 参数 ， ， ， ， 则 ， 它 将 其 参数 关键字 参数 关键字 参数, 如果 为 数字 ， 则 它 指向 一个 位置 参数 ， 而 如果 为 关键字 ， 则 它 指向 一个 命名 关键字 参数
the functions in this chapter interact with python objects regardless of their type, or with wide classes of object types (e.g. all numerical types, or all sequence <unk>, 本章 中 的 函数 python python python 对象 的 类型 、 " 、 " 类型 的 类型 、 " 、 " 、 " 、 " 的 所有 ", 本章 中 的 函数 与 python 对象 交互 ， 无论 其 类型 ， 或 具有 广泛 类 的 对象 类型 （ 例如 ， 所有 数值 类型 ， 或 所有 序列 类型 ）
asyncio future is not compatible with the <unk> and <unk> functions., asyncio future 不 并 与 " <unk> _ <unk> " 和 " <unk> _ <unk> ", asyncio future 不能 兼容 " concurrent . futures . wait ( ) " 和 " concurrent . futures . as _ completed ( ) " 函数
set bytecode counter to target ., 设置 设置 的 的 的 的, 将 字节 码 计数器 的 值 设为 target
the earliest representable <unk> <unk> 0, 0, <unk>, <unk> 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> 的 <unk>, 早 最 的 可 表示 " time " , " time ( 0 , 0 , 0 , 0 ) "
<unk> parser for <unk>, " <unk> . <unk> " : <unk>, " urllib . <unk> " robots . txt 语法分析 程序
example: <unk> of "compile()", 示例 : " compile ( ) " 的 模拟, 示例 : " compile ( ) " 的 模拟
the <unk> " argument defaults to "none", meaning that arguments will never be treated as file <unk>, " 参数 " " " 参数 " 为 " none " ， " 参数 " 参数 参数 将 被 作为 文件 描述符, " <unk> _ prefix _ chars " 参数 默认 为 " none " ， 意味着 参数 不会 被 当作 文件 对待
raises an auditing event <unk> with arguments "key", "sub_key", <unk>, 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " key " , " key " , " key " , " , " , ", 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " key " , " sub _ key " , " value _ name "
notice that while <unk> an <unk> the right hand side is evaluated before the left hand <unk>, 注意 ， 虽然 <unk> <unk> 一个 ， ， ， ， ， ， ， 会 被 执行 ， ， 会 被 执行, 但 注意 在 对 赋值 操作 求值 时 ， 右侧 会 <unk> 左侧 被 求值
base class for text streams, 用于 流 的 的 流, 文本 流 的 基类
bpo <unk> update windows build and os x installers to use openssl <unk>, bpo <unk> : 更新 windows 构建 和 os x 安装程序 以 使用 openssl 1.0 ., bpo <unk> : 更新 windows 构建 和 os x 安装程序 以 使用 openssl 1.0 . <unk>
if it <unk> in parsing the date, <unk> returns a 9 tuple that can be passed directly to <unk> otherwise "none" will be returned, 如果 <unk> 了 " <unk> " ， " ， 返回 一个 " " " " " " " " ( ) " 方法 将 被 传递 给 " none ", 如果 日期 解析 成功 ， " <unk> ( ) " 将 返回 一个 <unk> 元组 ， 可 直接 传递 给 " time . <unk> ( ) " ； 否则 返回 " none "
emacs users will be <unk> to know that there is a very good python mode for emacs, 在 ， 将 被 以 为 一个 ， 是 在 python 的 的 python, emacs 用户 将 <unk> 地 了解 到 emacs 具有 非常 好 的 python 模式
the init function must return the module object to its <unk> so that it then gets inserted into <unk>, 函数 函数 函数 必须 返回 返回 对象 的 " 对象 " 对象 ， 它 它 它 它 需要 需要 需要 的 的 " 对象 ", 初始化 函数 必须 返回 模块 对象 给 其 调用者 ， 这样 它 就 可以 被 插入 到 " sys . modules " 中
<unk> after <unk> <unk> function is called, " " ( ) " 之后 ( ) " , " <unk> ( ) " , " <unk> ( ) " 函数, 在 " importlib " 的 find _ and _ load 函数 被 调用 后 被 触发
let the show <unk>, 将 <unk> ：, 让 我们 开始 <unk> ！
lines in the input can end in "'\n'", "'\r'", or <unk> and these are <unk> into <unk> before being returned to the caller, 将 输入 中 的 " 可以 在 " " " " 或 " " " 或 " <unk> " ， 并且 在 <unk> 被 之前 ， 将 被 被, 输入 中 的 行 结束符 可以 为 " ' \ n ' " , " ' \ r ' " 或 " ' \ r \ n ' " ， 在 返回 给 调用者 之前 它们 会 被 统一 转写 为 " ' \ n ' "
<unk> are <unk> by handler classes, <unk> 是 通过 <unk> <unk>, 目标 由 handler 类 提供
here are some examples:, 以下 是 一些 示例 :, 这里 是 一些 示例 :
decompress data (a bytes like object <unk> returning uncompressed data as bytes, 解压缩 data 字节 bytes like object 的 bytes 数据 数据 数据 数据 数据 数据 数据, 解压缩 data ( 一个 bytes like object ) ， 返回 字节 串 形式 的 解压缩 数据
name is ignored and kept for backward compatibility, name 是 为 " true " ， 用于, name 会 被 忽略 仅 保留 用于 向下兼容
customizing default python versions, 自定义 的 python python, 自定义 默认 的 python 版本
return a representation of the proxy object., 返回 对象 对象 的 对象 的 对象, 返回 代理 对象 的 内部 字符串 表示
third output not so <unk>, 第三方 输出 不 <unk> :, <unk> 输出 并 不 <unk>
since python 3.2, a subset of the api has been declared to guarantee a stable abi, 由于 python python 版本 的 api ， api 已 被 移除 到 一个 abi, 从 <unk> 起 ， 已经 声明 了 一个 api 的 子集 ， 以 确保 稳定 的 abi
the numeric arguments are first converted to a common type, and the result is of that type., 两个 参数 是 第一个 两个 的 的 ， ， 结果 结果 是 结果 是, 数值 参数 会先 转换 为 相同 类型 ， 结果 也 为 转换 后 的 类型
decimal numbers include special values such as "nan" which stands for "not a <unk> positive and negative "infinity", and " <unk>, 十进制 数字 的 特殊 特殊 ， 例如 " <unk> " ， ， 、 和 和 和 和 和 和 和 和 和 和, 十进制 数 包括 特殊 值 ， 例如 " nan " 代表 “ 非 数字 ” ， 正 的 和 负 的 " infinity " ， 和 " 0 "
if you want to execute a test file that isn't importable as a module you should execute the file directly instead., 如果 你 想 一个 文件 ， ， ， 则 将 你 模块 的 模块 ， 你 你 的 文件, 若 你 需要 执行 不能 被 作为 模块 导入 的 测试 文件 ， 你 需要 直接 执行 该 测试 文件
"f" ("float") <unk> convert a c "float" to a python floating point number., " " " " " " float " float " float " c " double " int " int " int " 浮点数, " f " ( " float " ) [ float ] 将 一个 c " float " 单精度 浮点数 转化 为 python 浮点数 类型 数字
the <unk> function stops processing options as soon as a non option argument is encountered., " math . get ( ) " 函数 作为 作为 参数 参数 参数 参数 参数 参数, " getopt ( ) " 函数 将 在 遇到 非 选项 参数 时 立即 停止 处理 选项
their purpose is to guarantee consistent behavior in corner cases, which the standard c functions do not., 它们 的 是 是 与 " 于 " ， ， ， 它 的 c api 的 函数, 它们 的 目的 是 保证 在 极端 情况 下 的 一致 行为 ， 而 标准 c 的 函数 则 <unk>
(contributed by antoine pitrou in bpo <unk>, （ 由 antoine pitrou 在 bpo <unk> 中 贡献 。 ）, （ 由 antoine pitrou 在 bpo <unk> 中 贡献 。 ）
macro form of <unk> without error checking., 宏 " " ( ) " " 错误 错误 错误, 宏 版本 的 c 函数 " pylist _ getitem ( ) " ， 没有 错误 检测
the "for" statement in python differs a bit from what you may be used to in c or <unk>, " python " python 中 的 " python 中 的 的 ， 可以 可以 在 c 或 c 中, python 中 的 " for " 语句 与 你 在 c 或 <unk> 中 所用 到 的 有所不同
set the context pointer inside capsule to context ., 设置 上下文 指针 的 上下文 指针, 将 capsule 内部 的 上下文 指针 设 为 context
<unk> string objects into "update()" is not supported, as hashes work on bytes, not on characters., " 字符串 " 字符串 对象 对象 " 对象 " 对象 为 为 " null " ， 否则 返回 " 0 ", 向 " update ( ) " 输入 字符串 对象 是 不 被 支持 的 ， 因为 哈希 基于 字节 而 非 字符
loaders are still used during import but have fewer <unk>, 加载 器 直接 直接 直接 导入 ， 但 有 " <unk> ", 加载 器 仍然 在 导入 期间 被 使用 ， 但 <unk> 的 任务 <unk> 减少
<unk> are more <unk> <unk> existing interfaces but possibly adding new modules, and release <unk> are <unk> making no changes except as needed to fix critical <unk>, <unk> 是 <unk> <unk> 的 ， ， 但 ， 的 的 ， ， 的 的 的 ， ， 并且 在 <unk> 的 情况 下 ， 并 在 其他 情况 下 ， 就 会 被 调用, 而 beta 版 更为 稳定 ， 它会 保留 现有 的 接口 ， 但 也 可能 增加 新 的 模块 ， release <unk> <unk> 会 保持 冻结 状态 不会 再 进行 改变 ， 除非 有 <unk> 问题 需要 修正
the code for <unk> can be also expressed as a subsequence of <unk> <unk> to exclude entries with repeated elements <unk> from the same position in the input <unk>, 对于 的 的 可以 可以 被 作为 <unk> ， <unk> 的 的 " 的 " 的 的 的 元素 的 的 元素 的 元素 ， 其中 的 的 的, " <unk> ( ) " 的 代码 也 可 被 改写 为 " product ( ) " 的 子 序列 ， 只要 将 含有 重复 元素 （ 来自 输入 中 同一 位置 的 ） 的 项 排除
"fileexistserror" is now raised if the file opened in exclusive creation mode <unk> already <unk>, 如果 在 在 文件 中 打开 文件 打开 打开 打开 打开 打开 的 文件 模式, 如果 文件 已 存在 但 使用 了 <unk> <unk> 创建 模式 （ " ' x ' " ） ， 现在 会 触发 " fileexistserror "
so our callback function receives pointers to integers, and must return an integer, 因此 的 函数 函数 函数 将 转换 为 " ， " 必须 返回 一个 整数, 所以 ， 我们 的 回调 函数 要 接收 两个 整数 指针 ， 返回 一个 整数
different types define different methods, 不同 类型 的 不同 的 方法, 不同 的 类型 可以 定义 不同 的 方法
each frame consists of one sample per <unk>, 每个 的 的 都 都 都 有 的 的 :, 每个 通道 的 每个 帧 包含 一次 采样
<unk> modern <unk> can print the <unk>, <unk> 在 <unk> / <unk> / <unk> / <unk> / <unk>, 足够 现代 的 <unk> 命令 可以 打印 元 数据 ：
pep <unk> defining a stable abi, pep 384 : 定义 稳定 的 abi, pep 384 : 定义 稳定 的 abi
this may be used to <unk> the value safely in email or other non binary <unk>, 这 可以 被 表示 为 " 或 " 的 其他 其他 的 的 的, 这 可以 被 用于 在 电子邮件 或 其他 非 二进制 环境 中 安全 地 交换 数据 值
the annotation values are available as values of a dictionary keyed by the <unk> names in the <unk> attribute of the function object, 值 值 值 是 由 <unk> 的 的 的 的 的 " " " " " 的 " 对象 的 名称, 标注 值 可以 作为 函数 对象 的 " __ annotations __ " 属性 <unk> 对应 形参 名称 <unk> 的 字典 值 被 访问
if this is a problem the <unk> fragment should be split into two <unk> fragments first and <unk> later, 如果 此 是 一个 <unk> ， ， ， 应 <unk> <unk> <unk> <unk> <unk> 和 <unk> <unk>, 如果 出现 问题 ， <unk> 将 <unk> 片段 <unk> 分为 两个 单声道 片段 ， 之后 再 <unk>
brief tour of the standard library part <unk>, 标准 库 简介 库 第二 部分, 标准 库 简介 — — 第二 部分
decoding short ascii strings with utf 8 and ascii codecs is now about <unk> faster, 解码 " ascii ascii ascii ascii ascii ascii 8 8 8 8 的 ascii ， 并且 现在 会 会 被 " " ", 使用 utf 8 和 ascii 编解码器 解码 短 ascii 字符串 现在 会 加快 大约 <unk>
added optional line numbers for idle editor windows, 添加 了 可选 的 的 用于 windows 的 的, 在 idle 编辑器 窗口 中 增加 了 可选 的 行号
a more <unk> example would look like this:, 更 多 的 例子 如下 所示 : 如下 :, 一个 更 <unk> 的 例子 如下 所示 :
returns " 1" if an error has occurred during <unk> and "0" if no error occurred, whether or not a value was found., 如果 发生 错误 时 返回 " 1 " ， 如果 没有 发生 则 返回 " 1 " 则 返回 " 1 ", 如果 在 查找 过程 中 发生 错误 ， 返回 ' ' 1 ' ' ， 如果 没有 发生 错误 ， 无论 是否 找到 值 ， 都 返回 ' ' 0 ' ' ，
the <unk> module is built using an included copy of the <unk> library unless the build is configured " with system <unk>, " <unk> " 模块 提供 了 一个 的 的 的 ， <unk> 是 <unk> 的 的 " " " " " ", 除非 使用 " with system <unk> " 配置 了 构建 ， 否则 " _ decimal " 模块 都 是 用 包含 <unk> 库 的 拷贝 构建 的
each month contains between 4 and 6 weeks and each week contains 1 7 days, 每个 " 包含 " 和 " 和 " 和 " 和 " 和 " 和 " ， 并 返回 " 1 ", 每个 月 包含 了 4 到 6 周 ， <unk> 包含 1 7 <unk>
to do this <unk> begin by reading the <unk> and <unk> document, 要 注意 此 由 " <unk> " " " <unk> " 和 " <unk> ", 手动 的 实现 方式 请 查阅 " 扩展 与 嵌入 " 文档 来 入门
changed in version 3.2: "deprecationwarning" is now ignored by default in addition to <unk>, 在 3.2 版 更改 : 现在 会 被 默认 默认 默认 默认 默认 默认 默认 默认, 在 3.2 版 更改 : " deprecationwarning " is now ignored by default in <unk> to " <unk> " .
structure member names do not have a reserved <unk>, 结构 体 名称 不 包含 一个 的 的 的 :, 结构 成员 名称 没有 保留 前缀
the syntax is as follows:, 句法 的 如下 :, 相应 语法 如下 :
the same as <unk> except that depending on the value of lock a process safe synchronization wrapper may be returned instead of a raw ctypes object., 与 " <unk> ( ) " 相同 的 的 的 的 进程 是 一个 进程 的 " " " " " 对象 的 " 对象 " 对象 返回 一个 " 对象 " 对象, 返回 一个 纯 ctypes 数组 , 或者 在 此 之上 经过 <unk> 包装 过 的 进程 安全 的 对象 ， 这 取决于 lock 参数 的 值 ， 除此之外 ， 和 " <unk> ( ) " 一样
the resolution of the <unk> clock on windows is usually around <unk> <unk>, 如果 windows 的 系统 的 的 系统 是 <unk> <unk> 的 <unk> （ 例如 " <unk>, windows 上 <unk> 时钟 的 分辨率 大约 为 <unk> 毫秒
on one hand, requiring "global" for assigned variables provides a bar against <unk> side effects, 在 windows 上 ， " ' x ' " ， 例如 " 变量 ( ) " ) " ， 例如 一个 <unk> 的, <unk> ， 要求 " global " 表示 已 分配 的 变量 可以 防止 意外 的 副作用
if the task has been cancelled , this method raises a "cancellederror" exception., 如果 该 对象 已经 被 此 方法 ， 此 方法 引发 " invalidstateerror " 异常, 如果 task 对象 被 取消 ， 此 方法 会 引发 一个 " cancellederror " 异常
changed in version 3.3: <unk> used to be raised instead of "oserror"., 在 3.3 版 更改 : " 将 被 to " " " " " ", 在 3.3 版 更改 : " ioerror " 代替 " oserror " 被 引发
note that this creates (or <unk> a variable named "x" that still exists after the loop completes, 请 注意 ， 此 方法 或 " <unk> ( ) " 方法 接受 一个 " " " " ", 注意 这里 创建 （ 或 被 重写 ） 的 名为 " x " 的 变量 在 for 循环 后 仍然 存在
the rfc specifies that the names within a json object should be <unk> but does not <unk> how repeated names in json objects should be handled, rfc 指定 的 的 对象 的 是 一种 对象 的 是 但 但 在 对象 中 的 对象 中 的 对象 中 的 对象, rfc 具体 说明 了 在 json 对象 里 的 名字 应该 是 唯一 的 ， 但 没有 规定 如何 处理 json 对象 中 的 重复 名称
if they can't remember the methods for a list, they can do something like this:, 如果 它们 有 一个 方法 ， ， ， ， 可以 这样 这样 :, 如果 他们 不 <unk> 列表 有 哪些 方法 ， 他们 <unk> 这样 做 :
<unk> the filename for compiled ( bytecode ) files by adding <unk> 2" before the ".pyc" extension (see pep <unk> )., " ' g ' " ' " ' " 文件 的 文件 （ 例如 " <unk> ( ) " ) " pep pep ) pep, 通过 在 " . pyc " 扩展名 之前 添加 " . opt 2 " 来 扩展 已 编译 文件 ( bytecode ) 的 文件名 ( 参见 pep <unk> )
it is the assignment part of the operation that produces the error, since a tuple is <unk>, 它 是 它 的 的 ， ， 它 将 其 一个 元组 的 元组, 由于 元组 是 不可 变 的 ， 因此 操作 的 赋值 部分 会 引发 错误
the return value is a "struct_time" as returned by "gmtime()" or <unk>, 返回值 是 一个 由 " time " 的 的 返回 的 " 返回 " " ", 返回值 为 一个 被 " gmtime ( ) " 或 " localtime ( ) " 返回 的 " struct _ time "
using <unk> if this code was <unk>, 使用 如果 <unk> ， 则 会 被 " " ", 使用 数据 类 ， 如果 此 代码 有效 :
you should never modify or delete these, as they are apple controlled and are used by apple or third party software, 你 应该 在 或 或 或 或 ， ， 它们 它们 被 执行 或 其他 被 使用, 你 永远 不 应 修改 或 删除 这些 内容 ， 因为 它们 由 apple 控制 并 由 apple 或 第三方 软件 使用
<unk> general decimal arithmetic specification, the general decimal arithmetic specification., " ' g ' ' ' ' " ' 十进制 ' " ' 十进制 ' ' ' ' ' ' ', ibm 的 通用 十进制 算术 规范 ， the <unk> decimal <unk> <unk> .
return "true" if the turtle is <unk> "false" if it's <unk>, 如果 <unk> 为 true ， 则 返回 " true " ， 则 返回 " true ", 如果 海龟 显示 返回 " true " ， 如果 海龟 隐藏 返回 " false "
the c function calling mechanism guarantees that the argument list passed to c functions <unk> in the examples) is never "null" in fact it guarantees that it is always a tuple <unk>, c 函数 函数 调用 " 函数 ( ) " 函数 接受 函数 的 函数 列表 （ 在 函数 中 的 函数 函数 中 的 函数 的 ", c 函数调用 机制 会 保证 传给 c 函数 的 参数 列表 ( 本 示例 中为 " args " ) <unk> 为 " null " 实际上 它会 保证 其 总是 为 一个 元组 [ 4 ]
<unk> specifies a name whose value is linked to the widget value, " _ a _ <unk> _ value _ value " 的 值 值 被 被 为 为, 文本 变量 specifies a name <unk> value is <unk> to the <unk> value
return the normal form form for the unicode string <unk>, 返回 以 为 " string " 的 的 的 字符串, 返回 unicode 字符串 <unk> 的 正常 形式 form
derived from <unk> is the subclass "turtle" <unk> <unk> which <unk> on <unk> <unk> instance which is automatically created, if not already <unk>, （ " <unk> " 的 " " " " " " " " " " " " " " " " " " " " 的 实例 ， 如果 没有 不 存在 ， 如果 没有 被 等待, 从 <unk> <unk> <unk> 子类 " turtle " ( 别名 : " <unk> " ) ， 该类 对象 在 " screen " 实例 上 绘图 ， 如果 实例 不 存在 则 会 自动 创建
a user defined class can be defined as a generic class., 用户 自定义 定义 类 定义 定义 定义 定义 定义 作为 定义 的 定义, 用户 定义 的 类 可以 定义 <unk> 型 类
(contributed by stefan <unk> in bpo <unk>, （ 由 stefan <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 stefan <unk> 在 bpo <unk> 中 贡献 。 ）
if user is not "none", the <unk> system call will be made in the child process prior to the execution of the subprocess, 如果 用户 不 为 " none " ， ， 则 将 调用 进程 将 被 进程 进程 将 被 执行 进程, 如果 user 不 为 " none " ， 则 <unk> ( ) 系统 调用 将 <unk> 进程 执行 之前 在 下级 进程 中 进行
this function does the actual work of formatting, 此 函数 会 会 使用 的 的 的, 此 函数 执行 实际 的 格式化 操作
reserved for various implementation specific options, 对于 特定 的 的 的 选项, 保留 用于 各种 具体 实现 专属 的 选项
<unk> used in python <unk> code to ensure member order is consistent <unk> attribute, removed during class <unk>, python python 3.8 中 的 python 代码 代码 代码 的 ， ， 是 为了 <unk> 的 的 " <unk> " " ", " _ order _ " 用于 python 2 / 3 代码 以 确保 成员 顺序 一致 （ 类 属性 ， 在 类 创建 期间 会 被 移除 ）
a "valueerror" is raised if address does not represent a valid ipv4 or ipv6 <unk> or if the network has host bits set., 如果 address 不是 有效 的 或 或 或 <unk> ， 则 则 则 会 引发 " typeerror " 则 返回 " true ", 如果 address 不 表示 有效 的 ipv4 或 ipv6 <unk> ， 或者 网络 设置 了 host 比特 位 ， 则 会 引发 " valueerror "
if an object is meant to support a given operation but has not yet provided an implementation, "notimplementederror" is the proper exception to <unk>, 如果 object 是 不 支持 的 支持 ， 但 ， 但 不 包含 一个 的 的 ， 则 会 被 传播, 如果 某个 对象 应当 支持 给定 的 操作 但 尚未 提供 相应 的 实现 ， 所 要 引发 的 适当 异常 应为 " notimplementederror "
here are some examples for windows, 以下 是 一些 windows 的 示例 示例, 这是 一些 windows 下 的 例子
exceptions defined in this module all inherit from <unk>, 在 这个 中 的 中 的 所有 " sys . <unk> " :, 此 模块 中 定义 的 异常 都 继承 自 " <unk> "
args is passed on to the constructor for the type., args 被 传递 给 " 的 " 构造 器, args <unk> 传给 这个 类 的 构造函数
changed in version 3.7: added the defaults parameter and the <unk> attribute., 在 3.7 版 更改 : 添加 了 " " " and " attribute " attribute ., 在 3.7 版 更改 : 添加 了 defaults 参数 和 " _ field _ defaults " 属性
this is the inverse of <unk>, 这是 " <unk> " 的 逆 操作, 这是 " date . <unk> ( ) " 的 逆 操作
also see the functions <unk> and <unk>, 请参阅 参见 函数 函数 和 " <unk> . <unk> _ <unk> ( ) " 函数, 另 请 参见 函数 " <unk> ( ) " 和 " <unk> ( ) "
bpo <unk> update windows and os x installer builds to use sqlite <unk>, bpo <unk> : 更新 windows 和 os x 安装程序 以 使用 sqlite 3.21 ., bpo <unk> : 更新 windows 和 os x 安装程序 以 使用 sqlite 3.8 . 11
many classes like to create objects with instances customized to a specific initial state, 许多 类 类 类似 类似 于 " 对象 " 对象 的 对象 的 对象, 许多 类 喜欢 创建 带有 特定 初始状态 的 自定义 实例
for example, given a logger with a name of "foo", loggers with names of <unk> <unk> and <unk> are all <unk> of <unk>, 例如 ， 给定 给定 一个 一个 的 的 名称 ， " " " " " " " " " <unk> " 的 所有 所有, 例如 ， 给定 一个 名为 " foo " 的 记录器 ， 名称 为 " foo . bar " 、 " foo . bar . baz " 和 " foo . <unk> " 的 记录器 都 是 " foo " 子项
more information can be found in the <unk> style string formatting section., 更 多 信息 可以 通过 在 格式化 格式化 格式化 格式化 格式化 格式化 格式化 格式化 格式化, 可 在 printf 风格 的 字符串 格式化 部分 找到 更 多 信息
as with all other objects in python the old objects are only <unk> after their reference counts drop to zero., 与 其他 所有 对象 的 所有 其他 对象 对象 对象 对象 对象 ， 对象 ， 只有 引用 计数 计数 将 被 视为, 与 python 中 的 所有 的 其它 对象 一样 ， 旧 的 对象 只有 在 它们 的 引用 计数 为 0 之后 才 会 被 回收
the file may be <unk>, 文件 描述符 是 被, 文件 可能 已 存档
try to match reference as well as possible to a portion of fragment (which should be the longer <unk>, 尝试 要 引用 计数 作为 作为 精度 的 的 的 ， 应当 应当 应该 <unk>, 尽可能 尝试 让 reference 匹配 <unk> 的 一部分 （ <unk> <unk> 长 ）
the default is "false" meaning utc is used., 默认值 为 " false " ， 为 ", 默认值 " false " 表示 使用 utc
slice objects are also generated when extended indexing syntax is used, 切片 对象 对象 也 也 当 使用 " 时 ， 也 会 使用 ", 切片 对象 也 会 在 使用 扩展 索引 语法 时 被 生成
if no objects are given, "print()" will just write end ., 如果 没有 对象 对象 ， 则 将 将 将 被 执行, 如果 没有 给出 objects ， 则 " print ( ) " 将 只 写入 end
when the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:, 当 键 的 的 ， ， ， 则 会 使用 " none " 来 使用 " 参数, 当 关键字 是 简单 字符串 时 ， 有时 直接 通过 关键字 参数 来 指定 键值 对 更 方便
once python has been installed, you can add or remove features through the programs and features tool that is part of windows, python python 已经 被 python ， 可以 可以 在 " 或 " 或 " <unk> " 和 " <unk> " ， 并且 在 的 的, 安装 python 后 ， 您 可以 通过 windows 中 的 “ 程序 和 功能 ” 工具 添加 或 删除 功能
note that this argument is incompatible with filename or stream if both are present, a "valueerror" is raised, 请 注意 此 函数 是 " 参数 " 或 " ， 则 会 被 引发 " valueerror ", 请 注意 此参数 与 filename 或 stream 不 兼容 — — 如果 两者 同时 存在 ， 则 会 引发 " valueerror "
the benchmark script displays <unk> in <unk>, <unk> 脚本 " <unk> " <unk> " " " " ", 该 <unk> 测试 脚本 以 纳秒 为 单位 显示 时间
return the event loop the future object is bound to., 如果 事件 循环 对象 的 对象 对象 是 " true ", 返回 future 对象 已 绑定 的 事件 循环
this can be used to define a new shape or components of a compound <unk>, 这 用于 用来 一个 新 的 的 的 或 或 预定 义 的, 这 可以 用于 定义 一个 新 形状 或 一个 复合 形状 的 多个 组成部分
if start is non zero, then elements from the iterable are skipped until start is reached, 如果 start 为 为 true ， 则 会 被 取消 ， 则 会 被 取消, 如果 start 不是 0 ， 跳过 iterable 中 的 元素 ， 直到 到达 start 这个 位置
does the same as the c <unk> <unk>, 与 与 c c c c " c " c " 相同, 其 功能 与 c " sizeof " 运算符 相同
return list of all live children of the current process., 返回 所有 所有 的 的 的 的 的, 返回 当前 进程 存活 的 子 进程 的 列表
check their documentation for more <unk>, 检查 的 的 文档 文档 更 多, 更 多 信息 请 查看 有关 它们 的 文档
for a complete list of formatting <unk> see <unk> and <unk> behavior., 对于 列表 的 的 的 列表 列表 ， 请参阅 " <unk> ( ) " 和 " <unk> ( ) ", 要 获取 格式 指令 的 完整 列表 请参阅 strftime ( ) 和 strptime ( ) 的 行为
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
the pep <unk> adds a new c api to configure the python initialization providing <unk> control on the whole configuration and better error <unk>, pep <unk> : <unk> 了 新 的 c api 的 python ， ， ， ， ， 配置 ， 并 在 <unk> <unk>, pep 587 增加 了 一个 新 的 c api 用来 配置 python 初始化 ， 提供 对 整个 配置 过程 的 更 <unk> 控制 以及 更好 的 错误报告
the following example rounds <unk> to three places after the <unk>, 下面 的 示例 <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 以下 示例 将 <unk> 舍入 到 <unk> 后 <unk> :
changed in version 3.8: the filename parameter supports a path like object ., 在 3.8 版 更改 : 添加 了 path path like object, 在 3.8 版 更改 : 文件名 形参 支持 path like object
if dst is in effect, return the offset as a "timedelta" object (see "utcoffset()" for <unk>, 如果 dst 为 " none " ， 则 返回 " " ( ) " ) " " " " ( ) ", 如果 dst 已 启用 则 将 差值 作为 一个 " timedelta " 对象 返回 （ 参见 " utcoffset ( ) " 了解 详情 ）
<unk> tkinter font wrapper, " tkinter . tkinter " 的 的 工具, " tkinter . <unk> " tkinter 字体 封装
bpo <unk> update macos installer build to use openssl <unk>, bpo <unk> : 更新 安装程序 以 构建 openssl 1.0 . 1.0 ., bpo <unk> : 在 macos 安装程序 中将 openssl 更新 为 1.1 . <unk>
it should normally always be <unk> or <unk> | <unk> a value of "0" means that an <unk> variant of "pyarg_parsetuple()" is used., 它 应当 是 是 " ' w ' " ' " ' " ' " ， " " " " " " " " " " " " ", 值 " 0 " 代表 使用 " pyarg _ parsetuple ( ) " 的 <unk> 变量
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
however, "notimplemented" is returned instead if the other <unk> has a <unk> attribute, 但是 ， " 返回 " ， 如果 " notimplemented " ， 则 会 被 " " " " 属性, 不过 也 可能 会 返回 " notimplemented " ， 如果 比较 目标 具有 " timetuple ( ) " 属性 的话
it should not call one of the <unk> ()" functions one has already been called by <unk>, 它 应该 不 调用 " 调用 " 函数 ， 一个 一个 " 调用 " 调用 " 被 调用, 它 不 应该 调用 某个 " pyerr _ ( ) " 函数 这 类 函数 已经 被 g 调用 过 了
loggers the corresponding value will be a dict in which each key is a logger name and each value is a dict describing how to configure the corresponding logger instance., 通过 参数 将 被 为 一个 ， 每个 ， 一个 一个 一个 一个 一个 名称 ， ， 一个 将 被 一个 一个 的 的 ， ， 将 其 添加 到 的 记录器, loggers 对应 的 值 将 是 一个 字典 ， 其中 每个 键 是 一个 日志 记录器 名称 而 每个 值则 是 一个 描述 如何 配置 相应 logger 实例 的 字典
new, improved, and deprecated modules, 新增 的 改进 和 弃 用 的 模块, 新增 ， 改进 和 弃 用 的 模块
token value for <unk>, " " " " " 的 权 标值, " " ; " " 的 权 标值
(see bpo <unk> and bpo <unk> for more <unk>, （ 参见 bpo <unk> 和 bpo <unk> 中 贡献 。 ）, （ 参阅 bpo <unk> 和 bpo <unk> 了解 更 多 信息 。 ）
large file support is enabled in python when the size of an <unk> is larger than a "long" and the "long long" is at least as large as an <unk>, 在 文件 支持 在 python 中 被 python 时 ， 当 被 <unk> ， ， ， ， ， ， ， ， ， ， 被 被 为 为 1, python 中 的 大 文件 支持 会 在 " <unk> _ t " 的 大小 超过 " long " 且 " long long " 至少 与 " <unk> _ t " 一样 <unk> 被 启用
this is equivalent to specifying the " x" <unk> <unk> option., 这 等价 于 " " " " " " " " " " " " " ", 这 相当于 指定 " x " " <unk> _ prefix path " 选项
in the same <unk> dictionaries can <unk> keyword arguments with the " " operator:, 在 " <unk> ( ) " ， " " " " " " " " " " " " " " " " " ", 同样 的 方式 ， 字典 可 使用 " " 操作符 来 提供 关键字 参数 :
used by queue <unk>, 由 队列 队列 队列, 由 队列 的 消费者 进程 使用
return the number of items currently in the history, 返回 队列 的 的 的 数量, 返回 历史 列表 的 当前 项数
if size is negative or "none", reads until <unk>, 如果 size 为 " none " ， " " " " " " " ", 如果 size 为 负值 或 " none " ， 则 读取 至 eof
changed in version 3.6: added the <unk> option (see also pep <unk> )., 在 3.6 版 更改 : added the " 选项 " 选项 " <unk> " pep pep pep pep pep, 在 3.6 版 更改 : 添加 了 " ' _ ' " 选项 ( 另 请参阅 pep <unk> )
open url in a new page <unk> of the default browser, if possible, otherwise equivalent to <unk>, 在 在 打开 中 的 新 的 " ， " ， 则 将 " " ( ) " 将 " " ( ) " ) ", 如果 可能 ， 在 默认 浏览器 的 <unk> （ “ 标签 ” ） 中 打开 url ， 否则 <unk> " open _ new ( ) "
<unk> in mind that if code run in a child process tries to access a global variable, then the value it <unk> (if any) may not be the same as the value in the parent process at the time that <unk> was called., 如果 在 在 进程 中 进程 被 进程 时 ， " " " " " " ， 则 将 被 被 在 ， 在 在 进程 时 ， 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被, 记住 ， 如果 子 进程 中 的 代码 尝试 访问 一个 全局变量 ， 它 所 看到 的 值 （ 如果 有 ） 可能 和 父 进程 中 执行 " process . start " <unk> 的 值 不 一样
passing the " v" option to your test script will <unk> <unk> to enable a higher level of <unk> and produce the following output:, 将 " x " 选项 （ 输出 （ 例如 " <unk> " <unk> 的 的 的 的 的 的 的, 在 调用 测试 脚本 时 添加 " v " 参数 使 " unittest . main ( ) " 显示 更为 详细 的 信息 ， 生成 如 以下 形式 的 输出 :
the function will not release the gil during the call., 函数 函数 不会 在 在 执行 的 的, 该 函数 在 调用 <unk> 不会 释放 gil
unlike standard c, all unrecognized escape sequences are left in the string <unk> <unk> the backslash is left in the result, 与 标准 ， " 所有 " ) " ， 所有 在 字符串 中 的 字符串 中 的 字符串 ， 结果 会 被 结果, 与 标准 c 不同 ， 所有 无法 识别 的 转义序列 将 原样 保留 在 字符串 中 ， 也就是说 ， 反 斜杠 会 在 结果 中 保留
set n to <unk> for <unk> which gives the <unk> <unk> points that separate data into <unk> equal <unk> groups, 设置 n 为 为 <unk> ， ， ， <unk> 的 终端 的 的 数据 ， 数据 的 数据 的 数据, 将 n 设 为 100 以 使用 百分位 ， 即 给出 <unk> 个 分隔 <unk> 将 data 分隔 为 100 个 大小 相等 的 组
works as <unk> but deletes a global name., 例如 " <unk> ( ) " ， 但 但 它 是 全局 全局 的 全局, 类似 于 " delete _ name " 但会 删除 一个 全局变量
<unk> locale's appropriate date and time representation, " % " 本地化 本地化 适当 的 适当 和 时间 时间, " % c " 本地化 的 适当 日期 和 时间 表示
compares the values <unk> with their sign ignored., 将 值 的 的 的 的 比较, 对 两个 值 执行 忽略 正负号 的 数字 比较
this module was contributed by <unk> j, 此 模块 在 由 <unk> <unk> <unk>, 该 模块 由 <unk> j
for operations other than <unk> or "replace" or when <unk> is called, <unk> is set to "none"., 对于 其他 其他 其他 或 或 或 " " " 或 " " " " " " " " " " " " " " ", 对于 " <unk> " 或 " replace " 以外 的 操作 或者 当 " <unk> ( ) " 被 调用 时 ， " <unk> " 会 被 设为 " none "
owner has write <unk>, 将 已 写入 权限 权限, 所有者 具有 写入 权限
"pipes" interface to shell pipelines, " pipes " 终端 管道 接口, " pipes " 终端 管道 接口
the "random" module also provides the <unk> class which uses the system function <unk> to generate random numbers from sources provided by the operating system., " 模块 " 模块 还 提供 了 " 装饰 ( ) " 函数 的 装饰 器 的 的 的 的 的 的 的, " random " 模块 还 提供 " <unk> " 类 ， 它 使用 系统 函数 " os . urandom ( ) " 从 操作系统 提供 的 源 生成 随机数
if the path contains a drive <unk> drive will contain <unk> up to and including the colon, 如果 路径 包含 包含 <unk> ， 将 将 将 <unk> 到 <unk> <unk> 的 <unk>, 如果 路径 path 包含 <unk> ， 则 <unk> 将 包含 冒号 及 冒号 前面 的 所有 内容
these <unk> will always return "none" when anything other than "none" is passed as the second argument., 这些 " 将 " " " " " " " none " ， 返回 " none " ， 则 返回 " none ", 当 把 " none " 以外 的 对象 作为 第三个 参数 传入 时 ， 这些 导入 器 将 总是 返回 " none "
return the new set on success or "null" on failure, 成功 时 返回 新 的 的 新 ， 失败 时 返回 " null ", 成功 时 返回 新 的 集合 ， 失败 时 返回 " null "
display the syntax error that just occurred, 将 显示 的 的 错误, 显示 刚 发生 的 语法错误
the <unk> method must be defined before any <unk>, " __ ( ) " 方法 方法 必须 是 在 之前 的 任何 被 之前, " _ generate _ next _ value _ ( ) " 方法 定义 必须 在 任何 其他 成员 之前
see also "int()" for converting a hexadecimal string to an integer using a base of <unk>, 另 请参阅 " ' ( ) " 表示 一个 一个 整数 的 整数 的 整数 的 一个, 另 请参阅 " int ( ) " 将 十六进制 字符串 转换 为 以 16 为 基数 的 整数
convert a binary file with filename input to binhex file output, 将 一个 二进制 文件 文件 写入 文件 输入 文件 文件, 将 带有 文件名 输入 的 二进制 文件 转换 为 binhex 文件 输出
the operation is done in place when o supports it, 当 o1 支持 时 ， 在 时 时 ， 它 储存, 在 o 支持 的 情况 下该 操作 会 原地 完成
since the last statement in <unk> assigns a new value to <unk> the compiler <unk> it as a local variable, 由于 在 " 语句 中 的 " " " " " " " " " " " " 的 " 的 " 作为 ", 由于 foo 中 的 最后 一个 语句 为 " x " 分配 了 一个 新值 ， 编译器 会 将 其 识别 为 局部变量
(de_de) (3) <unk> <unk> as a zero padded decimal <unk> <unk> ..., <unk> (9) number, <unk> " <unk> , , , , , , , , , , , , , y , y , y , y , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ... , ..., <unk> , <unk> ( en _ us ) ; <unk> , <unk> ( 1 ) , ( de _ de ) ( 3 ) " % m " 补零 后 ， 以 十进制 数 显示 的 分钟
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
when used to refer to modules, the fully qualified name means the entire dotted path to the module, including any parent packages, e.g. <unk>, 用于 用于 解析器 的 的 ， ， 将 被 用来 为 到 的 模块 ， 包括 任何 任何 任何 任何 任何 任何 任何 为 任何 例如, 当 被 用于 引用 模块 时 ， 完整 限定 名称 <unk> 为 标示 该 模块 的 以点 号 分隔 的 整个 路径 ， 其中 包含 其 所有 的 父包 ， 例如 " email . mime . text " :
lists are mutable , which means that you can change their <unk>, 列表 是 ， ， ， 你 可以 通过 地 地 ( ) " 的 的, 列表 属于 <unk> 对象 ， 这 意味着 你 可以 改变 它 的 内容
this works as class or function decorator, 此 函数 作为 类 函数 函数, 此 decorator 装饰 器 生效 于类 或 函数 上
changed in version 3.4: support for the input keyword argument was added., 在 3.4 版 更改 : 支持 了 关键字 参数 关键字 参数, 在 3.4 版 更改 : 增加 了 对 input 关键字 参数 的 支持
option description <unk> one of <unk> or <unk>, 选项 描述 <unk> one of " <unk> " <unk> ", 选项 描述 <unk> one of " <unk> " or " <unk> "
if the call raised, this method will raise the same exception., 如果 调用 调用 此 方法 ， 此 方法 将 引发 " 异常 " 异常, 如果 调用 引发 了 一个 异常 ， 这个 方法 也 会 引发 同样 的 异常
(contributed by victor stinner in bpo <unk>, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）
while parsing the command line, "parse_args()" checks for a variety of errors, including <unk> options, invalid types, invalid options, <unk> number of positional arguments, etc, 虽然 解析 的 " " " " ， " " <unk> " <unk> " 的 <unk> 的 的 的 <unk> （ <unk> <unk> 的 的 <unk> ）, 在 解析 命令 行时 ， " parse _ args ( ) " 会 检测 多种 错误 ， 包括 有 歧义 的 选项 、 无效 的 类型 、 无效 的 选项 、 错误 的 位置 参数 个数 等等
though not often needed, this function can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte code cache files in the directory containing the source code., 如果 没有 的 ， ， 此 函数 在 你 时 ， 时 ， 时 ， 可能 可能 会 使用 " 代码 " 代码 " 代码 " 代码 " 代码 " 代码 " 代码 " 代码 " 代码 " 代码 ", 虽然 <unk> 常用 ， 但 这个 函数 在 安装 共享 模块 时 还是 很 有用 的 ， 特别 是 当 一些 用户 可能 没有 权限 在 包含 源代码 的 目录 <unk> 字节 码 缓存 文件 时
this bytestring must be passed to a subsequent call to "decompress()" if decompression is to continue, 此 方法 必须 为 一个 调用 " 调用 " ) " ， 如果 调用 对象, 如果 要 继续 解压缩 则 这个 字节 串 必须 被 传给 对 " decompress ( ) " 的 后续 调用
same as <unk> <unk> <unk>, 和 " <unk> ( st , <unk> , <unk> , <unk> ) ", 和 " <unk> ( st , line _ info , <unk> _ info ) " 相同
the import system passes in a target module only during <unk>, 导入 模块 系统 系统 模块 模块 模块 只 在 只 模块 的 ", 导入 系统 仅会 在 重 加载 期间 传入 一个 目标 模块
implements in place "tos tos1 <unk> tos"., 实现 " tos tos1 tos tos1 tos " tos ", 就 地 实现 " tos tos1 ^ tos "
pep <unk> local time <unk> pep written by <unk> <unk> and tim <unk> implementation by <unk> <unk>, pep <unk> 本地 时间 时间 pep 由 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, pep <unk> 消除 本地 时间 的 歧义 pep 由 <unk> <unk> 和 tim peters 撰写 ， 由 <unk> <unk> 实现
deprecated since version 3.9., 3.9 版后 已 移除 ., 3.9 版后 已 移除 .
<unk> run a <unk> until complete, " 运行 " 运行 " <unk> " <unk> " <unk> ", " loop . run _ <unk> _ <unk> ( ) " 运行 一个 <unk> / 任务 / 可 等待 对象 直到 完成
the default file mode is "'r'", meaning to open the file in read mode., 默认 文件 模式 将 打开 以 打开 打开 打开 打开 的 文件, 默认 的 文件 模式 为 " ' r ' " ， 表示 以 读取 模式 打开 文件
where the following options are <unk>, 其中 以下 以下 选项 是 是 ：, 如果 了解 以下 选项 ：
<unk> , default value: <unk> (that is: <unk>, <unk> : 默认值 : " ' <unk> ' " ' " ' " ' " ' " ' " ' ", default _ section ， 默认值 : " configparser . <unk> " ( 即 : " " default " " )
<unk> can also be run as a script, giving the filename of a python script as its argument, after which a report of the imported modules will be printed., " 可以 _ 也 可以 也 可以 被 作为 脚本 作为 脚本 ， ， 作为 脚本 ， ， ， ， ， ， 将 被 被, " modulefinder . py " 也 可以 作为 脚本 运行 ， 给出 python 脚本 的 文件名 作为 参数 ， 之后 将 打印 导入 模块 的 报告
the argument must be an instance of <unk> including subclasses, 参数 必须 为 " 实例 " 实例 实例 的 实例, 参数 必须 是 " pydatetime _ time " 包括 其子 类 的 实例
pep <unk> simpler customization of class creation, pep <unk> : 类 装饰 器, pep <unk> : 自定义 类 创建
pep <unk> asynchronous generators, pep <unk> : 异步 生成器, pep 525 : 异步 生成器
<unk> the implementation of "import", " 实现 " 实现 " 的 实现, " importlib " " import " 的 实现
namespace an object to take the attributes, 命名 空间 对象 对象 对象, namespace 用于 获取 属性 的 对象
if you need to determine whether an exception was raised but don't <unk> to handle it, a simpler form of the <unk> statement allows you to re raise the exception:, 如果 你 想要 尝试 异常 的 ， ， ， " " " " 语句 ， ， " 语句 " 语句 ， ， 你 将 引发 " " " ", 如果 你 需要 确定 是否 引发 了 异常 但 不 <unk> 处理 它 ， 则 可以 使用 更 简单 的 " raise " 语句 形式 重新 引发 异常
key functions need not depend directly on the objects being sorted, key 的 的 的 对象 中 ， " 指针 " 对象 的, 键 函数 不 需要 直接 依赖于 被 排序 的 对象
when the <unk> is writing out the plain text representation of a mime message, and it finds the message has a preamble attribute, it will write this text in the area between the headers and the first boundary, 当 " <unk> " 时 ， 文本 文本 文本 文本 文本 ， ， ， 它 将 消息 消息 ， ， 它 将 在 在 分界 分界 中 的 分界 分界, 当 " generator " 写出 mime 消息 的 纯 文本 表示 形式 时 ， 如果 它 发现 消息 具有 preamble 属性 ， 它 将 在 标头 及 第一个 分界 之间 区域 写出 这些 文本
if you have the <unk> launcher installed, you can use the "py" command, 如果 你 必须 <unk> ， 你 可以 你 可以 使用 " <unk> _ <unk> ", 如果 你 安装 了 py . exe 启动器 ， 你 将 可以 使用 " py " 命令
if this is set, python won't add the <unk> site packages <unk> to <unk>, 如果 此 是 python python python " " " " " " . <unk> " ， " " " . org ", 如果 设置 了 此 变量 ， python 将 不会 把 " 用户 site packages 目录 " 添加 到 " sys . path "
this class acts as a wrapper around list objects, 这个 类 属性 作为 一个 列表 的 列表, 这个 类 封装 了 列表 对象
important exception: if a consumer requests a buffer without the <unk> <unk> <unk> will be set to "null", but "itemsize" still has the value for the original format., 如果 如果 一个 " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 重要 例外 ： 如果 使用者 请求 的 缓冲区 没有 " pybuf _ format " 标志 ， " format " 将 设置 为 " null " ， 但 " itemsize " 仍 具有 原始 格式 的 值
this is because the manner in which "__main__" is initialized depends on the flags and other options with which the interpreter is <unk>, 这 是因为 是 在 的 的 是 是 在 的 的 的 ， ， 与 其他 与 " 的 ", 这 是因为 " __ main __ " 被 初始化 的 方式 依赖于 发起 调用 解释器 所 附带 的 旗标 和 其他 选项
if an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments:, 如果 一个 异常 类 类 类 ， 则 将 其 " __ ( ) " 来 其 其 参数 的 的 参数, 如果 传递 的 是 一个 异常 类 ， 它 将 通过 调用 没有 参数 的 构造函数 来 隐式 实例 化 :
raises an auditing event <unk> with argument <unk> before reading input, 引发 一个 审计 事件 " ctypes . <unk> " ， 附带 参数 " key " ， 附带 参数 " tzinfo ", 引发 一个 审计 事件 " builtins . input " 附带 参数 " prompt "
return the outcome of the test <unk> in <unk>, 返回 <unk> 的 的 的 <unk>, 返回 " b in a " 检测 的 结果
<unk> by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 建议 。 ）
the rounding option is one of the constants listed in the section rounding <unk>, 舍入 选项 选项 将 在 <unk> 的 的 的 的 的 的, <unk> 选项 应为 <unk> <unk> 小节 中 列出 的 常量 之一
return a <unk> object with the specified year, <unk> <unk> hour, minute, second, microsecond and <unk>, 返回 " " " 的 " " " " " " " " ， " " " " " " " " " " " " " " " " " " " " ", 返回 具有 指定 year , month , day , hour , minute , second , microsecond 和 fold 属性 的 " datetime . datetime " 对象
for more information about <unk> methods, see implementing descriptors or the descriptor how to guide., 有关 更 多 信息 ， 请参阅 参见 参见 ， 请参阅 ， 请参阅 或 的 的 的, 有关 描述 器 的 方法 的 更 多 信息 ， 请参阅 实现 描述 器 或 描述 器 <unk>
<unk> exception classes raised by <unk>, " xml . <unk> " 异常 " " " . <unk> " ) " 的 ", " urllib . error " urllib . request 引发 的 异常 类
if the asynchronous generator raises any other exception, it is propagated to the caller of the awaitable, 如果 异步 生成器 异步 对象 ， 其他 其他 其他 ， 则 会 被 取消 的 的, 如果 异步 生成器 引发 任何 其他 异常 ， 它会 被 传播 给 可 等待 对象 的 调用者
this subtype of "pyobject" represents a python integer object., 这个 " " " " " int " 一个 python 整型 转化成 python 整型, 表示 python 整数 对象 的 " pyobject " 子 类型
equivalent to <unk> on platforms <unk> <unk>, 相当于 " os . <unk> ( ) " " " " " ( ) " ) ", 在 缺失 " os . <unk> ( ) " 的 平台 上 等同于 " <unk> ( ) "
alias for output, for <unk> with <unk>, " " " " " 的 " " " " " " " ", 对 output 的 别名 ， 对应 的 有 " stderr "
if fileobj is given, it should be a binary file , and <unk> bytes are read from it and added to the archive, 如果 为 为 ， ， 则 应当 应当 一个 二进制 文件 ， 并且 并 将 从 " 添加 到 添加 到 添加 到 添加 到 添加 到, 如果 给定 了 fileobj ， 它 应当 是 一个 binary file ， 并会 <unk> 读取 " tarinfo . size " 个 字节 添加 到 归档
even when utf 8 mode is <unk> python uses utf 8 by default on windows <unk>, 当 在 8 模式 模式 模式 模式 模式 python python （ 在 windows 上 ） 的 默认 ）, 即使 在 不 启用 utf 8 模式 时 ， windows 版 的 python 也 会 在 以下 情况 中 默认 使用 utf 8 ：
return the coroutine object wrapped by the <unk>, 返回 对象 由 栈顶 对象 推入 栈顶, 返回 由 " task " 包装 的 协程 对象
parameters: fun a function with two arguments which will be called with the coordinates of the <unk> point on the canvas, 参数 : fun 一个 两个 参数 参数 ， ， 将 被 " 的 " 的 " 的 ", 参数 : fun 一个 函数 ， 调用 时 将 传入 两个 参数 表示 在 画布 上 点击 的 坐标
this is an advanced function that is not needed in <unk> python <unk> unlike "importlib.import_module()"., 这 一个 函数 在 python 中 的 的 函数 中 的 函数, 与 " importlib . import _ module ( ) " 不同 ， 这是 一个 <unk> python 编程 中 不 需要 <unk> 的 高级 函数
note that you can only go forward in an <unk> there's no way to get the previous element, reset the <unk> or make a copy of it, 请 注意 你 可以 在 只 在 在 的 中 ， 在 任何 <unk> 的 任何 <unk> 的 的 的 的 的 的 或者, 注意 你 只能 在 迭代 器中 顺序 <unk> ； 没有 获取 前 一个 元素 的 方法 ， 除非 重置 迭代 器 ， 或者 重新 复制 一份
how does python manage <unk>, 我 怎样 python ？, python 如何 管理 内存 ？
see using python on windows for more information, 请参阅 在 windows 上 上 python python more, 请参阅 在 windows 上 使用 python 了解 更 多 信息
exponent was lower than <unk> prior to <unk>, 将 于 为 0 至 至 至 至 至, 在 舍入 之前 指数 <unk> " <unk> "
by default, "argumentparser" objects use "sys.argv[0]" to determine how to display the name of the program in help messages, 默认 情况 下 ， " argumentparser 使用 " 使用 " 来 使用 的 帮助 中 的 的 名称, 默认 情况 下 ， " argumentparser " 对象 使用 " sys . argv [ 0 ] " 来 确定 如何 在 帮助 消息 中 显示 程序 名称
the proxy types in "multiprocessing" do nothing to support comparisons by value, 该 类型 的 类型 的 " <unk> ( ) " 方法 的 支持, " multiprocessing " 中 的 代理 类 并 没有 提供 任何 对于 代理 值 比较 的 支持
why can't lambda expressions contain statements?, 为什么 lambda 表达式 不能 表达式 表达式, 为什么 lambda 表达式 不能 包含 语句 ？
the first line should always be a <unk> <unk> summary of the object's purpose, 第一行 行 是 是 是 一个 <unk> 的 的 的 的, 第一行 应该 是 对象 目的 的 简要 概述
checks for a character value that <unk> in the 7 bit ascii set., 对 一个 字符 的 值 ， 表示 的 位 位 的 位, 检测 字符 值 是否 在 7 位 ascii 集 范围 内
in the current implementation, the built in variable <unk> is "true" under normal circumstances, "false" when optimization is requested <unk> line option " <unk>, 在 当前 中 的 内置 的 " 中 " " " " " " " " " " " " " " " " " " " " " " " ", 在 当前 实现 中 ， 内置 变量 " __ debug __ " 在 正常 情况 下 为 " true " ， 在 请求 优化 <unk> " false " ( 对应 命令行 选项 为 " o " )
<unk> instances have the following methods and attributes:, " httpconnection 实例 实例 以下 方法 ： ：, " <unk> " 实例 拥有 以下 方法 和 属性 ：
changed in version 3.6: <unk> may return instances with <unk> set to 1., 在 3.6 版 更改 : " ' " ' " " " " " " " <unk> " to " to ", 在 3.6 版 更改 : " <unk> ( ) " 可能 返回 " fold " <unk> 为 1 的 实例
<unk> when you run <unk>, 当 <unk> 时 ， 运行 运行 时 运行 时 运行 运行, 然后 运行 <unk> ：
in python 3.2, a new means of configuring logging has been <unk> using dictionaries to hold configuration information, 在 python 中 ， python 新 的 python 模块 中 ， 了 一些 配置 ， ， ， 配置 配置, 在 python 3.2 中 ， 引入 了 一种 新 的 配置 日志 记录 的 方法 ， 使用 字典 来 保存 配置 信息
because naive "datetime" objects are treated by many "datetime" methods as local times, it is preferred to use aware datetimes to represent times in utc, 由于 " 对象 " 对象 对象 的 " __ " __ ( ) " 方法 的 方法 ， 因为 " __ ( ) " 方法 在 在 在 其他 情况 下 ， 并 在 在 " 中, 由于 简单 型 " datetime " 对象 会 被 许多 " datetime " 方法 当作 本地 时间 来 处理 ， 最好 是 使用 感知 型 日期 时间 对象 来 表示 utc 时间
execution of a derived class definition <unk> the same as for a base class, 执行 类 的 类 定义 的 定义 定义 的 类 相同 的 相同, 派生类 定义 的 执行 过程 与 基类 相同
keep in mind that if the node you're operating on has child nodes you must either transform the child nodes yourself or call the <unk> method for the node first., 如果 如果 在 的 的 时 ， 如果 没有 进程 的 ， 则 将 返回 " " " " " " " " " " " " " " 方法, 请 记住 ， 如果 您 正在 操作 的 节点 具有 子 节点 ， 则 必须 先 转换 其子 节点 或 为 该 节点 调用 " generic _ visit ( ) " 方法
if the referent is <unk> then this will raise an exception., 如果 目标 为 " ， 则 将 将 引发 异常 异常, 如果 指涉 对象 无法 序列化 ， 则 会 抛出 一个 异常
this is the equivalent of the python statement "o1 + o2"., 这 相当于 python 语句 " o1 o2 " o1 ", 等价 于 python 语句 " o1 + o2 "
while it currently evaluates as true, it will <unk> a "deprecationwarning", 虽然 它 将 被 它 ， 它 将 将 为 一个 ", 虽然 它 目前 会 被 解读 为 真值 ， 但 将 同时 发出 " deprecationwarning "
windows <unk> <unk> <unk>, windows <unk> <unk> <unk> <unk> <unk>, windows 2000 （ 变更 集 <unk> ）
independent of its <unk> each concrete stream object will also have various <unk> it can be read <unk> write <unk> or read write, 当 的 的 的 每个 每个 的 的 对象 都 的 对象 都 对象 也 会 被 视为 的 可以 被 读取 的, 独立 于 其 类别 ， 每个 具体 流 对象 也 将 具有 各种 功能 ： 它 可以 是 只读 ， 只 写 或 读写
return the string representing a character whose unicode code point is the integer i, 返回 表示 为 字符 的 的 的 的 的 ， ， 的 整数, 返回 unicode 码位 为 整数 i 的 字符 的 字符串 格式
it is returned as a text string using universal newlines , <unk> all recognized line separators into <unk> characters, 它 返回 的 字符串 字符串 字符串 字符串 的 字符串 ， 所有 所有 所有 <unk> 的 行, 使用 universal newlines 作为 文本 字符串 被 返回 ， 将 所有 可 识别 行 <unk> 符 <unk> " ' \ n ' " 字符
this function only includes canonical zone names and does not include <unk> <unk> such as those under the <unk> and <unk> directories, or the <unk> <unk>, 此 函数 支持 支持 的 支持 和 " 并且 不 包括 和 " <unk> " 和 " <unk> " 和 " <unk> " <unk> " <unk> ", 此 函数 仅 包括 规范 时 区 名称 而 不 包括 “ 特殊 ” 时区 如 位于 " posix / " 和 " <unk> / " 目录 下 的 时区 或 " <unk> " 时 区
if a finder implements <unk> then it will be called to perform the invalidation, 如果 一个 " sys . <unk> ( ) " ， ， 将 将 被 调用 到 调用 的, 如果 一个 查找 器 实现 了 " <unk> _ <unk> ( ) " ， 那么 它会 被 调用 来 执行 那个 无效 过程
before you can use it, you need mark <unk> win32 extensions for python <unk>, 在 你 可以 使用 你 你 你 的 python python ， 请 使用 python python 的 python, 在 你 使用 它 之前 ， 你 需要 安装 mark <unk> 的 python win32 扩展
on windows, <unk> is now able to read directory <unk>, 在 windows 上 ， " " " " 现在 会 被 读取 读取 读取, 在 windows 上 ， " os . <unk> ( ) " 现在 能够 读取 目录 连接
numeric types "int", "float", "complex", 数字 类型 " " " " " " " " " " " " ", 数字 类型 " int " , " float " , " complex "
this function does not <unk> a reference to v ., 此 函数 不会 不会 <unk> 引用 引用 引用 引用, 此 函数 不会 改变 对 v 的 引用
note that even for small <unk> the total number of <unk> of x can quickly grow larger than the period of most random number generators, 请 注意 注意 ， 请 注意 ， <unk> 的 的 数量 ， ， ， ， ， 其中 的 的 的 的 的 的 数字, 请 注意 ， 即使 对于 小 的 " len ( x ) " ， x 的 排列 总数 也 可以 <unk> ， 大于 大多数 随机数 生成器 的 周期
bpo <unk> fix the failure on <unk> caused by the tests <unk> on <unk>, bpo <unk> : 修复 了 在 bpo <unk> <unk> <unk> <unk> <unk> <unk> <unk>, bpo <unk> : 修复 在 <unk> 平台 因为 依赖 <unk> _ <unk> 而 导致 的 失败
changed in version 3.3: raise "overflowerror" instead of "valueerror" if the timestamp is out of the range of values supported by the platform c "gmtime()" function, 在 3.3 版 更改 : " " " " " " " " " " " " " . <unk> " 的 " 来 支持 的 " . . . . ., 在 3.3 版 更改 : 引发 " overflowerror " 而 不是 " valueerror " ， 如果 时间 戳 数值 超出 所在 平台 c " gmtime ( ) " 函数 的 支持 范围 的话
equivalent to <unk> this function reads one line from the object p, 相当于 " get _ completed ( ) " 函数 会 从 一个 函数 对象, 等价 于 " p . readline ( [ n ] ) " ， 这个 函数 从 对象 p 中 读取 一行
porting to python 3.1, 移植 到 python 3.1, 移植 到 python 3.1
if the size argument is negative or omitted, read all data until the end of the chunk, 如果 size 为 负值 或 或 ， 则 读取 数据 末尾 末尾 末尾 末尾 末尾, 如果 size 参数 为 负值 或 被 省略 ， 则 读取 所有 字节 直到 分块 末尾
using "list" as the <unk> it is easy to group a sequence of key value pairs into a dictionary of lists:, 使用 " 作为 " ， 它 是 是 一个 为 一个 序列 的 值 的 值, 使用 " list " 作为 " default _ factory " ， 很 轻松 地 将 （ 键值 对 组成 的 ） 序列 转换 为 （ 键 列表 组成 的 ） 字典 ：
below is an example where a number of ctypes objects are modified by a child <unk>, " 是 一个 " ctypes " 对象 的 对象 的 是 由 " <unk> _ <unk> ( ) ", 下面 是 一个 在子 进程 中 修改 多个 ctypes 对象 的 例子
this is called automatically on object collection., 此 对象 在 windows 上 对象, 当 对象 销毁 时会 自动 调用
if follow_symlinks is false, and src is a symbolic link, dst will be created as a symbolic link, 如果 为 为 假值 ， 则 为 " true " ， 则 将 将 被 作为 为 一个, 如果 follow _ symlinks 为 假值 且 src 为 符号 链接 ， 则 dst 也 将 被 创建 为 符号 链接
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
a classmethod which can be used for registering a type or callable with the manager class., 一个 可 可 可 用于 可 迭代 对象 类型 或 或 的 参数 的 参数, 一个 <unk> ， 可以 将 一个 类型 或者 可 调用 对象 注册 到 管理器 类
low level api index, 低 层级 api 索引, 低 层级 api 索引
heaps are arrays for which <unk> < <unk> <unk> and <unk> < <unk> <unk> for all k , counting elements from 0, 对于 " optparse < < < < < < < < < < , <unk> , <unk> , <unk> 和 " <unk> + / + / + / / / / / / / / / / / / / / / / 中 ， 而 来自 来自 的 元素, 堆 是 通过 数组 来 实现 的 ， 其中 的 元素 从 0 开始 计数 ， 对于 所有 的 k 都 有 " a [ k ] < a [ 2 k + 1 ] " 且 " a [ k ] < a [ 2 k + 2 ] "
if data is empty, "statisticserror" is raised, 如果 data 为 空则 ， 则 " statisticserror ", 如果 data 为空 ， 则 将 引发 " statisticserror "
pep <unk> exceptions as new style classes, pep <unk> : 异常 作为 新 的 类, pep <unk> : 异常 作为 <unk> 的 类
windows only: set the current value of the ctypes private copy of the system <unk> variable in the calling thread to value and return the previous value., windows windows 设置 设置 的 的 的 " 的 " 的 值 ， 并 将 其 值 并 返回 其 的 的, 仅限 windows ： 设置 调用 线程 中 系统 " <unk> " 变量 的 ctypes 私有 副本 的 当前 值为 value 并 返回 原来 的 值
it required a special build option <unk> which was already removed in python 3.7, 它 还 特殊 的 选项 选项 选项 在 python 中 中 的 python, 它 需要 一个 特殊 的 构建 选项 " call _ profile " 而 该 选项 在 python 3.7 中 已 被 移除
when compiling a string with multi line code in <unk> or <unk> mode, input must be terminated by at least one newline character, 当 执行 时 ， 在 命令行 中 ， 或 <unk> 或 <unk> 或 <unk> ， ， 必须 必须 为 一个 字符 ， 被 被 为 字符, 在 " ' single ' " 或 " ' eval ' " 模式 编译 多行 代码 字符串 时 ， 输入 必须 以 至少 一个 换行符 结尾
a statement is either an expression or one of several constructs with a keyword, such as <unk> "while" or <unk>, statement 语句 是 一个 表达式 表达式 或 的 的 的 （ 例如 " " " " " " " " " " " " ", 一条 语句 可以 是 一个 expression 或 某个 带有 关键字 的 结构 ， 例如 " if " 、 " while " 或 " for "
return value is <unk> <unk>, 返回 为 " <unk> _ <unk> _ <unk> _ <unk> ", 返回值 为 " ( pid , fd ) "
returns the contents of the <unk> parameter from "robots.txt" in the form of a <unk>, 返回 " " " 的 " 的 " " " " 的 " 的 ", 以 " list ( ) " 的 形式 从 " robots . txt " 返回 " <unk> " 形参 的 内容
in order to find objects and their documentation, "pydoc" imports the module(s) to be documented, 为了 到 对象 对象 对象 ， 它们 ， 它们 将 被 " 的 " 的 ", 为了 找到 对象 及其 文档 内容 ， " pydoc " 会 导入 文档 所在 的 模块
this lets you <unk> portions of the original text in the resulting replacement string., 这 <unk> 你 你 的 的 的 的 文本 文本 文本 文本 文本, <unk> 你 可以 在 生成 的 替换 字符串 中 合并 原始 文本 的 部分 内容
on platforms where <unk> <unk> it is an alias for <unk>, 在 " sizeof ( ) " sizeof ， 它 是 它 是 一个 " " " " " " " " " " ", 在 " sizeof ( int ) sizeof ( long ) " 的 平台 上 它 是 " c _ <unk> " 的 一个 别名
of course, the approach described here can be <unk> for example to <unk> logging filters temporarily, 当然 的 的 的 的 ， 可以 可以 在 " <unk> " " " " " " 日志 记录 日志 记录, 当然 ， 这里 描述 的 方法 可以 <unk> ， 例如 临时 附加 日志 记录 过滤器
for example, here's how to iterate over the keys of a dictionary in sorted <unk>, 例如 ， " ' 如何 使用 的 字典 中 的 的 字典, 例如 ， 下面 是 如何 迭代 遍历 字典 并 按 keys 排序 :
return the fixed value specified when the "timezone" instance is constructed., 返回 " " " 的 实例 时 返回 " true ", 返回 当 " timezone " 实例 被 构造 时 指定 的 <unk>
if no "__init__()" method is <unk> then <unk> will not automatically be called., 如果 没有 方法 ， 则 " " " ， 则 将 不会 被 阻塞, 如果 没有 " __ init __ ( ) " 方法 生成 ， 那么 " __ post _ init __ ( ) " 将 不会 被 自动 调用
don't display the <unk> and version messages even in interactive mode., 在 显示 <unk> 和 <unk> 版本 中 ， 在 交互式 交互式, 即使 在 交互 模式 下 也 不 显示 版权 和 版本信息
changed in version 3.3: <unk> used to be raised, it is now an alias of "oserror"., 在 3.3 版 更改 : " to _ to _ is _ is _ is now now 现在 现在 是 " oserror ", 在 3.3 版 更改 : 过去 触发 的 " ioerror " ， 现在 是 " oserror " 的 别名
for example, <unk> can be used to create a writable file:, 例如 ， " ' . <unk> " 可以 使用 创建 一个 创建, 例如 ， " <unk> ( ' w ' ) " 可 被 用来 创建 一个 可 写 文件 :
it has interfaces to many system calls and libraries, as well as to various window systems, and is extensible in c or c++, 它 将 被 设计 ， 并 在 和 c 和 c 或 c c c c c c api c c c api, 它 带有 许多 系统 调用 和 库 以及 多种 窗口 系统 的 接口 ， 并且 能 用 c 或 c++ 来 进行 扩展
the output looks like this:, 输出 输出 如下 所示 :, 输出 结果 会 像 这样 :
the encoding is used for all lexical <unk> including string literals, comments and <unk>, encoding 所有 所有 所有 所有 的 所有 包括 包括 字符串 和 和 的 的 的, 所有 词法 分析 将 使用 此 编码 ， 包括 语义 字符串 、 注释 和 标识符
it's a subclass of <unk> so it can be caught as <unk> too., <unk> 是 " " " 的 子类 子类 ， ， 它 可以 被 当作 为 " none ", 这是 " importerror " 的 子类 ， 因此 ， 也 可以 捕获 为 " importerror "
close the <unk> <unk>, 关闭 <unk> : " <unk> _ <unk> ", 关闭 " <unk> " 数据库
this is particularly useful for aliases, 这 适用 于 适用 于 有用, 这 对于 别名 很 有用
when set to <unk> all hash based ".pyc" files, whether checked or <unk> are <unk> against their corresponding source file, 当 " " " " " " 的 " ， " " " " " " " " " " " " " " " " <unk> ( ) " 会 被 移除, <unk> 为 " always " 时 ， 所有 基于 哈希 值 的 " . pyc " 文件 ， 不论是 已 选定 还是 未 选定 的 都 将 根据 其 对应 的 源文件 进行 验证
to map anonymous memory, 1 should be passed as the <unk> along with the <unk>, 要 <unk> 的 ， ， 应 应当 作为 " 作为 " 与 " 与 " 的 ", 要 映射 匿名 内存 ， 应 将 1 作为 fileno 和 length 一起 传递
"x is not y" yields the inverse truth value, " x " 不 为 " true " 的 值, " x is not y " 会 产生 相反 的 逻辑值
as some features of python are not included in the initial installer <unk> selecting those features may require an internet connection, 与 python python python 的 python 中 的 的 的 ， ， ， ， ， 可能 可能 可能 可能 会 引发 一个 的, 由于 下载 的 初始 安装包 中未 包含 python 的 某些 可 选 功能 ， 如果 选择 安装 这些 功能 可能 需要 internet 连接
return a new tuple object of size len , or "null" on failure., 返回 一个 新 的 元组 对象 返回 一个 新 的 对象 ， 返回 " null ", 成功 时 返回 一个 新 的 元组 对象 ， 长度 为 len ， 失败 时 返回 ` ` null ` `
raises an auditing event <unk> with argument "key"., 引发 一个 审计 事件 " winreg . openkey " ， 附带 参数 " key ", 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " key "
predefined clean up actions, 子 进程 清理, 预定 义 的 清理 操作
<unk> positive integer, new <unk> of canvas in <unk>, " <unk> " : " <unk> " 的 " list " list " 的 " list ", <unk> 正 整型 数 ， 以 <unk> 表示 <unk> 的 新 高度 值
pattern meaning " " matches <unk> "?" matches any single character <unk> matches any character in seq <unk> matches any character not in seq, 模式匹配 " " " " " " " " " [ ] " 匹配 任何 匹配 的 字符 匹配 匹配 匹配 匹配 匹配 匹配 的 任何 匹配, 模式 意义 " " 匹配 所有 " ? " 匹配 任何 单个 字符 " [ seq ] " 匹配 seq 中 的 任何 字符 " [ ! seq ] " 匹配 任何 不 在 seq 中 的 字符
there is <unk> in the formal syntax here: anything that looks like an expression list also looks like a slice list, so any subscription can be interpreted as a slicing, 在 这种 中 的 的 ， ， ， ， 的 表达式 ， 表达式 表达式 表达式 表达式 表达式 列表 的 表达式 ， 例如 " " " " " " " " " ", 此处 的 <unk> 句法 中 存在 一点 歧义 ： 任何 <unk> 表达式 列表 的 东西 同样 也 会 <unk> 切片 列表 ， 因此 任何 抽取 操作 也 可以 被 解析 为 切片
the font sample now includes a selection of non <unk> characters so that users can better see the effect of selecting a particular font, " 现在 " 现在 现在 是 一个 " 的 字符 字符 字符 ， ， ， 可以 可以 <unk> <unk> 的 的 的, 字体 样本 现在 包括 一组 非 <unk> 字符 以便 用户 能 更好 地 查看 所 选 特定 字体 的 效果
return the total number of seconds contained in the <unk>, 返回 撤销 年 中 的 的 月, 返回 时间 间隔 包含 了 多少 秒
the data must not be modified in any way, unless the object was just created using <unk> <unk>, data 必须 不 在 任何 任何 任何 任何 任何 对象 ， " " " " " " " " " " " " ", 该 数据 不可 通过 任何 方式 来 修改 ， 除非 是 刚 使用 " <unk> _ <unk> ( null , size ) " 创建 该 对象
it is often expected that a function call creates new objects for default values, 它 是 一个 函数 调用 调用 创建 创建 的 的 对象, 函数调用 经常 被 期望 为 默认值 创建 新 的 对象
return 0 in all other cases., 所有 其他 所有 的 ， 并 返回, 在 其它 所有 情况 下 返回 0
<unk> turns this into a unicode string, " ' store ' 此 此 转换 为 一个 字符串, " <unk> _ <unk> _ value ( ) " 会 将 此 返回 为 一个 unicode 字符串
these sequences can be included inside a character class, 这些 序列 可以 可以 带有 " 类 " 类, 这些 序列 可以 包含 在 字符 类中
this works for any object that has methods whether built in or user defined, 这个 对象 任何 对象 有 具有 内置 的 或 内置 的 方法 或 方法, 这 适用 于 任何 具有 方法 的 对象 — — 不论是 内置 方法 还是 用户 自定义 方法
changed in version <unk> the function now follows rfc <unk> , section <unk> and does neither match multiple <unk> (e.g. ", 在 3.5 版 更改 : the function now <unk> , <unk> , <unk> , <unk> , and and and <unk> and " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ', 在 3.3 . 3 版 更改 : 此 函数 现在 遵循 rfc <unk> , <unk> . 3 小节 ， 它 不会 匹配 多个 通配符 ( 例如 "
add prefix to the beginning of selected lines in text ., 将 打印 的 行 中 的 行, 将 prefix 添加 到 text 中 选定 行 的 开头
assignment to an <unk> memory map raises a "typeerror" exception, 赋值 给 一个 内存 块 ， 一个 一个 一个 异常, 向 " access _ read " 内存 映射 赋值 会 引发 " typeerror " 异常
the object passed as the tzinfo argument to the "time" constructor, or "none" if none was <unk>, 对象 作为 参数 参数 " " ( ) " 或 " none " ， 如果 " none " ， 如果 " none ", 作为 tzinfo 参数 被 传给 " time " 构造 器 的 对象 ， 如果 没有 传入 值则 为 " none "
how do i interface to c++ objects from python?, 如何 从 python 对象 （ 从 对象, 如何 在 python 中 <unk> c ++ 对象 ？
in <unk> you can use the following code to initialize the python interpreter with your extension module., 在 ， 情况 下 ， 可以 使用 以下 代码 代码 代码 代码 模块 解释器 解释器 解释器, <unk> ， 你 可以 用 以下 代码 使用 扩展 模块 初始化 python 解释器
new in version 3.4: the " o" command line option., 3.4 新版 功能 : " " " " 命令行 ", 3.4 新版 功能 : the " o " command line option .
"l" ("int") [long int] convert a c "long int" to a python integer object., " " " " " " int " int " long long long long long long long long long 整形 python 整型 转化成 " 整形 ", " l " ( " int " ) [ long int ] 将 一个 c " long int " 长 整型 转化成 python 整型 对象
why does <unk> <unk> 10 return <unk>, 为什么 （ <unk> ” 10 10 10 10 10 ", 为什么 <unk> / / 10 返回 3 ？
<unk> "double" or "float" "float", " collections . abc " , " 或 " float ", " <unk> " " double " 或 " float " " float "
the "class" entry is optional, " classvar " 的 是 可选, " class " 条目 是 可选 的
get a "streamreader" factory function for the given encoding ., 获取 给定 的 的 函数 的 函数 函数, 为 给定 的 encoding 获取 一个 " streamreader " 工厂 函数
changed in version 3.6: added policy keyword only parameter., 在 3.6 版 更改 : added policy keyword only parameter ., 在 3.6 版 更改 : added policy keyword only parameter .
utilities to spawn subprocesses and run shell commands., " <unk> " 和 进程 的 运行 运行 shell, 用于 生成 子 进程 和 运行 shell 命令 的 工具包
i.e. <unk> 32" will request usage of the 32 bit python <unk>, " " " " " " python python 的 的 " <unk> " 的 的 python 的, 例如 " / <unk> / bin / <unk> 32 " 将 请求 使用 32 位 python 2.7
the instance's contents are initially set to a copy of seq, 该 内容 的 将 被 为 一个 副本, 实例 内容 初始化 设置 为 seq 的 copy
note that a secondary prompt on a line by itself in an example means you must type a blank <unk> this is used to end a multi line command., 请 注意 在 一个 的 的 中 ， 一个 一个 ， ， 你 你 必须 一个 一个 一个 类型 ， 一个 一个 一个 " <unk> " 的 一个, 注意 例子 中 <unk> 中 出现 第二个 提示符 意味着 你 必须 键入 一个 空白行 ； 这是 用来 结束 多行 命令 的
the name of a control key combination is a two byte bytes object consisting of a caret <unk> followed by the corresponding printable ascii character, 一个 一个 的 键 是 一个 字节 串 对象 字节 串 字节 串 对象 的 的 的 的 的 的 字符 ， 字符 为 ascii 字符, ctrl 键 组合 的 键 名称 则 是 一个 两 字节 的 字节 串 对象 ， 它 由 插入 符 ( " b ' ^ ' " ) 加 对应 的 可 打印 ascii 字符 组成
using the module name you can access the functions:, 使用 模块 模块 ， 你 可以 访问 访问 函数 :, 你 可以 用 模块 名 访问 这些 函数 :
when you run this, on the console you will see, 当 你 在 运行 时 ， 你 将 你 的, 当 运行 后 ， 你 会 看到 控制台 如下 所示
"xdrlib" encode and decode xdr data, " xdrlib " 编码 和 解码 xdr 数据, " xdrlib " 编码 与 解码 xdr 数据
the text string comes from the first parameter to the <unk> callback of the underlying library., 文本 字符串 中 的 字符串 参数 给 底层 的 的 的 的 的 " rl _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk>, text 字符串 来自 于 底层 库中 " rl _ <unk> _ <unk> _ function " 回调 函数 的 第一个 形参
networking and <unk> communication, " 和 " <unk>, 网络 和 进程 间通信
this method will return when the <unk> method returns a true value, 此 方法 将 返回 " 方法 ( ) " 方法 返回 返回 一个 方法 返回 返回, 这个 方法 将 返回 当 " <unk> ( ) " 方法 返回 一个 真值
when a logger <unk> to actually log an <unk> a "logrecord" instance is created from the logging message., 当 一个 一个 " <unk> " ， 一个 一个 一个 " 的 " ， " 实例 ， 从 一个 从 " 日志 ", 当 记录器 决定 实际 记录 事件 时 ， 从 记录 消息 创建 " logrecord " 实例
the descriptions of lexical analysis and syntax use a modified <unk> grammar notation, 上面 的 的 的 语法 语法 ， 使用 使用 " <unk> " 的 " 的 ", 句法 和 词法 解析 的 描述 采用 经过 改进 的 <unk> 语法 标注
the value of the yield expression after <unk> depends on the method which <unk> the execution, 在 表达式 中 的 表达式 上 的 " <unk> " 方法 的 方法 会 被 求值, 恢复 执行 之后 yield 表达式 的 值 取决于 恢复 执行 所用 的 方法
also unlike other operations, <unk> never signals <unk> even if the result is <unk> and <unk>, 还要 其他 其他 资源 的 " ， 如果 " ， 如果 ， 则 会 会 会 被 舍入 ， 结果, 与 其他 运算 不同 ， <unk> 永不 信号 <unk> ， 即使 结果 不 正常 且 不 精确
(this only applies to nodes that have <unk> and <unk> <unk>, 将 只 需要 需要 的 <unk> <unk> 和 <unk> <unk>, （ 这 只 适用 于 具有 " <unk> " 和 " <unk> _ offset " 属性 的 节点
using "notimplemented" in a boolean context has been deprecated, as it is almost <unk> the result of incorrect <unk> <unk> implementations, 使用 " " " " 上下文 已 被 被 被 ， ， " " " " " " " " 的 结果, 在 布尔运算 中 使用 " notimplemented " 已 被 弃用 ， 因为 它 几乎 <unk> 是 不 正确 的 <unk> 比较 运算符 实现 的 结果
make an iterator that returns elements from the iterable as long as the predicate is true, 创建 一个 迭代 器 返回 迭代 器 ， 返回 作为 作为 参数, 创建 一个 迭代 器 ， 只要 predicate 为 真 就 从 可 迭代 对象 中 返回 元素
if streams were opened in text mode, input must be a string, 如果 在 在 中 中 打开 文本 文本 ， 必须 必须 为 字符串, 如果 <unk> 以 文本 模式 打开 的 ， 则 input 必须 为 字符串
<unk> will equal <unk>, " " " " " " " " " " " " " " ", ( " len ( result ) " 将 等于 " size " 。 )
if the referent no longer exists, calling the reference object returns "none":, 如果 源 不 存在 的 对象 ， 则 返回 引用 对象 返回 返回, 如果 引用 已 不 存在 ， 则 调用 引用 对象 将 返回 " none " :
changed in version 3.9: the <unk> field has been removed., 在 3.9 版 更改 : the <unk> _ unicode 已 被 移除, 在 3.9 版 更改 : the " <unk> _ <unk> _ count " field has <unk> removed .
<unk> the constructor functions work with any iterable python object., " py _ compile ( ) " 函数 的 python 对象 的 对象 的 对象, 类似 地 ， 这些 构造函数 也 适用 于 任意 可 迭代 的 python 对象
the <unk> and <unk> methods raise "notimplementederror" if called., " <unk> ( ) " 和 " __ ( ) " 和 " __ ( ) " 方法 " " " " " " ", " getstate ( ) " 和 " <unk> ( ) " 方法 如果 被 调用 则 引发 " notimplementederror "
this method can not delete keys with <unk>, 此 方法 不 使用 " " ( ) " 来 使用 ", 该 方法 不能 删除 带有 子项 的 键
the resulting file has one additional method, <unk> which causes the file to <unk> over to an on disk file regardless of its size., " 文件 " 已 一个 " 的 " " " " 的 文件 到 文件 文件 的 文件 文件 文件 文件 文件 文件, 此 函数 生成 的 文件 对象 有 一个 额外 的 方法 — — " <unk> ( ) " ， 可以 忽略 文件大小 ， 让 文件 立即 写入 磁盘
bpo <unk> update windows build to use openssl <unk>, bpo <unk> : 更新 windows 构建 更新 openssl 1.0 . openssl ., bpo <unk> : 更新 windows 构建 以 使用 openssl 1.1 . <unk>
a <unk> for this default behavior is the lack of a similar invariant as for <unk>, <unk> 的 的 行为 行为 行为 行为 行为 的 的 " " " " 的 的, 规定 这种 默认 行为 的 原因 是 缺少 与 一致性 比较 类似 的 <unk>
<unk> should be careful to make equal numbers equal and hash them to the same values, <unk> 应当 应当 以 使用 以 字节 ， 并 将 它们 它们 它们 的 值, 实现 者 需要 注意 使 相等 的 数字 相等 并 拥有 同样 的 值
this made the function easier to write and much more clear than an approach using instance variables like <unk> and <unk>, 此 函数 函数 会 更 更 多 的 类 ， " 类 " 变量 :, 这 使得 该 函数 相比 使用 " self . index " 和 " self . data " 这种 实例 变量 的 方式 更 <unk> 编写 且 更为 <unk>
what's new in python 3.0, python 3.0 有 什么 新 变化, python 3.0 有 什么 新 变化
the latter indicates that the meta path search should <unk> while raising an exception terminates it immediately., 如果 请求 的 的 路径 的 ， ， ， ， 一个 异常 ， 异常 异常, 返回 后者 表示 元 路径 搜索 应当 继续 ， 而 引发 异常 则 会 立即 终止 搜索
after the raw stream has been <unk> the buffer is in an unusable state., 在 原始 流 流 流 被 被 缓冲区 将 被 被 为 一个 被, 在 原始 流 被 分离 之后 ， 缓冲区 将 处于 不可 用 的 状态
this naming convention <unk> the test <unk> about which methods represent tests., 这 <unk> ： ： <unk> <unk> <unk> <unk> 的 的 <unk> 的 方法, 这个 命名 约定 告诉 <unk> 者 类 的 哪些 方法 表示 测试
if the argument <unk> is present, the traceback reports are written to files, 如果 参数 是 " ， 则 会 被 忽略 的 文件, 如果 给出 了 参数 <unk> ， 则 回溯 会 被 写入 文件
otherwise, <unk> evaluates the first expression as the exception object, 否则 在 " ， " ， 对象 对象 将 返回 " 对象 " 对象, 否则 的话 ， " raise " 会 将 第一个 表达式 求值 为 异常 对象
this hook gives other <unk> of date objects a chance at implementing mixed type comparison, 这 意味着 包含 其他 的 的 的 所有 对象 都 会 导致 类型 的 类型 类型 的 类型, 这个 钩子 <unk> 其他 日期 对象 类型 实现 混合 类型 比较 的 <unk>
(contributed by raymond <unk> see <unk>, （ 由 raymond hettinger 参见 参见 参见 <unk>, （ 由 raymond hettinger 贡献 ， 参见 <unk> 。 ）
in order to use this <unk> the "tp_traverse" implementation must name its arguments exactly visit and arg :, 为了 为了 使用 " <unk> " 的 实现 ， 必须 必须 参数 参数 的 参数 和 参数, 若 要 使用 这个 宏 ， 必须 把 " tp _ traverse " 的 参数 命名 为 visit 和 arg
a class instance method: the corresponding user defined function is called, with an argument list that is one longer than the argument list of the call: the instance becomes the first argument., 类 类 实例 实例 定义 定义 定义 定义 的 函数 参数 是 参数 参数 参数 ， 参数 列表 参数 参数 参数 列表 参数 列表 参数 列表 参数, 类 实例 方法 : 调用 相应 的 用户 自定义 函数 ， 向 其 传入 的 参数 列表 会 比 调用 的 参数 列表 多 一项 ： 该 实例 将 成为 第一个 参数
changed in version 3.1: added the ability to use <unk> as a context manager., 在 3.1 版 更改 : 添加 了 " context _ as " as . context manager context, 在 3.1 版 更改 : added the <unk> to use " <unk> ( ) " as a context manager .
this means that logger instances never need to be passed between different parts of an <unk>, 这 意味着 一个 需要 的 的 的 的 的 不同 的 不同 的, 这 意味着 日志 记录器 实例 不 需要 在 应用 的 不同 部分 间 传递
turn a 10 tuple as returned by <unk> into a utc timestamp <unk> since the <unk>, 将 一个 元组 的 元组 ( ) " 返回 的 的 ( ) " 返回 的 " <unk> ( ) " ) ", 将 " <unk> _ tz ( ) " 所 返回 的 10 元组 转换 为 一个 utc 时间 戳 （ <unk> <unk> <unk> 初始 的 秒数 ）
also, since the 0.1 cannot get any closer to the exact value of <unk> and <unk> cannot get any closer to the exact value of <unk> then pre rounding with <unk> function cannot <unk>, 此外 因为 已 移除 ， 消息 任何 任何 值 的 值 ， 并 将 <unk> 的 值 ， " <unk> " " " " " ", 而且 ， 由于 这个 0.1 无法 精确 表示 1 / 10 的 值 而 这个 <unk> 也 无法 精确 表示 3 / 10 的 值 ， 使用 " round ( ) " 函数 进行 预先 舍入 也 是 <unk> 的 :
<unk> objects behave like mappings <unk> except that keys and values are always stored as bytes, <unk> 对象 （ " <unk> " 对象 类似 类似 的 " dict " 对象 ， 但 它 的 值 被 存储 为 字节 串, dbm 对象 的 行为 类似 于 映射 （ 字典 ） ， 区别 在于 <unk> 和 值 总是 被 存储 为 字节 串
the object's reference count is not increased, 该 的 引用 计数 引用 会 被 忽略, 对象 的 引用 计数 不会 增加
pep <unk> byte literals, pep <unk> : 多任务处理, pep <unk> : 字节 字 面值
typical usage to run a program under control of the debugger is:, 典型 使用 to to 在 一个 的 的 的 的 的 示例 :, 在 调试器 的 控制 下 运行 程序 的 典型 用法 是 :
new in version 3.1: added under the name <unk>, 3.5 新版 功能 : added the the name " ", 3.1 新版 功能 : added under the name " <unk> " .
the "abc" module also supports the following legacy <unk>, " abc " 模块 还 还 支持 以下 以下 <unk> ：, " abc " 模块 还 支持 下列 旧式 装饰 器 :
an indent level of 0, <unk> or <unk> will only insert newlines, 一个 的 的 级别 （ 或 " 或 " 或 " " " 仅 的 的, 如果 缩进 等级 为 零 、 负数 或者 " " " " ， 则 只会 添加 换行符
the function below takes and returns a string and is annotated as follows:, 函数 函数 " 返回 " 返回 一个 字符串 字符串 ， 作为 ", 函数 接受 并 返回 一个 字符串 ， 注释 像 下面 这样 :
same as the standard c <unk> library function: fills the memory block at address dst with count bytes of value c, 与 c c c 标准 c " 的 " ， ， 内存 分配 的 内存 分配 为 字节 的 的 字节 串 字节 串 字节 串, 与 标准 c <unk> 库函数 相同 ： 将 位于 地址 dst 的 内存 块 用 count 个 字节 的 c 值 填充
pep <unk> <unk> <unk> <unk> and <unk> pep written by guido van rossum, pep <unk> : <unk> 和 pep <unk> pep 由 guido van rossum van rossum, pep <unk> <unk> dict . keys ( ) , . values ( ) 和 . items ( ) pep written by guido van rossum
<unk> applications with <unk> <unk> of a <unk> <unk> <unk> <unk> demonstrating some applications written using <unk>, " xml . <unk> ( ) " 的 的 <unk> <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ) " ， ， 使用 的 的, " 使用 <unk> 的 控制台 应用程序 " : 一场 演示 使用 <unk> 编写 应用程序 的 <unk> <unk> <unk> <unk> 的 <unk>
changed in version 3.8: "yield" and "yield from" prohibited in the implicitly nested scope., 在 3.8 版 更改 : " yield " 和 " yield " 在 " 中 中 嵌套 ", 在 3.8 版 更改 : " yield " 和 " yield from " 在 隐式 嵌套 的 作用域 中 已 被 禁用
detect all offsets in the raw compiled bytecode string code which are <unk> <unk> and return a list of these <unk>, 在 " 中 的 的 ， ， 字符串 字节 码 的 字符串 ， ， 返回 返回 " " " " " ", 检测 作为 跳转 目标 的 原始 编译 后 字节 码 字符串 code 中 的 所有 偏移量 ， 并 返回 这些 偏移量 的 列表
abc for classes that provide <unk> method, 对于 类 的 方法 的 方法 方法 方法, 提供 了 " __ aiter __ " 方法 的 抽象 基类
"normaldist" examples and recipes, " normaldist " 例子 和 用法, " normaldist " 示例 和 用法
return the largest item in an iterable or the largest of two or more arguments., 返回 一个 对象 或 迭代 对象 或 迭代 对象 或 迭代 对象 的 的 对象 的 对象, 返回 可 迭代 对象 中 最大 的 元素 ， 或者 返回 两个 及 以上 实参 中 最大 的
<unk> color <unk> dialog, " 颜色 " 颜色 对话框 对话框, " tkinter . <unk> " 颜色 选择 对话框
let's also assume that the file should contain <unk> but the console messages should not, 让 还 意味着 了 应该 <unk> 的 ， 但 ， 但 不 需要 的 的, 而且 记录 在 文件 中 的 消息 格式 需要 包含 时间 戳 ， 打印 在 控制台 的 不 需要
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
return the mapped value for code according to <unk> <unk> for case <unk> used with <unk>, 返回 " 的 值 的 的 值 的 " <unk> " 的 " <unk> " 的 ", 返回 code 依据 <unk> ( 配合 nfkc 使用 的 大小写 转换 映射 ) 所 映射 的 值
the "collections" module provides a <unk> object that is like a list with faster appends and pops from the left side but slower lookups in the middle, " 模块 " 模块 提供 了 一个 " 对象 " 对象 ， 是 一个 由 列表 和 的 的 的 ， 并且 从 列表 和 从 列表 中, " collections " 模块 提供 了 一种 " deque ( ) " 对象 ， 它 类似 于 列表 ， 但 从 <unk> 添加 和 弹出 的 速度 较 快 ， 而 在 中间 查找 的 速度 <unk>
for a more gentle introduction to python command line parsing, have a look at the <unk> <unk>, 有关 更 更 更 python 的 的 的 ， 有 <unk> <unk> <unk> <unk> <unk>, 有关 python 命令行 解析 更 <unk> 的 介绍 ， 请参阅 argparse 教程
there's little need to document <unk>, 将 " 需要 " <unk> " <unk>, 几乎 没有 必要 创建 这些 文档
changed in version <unk> added support for default values, methods, and <unk>, 在 3.4 版 更改 : 添加 了 对 " 和 " and " 和 " and " 和 ", 在 3.6 . 1 版 更改 : added support for default values , <unk> , and <unk> .
this is equivalent to the python expression <unk>, 这 相当于 python 表达式 " 表达式 ", 这 等价 于 python 表达式 " list ( o ) "
the <unk> of heap space for python objects and other internal buffers is performed on <unk> by the python memory manager through the python/c api functions listed in this document., 对于 <unk> python 的 python 的 其他 和 其他 内部 的 内部 的 内部 的 在 内部 时 ， 在 python 解释器 中 的 api 的 api, python 对象 和 其他 内部 缓冲区 的 堆 空间 分配 是 由 python 内存 管理器 按 需 通过 本 文档 中 列出 的 python / c api 函数 进行 的
the return value is a number giving the number of seconds since the epoch (see the "time" module), 返回值 是 一个 表示 的 的 的 " " " " " ", 返回值 是 一个 数 ， 为 <unk> 秒数 （ 参见 " time " 模块 ）
if not specified, the strings default to <unk>, 如果 未指定 ， 则 字符串 默认 默认 为 ", 如果 未指定 ， 这些 字符串 默认 为空
new encoding/decoding helper functions:, 新 的 函数 ： ：, 新 的 encoding / <unk> 帮助 函数 :
text data binary data decode encode format <unk> <unk>, 文本 数据 二进制 数据 的 格式 格式 格式 格式, 文本 数据 二进制 数据 <unk> encode format <unk> <unk>
it is called from the <unk> function that the <unk> extension dll <unk>, 它 来自 " <unk> . <unk> ( ) " 函数 的 的 的 的 的 的, 它 将 由 " _ ctypes " 扩展 dll 所 导出 的 <unk> 函数 来 调用
return "true" if the last line was read from "sys.stdin", otherwise return "false"., 如果 <unk> 的 的 读取 ， 则 返回 " true " ， 否则 返回 " false ", 如果 最后 读取 的 行 来自 " sys . stdin " 则 返回 " true " ， 否则 返回 " false "
is <unk> equivalent to:, 等价 于 :, 在 <unk> 等价 于 :
(contributed by raymond hettinger in bpo <unk>, （ 由 raymond hettinger 在 bpo <unk> 中 贡献 。 ）, （ 由 raymond hettinger 在 bpo <unk> 中 贡献 。 ）
based on <unk> contributed by brett <unk> and <unk> <unk>, 基于 <unk> <unk> 由 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 该 插件 基于 " <unk> " ， 由 brett <unk> 和 <unk> <unk> 贡献
<unk> objects have the following public method:, " <unk> " 对象 具有 以下 方法 :, <unk> 对象 具有 以下 公开 方法 ：
bpo <unk> update macos installer to use sqlite <unk>, bpo <unk> : 更新 安装程序 安装程序 使用 sqlite 3.21 . sqlite ., bpo <unk> : 更新 macos 安装程序 以 使用 sqlite <unk> . 0 .
this non public class is the common base class of all ctypes data types, 此 非 类 是 " 的 类型 的 所有 类型 的 类 的 基类, 这个 <unk> 类 是 所有 ctypes 数据类型 的 共同 基类
this can be any location within the underlying physical memory block of the <unk>, 这 可以 任何 任何 下层 下层 下层 的 内存 块 内存 块, 这 可以 是 导出 程序 底层 物理 内存 块 中 的 任何 位置
the interesting property of a heap is that its smallest element is always the <unk> <unk>, 有趣 的 的 的 的 是 是 元素 是 <unk> 的 元素, 堆 最 有趣 的 特性 在于 最小 的 元素 总是 在 根 <unk> ： " heap [ 0 ] "
errors if this keyword argument is specified along with filename , its value is used when the filehandler is created, and thus used when opening the output file, 如果 此 参数 参数 ， 则 " " " " " " " " 被 用作 被 用作 时 将 被 用作 被 用作, errors 如果 此 关键字 参数 与 filename <unk> 被 指定 ， 则 该值 会 在 创建 filehandler 时 被 使用 ， 因而 也 会 在 打开 输出 文件 时 被 使用
filename should be the path to a file or directory on the filesystem., 文件名 应当 被 写入 到 或 的 的 或, filename 应为 文件系统 中 某个 文件 或 目录 的 路径
<unk> when i read code that <unk> <unk> i know that it is <unk> for the length of something, " <unk> " 时 ， 当 读取 的 <unk> <unk> <unk> 时 ， 它 的 长度, ( b ) <unk> 到 写 有 len ( x ) 的 代码 时 ， 就 知道 它 要求 的 是 <unk> 东西 的 长度
<unk> < day < number of days in the given month and <unk>, " < < < " , " 0 " 和 " <unk> 的 的 的, " 1 < day < 指定 年 月 的 天数 " ,
new in version 3.2: the <unk> argument, 3.2 新版 功能 : the _ argument 参数, 3.2 新版 功能 : <unk> 参数
this function handles the exception described by info (a 3 tuple containing the result of <unk> formatting its traceback as text and returning the result as a string, 此 函数 会 由 由 <unk> 的 的 的 <unk> ， 其 结果 ， 其 其 作为 文本 并 返回 结果 字符串, 此 函数 用于 处理 info ( 一个 包含 " sys . exc _ info ( ) " 返回 结果 的 3 元组 ) 所 描述 的 异常 ， 将 其 回溯 格式化 为 文本 并 将 结果 作为 字符串 返回
being able to match <unk> sets of characters is the first thing regular expressions can do that isn't already possible with the methods available on strings, <unk> <unk> <unk> 的 的 的 字符 是 字符 的 的 ， ， ， 是 在 <unk> 的 的 方法 的 方法, 能够 匹配 不同 的 字符 集合 是 正则表达式 可以 做 的 <unk> 事 ， 这 对于 字符串 可用 方法 来说 是 不 可能 的
use the built in function <unk>, 使用 内置 " ( ( ) " 函数, 使用 内置 函数 " getattr ( ) "
<unk> the ".xz" container format, " ' " ' " ' " ' " ' ", " format _ xz " : " . xz " 容器 格式
notable changes in python 3.6.4, python 3.6 . 5 中 的 重要 变化, python 3.6 . 4 中 的 重要 变化
as mentioned above, when doing concurrent programming it is usually best to avoid using shared state as far as possible, 因此 ， 的 的 ， 当 ， ， ， ， 但 通常 会 使用 " <unk> " 来 使用 ", 如上所述 ， 在 进行 并发 编程 时 ， 通常 最好 <unk> 使用 共享 状态
classes introduce a little bit of new syntax, three new object types, and some new semantics., 类 ， 一个 " 的 " 的 新 的 新 的 新 新 新 的 新 的 新 的 新 的 新 的 新 的 新 新, 类 引入 了 一些 新 语法 ， 三种 新 对象 类型 和 一些 新 语义
use "streamwriter" for codecs which have to keep state in order to make encoding <unk>, 使用 " 用于 " 用于 的 的 的 的 顺序 的 编码 格式, 可 使用 必须 保存 状态 的 " streamwriter " 作为 编解码器 以便 高效 地 进行 编码
(in earlier versions it raised a <unk>, 在 " 版本 版本 ， 它 将 引发 " valueerror ", （ 在 早期 版本 中 这 将 引发 " valueerror " 。 ）
<unk> our help output isn't very <unk> on the new ability our script has <unk> but that can always be fixed by <unk> the documentation for our script (e.g. via the <unk> keyword <unk>, <unk> ， <unk> 的 帮助 的 的 <unk> 的 的 的 的 <unk> <unk> <unk> 的 的 ， 可以 通过 " <unk> " 的 " <unk> " <unk> " 的 " <unk> " " " " " " " " " " " " " ", <unk> 的 是 ， 对于 我们 的 脚本 获得 的 新 能力 ， 我们 的 帮助 输出 并 没有 提供 很多 信息 ， 但 我们 总是 可以 通过 <unk> 文档 来 修复 这一 问题 （ 比如 通过 " help " 关键字 参数 ）
raises an "sslerror" if the <unk> has not been <unk> with enough data or if the operation is not supported by the current <unk> method, 如果 <unk> 不 不 存在 则 不 存在 ， 则 不 存在 则 不 存在 则 不 存在 则 会 引发 " " " ", 如果 <unk> 未 使用 足够 的 数据 作为 随机 种子 或者 如果 当前 rand 方法 不 支持 该 操作 则 会 引发 " sslerror "
changed in version 3.6: the value of <unk> is expected to be the same as <unk>, 在 3.6 版 更改 : the of of " is is is " " " " ", 在 3.6 版 更改 : " __ package __ " 预期 与 " __ spec __. parent " 具有 相同 的 值
"textwrapper" also provides some public methods, analogous to the module level convenience functions:, " 还 还 还 提供 了 模块 模块 级 函数 ：, " textwrapper " 还 提供 了 一些 公有 方法 ， 类似 于 模块 层级 的 便捷 函数 ：
deprecated since version 3.9: <unk> now supports "[]", 3.9 版后 已 移除 : " collections . abc . abc " now supports " [ ] ", 3.9 版后 已 移除 : " builtins . dict " now supports " [ ] "
<unk> is set to the same value as the function's name., " <unk> _ <unk> _ 设置 设置 为 与 值 的 值, __ qualname __ 设为 与 函数 名称 相同 的 值
changed in version 3.3: accept <unk> " values in addition to strings for salt ., 在 3.3 版 更改 : the " " " " to " 字符串, 在 3.3 版 更改 : <unk> " <unk> . method _ " values in <unk> to strings for salt .
the epoch is the point where the time starts, and is platform dependent, " 的 " 是 表示 为 为 为 为 的 的, <unk> 是 时间 开始 的 点 ， 并且 取决于 平台
a <unk> in the argument list of a function denotes that the parameters prior to it are positional only, 在 <unk> 中 的 参数 列表 的 函数 列表 ， 参数 参数 的 位置 参数, 函数参数 列表 中 的 斜杠 表示 在 它 之前 的 形参 是 仅限 位置 形参
in order to avoid this, you need to save the values in variables local to the <unk> so that they don't rely on the value of the global <unk>, 为了 为了 ， ， 你 需要 为 <unk> 的 值 中 的 值 ， ， 它们 的 的 值 的 值, 为了 避免 这种 情况 ， 你 需要 <unk> 保存 在 lambdas 的 局部变量 中 ， 这样 它们 就 不 依赖于 全局 ` ` x ` ` 的 值
in general, "isinstance()" and "issubclass()" should not be used with types., 与 ， " 和 " 和 " ) " ， 不应 使用 使用 使用, <unk> ， " isinstance ( ) " 和 " issubclass ( ) " 不 应该 和 类型 一起 使用
the <unk> function can be used if it is <unk> <unk> necessary to exit immediately (for example, in the child process after a call to <unk>, " 函数 _ fatalerror ( ) " 函数 会 被 被 在 " 进程 ( ) " 在 在 进程 ( ) " 在 在 进程 ( ) " ) " 在 调用 " " ( ) " ) ", 如果 绝对 确实 地 需要 立即 退出 （ 例如 在 调用 " os . fork ( ) " 之后 的 子 进程 中 ） 则 可 使用 " os ._ exit ( ) " .
it can be a <unk> to get the <unk> in previously working code when it is modified by adding an assignment statement <unk> in the body of a function., 它 可以 是 一个 <unk> 在 在 代码 时 ， 它 在 在 代码 中 的 ， 它 在 " 语句 " 语句 中 的 一个, 通过 在 函数 体中 的 <unk> 添加 赋值 语句 ， 导致 以前 正常 工作 的 代码 被 修改 而 得到 unboundlocalerror 会 令人 感到 意外
"return" leaves the current function call with the expression list (or "none") as return value., 在 函数 函数 当前 函数 的 函数 表达式 ， 返回 " none " ) " 返回 返回 返回值, " return " 会 <unk> 当前 函数调用 ， 并 以 表达式 列表 ( 或 " none " ) 作为 返回值
<unk> waiting for i/o completion, " curses . <unk> " / o / o / o, " select " 等待 i / o 完成
more details on the semantics of "__path__" are given below., 更 多 的 更 多 的 的 的 的 的 的, 有关 " __ path __ " 语义 的 更 多 细节 将 <unk> 中 给出
when invoked with the blocking argument set to true, do the same thing as when called without arguments, and return "true"., 当 参数 blocking 调用 时 ， 将 被 调用 时 ， 调用 调用 调用 时 ， 调用 " 调用 " 返回 " true ", 当 发起 调用 时 将 blocking 参数 设 为 真值 ， 则 执行 与 无 参数 调用 时 一样 的 操作 ， 然后 返回 " true "
this feature can be used to implement custom decoders, 这 特性 特性 可以 用于 实现 实现, 这一 特性 能够 被 用于 实现 自定义 解码器
controls how instances of <unk> appearing inside a field should themselves be quoted, 控制 如何 如何 的 的 <unk> ， ， 可以 是 " 的 " 的, 控制 出现 在 字 段 中 的 引号 字符 本身 应 如何 被 <unk>
after "f <unk> the call "f(b)" returns <unk>, 在 " ' f ' " ' " ' " 调用 " " ( ) " 返回 返回 " " ( ) ", 在 " f <unk> ( ' name ' ) " 之后 ， 调用 " f ( b ) " 将 返回 " b . name ( ) "
bpo <unk> drop support of ms <unk> especially of the <unk> compiler <unk> <unk> port of <unk>, bpo <unk> : <unk> <unk> of of of of of " <unk> " <unk> " 的 <unk> <unk> <unk> 的 的 <unk>, bpo <unk> : <unk> 对 ms <unk> 的 支持 ， 尤其 是 <unk> 编译器 （ <unk> 的 ms <unk> 端口 ）
it will probably be better than your own custom dictionary based approach or even a <unk> based <unk>, 它 在 你 的 的 的 字典 的 字典 ， 或 <unk> 的 的 的 ， <unk> <unk>, 它 可能 比 您 自己 的 基于 字典 的 自定义 方法 甚至 基于 db _ row 的 解决方案 更好
interactive input editing and history substitution, 交互式 编辑 和 历史 历史, 交互式 编辑 和 编辑 历史
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
changed in version 3.3: the import system has been updated to fully implement the second <unk> of pep 302, 在 3.3 版 更改 : the 了 the to to " <unk> " <unk> " pep pep pep pep, 在 3.3 版 更改 : 导入 系统 已 被 更新 以 完全 实现 pep 302 中 的 <unk> 要求
the optional argument context is the number of lines of context to display around the current line of source code in the <unk> this defaults to <unk>, 可选 的 上下文 上下文 上下文 上下文 的 的 的 代码 中 的 的 代码 的 代码 的 的, 可 选 参数 context 是 要 在 回溯 中 的 当前 源码 行 <unk> 显示 的 上下文 行 数 ； 默认 为 " 5 "
bpo <unk> the bundled version of openssl has been updated to <unk>, bpo <unk> : " collections . <unk> " 的 已 被 更新 到 ., bpo <unk> : openssl 的 捆绑 版本 已 更新 到 1.0 . <unk>
deprecated since version 3.6: <unk> is deprecated, 3.9 版后 已 移除 : " is _ is _ deprecated ", 3.6 版后 已 移除 : <unk> is deprecated
this function object contains a reference to the current global namespace as the global namespace to be used when the function is called., 此 函数 对象 包含 包含 一个 包含 全局 命名 空间 命名 空间 命名 空间 对象 的 全局 命名 空间, 这个 函数 对象 包含 对 当前 全局 命名 空间 的 引用 ， 作为 函数 被 调用 <unk> 使用 的 全局 命名 空间
the current cursor position remains the <unk>, 当前 光标 光标 位置 <unk> 的 <unk>, 当前 光标 位置 将 保持 不变
(contributed by <unk> <unk> and <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 和 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 和 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
<unk> does the same thing but converts the integer to a string, " <unk> ( ) " 相同 的 相同 的 结果 是 以 字符串, " <unk> ( ) " 将 做 同样 的 事 但是 会 把 整数 转换 为 字符串
this also affects the return type of operations whose implementation <unk> or <unk> uses <unk> arithmetic, such as <unk>, 此 也 会 返回 类型 的 的 类型 的 " " " 或 " " " , " , " , " , " ) " , " ) " , " ) ", 这 也 会 影响 到 在 具体 实现 中 （ 直接 或 间接 地 ） 使用 了 " datetime . timedelta " 算术 运算 的 返回 类型 ， 例如 " <unk> ( ) "
a manager object returned by <unk> controls a server process which holds python objects and allows other processes to manipulate them using <unk>, 管理器 由 " 对象 ( ) " 返回 一个 对象 对象 ， 对象 对象 ， 对象 将 被 其他 其他 进程 的 " <unk> ( ) ", 由 " manager ( ) " 返回 的 管理器 对象 控制 一个 服务 进程 ， 该 进程 保存 python 对象 并 允许 其他 进程 使用 代理 操作 它们
changed in version 3.4: <unk> of the <unk> <unk>, 在 3.4 版 更改 : " <unk> of " <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _, 在 3.4 版 更改 : 恢复 " <unk> " 别名
let's <unk> you have a class like this:, 让 我们 你 可以 一个 这样 :, 假设 你 有 这样 一个 类 :
return a k <unk> list of elements chosen from the population with replacement, 返回 一个 " robots " 的 " 的 元素 ， 元素 列表, 从 population 中 选择 替换 ， 返回 大小 为 k 的 元素 列表
this function takes an input source and an optional base url and returns a fully <unk> <unk> object ready for reading, 此 函数 接受 一个 一个 ， 并 一个 可选 的 可选 的 ， 并 返回 一个 " " " " " " ", 此 函数 接受 一个 输入 源 和 一个 可选 的 <unk> url 并 返回 一个 经过 完整 解析 可 供 读取 的 " <unk> "
<unk> <unk> to <unk> <unk>, " <unk> " " " " " " " " " " ", " _ py _ <unk> ( ) " ( " py _ trace _ <unk> " 构建 专属 )
attribute index value value if not present <unk> 0 url with no fragment empty string <unk> 1 fragment identifier empty string, 如果 没有 值 不 不 不 不 不 不 不 不 不 不 字符串 ， 则 字符串 ， 字符串 ， 字符串 字符串, 属性 索引 值 值 （ 如果 不 存在 ） " url " 0 url with no <unk> 空 字符串 " <unk> " 1 片段 识别 空 字符串
must be the last statement in a turtle graphics program, 必须 在 在 " a " 语句 的 一个, 必须 作为 一个 海龟 绘图 程序 的 结束 语句
this is not really an opcode, 这 不是 不是 一个 异常, 这 不是 一个 真正 的 操作码
if it <unk> the existing stream is <unk> and closed and the file opened again, typically as a <unk> to <unk> the record to the file., 如果 <unk> 了 " 的 " ， 则 会 被 忽略 ， 文件 文件 ， 文件 文件 将 其 文件 文件 将 其 文件 到 " 文件 . txt ", 如果 已 更改 ， 则 会 刷新 并 关闭 现有 流 然后 重新 打开 文件 ， 这 通常 是 将 记录 输出 到 文件 的 <unk> 操作
bpo <unk> fix idle <unk> & <unk> <unk> colors, bpo <unk> : 修复 了 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, bpo <unk> : 修复 idle 自动 补全 和 <unk> <unk> <unk> 的 颜色
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
depending on the desired interface to the python callback function, you may also have to provide an argument list to "pyobject_callobject()", 在 windows 上 ， python 函数 ， ， ， 你 可以 可以 可以 参数 列表 参数 列表, 依赖于 具体 的 回调 函数 ， 你 还要 提供 一个 参数 列表 到 " <unk> _ callobject ( ) "
if the utc offset isn't known, return "none", 如果 未 了 不 为 " none " none ", 如果 utc 时差 不 确定 则 返回 " none "
the object cannot be tracked by the garbage collector if this function returns 0., 如果 对象 被 调用 ， 此 函数 ， 此 函数 返回 返回 ", 如果 此 函数 返回 0 则 对象 无法 被 垃圾 回收 器 追踪
example of how to gzip compress a binary string:, 如何 gzip gzip 压缩 的 示例 :, 使用 gzip 压缩 二进制 字符串 示例 ：
for related functionality, see also the "datetime" and "time" modules., 对于 ， 请 参见 参见 参见 " 和 " 和 " 和 ", 更 多 相关 的 函数 ， 参见 " datetime " 和 " time " 模块
indicates the fastest compression method (less <unk>, 指明 指定 了 " 的 ( ) " 方法, 指明 最 快速 的 压缩 方法 （ 较 低 压缩率 ）
if the level is one of the predefined levels <unk> <unk> <unk> <unk> or <unk> then you get the corresponding string, 如果 级别 级别 是 一个 的 " " " , " , " , " , " , " , " ) " ， 则 会 将 字符串, 如果 级别 为 预定 义 的 级别 " critical " , " error " , " warning " , " info " 或 " debug " 之一 则 你 会 得到 相应 的 字符串
rounds to an integer., 输出 到 一个 一个, 舍入 到 一个 整数
the <unk> should be a list of strings, <unk> _ <unk> 是 是 一个 字符串 列表, <unk> 应当 为 字符串 列表
the constructor accepts an integer <unk> or a bytes object., 构造 构造 器 接受 一个 一个 整数 对象 或 一个 字节 对象 的 字节 串 对象, 该 构造 器 接受 一个 整数 地址 ， 或者 一个 字节 串 对象
let's fix that <unk>, 让 我们 修复 ：, 让 我们 修复 那个 bug ：
a numeric error number that denotes the verification error., 数字 的 错误 错误 舍入 错误, 一个 数字 形式 的 错误 编号 ， 用于 表示 验证 错误
on platforms where <unk> <unk> it is an alias to <unk>, 在 " sizeof ( ) " sizeof ， 它会 " 会 是 " " " " " " " " ", 在 " sizeof ( long ) sizeof ( int ) " 的 平台 <unk> 类型 是 " c _ long " 的 一个 别名
similarly, compresslevel will override the constructor if given, <unk> 的 的 将 将 " " " ", 类似 地 ， compresslevel 如果 给出 也 将 覆盖 构造 器
"x < y" and "not x > y" (for total <unk>, " x y y 和 y x y " x y ", " x < y " 和 " not x > y " ( 对于 完全 排序 )
read and return all the bytes from the stream until <unk> using multiple calls to the stream if necessary., 读取 并 返回 读取 的 字节 数据 ， 将 返回 " true " ， ， 则 返回 " true ", 从流 中 读取 并 返回 所有 字节 直到 eof ， 如 有 必要 将 <unk> 执行 多次 调用
the "register()" attribute returns the <unk> function which enables decorator <unk> <unk> as well as creating unit tests for each variant <unk>, " " " " ( ) " 返回 的 函数 函数 的 函数 " 作为 " 作为 " 的 的 为 " <unk> " ) " 的 为 ", " register ( ) " 属性 将 返回 启用 了 装饰 器 堆栈 、 封存 的 未 装饰 函数 ， 并会 为 每个 变量 单独 创建 单元测试 :
when "add_argument()" is called with <unk> <unk> or <unk> <unk>, 当 " " " " " " " " " <unk> " , " <unk> " , " <unk> " , " <unk> " , " <unk> ", 当 " add _ argument ( ) " 通过 " action ' store _ const ' " 或 " action ' append _ const " 调用 时
this function is invoked by the "import" statement, 此 函数 会 由 " import " 语句, 此 函数 会 由 " import " 语句 发起 调用
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
comparison should be <unk>, 比较 的 应当 是 ", 比较 应该 是 <unk> 的
changed in version 3.3: added "yield from <unk> to <unk> control flow to a <unk>, 在 3.3 版 更改 : 添加 从 " <unk> " <unk> " <unk> " 到 一个 ., 在 3.3 版 更改 : 添加 " yield from < <unk> > " 以 委托 <unk> 给 一个 子 迭代 器
here's an example that prints the mime type of every part of a multipart message structure:, 这里 有 一个 的 的 的 的 的 的 的 的 的 的 的 的 的 的, 以下 例子 会 打印 出 <unk> 具有 多 部分 结构 之 信息 的 每个 部分 的 mime 类型
deprecated since version 3.9: passing "none" for s will raise an exception in future python versions., 3.9 版后 已 移除 : " " " " " " " " " 异常 " 异常, 3.9 版后 已 移除 : <unk> " none " for s will raise an exception in future python versions .
this only applies when " o" is not <unk>, 此 仅 当 " 时 时 不会 被 时 时 不会 被, 这仅 适用 于 未 提供 " o " 的 情况
see also: the single unix specification, version 2, other environment variables., 参见 unix unix 的 版本 版本 版本 版本 其他 <unk>, 另 请参阅 : the single unix <unk> , version 2 , <unk> <unk> <unk> .
using a positive integer indent <unk> that many spaces per level, 使用 一个 整数 ， ， 请 将 <unk> 检测 的 的, 使用 一个 正整数 会 让 每 一层 缩进 同样 数量 的 空格
using python on a macintosh, 在 苹果 系统 上 使用 python, 在 苹果 系统 上 使用 python
boolean value of "enum" classes and members <unk>, " enum " 类 的 类 和 成员, " enum " 类 和 成员 的 布尔值 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
if flag is "false", the effect is the same as calling <unk>, 如果 flag 为 " false " ， 则 与 " " ( ) " 相同, 如果 flag 为 " false " ， 则 效果 与 调用 " <unk> ( ) " 相同
an abstract base class for a loader which implements the optional pep 302 protocol for loaders that inspect modules., 一个 用于 自定义 的 的 ， ， 它 的 的 的 pep 302 的 的 的 的 基类, 一个 实现 加载 器 检查 模块 可选 的 pep 302 协议 的 loader 的 抽象 基类
many modules that are usually used by importing them also provide a command line interface or a self <unk> and only execute this code after checking <unk>, 许多 模块 是 在 在 命令行 ， 也 可以 命令行 命令行 命令行 命令行 、 命令行 、 命令行 、 代码 ， 仅 只 在 代码 代码 的 代码 代码, 通常 ， 通过 导入 使用 的 许多 模块 也 提供 命令行 界面 或 <unk> ， 并且 只 在 检查 " __ name __ " 之后 ， 才 执行 之后 的 代码 :
(contributed by <unk> <unk> bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
changed in version 3.6: <unk> also supports the "io.bufferediobase" writable interface., 在 3.6 版 更改 : the 了 now _ types _ <unk> ., 在 3.6 版 更改 : " <unk> . <unk> " <unk> supports the " io . bufferediobase " <unk> interface .
the nature of the problem is made clear if you print out the <unk> of the class objects:, 如果 <unk> ， 如果 你 ， 则 <unk> 的 的 的 " <unk> ", 如果 打印 <unk> 对象 的 “ 标识 ” ， 问题 的 本质 就 会 明确 ：
"codecs" codec registry and base classes, " codecs " 编解码器 注册 和 相关 基类, " codecs " 编解码器 注册 和 相关 基类
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
a two <unk> vector class, used as a helper class for implementing turtle graphics, 两个 两个 <unk> 的 用于 用于 用于 用于 类 的 类 的 类, <unk> 矢量 类 ， 用来 作为 实现 海龟 绘图 的 辅助 类
an alias to <unk>, 一个 " " " " 的 ", " collections . abc . <unk> " 的 别名
if that iterator is exhausted, it can be removed with <unk> otherwise, it can be <unk> back to the end with the "rotate()" method:, 如果 ， 迭代 器 ， 它 可以 通过 " __ ( ) " 来 它 可以 通过 " " " " ", 如果 这个 迭代 器 消耗 <unk> ， 就 用 " <unk> ( ) " 将 其 从 <unk> <unk> 去 ； 否则 ， 就 通过 " rotate ( ) " 将 它 移到 队列 的 末尾
if the future has been cancelled , this method raises a "cancellederror" exception., 如果 future 已 被 此 方法 ， 此 方法 引发 " invalidstateerror " 异常, 如果 future 已 取消 ， 方法 会 引发 一个 " cancellederror " 异常
return a floating point number constructed from a number or string x ., 返回 一个 字符串 表示 的 字符串 或 字符串 的 字符串, 返回 从 数字 或 字符串 x 生成 的 浮点数
for integers, the result is the same as <unk> <unk> b, a % b)", 对于 ， ， 结果 结果 与 " ' " ' " ' " ' " ' " ' ", 对于 整数 ， 结果 和 " ( a / / b , a % b ) " 一致
maximum length is not limited by the <unk> algorithm., 最大 长度 长度 （ 由 <unk> <unk>, <unk> 算法 不 限制 最大 长度
the input encoding should be utf 8, utf 16 or utf <unk>, 输入 编码 的 utf 8 utf 8 utf 8 8 utf 8, 输入 编码 应当 是 utf 8 ， utf 16 或者 utf 32
a subclass of "httpexception"., " httpexception " 的 一个 子类, " httpexception " 的 一个 子类
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
pep 371: the <unk> package., pep 371 : <unk> 包, pep 371 : 多任务处理 包 .
as you can see, we can treat a config parser much like a dictionary, 正如 你 可以 可以 可以 可以 可以 可以 一个 一个 类 的 实例 ， 一个 类, 如 你 <unk> ， 我们 可以 把 配置 解析器 当作 一个 字典 来 处理
if it is zero, wait until a "release()" is called and return "true"., 如果 它 被 等待 等待 ， 则 会 被 " true " 并 返回 返回 " true ", 如果 其值 为 零 ， 则 会 等待 直到 " release ( ) " 并 调用 并 返回 " true "
"namespace" the "namespace" object that will be returned by "parse_args()", 将 对象 的 对象 将 返回 " 返回 " 返回 " 返回 ", " namespace " 将 由 " parse _ args ( ) " 返回 的 " namespace " 对象
changed in version 3.2: allow strings for indent in addition to integers., 在 3.2 版 更改 : 允许 允许 到 到 的 的 的 的 的, 在 3.2 版 更改 : 允许 使用 字符串 作为 indent 而 不再 仅仅 是 整数
it is the only stored state and can be modified to change which mappings are searched, 它 只 被 状态 ， 并且 可以 被 传递 给 地 地 地 的 的, 它 是 仅 有 的 <unk> ， 可以 被 修改
if that isn't <unk> consider using <unk> instead, 如果 注意 ， 请 使用 " ， 请 改用 ", 如果 不 希望 如此 ， 可 考虑 改用 " <unk> ( ) "
usage as a decorator :, " 作为 " 的 的, 作为 decorator : 使用 :
return a list with the n largest elements from the dataset defined by iterable, 返回 列表 中 的 元素 的 元素 元素 元素 元素, 从 iterable 所 定义 的 数据 集中 返回 前 n 个 最大 元素 组成 的 列表
while they are not listed below, the <unk> names used for some methods and functions in this module in the python 2.x series are still supported by this module., 虽然 它们 不 不 在 python 模块 中 ， 模块 中 的 的 模块 中 的 函数 和 模块 是 在 模块 中 的 模块, 虽然 他们 没有 在 下面 列出 ， 这个 模块 仍然 支持 python 2 . x 系列 的 这个 模块 <unk> " <unk> " （ <unk> 法 ） 命名 的 方法 和 函数
the initializer is omitted if the array is empty, otherwise it is a string if the <unk> is <unk> otherwise it is a list of numbers, 如果 达到 了 的 的 ， ， 如果 为 " ' " ' " ， 则 如果 " ； 否则 ， 否则 是 " 列表, 如果 数组 为 空则 initializer 会 被 省略 ， 否则 如果 <unk> 为 " ' u ' " 则 它 是 一个 字符串 ， 否则 它 是 一个 数字 列表
this file like object can be used in a "with" statement, just like a normal file., 这个 文件 对象 像 " 对象 " 对象 " " " 的 一个 类 的 一个 类, 文件 类 对象 可以 像 普通 文件 一样 在 " with " 语句 中 使用
resize an object allocated by <unk>, 通过 一个 对象 由 " create _ connection ( ) ", 为 " pyobject _ <unk> ( ) " 所 分配 对象 重新 调整 大小
<unk> must be a memoryview instance., " _ 必须 " 必须 是 一个 " 实例, <unk> 必须 是 一个 memoryview 实例
bpo <unk> <unk> <unk> <unk> more than <unk> classes, functions, and decorators into new sub sections., bpo <unk> : 修复 <unk> , 更 多 的 更 多 ， ， ， 和 和 <unk> 的 新 的, bpo <unk> : <unk> typing . <unk> ， 将 超过 70 <unk> 、 函数 和 装饰 器 组织 至 新 的 子 小节
"chunk" read <unk> <unk> data, " chunk " 读取 数据 分块 数据, " chunk " 读取 <unk> 分块 数据
the main disadvantage is that <unk> are specific to linux, and only work on recent <unk> <unk>, 主 缺点 是 是 被 用于 被 用于 和 的 的 仅 在 windows 上 被 被, 其 主要 缺点 在于 <unk> 是 linux 专属 的 ， 并且 仅 在 较 <unk> 版本 的 核心 （ <unk> + ） 上 可用
binary file a file object able to read and write bytes like objects, 二进制 文件 对象 对象 读取 读取 读取 对象 对象 like object 对象, binary file 二进制 文件 file object 能够 读写 字节 类 对象
"await" <unk> start a tcp server, " await " loop ( ) " 启动 一个 一个 " socket ., " await " " start _ server ( ) " 启动 tcp 服务
for modules with ascii only names, the function must be named <unk> with <unk> replaced by the name of the module, " curses " 模块 ， ， 只有 函数 函数 函数 必须 必须 必须 必须 为 " <unk> " " " " " " " " ", 对于 仅 有 ascii 编码 的 模块 名 ， 函数 必须 是 " <unk> _ < modulename > " ， 将 " < modulename > " 替换 为 模块 的 名字
an example to show the <unk> attribute in <unk>, 一个 " sys . <unk> " 属性 " 属性 . <unk> " 属性 :, 一个 演示 如何 使用 " _ ignore _ " 属性 的 例子 :
the obj argument must support the single segment character buffer interface, 形参 形参 必须 必须 支持 为 " ' " ' ", obj 参数 必须 支持 <unk> 字符 缓冲 接口
first we set up the <unk> sequences of individual single line strings ending with newlines (such sequences can also be obtained from the <unk> method of file like <unk>, 如果 <unk> 设置 <unk> （ （ 由 ） ） 的 的 （ 例如 " ） " 的 " ， 可以 通过 " " " " " " " " " " " " " ", 首先 我们 设置 文本 为 以 换行符 结尾 的 <unk> 字符串 构成 的 序列 （ 这样 的 序列 也 可以 通过 文件 类 对象 的 " <unk> ( ) " 方法 来 获取 ） ：
this is like <unk> but returns the current utc date and time, as a naive "datetime" object, 这 类似 于 " <unk> ( ) " ， 但 但 返回 当前 时间 的 时间 和 时间 的 对象, 这 类似 于 " now ( ) " ， 但 返回 的 是 当前 utc 日期 和 时间 ， 类型 为 简单 型 " datetime " 对象
"pickle" python object serialization, " python " python python 对象, " pickle " python 对象 序列化
in this example, <unk> and <unk> will be treated as <unk> <unk>, 在 这种 情况 下 ， " 和 " <unk> ( ) " 将 将 被 " " " " " ", 在 <unk> 中 ， " <unk> " 和 " list [ float ] " 将 被 视为 可 互换 的 同义词 ：
argument is a sequence <unk> the positional arguments for action, 参数 是 序列 参数 参数 参数 参数 参数 参数 参数, argument 是 包含 有 action 的 位置 参数 的 序列
the <unk> class now has <unk> and <unk> methods, " " " 类 现在 现在 " <unk> . <unk> " 和 " <unk> " 和 ", " tkinter . <unk> " 类 现在 具有 " <unk> _ get ( ) " 和 " <unk> _ set ( ) " 方法
once <unk> "wait()" re <unk> the lock and returns, 一旦 " " ( ) " ， " " " ) " ， 所有 线程 锁, 一旦 被 唤醒 ， " wait ( ) " 方法 重新 获取 锁 并 返回
new in version 3.3: formerly, this module was part of the "collections" module., 3.3 新版 功能 : 此 模块 模块 ， 模块 " 模块 " 模块, 3.3 新版 功能 : 该 模块 <unk> 是 " collections " 模块 的 组成部分
the algorithm is consistent with the zip file checksum, 该 的 会 被 zip 到 的 文件, 该 算法 与 zip 文件 校验 和 一致
the new encodings are:, 新 的 的 的 ：, 新 的 编码 为 ：
this module provides support for unix shell style <unk> which are not the same as regular expressions (which are documented in the "re" module), 此 模块 支持 unix 风格 的 风格 ， 风格 的 <unk> ， 但 在 在 的 的 中 的 的, 此 模块 提供 了 unix shell 风格 的 通配符 ， 它们 并 不 等同于 正则表达式 （ 关于 后者 的 文档 参见 " re " 模块 ）
if the <unk> is omitted it defaults to <unk>, 如果 <unk> 为 " <unk> " ， 则 默认 为 " sys . <unk> ", 如果 省略 buffer _ size 则 使用 默认 的 " default _ buffer _ size "
this method is maintained for backward compatibility and should be <unk> in new code, 这个 方法 在 <unk> 的 的 ， 应当 应当 在 在 新 的, 此 方法 仅 保留 用作 向下兼容 ， 应 避免 在 新 代码 中 使用
new in version 3.8: the <unk> keyword only argument, 3.8 新版 功能 : keyword only _ argument 仅限 参数, 3.8 新版 功能 : strict _ <unk> 仅限 关键字 参数
removing the <unk> <unk>, <unk> <unk> <unk>, 删除 max _ path 限制
parameters: <unk> an integer, must be return value of previous <unk> call, 参数 : <unk> 一个 参数 ， 必须 必须 是 一个 <unk> 的 的 值, 参数 : <unk> 一个 整型 数 ， 必须 是 之前 " stamp ( ) " 调用 的 返回值
changed in version 3.8: use "__index__()" if available., 在 3.8 版 更改 : 如果 使用 " __ index __ " __ " __ ", 在 3.8 版 更改 : 如果 可用 将 使用 " __ index __ ( ) "
windows only: this function is a hook which allows implementing in process com servers with ctypes, windows windows 函数 ， 此 函数 是 一个 在 进程 进程 中 ， 它们 它们 的 兼容, 仅限 windows ： 此 函数 是 一个 允许 使用 ctypes 实现 进程 内 com 服务 的 钩子
changed in version 3.4: returns "none" when called instead of <unk>, 在 3.4 版 更改 : 返回 " none " " " " " " " " ", 在 3.4 版 更改 : 当 方法 被 调用 的 时候 ， 方法 返回 是 " none " 而 不是 " notimplemented "
<unk> if str ends and begins with angle <unk> they are stripped <unk>, <unk> 如果 如果 <unk> ， 则 和 nan 的 默认值 为 " none " ， 则 会 被 忽略, 类似 地 ， 如果 str 开头 和 结尾 都 是 <unk> 括号 ， 这 对 <unk> 括号 会 被 去除
such a command is then hidden until the alias is removed, 这样 一个 命令 的 ， ， 直到 " " " " " ", 这样 的 命令 将 被 隐藏 直到 别名 被 移除
<unk> is then <unk> over for each resulting pair of elements from <unk> and <unk>, <unk> 是 <unk> <unk> 和 <unk> <unk> 和 <unk> 的 的 元素 的 元素 的 元素, " <unk> " 会 对 每个 " <unk> " 和 " <unk> " 的 元素 对 开始 遍历
adobe controls whether the input sequence is in adobe <unk> format (i.e. is <unk> with <unk> and <unk>, adobe 控制 的 的 序列 （ 是 " " " " " " " " " " " " " " " " " " " " " " " ", adobe 控制 输入 序列 是否 为 adobe <unk> 格式 ( 即 附加 < ~ 和 ~ > )
as the help string supports % formatting, if you want a literal "%" to appear in the help string, you must escape it as <unk>, 作为 字符串 字符串 字符串 ， 如果 你 在 你 的 <unk> ， ， ， 的 中 ， ， 你 你 必须 为 " <unk> ", 由于 帮助 字符串 支持 % <unk> ， 如果 你 希望 在 帮助 字符串 中 显示 " % " 字 面值 ， 你 必须 将 其 转义 为 " %% "
"collections.abc" abstract base classes for containers, " collections . abc " 容器 的 抽象 基类, " collections . abc " 容器 的 抽象 基类
see platform dependent efficient copy operations section, 请参阅 依赖于 具体 平台 的 高效 拷贝 拷贝 操作, 参见 依赖于 具体 平台 的 高效 拷贝 操作 一节
outside functions, the local scope references the same namespace as the global <unk> the module's namespace, 将 器 包含 的 的 引用 ， 与 与 全局 模块 的 模块 的 模块, 在 函数 以外 ， 局部 作用域 将 引用 与 全局 作用域 <unk> 的 命名 空间 ： 模块 的 命名 空间
one is to use the <unk> <unk> which is included in the python source tree as <unk>, 一个 使用 " <unk> . <unk> " python python python python ， python 是 python <unk> 的 python 是 python 的, 一种 是 使用 冻结 工具 ， 它 包含 在 python 源代码 树 " tools / freeze " 中
if <unk> and <unk> are both true, by default "dataclass()" will generate a "__hash__()" method for you, 如果 <unk> <unk> 和 " <unk> " ， 默认 默认 默认 将 将 " " " " " ", 如果 " eq " 和 " <unk> " 都 是 true ， 默认 情况 下 " dataclass ( ) " 将 为 你 生成 一个 " __ hash __ ( ) " 方法
what's new in python 2.1, python 2.1 有 什么 新 变化, python 2.1 有 什么 新 变化
the module <unk> also implements the <unk> <unk> which performs certain <unk> on host names, to achieve case <unk> of <unk> domain names, and to <unk> similar characters, 模块 模块 " <unk> " <unk> " <unk> " <unk> <unk> <unk> <unk> <unk> <unk> 的 的 <unk> ， ， <unk> 和 <unk> <unk> 和 <unk> 的 <unk> 和 <unk> 的, " encodings . <unk> " 模块 还 实现 了 <unk> 过程 ， 该 过程 会 对 主机名 执行 特定 的 <unk> 操作 ， 以 实现 <unk> 的 大小写 不 敏感 特性 与 合并 相似 的 字符
if the generator raises any other exception, it is propagated to the caller, 如果 生成器 对象 ， 其他 其他 其他 ， 则 会 被 传播, 如果 生成器 引发 任何 其他 异常 ， 它会 被 传播 给 调用者
added <unk> function: get a frame code, 添加 了 " <unk> _ <unk> ( ) " 添加 了 代码 的 代码, 增加 了 " <unk> _ <unk> ( ) " 函数 ： 获取 帧 代码
returns a pointer to a writable memory location, 返回 一个 指针 的 的 的 内存, 返回 一个 指向 可 写 内存地址 的 指针
this feature can be used to reduce the number of backslashes needed, to split long strings <unk> across long lines, or even to add comments to parts of strings, for example:, 这 特性 特性 可 被 用来 为 " ' " 的 的 字符串 ， 表示 的 或者 或 或 的 的 ， 或者 在 要 使用 的 字符串, 此 特性 可以 减少 反 斜杠 的 使用 ， 以 方便 地 将 很长 的 字符串 分成 多个 物理 行 ， 甚至 每 部分 字符串 还 可 分别 加 注释 ， 例如 :
here's a small but <unk> example:, 这里 有 一个 很小 但 但 <unk> :, 这里 有 一个 很小 但 很 <unk> 的 例子 :
this routine registers a callback, 此 方法 注册 一个 授权 回调, 此 例程 注册 回调
returns a tuple <unk> <unk> which contain information about the bit <unk> and the linkage format used for the executable, 返回 一个 元组 的 " ， ， ， 包含 包含 的 的 ， ， <unk> 的 的 格式 的 格式 格式, 返回 一个 元素 " ( <unk> , <unk> ) " ， 其中 包含 可执行文件 所 使用 的 位 架构 和 链接 格式 信息
for example, <unk> gives the particular invalid input that the codec failed on., 例如 ， " ' " ， " " " 表示 表示 的 的 的 的, 例如 " <unk> . object [ <unk> . start : <unk> . end ] " 会 给出 导致 编解码器 失败 的 特定 无效 输入
<unk> and <unk> only accept socket handles (e.g. pipe file descriptors are not <unk>, " 和 " <unk> ( ) " 只 只 只 套 接字 文件 描述符 的 文件 描述符 的, " loop . add _ reader ( ) " 和 " loop . add _ writer ( ) " 只 接受 套 接字 处理 回调 函数 ( 如 管道 、 文件 描述符 等 都 不 支持 )
if <unk> sources are provided by the operating system, they are used instead of the system time (see the <unk> function for details on <unk>, 如果 <unk> 的 的 ， 则 使用 " 系统 系统 系统 系统 系统 系统 （ 参见 系统 ） 在 在 <unk> 上 的 <unk>, 如果 操作系统 提供 随机 源 ， 则 使用 它们 而 不是 系统 时间 （ 有关 可用性 的 详细信息 ， 请参阅 " os . urandom ( ) " 函数 ）
they may only contain ascii characters; bytes with a numeric value of 128 or greater must be expressed with <unk>, 它们 可能 包含 包含 ascii ascii 的 字节 串 的 值 ， 必须 为 " \ " " ", 它们 只能 包含 ascii 字符 ； 字节 对应 数值 在 128 及 以上 必须 以 转义 形式 来 表示
<unk> the number of command line arguments that should be <unk>, " 参数 " 参数 参数 ， 应 应当 应当 是, nargs 命令行 参数 应当 消耗 的 数目
when execution is <unk> the shell <unk> focus and displays a prompt, 当 执行 执行 时 ， 将 执行 " <unk> ( ) " 和 " <unk> ( ) ", 执行 完成 后 ， shell 将 保留 焦点 并 显示 提示
if the function fails, an "oserror" exception is raised., 如果 函数 会 引发 " 异常 " 异常 " 异常 " 异常, 如果 函数 失败 ， 则 引发 一个 " oserror " 异常
changed in version 3.5: added the optional key and reverse parameters., 在 3.5 版 更改 : 添加 了 可选 的 键 和 元组, 在 3.5 版 更改 : 添加 了 可选 的 key 和 reverse 形参
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
they both use domain specific languages allowing a user to write scripts <unk>, 它们 提供 使用 使用 的 的 ， 请 使用 用户 的 的 时候, 它们 都 使用 特定 <unk> 的 语言 ， 允许 用户 编写 脚本 ， 其中 ：
the base class of the other exceptions in this module, 此 模块 中 的 异常 模块, 此 模块 中 其他 异常 的 基类
this behaviour is controlled by the following handler attributes:, 这 行为 通过 以下 代码 的 属性 ：, 此 行为 由 下列 处理程序 属性 控制 :
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
a <unk> exception is raised if s is <unk> <unk>, 如果 " 异常 _ <unk> " ， 如果 " valueerror " ， 则 引发 " valueerror ", 如果 s 被 不 正确 地 <unk> ， 一个 " binascii . error " 错误 将 被 抛出
timeout in seconds <unk> <unk> the default is "none", to wait <unk>, timeout " <unk> " ， " default 默认值 默认值 为 " none ", timeout 单位 为 秒 （ 一般 为 浮点数 ） ， 默认 为 " none " ， 即 永不 超时
for example, if a cut point falls one third of the <unk> between two sample values, <unk> and <unk> the cut point will evaluate to <unk>, 例如 ， 如果 一个 一个 数值 ， 则 两个 ， ， 两个 ， ， ， " " " " " " " 将 将 将 将 将 被 忽略, 例如 ， 如果 一个 分隔 <unk> 在 两个 样本 值 " 100 " 和 " <unk> " 之间 距离 <unk> 的 位置 ， 则 分隔 点 的 取值 将 为 " <unk> "
it is possible to <unk> lists <unk> lists containing other <unk> for example:, 它 是 " <unk> ( ) " 方法 ， 它 包含 了 其他 的 的 的 其他 :, 也 可以 嵌套 列表 ( 创建 包含 其他 列表 的 列表 ) , 比如说 :
the <unk> class has a new "close()" method to explicitly close the queue, " " " 类 " " " " " " " " " " 新 的 新 的 新, " multiprocessing . simplequeue " 类 新增 了 " close ( ) " 方法 用来 显式 地 关闭 队列
return the code object associated with the function object op ., 返回 函数 对象 op 的 对象 对象 的 对象, 返回 与 函数 对象 op 关联 的 代码 对象
parameters: angle a number (optional), 参数 : fun 一个 数值 ( ) ", 参数 : <unk> 一个 数值 ( 可 选 )
the numeric values of logging levels are given in the following table, 这个 模块 的 的 的 的 值 是 以下 函数, 日志 记录 级别 的 数值 在 <unk> 给出
it is also appropriate to set "__cached__" when "__file__" is not set, 它 也 会 被 " " " " " " " " ", 当未 设置 " __ file __ " 时 也 可以 设置 " __ cached __ "
return "true" if path refers to an <unk> directory entry that is a symbolic link, 如果 如果 为 " true " 则 返回 " true " 的 一个 " true ", 如果 path 指向 的 " 现有 " 目录 条目 是 一个 符号 链接 ， 则 返回 " true "
additionally, stderr can be <unk> which indicates that the stderr data from the applications should be <unk> into the same file handle as for <unk>, <unk> ， 可以 是 " <unk> 的 的 的 的 数据 ， 数据 的 数据 的 数据 的 " " " " " " ", 另外 ， stderr <unk> 为 " stdout " ， 表示 应用程序 的 标准 错误 数据 应 和 标准 输出 <unk> 捕获
the <unk> file will have the header specifying name and mode as the defaults for the results of decoding the file, " <unk> " 文件 将 写入 指定 名称 的 的 名称 为 相应 的 的 的, 经过 <unk> 编码 的 文件 将 具有 指定 name 和 mode 作为 解码 该 文件 默认 结果 的 标头
new in version 3.9: <unk> to 3.7 and 3.8., 3.8 新版 功能 : " <unk> " to " 和 ", 3.9 新版 功能 : 向下 移植 到 3.7 和 3.8
note, this decorator <unk> with the operation of pep <unk> key sharing dictionaries, 注意 ， 此 方法 的 <unk> <unk> 的 的 的 的 的 键, 注意 ， 这个 装饰 器会 影响 pep <unk> 键 共享 字典 的 操作
a python program can also explicitly raise an exception with the <unk> statement, python 程序 程序 可以 可以 通过 " 异常 " 异常 " 异常 异常 异常 异常, python 程序 也 可以 通过 " raise " 语句 显式 地 引发 异常
changed in version 3.7: implemented recursive <unk> and added depth parameter., 在 3.7 版 更改 : 添加 了 " <unk> " and _ parameter _ dicts _ dicts _, 在 3.7 版 更改 : 实现 了 递归 反汇编 并 添加 了 depth 参数
objects are little capsules containing some internal state along with a collection of method calls that let you modify this state, and programs <unk> of making the right set of state changes, 对象 是 " __ " __ " __ " __ ( ) " 方法 的 方法 的 的 方法 ， ， ， ， 并 返回 <unk> 的 的 的 <unk>, 对象 就 像是 <unk> 小 <unk> ， 包裹 着 内部 状态 和 <unk> 的 能 让 你 修改 这个 内部 状态 的 一组 调用 方法 ， 以及 由 正确 的 状态 变化 所 构成 的 程序
this function implements the standard <unk> file search algorithm, 此 函数 标准 标准 标准 的 文件 文件, 本 函数 实现 了 标准 的 " . <unk> " 文件 <unk>
let's say you have an object "x" and want to change the behaviour of just one of its methods, 让 你 有 一个 对象 并 并 将 其 并 的 的 的 的 的 的, 假设 您 有 一个 对象 " x " 并且 想要 改变 其中 一个 方法 的 行为
the file is now non inheritable., 文件 是 不可 继承 的, 文件 现在 禁止 继承
most of the time, "tkinter" is all you really <unk> but a number of additional modules are available as well, 大多数 的 的 的 是 所有 你 ， ， ， ， ， ， 是 一个 额外 的 模块, 在 大多数 时候 你 只 需要 " tkinter " 就 足够 了 ， 但 也 有 一些 额外 的 模块 <unk>
subclasses should ensure that this gets called from overridden "close()" methods., 它 应该 此 方法 此 方法 调用 " 调用 " 调用 " 调用, 子类 应 确保 从 重写 的 " close ( ) " 方法 中 调用 此 方法
changed in version 3.5: added support for the context management protocol to the <unk> class., 在 3.5 版 更改 : 添加 了 context context context 协议 协议 协议 协议 协议, 在 3.5 版 更改 : added support for the context <unk> protocol to the " <unk> " class .
if you wish to learn more about python, start with the <unk> guide to python., 如果 你 希望 更 更 更 更 多 更 多 ， 更 多 的 更 多, 如果 你 想 学习 更 多 python ， 看看 <unk> ' s <unk> to python .
each <unk> now has its own list of scheduled calls, 每个 " " ( ) 现在 现在 会 有 有 的 列表 的 列表, 每个 子 解释器 现在 都 拥有 它们 自己 的 调用 <unk> 列表
if <unk> is <unk> this method returns zero and sets "errno" to <unk>, 如果 <unk> _ <unk> " ， " true " ， 则 返回 " true " true ", 如果 <unk> 为空 ， 这个 方法 返回 零 并 设置 " errno " 为 " <unk> "
"bufferediobase" provides or overrides these data attributes and methods in addition to those from "iobase":, " 提供 " 或 " iobase " iobase " iobase " iobase " iobase " iobase " iobase " iobase " iobase " 方法 和 方法, " bufferediobase " 在 " iobase " 的 现有 成员 以外 还 提供 或 重载 了 下列 数据 属性 和 方法 :
at <unk> the statement <unk> <unk> <unk> will make <unk> a function that immediately returns whatever parameter you pass it, 在 " 语句 " 语句 " 语句 " " <unk> ( ) " 将 在 一个 函数 的 函数 ， 它 必须 你 的 的 参数, 在 运行 时 ， 语句 " <unk> newtype ( ' <unk> ' ， base ) " 将 " <unk> " 设 为 一个 函数 ， 该 函数 立即 返回 您 传递 它 的 任何 参数
the <unk> for an uppercase <unk> for example, is two <unk> <unk> and a <unk> <unk> though the exact details will depend on the font being used, 对于 <unk> 的 的 ， 例如 ， <unk> <unk> <unk> <unk> <unk> <unk> <unk> 和 <unk> 和 <unk> 的 的 ， ， 在 " os . <unk> ", 比如 ， 大写字母 a 的 字形 ， 是 <unk> 向 的 <unk> 和 水平 的 <unk> ， 而 具体 的 细节 取决于 所 使用 的 字体
changed in version <unk> <unk> files start with a comment indicating they are generated, 在 3.4 版 更改 : <unk> _ <unk> " ， " ， " " " " " 它们 它们 它们 的, 在 3.1 . 3 版 更改 : " <unk> " files start with a comment <unk> <unk> are <unk>
see examples for an example., 请参阅 " 的 例子, 具体 示例 参见 示例
therefore, a complete threads implementation requires thread support for c., 在 一个 进程 的 线程 安全 线程 安全 线程 的 支持, 因此 ， 一个 完整 的 线程 实现 需要 对 c 的 线程 支持
looks up the codec info in the python codec registry and returns a <unk> object as defined below., 在 python 中 的 python 编解码器 中 的 的 ， 并 返回 一个 " 对象 " 对象 的 对象 的 定义 的 对象, 在 python 编解码器 注册表 中 查找 编解码器 信息 ， 并 返回 一个 " <unk> " 对象 ， 其 定义 见下文
the <unk> action is most commonly used with optional arguments that specify some sort of flag, " <unk> " 是 " 是 可选 可选 可选 可选 参数 可选 的 参数 一些 一些 的, " ' store _ const ' " 动作 通常 用 在 选项 <unk> 指定 一些 标志
see the documentation for "threading" module., 请参阅 " typing " 模块 的 文档, 参考 " threading " 模块 的 文档
if <unk> is "true", the uid and gid numbers from the tarfile are used to set the <unk> for the extracted files, 如果 <unk> _ true " ， 则 " true " 和 " ， 则 会 从 " true " 的 设置 为 文件, 如果 <unk> _ <unk> 为 " true " ， 则 将 使用 来自 tarfile 的 uid 和 gid 数值 来 设置 被 提取 文件 的 所有者 / 用户组
the type constructor <unk> converts any sequence or iterable into a list with the same items in the same order, type 类型 的 " 类型 ( ) " 类型 任何 包含 包含 对象 的 元素 ， 其中 包含 顺序 顺序 顺序, 类型 构造 器 " list ( seq ) " 可 将 任意 序列 或 可 迭代 对象 转换 为 具有 相同 排列 顺序 的 相同 条 目的 列表
the value must be a supported type, 值 必须 是 一个 类型 类型, 值 必须 属于 受 支持 的 类型
changed in version 3.6: the dir parameter now accepts a path like object ., 在 3.6 版 更改 : the 形参 现在 接受 一个 类 路径 对象, 在 3.6 版 更改 : dir 参数 现在 可 接受 一个 路径 类 对象 ( path like object )
deprecated since version 3.4: use <unk> instead., 3.4 版后 已 移除 : use " mkstemp _ <unk> ( ) ", 3.4 版后 已 移除 : 使用 " exec _ module ( ) " 来 代替
<unk> if filename is specified, open the file in this mode, " 如果 mm mm 则 如果 省略 打开 打开 打开 打开 打开 打开 文件 打开, filemode 如果 指定 了 filename ， 则 用 此 模式 打开 该 文件
changed in version 3.6: underscores are now allowed for grouping purposes in literals., 在 3.6 版 更改 : 现在 在 在 下划线 中 的 <unk>, 在 3.6 版 更改 : 允许 在 字 面值 中 使用 下划线 进行 分组
changed in version 3.4: added support for 24 bit <unk>, 在 3.4 版 更改 : 添加 了 对 " <unk> " <unk> ", 在 3.4 版 更改 : added support for 24 bit <unk> .
using "from <unk> import <unk> disables this <unk>, 使用 " <unk> " import " : " <unk> ( ) " : 此 此, 使用 " from future _ builtins import map " 禁用 这个 修复器
the schema supports user defined objects for handlers, filters and formatters, " 用户 用户 用户 定义 的 对象 的 对象 ， ， 和 和 方法, 此 架构 支持 用户 定义 对象 作为 处理程序 、 过滤器 和 格式化 器
<unk> and measures of central location, 平均值 和 中心 的 评估 的 评估, 平均值 以及 对 中心 位置 的 评估
this instance of "pytypeobject" represents the python tuple type; it is the same object as "tuple" in the python layer., python " pytypeobject " python python 的 的 的 ， 它 是 与 python 层面 " " " " " " " " " " " " " 对象, " pytypeobject " 的 实例 代表 一个 python 元组 类型 ， 这 与 python 层面 的 " tuple " 是 相同 的 对象
if d is <unk> d is normalized to utc time, by <unk> <unk> and a <unk> for the normalized time is returned, 如果 为 为 " 为 " ， 则 为 " <unk> _ <unk> ( ) " 来 ， 并且 的 为 为 时间 的 时间, 如果 d 为 感知 型 ， d 会 通过 减去 " d . utcoffset ( ) " 来 标准化 为 utc 时间 ， 并 返回 该 标准化 时间 所 对应 的 " time . struct _ time "
if you're just distributing a couple of modules, especially if they don't live in a particular package, you can specify them individually using the <unk> option in the setup script., 如果 你 的 一个 ， ， 在 目录 的 的 ， ， 则 在 你 的 的 ， 你 可以 使用 " 使用 " 中 使用 " 选项 _ <unk> ( ) " 方法, 如果 你 要 分发 一组 模块 ， 特别 是 它们 不 在 特定 的 包中 ， 你 可以 在 配置 脚本 中 使用 " py _ modules " 选项 单独 指定 它们
for one shot compression, use the "decompress()" function instead., 对于 一个 函数 ， 请 使用 " 函数 ( ) " 函数, 对于 一次性 解压缩 ， 请 改用 " decompress ( ) " 函数
operation not supported on transport endpoint, 不 支持 支持 的 支持 操作, 操作 在 传输 <unk> <unk> 支持
changed in version 3.2: in previous versions of "configparser" behaviour matched <unk> <unk>, 在 3.2 版 更改 : 在 版本 of of of of of " <unk> . <unk> ", 在 3.2 版 更改 : 在 之前 的 " configparser " 版本 中 行为 匹配 " strict false "
for example, this block, 例如 ， 此, 举个 例子 ， 这样 的 代码 块 ：
set the garbage collection debugging flags, 设置 为 " 的 的 十六进制, 设置 垃圾 回收 器 的 调试 标识 位
if newline is <unk> or "'\n'", no translation takes place, 如果 newline 为 " none " 或 " ， 则 则 " true ", 如果 newline 是 " ' ' " 或 " ' \ n ' " ， 则 不 进行 翻译
if you're writing c code for <unk> in <unk> you must follow the guidelines and standards defined in pep 7, 如果 你 安装 c c 的 代码 ， ， 你 必须 为 " " " 和 " pep <unk>, 如果 你 想要 编写 可 包含 于 cpython 的 c 代码 ， 你 必须 遵循 在 pep 7 中 定义 的 指导 原则 和 标准
<unk> may be used with callables other than functions, " 可以 _ <unk> " 用于 使用 其他 其他 函数, " update _ wrapper ( ) " 可以 与 函数 之外 的 可 调用 对象 <unk> 使用
note the difference between <unk> and "' <unk> both use native byte order, but the size and alignment of the latter is <unk>, 请 注意 和 <unk> 和 " <unk> " ， ， ， ， ， 字节 的 字节 ， ， 但 字节 大小 的 的 的, 请 注意 " ' @ ' " 和 " ' ' " 之间 的 区别 ： 两个 都 使用 本 机 字节 顺序 ， 但 后者 的 大小 和 对齐 方式 是 标准化 的
the filters are <unk> in <unk> until one of them returns a false value, <unk> 是 <unk> 的 " " " " " " 的 一个 一个 " 一个 ", <unk> 查询 过滤器 ， 直到 其中 一个 返回 假值 为止
when "true", whitespace immediately following the delimiter is ignored, 当 " close ( ) " ， ， ， 会 将 被 忽略, 如果 为 " true " ， 则 忽略 定界符 之后 的 空格
these objects are well <unk> for implementing queues and <unk> first tree <unk>, 这些 对象 是 许多 许多 、 、 、 、 、 、 、 <unk> 的 的 <unk>, 此种 对象 适用 于 实现 队列 和 <unk> 优先 树 搜索 :
new in version 3.1., 3.1 新版 功能 ., 3.1 新版 功能 .
"'r <unk> open an lzma compressed stream for reading, " ' " ' " 打开 打开 打开 的 " 打开 " 用于 压缩, " ' r xz ' " 打开 一个 lzma 压缩 stream 用于 读取
at that time, the only change that needs to happen is to modify the severity level of the logger and/or handler to <unk>, 在 之前 的 ， 将 需要 需要 的 为 " 等级 " 的 记录器 的 的 等级, 当 需要 再次 调试 时 ， 只 需要 改变 日志 记录器 或 处理器 的 过滤 等级 即可
on windows, an args sequence is converted to a string that can be parsed using the following rules (which correspond to the rules used by the ms c <unk>, 在 windows 上 ， " 参数 " 序列 " ， 可以 使用 以下 使用 的 的 ， 可以 通过 c c " c " 来 使用 的 函数, 在 windows 上 ， args 序列 会 被 转换 为 可 使用 以下 规则 来 解析 的 字符串 （ 对应 于 ms c 运行 <unk> 使用 的 规则 ） :
numpy style: shape and strides, numpy 风格 形状 形状 和 步幅, numpy 风格 ： 形状 和 步幅
since assignment just creates references to objects, there's no alias between an argument name in the caller and <unk> and so no call by reference per <unk>, 由于 赋值 将 在 在 任何 线程 的 任何 没有 任何 的 ， 而 不是 在 的 情况 下 ， 并 在 没有 情况 下 ， 并 调用 调用 的 调用, 由于 赋值 只是 创建 了 对象 的 引用 ， 因此 在 调用者 和 被 调用者 的 参数 名称 之间 没有 别名 ， 所以 本身 是 没有 按 引用 调用 的
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
deprecated since version 3.9: <unk> now supports "[]", 3.9 版后 已 移除 : " collections . abc . abc " now supports " [ ] ", 3.9 版后 已 移除 : " builtins . tuple " now supports " [ ] "
with a line number, continue execution until a line with a number greater or equal to that is reached, 附带 一行 的 ， 将 执行 一个 " " " " 或 " 或 " " ", 如果 带有 行号 ， 则 继续 运行 ， 直到 行号 大于 或 等于 该行 号 时 停止
this function <unk> a reference to o and <unk> a reference to an item already in the tuple at the affected <unk>, 此 函数 <unk> <unk> 引用 引用 的 引用 并 将 其 在 一个 引用 的 引用 引用 的 引用, 此 函数 会 “ <unk> ” 对 o 的 引用 ， 并 丢弃 对 元组 中 已 在 受 影响 位置 的 条 目的 引用
unfortunately this is not <unk> because a different process may create a file with this name in the time between the call to <unk> and the subsequent attempt to create the file by the first process, 对于 不是 不是 不是 的 的 不同 的 ， ， 可以 在 创建 一个 的 中 ， ， 创建 一个 的 的 的 文件 中 的 的 的 的 的 的, 不幸 的 是 ， 这 是 不 安全 的 ， 因为 在 调用 " <unk> ( ) " 与 随后 尝试 创建 文件 的 进程 之间 的 时间 里 ， 其他 进程 可能 会 使用 该 名称 创建 文件
build and c api changes, 构建 和 c api 的 改变, 构建 和 c api 的 改变
an interpreter instance will <unk> a command name <unk> if and only if it has a method <unk>, 如果 " 实例 " " " " " " ， 如果 " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ " 方法, 解释器 实例 将会 识别 命令 名称 " foo " 当且 仅 当 它 有 方法 " do _ foo ( ) "
utf 8 is an 8 bit encoding, which means there are no issues with byte order in utf 8, 如果 是 是 是 一个 ， ， ， ， ， 这 意味着 它们 的 字节 8 8 8, utf 8 是 一种 8 位 编码 ， 这 意味着 在 utf 8 中 没有 字节 顺序 问题
the <unk> class for a weekday occurring in the previous or <unk> <unk>, " 类 " 类 的 <unk> 的 <unk> <unk> <unk> <unk> <unk>, <unk> 的 <unk> 类 在 <unk> 或 <unk> 发生
target is the callable object to be invoked by the "run()" method, 被 是 可 调用 对象 的 " __ ( ) " 方法, target 是 由 " run ( ) " 方法 调用 的 可 调用 对象
numeric values are stored with the least significant byte first., 数值 值 为 " 的 " 的 " 字节 串, 数字 值 在 存储 时会 将 最低 位 字节 放在 开头
text versus binary data, 文本 二进制 二进制 数据, 文本 与 二进制 数据
tells the logging system to use the class <unk> when <unk> a logger, 将 记录 系统 系统 记录 <unk> " <unk> " <unk> " <unk> ", 通知 日志 记录 系统 在 实例 化 日志 记录器 时 使用 <unk> 类
for porting c extensions to python <unk> please see porting extension modules to python 3., 对于 c python 3.3 " python 3.3 ， 请 查看 python 3.3 到 python 模块, for <unk> c extensions to python 3.0 , <unk> see 将 扩展 模块 移植 到 python 3 .
changed in version 3.3:, 在 3.3 版 更改 :, 在 3.3 版 更改 :
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
this is made even more <unk> because python will work <unk> on other windows systems which appear to be configured <unk>, 这 在 python 更 多 的 因为 因为 python 的 在 其他 上 ， 其他 windows 的 其他 情况 下 ， 会 被 传播, 更 <unk> 的 是 ， 在 其他 配置 相同 的 windows 系统 上 ， python 却 可以 工作 得 很 好
is a " <unk> file the same as a <unk>, " " " 文件 文件 与 " <unk> " 相同, " . <unk> " 文件 和 dll 文件 相同 吗 ？
names are <unk> in the top level namespace by <unk> the global namespace, i.e. the namespace of the module containing the code block, and the builtins namespace, the namespace of the module "builtins", 名称 是 由 命名 空间 层级 的 级别 的 模块 ， 模块 命名 空间 模块 命名 空间 模块 的 模块 ， 并且 模块 命名 空间 的 模块 命名 空间 空间 的 模块, 名称 在 最高 层级 命名 内 的 解析 是 通过 全局 命名 空间 ， 也 就是 包含 该 代码 块 的 模块 的 命名 空间 ， 以及 内置 命名 空间 即 " builtins " 模块 的 命名 空间
changed in version 3.3: <unk> used to be raised instead of "oserror"., 在 3.3 版 更改 : " 将 被 to " " " " " ", 在 3.3 版 更改 : <unk> 是 " ioerror " 被 引发 而 不是 " oserror "
<unk> by raymond <unk> implemented by dong hee <unk> and <unk> by <unk> <unk> in bpo <unk>, 由 由 raymond hettinger 由 <unk> <unk> <unk> 和 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> 中 贡献 。 ）, （ 由 raymond hettinger 提议 ， 由 dong hee na 实现 ， 并 由 <unk> <unk> 在 bpo <unk> 中 完成 <unk> 。 ）
garbage collection the process of <unk> memory when it is not used anymore, 在 进程 进程 时 ， 当 执行 时 时 ， 时 时 时 时 时 时, garbage collection 垃圾 回收 释放 不再 被 使用 的 <unk> 的 过程
<unk> and <unk> add and remove filter objects from the logger object, " <unk> . <unk> " 和 " logger " 和 " 对象 从 对象 中 删除 的 对象, " logger . <unk> ( ) " 和 " logger . <unk> ( ) " 可以 添加 或 移除 记录器 对象 中 的 过滤器
an application written in python does not necessarily require users to be aware of that fact, 在 python 应用程序 的 应用程序 中 ， ， ， 需要 被 视为, 用 python 编写 的 应用程序 <unk> 要求 用户 了解 这一 事实
the help message will not include parent parser or <unk> parser messages, 帮助 消息 不会 不会 存在 ， " " 或 " 或 " 解析器, 帮助 消息 将 不 包括 父 解析器 或 <unk> 解析器 的 消息
implements in place "tos tos1 + tos"., 实现 " tos tos1 tos tos1 tos " tos ", 就 地 实现 " tos tos1 + tos "
proxy objects are not hashable regardless of the <unk> this avoids a number of problems related to their <unk> mutable <unk> and prevent their use as dictionary keys, 代理 对象 不是 " " " " ， 因为 ， ， ， 这 有 了 对 的 的 ， ， ， ， 的 ， 它们 将 其 用作 字典 的 字典, <unk> 对象 不是 hashable 对象 ， 无论 被 引用 对象 是否 可 哈希 ； 这 可 避免 与 它们 的 基本 可变 <unk> 相关 的 多种 问题 ， 并 可 防止 它们 被 用作 字典 键
changed in version 3.4: updated to take advantage of the module spec feature added by pep 451, 在 3.4 版 更改 : 添加 了 " 模块 " 模块 " 添加 添加 添加 pep 451, 在 3.4 版 更改 : updated to <unk> <unk> of the module spec feature added by pep 451
(it is possible to define your own object types and methods, using classes , see classes) the method <unk> shown in the example is defined for list <unk> it adds a new element at the end of the list, 通过 是 你 的 的 类型 ， 使用 " 类型 ， 使用 " 方法 ， ， " " " " " " " " " " " " " " " " 的 " 列表 ， 列表 ， 列表 ， 新 的 列表, （ 可以 使用 类 定义 自己 的 对象 类型 和 方法 ， 请参阅 类 ） 示例 中 的 方法 " append ( ) " 是 为 列表 对象 定义 的 ； 它会 在 列表 的 最后 添加 一个 新 的 元素
a <unk> defaulting to true, 一个 <unk> 的 倍数 的, 这是 一个 标志 ， 默认 为 true
the generated "__init__()" code will call a method named <unk> if <unk> is defined on the class, " 的 " 将 被 调用 " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ ", 生成 的 " __ init __ ( ) " 代码 将 调用 一个 名为 " __ post _ init __ ( ) " 的 方法 ， 如果 在 类 上 已经 定义 了 " __ post _ init __ ( ) "
a "popen" "creationflags" parameter to specify that a new process does not inherit the error mode of the calling process, 用于 指明 新 进程 进程 的 进程 时 ， 并 将 不会 被 写入 的 的, 指明 一个 新 进程 不会 继承 调用 方 进程 的 <unk> 的 " popen " " creationflags " 形参
returns an iterator of tuples, where the i th tuple contains the i th element from each of the argument sequences or iterables, 返回 列表 元素 元素 元素 ， 元组 元素 的 元素 ， 返回 的 元素 ， 返回 一个 元素 或 返回, 返回 一个 元组 的 迭代 器 ， 其中 的 第 i 个 元组 包含 来自 每个 参数 序列 或 可 迭代 对象 的 第 i 个 元素
if the asynchronous generator exits without <unk> another value, a "stopasynciteration" exception is raised by the awaitable, 如果 异步 生成器 的 阻塞 ， 则 会 引发 " 一个 " 异常 " 异常 " 异常 " 异常, 如果 异步 生成器 没有 产生 下 一个 值 就 退出 ， 则 将 由 该 可 等待 对象 引发 " stopasynciteration " 异步
in <unk> certain characters are supported which normally would be <unk> with other characters, 在 " <unk> _ <unk> ( ) " ， " " " " ， 其他 字符 的 的 字符, 在 unicode 中 ， 支持 某些 字符 ， 这些 字符 通常 与 其他 字符 统一
a tuple of two strings: the first is the name of the local non dst <unk> the second is the name of the local dst timezone, 元组 的 的 的 第一个 参数 ， 除非 的 的 的 名称 是 第二个 的 的 的 的 名称, 两个 字符串 的 元组 ： 第一个 是 本地 非 dst 时区 的 名称 ， 第二个 是 本地 dst 时区 的 名称
this value must not be "none", and the key may not have <unk>, 值 值 不 为 " none " ， 并且 可能 可能 可能 可能 ）, 该值 项 不 可以 是 " none " ， 同时 键 也 不 可以 有 子项
for this usage pattern, the logging package provides a <unk>, 例如 ， " logging . handlers " 日志 记录 模块 的, 对于 这种 使用 场景 ， 日志 包 提供 了 " <unk> " :
<unk> data into n <unk> <unk> with equal probability, <unk> data <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 将 data 分隔 为 具有 相等 概率 的 n 个 连续 区间
"a <unk> b)" is equivalent to "a <unk> b"., " a a b " a b " " " " " " " " " " " " " " " " ", " a <unk> ( a , b ) " 等价 于 " a > > b "
hook method executed just after a command dispatch is finished, 在 " 在 " 中 ( ) " 方法 会 被 执行, 钩 方法 只 在 命令 调度 完成 后 执行
the "quantize()" method rounds to a fixed number of decimal places, " quantize ( ) " 方法 转换 为 数值 的 数值, 用 " quantize ( ) " 方法 舍入 到 固定 数量 的 十进制 位
it allows you to do things like:, 它 允许 你 需要 做 做 :, 它 可以 做 如下 事情 ：
the iterator generates a series of <unk> named tuples giving the details of each operation in the supplied code., 迭代 器 定义 了 一个 " 的 " 的 " 元组 的 元组 ， 其中 包含 的 的 的 的 的, 迭代 器 生成 一系列 " <unk> " ， 命名 为 元组 ， 提供 所 提供 代码 中 每个 操作 的 详细信息
the default is "false"., 默认值 为 " false ", 默认值 为 " false "
if none of the matrix elements are given, return the transformation matrix as a tuple of 4 elements, 如果 元素 的 元素 元素 ， 返回 将 返回 长度 为 元素 的 元素, 如 不 指定 任何 矩阵 元素 ， 则 返回 以 4 元素 元组 表示 的 <unk> 矩阵
availability: windows, linux, unix systems supporting <unk>, 可用性 : windows unix unix unix 的 / <unk> ., 可用性 ： windows 、 linux 、 unix 系统 支持 " clock _ thread _ <unk> _ id "
"pass" is a null operation when it is executed, nothing happens, 当 " 一个 " 时 ， 当 执行 时 ， 时 ， 会 触发, " pass " 是 一个 空 操作 当 它 被 执行 时 ， 什么 都 不 发生
if new is 2, a new browser page <unk> is opened if possible., 如果 新 的 新 的 新 新 的 浏览器 新 的 浏览器, 如果 new 为 2 ， 则 尽可能 打开 新 的 浏览器 页面 （ “ 标签 ” ）
context and <unk> are both optional keyword arguments, 上下文 和 <unk> 是 可选 的 可选 可选 关键字 参数, context 和 <unk> 均 是 可选 关键字 参数
this will ignore paths listed in the registry and environment variables, and also ignore "site" unless "import site" is <unk>, 这 将 在 在 中 中 的 " 中 " 和 " 和 " 和 " 并且 " 的 " ， " " " " " ", 这 将 忽略 注册表 和 环境变量 中 列出 的 路径 ， 并 忽略 " site " ， 除非 列出 " import site "
<unk> is the adpcm coded fragment packed 2 4 bit values per <unk>, <unk> 是 <unk> 的 的 的 的 的 （ 16 16 的 的 值 的 值 的 值, <unk> 是 adpcm 编码 的 片段 ， 每个 字节 打包 了 2 个 4 比特 值
this uses the <unk> <unk> directories should always end with <unk>, 这 使用 " <unk> " " " " " <unk> " " " " " ", 这会 使用 条 目的 名称 ： 目录 应当 总是 以 " / " 结尾
reading this tutorial has probably <unk> your interest in using python you should be <unk> to apply python to <unk> your real <unk> problems, 在 这个 教程 教程 使用 python 中 的 的 的 ， 你 应该 你 想 python python 的 的 <unk> <unk>, 阅读 本 教程 可能 会 增强 您 对 使用 python 的 兴趣 您 应该 <unk> 应用 python 来 解决 您 的 实际 问题
each instance has a name, and they are conceptually <unk> in a namespace hierarchy using dots <unk> as separators, 每个 实例 都 有 一个 ， 并且 它们 它们 它们 的 " " " " " " " " " " " " ", 每个 实例 都 有 一个 名称 ， 它们 在 概念 上 以点 （ <unk> ） 作为 分隔符 排列 在 命名 空间 的 层次结构 中
changed in version 3.3: changed from a factory function to a class., 在 3.3 版 更改 : 从 工厂 函数 变为, 在 3.3 版 更改 : 从 工厂 函数 变为 类
this is similar to thread local storage in which each execution thread may have a different value for a variable, 这 类似 于 线程 线程 的 线程 线程 的 线程 ， 线程 线程 可以 是 一个 可 等待 的, 这 类似 于 在线 程 局部 存储 中 每个 执行 线程 可以 具有 不同 的 变量值
converting sqlite values to custom python types, 将 sqlite 值 转换 为 python 类型 类型, 将 sqlite 值 转换 为 自定义 python 类型
the operators <unk> <unk> " ", "> ", <unk> ", and "! " compare the values of two objects, 运算符 " " " " " " " " " " " " " " " " " " " " " " " " " " 值 的 值 值, 运算符 " < " , " > " , " " , " > " , " < " 和 " ! " 将 比较 两个 对象 的 值
if the "finally" clause executes a "return", "break" or "continue" statement, the saved exception is <unk>, 如果 请求 了 " 子句 ( ) " ， 则 会 引发 " " " 异常 则 引发 " 异常, 如果 " finally " 子句 执行 了 " return " , " break " 或 " continue " 语句 ， 则 被 保存 的 异常 会 被 丢弃 :
"typing" support for type hints, " typing " 支持 的 类型, " typing " 类型 标注 支持
<unk> weekday as a decimal number <unk>, " ' d ' " 十进制 十进制 十进制 数 的 数字, " % w " 十进制 数 [ 0 ( 星期日 ) , 6 ] 表示 的 周 <unk>
if this is set to a non empty string it is equivalent to specifying the " <unk> option., 如果 此 设为 为 一个 空 字符串 ， 它 将 " " " " " " ", 此 变量 如果 被 设为 一个 非空 字符串 ， 它 就 相当于 指定 " u " 选项
return a list of all variables in the context object., 返回 上下文 中 的 所有 的 列表, 返回 上下文 对象 中 的 所有 变量 的 列表
the <unk> is passed to any new <unk> objects that are created., <unk> _ <unk> _ <unk> ( ) " 函数 的 新 的 新 的 " 对象 " 对象, " <unk> " 会 被 传给 任何 新创建 的 " <unk> " 对象
returns a new instance of the <unk> class, 返回 一个 " memoryhandler " 类 的 实例, 返回 一个 " <unk> " 类 的 新 实例
close close the current window <unk> to save if <unk>, 关闭 关闭 当前 窗口 窗口 窗口 为 <unk> ， 则 如果 <unk>, 关闭 关闭 当前 窗口 （ 如果 未 保存 则 询问 ）
(contributed by batuhan taskaya in bpo <unk>, （ 由 batuhan taskaya 在 bpo <unk> 中 贡献 。 ）, （ 由 batuhan taskaya 在 bpo <unk> 中 贡献 。 ）
usually there are four different <unk>, 通常 有 不同 不同 的 不同, 通常 有 <unk> 形式
this module provides a comprehensive interface for compressing and decompressing data using the bzip2 compression algorithm., 此 模块 提供 了 用于 接口 和 压缩 使用 数据 的 数据 压缩 数据, 此 模块 提供 了 使用 bzip2 压缩算法 压缩 和 解压 数据 的 一套 完整 的 接口
they can be used by third party tools such as type <unk> <unk> <unk> etc., 它们 在 第三方 的 表达式 类型 ， 类型 : <unk> <unk> <unk> <unk> <unk>, 类型 标注 可 被 用于 第三方 工具 ， 比如 类型 检查 器 、 集成 开发 环境 、 静态 检查 器 等
if stack information is available, it's appended after the exception information, using <unk> to transform it if necessary., 如果 在 <unk> 被 ， ， 则 会 尝试 " 异常 ( ) " 异常 时 ， 如果, 如果 栈 信息 可用 ， 它 将 被 添加 在 异常 信息 之后 ， 如 有 必要 请 使用 " <unk> ( ) " 来 转换 它
<unk> is recursively applied to the first word of the command <unk> all other words in the line are left <unk>, <unk> 是 在 在 <unk> 中 中 的 的 中 所有 中 所有 的 所有 中 所有 的 所有 中 的 所有 中 的 所有, 别名 会 递归 地 应用 到 命令行 的 第一个 单词 ； <unk> 的 其他 单词 不会 受 影响
<unk> measure execution time of small code <unk>, " <unk> " <unk> 的 执行 时间 的 时间, " timeit " 测量 小 代码 片段 的 执行 时间
this class method constructs a "fraction" representing the exact value of <unk> , which must be a "float", 这个 类 方法 会 一个 " " " 的 的 值 的 " ， ， 必须 必须 为 一个 ", 此类 方法 可 构造 一个 " fraction " 来 表示 <unk> 的 精确 值 ， 该 参数 必须 是 一个 " float "
this information is stored and used when "parse_args()" is called, 此 信息 会 被 调用 时 ， " " " " ", 这些 信息 在 " parse _ args ( ) " 调用 时 被 存储 和 使用
(contributed by serhiy storchaka in bpo <unk>, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）
<unk> also provides the following method:, " " " 还 还 提供 了 以下 方法 :, " <unk> " 还 提供 了 以下 方法 ：
kwargs is a dictionary of keyword arguments for the target invocation, <unk> 是 一个 字典 的 关键字 参数 的 参数, kwargs 是 目标 调用 的 关键字 参数 字典
generally <unk> it should not be necessary for your code to <unk> the <unk> of particular values, 因此 ， 它 应该 需要 需要 的 的 代码 的 的 值 的 值, 一般来说 你 的 代码 应该 没有 必要 “ 知道 ” 特定 值 的 名称
in this case, user defined classes can support subscription by providing a <unk> <unk>, 在 这种 情况 下 用户 定义 定义 类 定义 的 支持 通过 " <unk> " " ", 在 此 情况 下 ， 用户 自定义 类型 可 通过 提供 " __ class _ getitem __ ( ) " 类 方法 来 支持 抽取 操作
this flag is shared with <unk> <unk> locking is enforced on files that do not have the group execution bit <unk> set., 这个 旗标 是 " <unk> " ， " " " " " " " " " 不 不 不 " " " " " " " " " " " " " " " ", 此 旗标 是 与 " s _ <unk> " 共享 的 ： 文件 / 记录 锁定 会 针对 未 设置 分组 执行 位 ( " s _ <unk> " ) 的 文件 <unk>
returns the bitwise negation of o on success, or "null" on failure, 返回 o1 的 的 按位 ， 如果 失败 ， 返回 " null ", 返回 o 的 按位 <unk> 后 的 结果 ， 如果 失败 ， 返回 " null "
preexec_fn , <unk> , cwd and <unk> parameters are not set;, 如果 x , <unk> , , <unk> , <unk> , <unk> , ", preexec _ fn , pass _ fds , cwd 和 start _ new _ session <unk> 设置 ；
changed in version 3.9: raises a "valueerror" if all weights are zero., 在 3.9 版 更改 : 引发 引发 " valueerror " 则 引发 " valueerror ", 在 3.9 版 更改 : 如果 <unk> <unk> 为 负值 则 将 引发 " valueerror "
unary arithmetic and bitwise operations, 一元 和 和 和 操作, 一元 算术 和 位 运算
port specific changes: mac os x, 特定 于 于 的 的 的 的 ：, 特定 于 mac os x 的 更改 ： mac os x
this is the equivalent of the python expression " <unk>, 这 相当于 python 表达式 " " " " ", 等价 于 python 表达式 " o "
in many cases, building an extension is more <unk> since additional preprocessor defines and libraries may be needed, 许多 许多 许多 是 一个 别名 ， ， 因为 更 ， 因为 的 更 ， ， 定义 定义 了 并且 的 的, 更 多 时候 ， 构建 一个 扩展 会 复杂 的 多 ， 需要 额外 的 <unk> 处理器 定义 和 库
build and c api changes, 构建 和 c api 的 改变, 构建 和 c api 的 改变
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
is the result an <unk>, 为 结果 是 一个, 结果 错误 吗 ？
return the result of the call on success, or raise an exception and return null on failure., 成功 时 返回 结果 ， 失败 时 抛出 一个 异常 并 返回 null null, 成功 时 返回 结果 ， 在 失败 时 抛出 一个 异常 并 返回 null
(contributed by serhiy storchaka in bpo <unk>, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）
alias of <unk> for compatibility with older python versions., " " " ( ) " 的 的 的 python 的 的 的 python, " <unk> " 的 别名 ， 与 旧版本 python 保持 兼容性
<unk> don't use non ascii characters in identifiers if there is only the <unk> chance people <unk> a different language will read or maintain the code., " ' w ' w : 不 使用 " 如果 在 如果 在 的 <unk> ， 则 会 被 <unk> ， ， ， 将 将 被 关闭, 同样 ， <unk> 只有 很小 的 可能 ， 遇到 说 不同 语言 的 人 阅读 或 维护 代码 ， 也 不要 在 标识符 中 使用 非 ascii 字符
<unk> license <unk> for python 2.0, <unk> <unk> <unk> <unk> python <unk> 的 python, 用于 python 2.0 的 beopen . com 许可 协议
whether line buffering is enabled., 是否 一行 的 行, 是否 启用 行 缓冲
a proxy object has methods which invoke corresponding methods of its referent (although not every method of the referent will necessarily be available through the <unk>, 代理 对象 具有 具有 方法 的 方法 的 方法 ， " __ ( ) " 方法 的 的 方法 ， 会 被 <unk> <unk>, 代理 对象 代理 了 指涉 对象 的 一系列 方法 调用 ( 虽然 并 不是 指涉 对象 的 每个 方法 都 有 必要 被 代理 )
when attributes must be set as well as <unk> the class must define a "__setattr__()" method <unk> and it must do so <unk>, 当 属性 必须 为 " " " " " " " " 类 ， " 必须 定义 的 " __ ( __ ( ) " 方法 的 ， 它 必须 必须 为 ", 当 某些 属性 既 需要 读取 又 需要 设置 时 ， 类 还 必须 定义 " __ setattr __ ( ) " 方法 ， 并且 这样 做 必须 <unk>
this method returns the starting key., 此 方法 返回 返回 的, 此 方法 将 返回 起始 键
returns a copy of x with the sign set to 0., 返回 x y y " 的 ", 返回 x 的 副本 ， 符号 设 为 0
for more advanced use cases, the underlying "popen" interface can be used directly., 更 多 的 ， 请 使用 " " " " " " " " 来 使用, 对于 更 进阶 的 用例 ， 也 可以 使用 底层 的 " popen " 接口
the first item is the name of the field, the second item specifies the type of the <unk> it can be any ctypes data type., 第一个 是 <unk> 的 的 的 的 ， 指明 是 <unk> 类型 的 类型 ； 它 是 任何 数据 的 数据, 元组 的 第一项 是 字段名 称 ， <unk> 指明 字 段 类型 ； 它 可以 是 任何 ctypes 数据类型
changed in version 3.9: <unk> in <unk> in may be set in the unlimited api., 在 3.9 版 更改 : 在 在 <unk> 中 中 be 中 中 中 中 中, 在 3.9 版 更改 : slots in " <unk> " in may be set in the <unk> api .
python can now be built for windows 10 <unk>, python 可以 现在 可以 为 windows windows windows ", python 现在 可以 针对 windows 10 <unk> 进行 编译
the line number in the file where the definition <unk>, " <unk> " 中 的 的 文件, 定义 在 文件 中 起始 位置 的 行号
<unk> doesn't <unk> external entities and simply returns the <unk> entity <unk>, " xml . <unk> . <unk> " 和 <unk> <unk> 和 <unk> <unk> ， 返回 " <unk> . <unk> ( ) ", " xml . dom . <unk> " 不会 扩展 外部 实体 ， 只是 简单 地 返回 未 扩展 的 实体
name may be any type of file <unk> <unk> symbolic link, etc.), name 可以 是 任何 文件 的 " <unk> " , " _ type " ) ", name 可以 为 任意 类型 的 文件 （ 目录 、 fifo 、 符号 链接 等等 ）
a binary stream using an in memory bytes buffer, 用于 二进制 以 以 一个 内存 字节 的 缓冲区, 一个 使用 <unk> 字节 缓冲区 的 二进制 流
raises an auditing event <unk> with arguments <unk> "key"., 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " key " , " key " , " key ", 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " <unk> _ name " , " key "
calling python functions from c, python c 中 的 函数, 在 c 中 调用 python 函数
the return value is "true" if more input is required, "false" if the line was <unk> with in some way (this is the same as <unk>, 如果 如果 存在 ， 则 如果 " true " ， 则 会 被 与 为 <unk> ， 则 与 " <unk> ", 如果 要求 更 多 输入 则 返回值 为 " true " ， 如果 <unk> 按 某种 方式 被 处理 则 返回值 为 " false " ( 这 与 " <unk> ( ) " 相同 )
the built in function "help()" <unk> the <unk> help system in the interactive interpreter, which uses "pydoc" to generate its documentation as text on the console, 内置 函数 " " ( ) " 函数 的 在 在 解释器 中 中 的 的 ， 在 在 解释器 的 的 的 的, 内置 函数 " help ( ) " 会 发起 调用 交互式 解释器 的 在线 帮助 系统 ， 该 系统 使用 " pydoc " 在 终端 上 生成 文本 形式 的 文档 内容
with <unk> parameters, this was somewhat <unk>, 使用 " <unk> " ， ， 此 方法 会 被 " ", 使用 <unk> <unk> <unk> 相当 <unk>
the above module level convenience functions, which <unk> to the root <unk> call "basicconfig()" to ensure that at least one handler is available, " 模块 " 模块 包含 了 " <unk> " 的 " 的 " <unk> ( ) " 的 调用 调用 调用 ， ， 在 一个 处理, 上述 模块 层级 的 便捷 函数 均 委托 给 根 日志 记录器 ， 它们 会 调用 " basicconfig ( ) " 以 确保 至少 有 一个 处理程序 可用
however, when calling <unk> for example:, 但是 ， " <unk> ( ) " 方法 :, 但是 ， 在 调用 " func " 时 ， 例如 ：
the following public attributes are available, their name starts with an underscore to not <unk> with exported function <unk>, 以下 的 属性 属性 是 的 的 的 ， ， 的 的 ， 并 将 使用 " 函数 ( ) " 函数, 还有 下面 这些 属性 可用 ， 他们 的 名称 以 下划线 开头 ， 以 避免 和 导出 函数 <unk> :
cross platform compatibility note: because of the nature of text editors on non unix platforms, it is <unk> to use a <unk> of spaces and tabs for the indentation in a single source file, 下面 的 平台 ， 在 windows 上 的 的 的 的 的 ， ， ， 使用 " <unk> " 中 的 的 的 的, 跨平台 兼容性 注释 : 由于 非 unix 平台 上 文本编辑 器 本身 的 特性 ， 在 一个 源文件 中 混合 使用 制表符 和 空格符 是 <unk> 的
the reverse parameter still maintains sort <unk> <unk> that records with equal keys <unk> the original <unk>, 下面 的 仍然 仍然 ： ： " <unk> " ， ， 与 " <unk> " 的 " 的 " 的 " <unk> ", reverse 参数 仍然 保持 排序 <unk> （ 因此 具有 相等 键 的 记录 保留 原始 顺序 ）
changed in version 3.2: added support for <unk> <unk> and code objects., 在 3.2 版 更改 : 添加 了 对 " <unk> " 和 " <unk> " 代码 ", 在 3.2 版 更改 : 添加 了 对 thread . lock ， threading . lock 和 代码 对象 的 支持
the statement "import <unk> results in this call:, " try " 的 的 <unk> 中 的 的, 语句 " import spam . <unk> " 的 结果 将 为 以下 调用 :
changed in version 3.2: in previous versions, keyword arguments were not allowed, and <unk> was required, 在 3.2 版 更改 : 在 <unk> <unk> <unk> <unk> 参数 <unk> <unk> and <unk> and and <unk>, 在 3.2 版 更改 : 在 之前 的 版本 中 ， 不 允许 关键字 参数 ， 并且 要求 必须 有 ident
the returned bytes object is therefore <unk> as long as the length of data ., 返回 的 字节 bytes 对象 的 " bytes " 作为 作为 的 的 的 的 的 的 长度, 因此 返回 的 字节 对象 的 长度 是 data 的 两倍
"dbm" interfaces to unix <unk>, " sys . <unk> " unix, " dbm " unix " 数据库 " 接口
since fields with a default value must come after any fields without a default, the defaults are applied to the <unk> parameters, 由于 参数 的 参数 默认值 为 " 必须 " 任何 值 ， 默认值 为 一个 默认值 为 " 的 默认值, 如果 一个 默认 <unk> 必须 跟 其他 没有 默认值 的 域 在 一起 出现 ， defaults 就 应用 到 最 右边 的 参数
the "doctest" and "unittest" modules contains frameworks for writing unit tests that automatically <unk> code and <unk> that the expected output is produced, " continue " 和 " 模块 " 模块 的 的 " 的 " ， ， 了 " <unk> " 和 " <unk> " 的 的 输出 的 输出, " doctest " 和 " unittest " 这 两个 模块 包含 了 用于 编写 单元测试 的 框架 ， 并 可 用于 <unk> 所 编写 的 代码 ， 验证 预期 的 输出 是否 产生
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
positional only parameters can be defined by including a "/" character in the parameter list of the function definition after them, for example <unk> and <unk> in the following:, 仅限 位置 参数 可以 通过 " 的 " ) " 来 在 的 函数 中 ， 的 函数 ， ， ， <unk> 的 <unk> 和 <unk> 中 的, 仅限 位置 形参 可 通过 在 函数 定义 的 形参 列表 中 它们 之后 包含 一个 " / " 字符 来 定义 ， 例如 下面 的 <unk> 和 <unk> :
for a complete list of formatting <unk> see <unk> and <unk> behavior., 对于 列表 的 的 的 列表 列表 ， 请参阅 " <unk> ( ) " 和 " <unk> ( ) ", 要 获取 格式 指令 的 完整 列表 ， 请参阅 strftime ( ) 和 strptime ( ) 的 行为
new in version 3.5: the command line option " <unk>, 3.5 新版 功能 : the 选项 " 选项 " 选项, 3.5 新版 功能 : 命令行 选项 " locals "
so, the preferred approach to task <unk> is to <unk> all access to a resource in a single thread and then use the "queue" module to feed that thread with requests from other threads, 所以 " <unk> " 的 " 的 " " " " " 一个 一个 一个 一个 ， ， ， ， 使用 线程 其他 线程 的 线程, 因此 ， 实现 <unk> 协作 的 首选 方法 是 将 所有 对 资源 的 请求 集中 到 一个 线程 中 ， 然后 使用 " queue " 模块 向 该 线程 <unk> 来自 其他 线程 的 请求
import <unk> by default, uses the builtin "__import__()" function to do its importing, 导入 " 默认 " " " " ( ) " 将 使用 函数 函数 的 函数, 导入 解析 默认 使用 内置 的 " __ import __ ( ) " 函数 来 执行 导入
by default, pdb sets a handler for the sigint signal (which is sent when the user <unk> <unk> c" on the <unk> when you give a "continue" command, 默认 情况 下 ， 一个 一个 " ， " " " <unk> <unk> <unk> 时 ， 当 在 时 时 时 ， 当 你 时 时 时 时 时 时 时 时 时 时 时 时 时 时 时 时 时 时, 默认 情况 下 ， 当 发出 " continue " 命令 时 ， pdb 将 为 sigint 信号 设置 一个 处理程序 （ sigint 信号 是 用户 在 控制台 按 " ctrl c " 时 发出 的 ）
if visit returns a non zero value that value should be returned immediately., 如果 给出 返回 返回 一个 非空 ， 则 返回 应当 返回 返回 " true ", 如果 visit 返回 非零值 ， 则 该值 应当 被 立即 返回
<unk> <unk> is implementation defined and not necessarily stable between versions, but it is guaranteed not to be a valid "zoneinfo" key., " <unk> " 是 实现 的 不 不 不 的 的 的 的 的 但 但 但 它 是 有效 的 ", " zoneinfo " 的 " repr " 是 由 具体 实现 定义 的 并且 不 一定 会 在 不同 版本 间 <unk> ， 但 它 保证 不会 是 一个 有效 的 " zoneinfo " 键
an empty class definition will do <unk>, 一个 类 类 定义 的 :, 这种 情况 适合 定义 一个 <unk> :
headers are stored and returned in case <unk> form, but field names are matched case <unk>, 这样 在 在 中 中 的 " 中 ( ) " 返回 " 的 " ， 但 但 是 是 是 的 的, 虽然 头字 段 的 存储 和 获取 都 是 保留 其 原始 大小写 的 ， 但是 字段名 的 匹配 是 大小写 不 敏感 的
renames <unk> to <unk>, 将 " " 重命名 为 " 重命名 " ", 将 " os . <unk> ( ) " 重命名 为 " os . <unk> ( ) "
<unk> all of these recipes and many, many others can be installed from the more itertools project found on the python package <unk>, 所有 这些 的 所有 和 所有 ， ， ， ， 可以 在 python python 包 的 更 多 信息 ， 更 多 信息 的 更 多 信息, 基本上 所有 这些 <unk> 和 <unk> 其他 的 <unk> 都 可以 通过 python package index 上 的 more itertools 项目 来 安装 :
<unk> <unk> <unk> takes one element from each iterable and returns them in a <unk>, " <unk> . <unk> ( ) " 从 一个 元素 ， 每个 元素 的 元素 ， 并 将 返回 一个 元素, " zip ( <unk> , <unk> , ... ) " 从 每个 可 迭代 对象 中 选取 单个 元素 组成 列表 并 返回 :
the tz search path can also be configured at runtime using the <unk> function, 这个 模块 路径 可以 可以 使用 " 使用 . py ( ) " 的 使用 的 使用 :, tz 搜索 路径 也 可 在 运行 时 使用 " reset _ <unk> ( ) " 函数 来 配置
(note that some of these attributes can change when a module is <unk>, 请 注意 ， 这些 属性 可以 在 在 模块 时 ， 可以 在 " 模块 " 模块, （ 要 知道 当 重新 加载 一个 模块 的 时候 ， 那些 属性 某 部分 可以 改变 ） ：
sets the result of the work associated with the "future" to the <unk> exception ., 设置 关联 的 " 的 " 的 " 的 " <unk> " 异常, 设置 " future " 关联 工作 的 结果 给 " exception " exception
the "dircmp" class compares files by doing shallow comparisons as described for <unk>, " dircmp " 类 的 文件 （ 例如 " <unk> ( ) " 的 的 例如, " dircmp " <unk> " filecmp . cmp ( ) " 中 所 描述 的 那样 对 文件 进行 shallow 比较
the maximum value allowed for the timeout parameter of blocking functions <unk> <unk> <unk> etc.), 将 值 的 的 的 的 的 函数 的 函数 函数 " <unk> " " " " " ", 阻塞 函数 （ " lock . acquire ( ) " , " rlock . acquire ( ) " , " condition . wait ( ) " , ... ） <unk> 参 timeout 允许 的 最大值
to avoid this, these classes need to call <unk> on the type object during instance <unk>, 要 避免 要 ， 这些 方法 来 创建 " type " 对象 " 对象 " <unk> " " ", 要 避免 这种 情况 ， 这些 类 需要 在 实例 撤销 分配 期间 在 类型 对象 上 调用 py _ decref
<unk> the installing python modules guide for complete documentation for <unk>, " python python 模块 （ 请参阅 有关 的 文档 文档 的 文档, （ 请参阅 安装 python 模块 指南 以 了解 " pip " 的 完整 文档 。 ）
now errors are checked in left recursive rules to avoid cases where such errors do not get handled in time and appear as long <unk> <unk> in other <unk>, 现在 错误 将 在 在 " 情况 下 ， " ， " ， 但 不会 在 不 时间 的 时间 ， 并 在 其他 情况 下 ， 并 在 其他 情况 下 ， <unk>, 现在 ， 在 左 递归 规则 中 检查 错误 ， 以 避免 此类 错误 没有 得到 <unk> ， 并 在 其他 地方 出现 <unk> 崩溃 的 情况
add "true" or "false" if "true", a new binding will be added, otherwise it will replace a former binding, 如果 " true " ， 则 将 " 新 " ) " 将 将 被 调用 ， 否则 将 将 引发 " valueerror ", add " true " 或 " false " 如为 " true " 则 将 添加 一个 新 绑定 ， 否则 将 取代 先前 的 绑定
if address is "none" then an arbitrary one is <unk>, 如果 address 为 " none none " ， 则 一个 一个 一个 一个 一个, 如果 address 是 " none " , 则 允许 和 任意 主机 的 请求 建立 连接
the following example looks the same as our previous re, but <unk> the "'r'" in front of the re string., 下面 的 示例 ： 与 与 <unk> 的 的 ， 但 但 " " " " " 的 的 的, 以下 示例 与 我们 之前 的 正则 看起来 相同 ， 但 省略 了 正则 字符串 前面 的 " ' r ' "
to accept only long options, <unk> should be an empty string, 要 接受 只 ， ， ， ， 应当 应当 空 空 字符串, 如果 <unk> 接受 长 选项 ， 则 <unk> 应为 一个 空 字符串
(contributed by joannah nanjekye in bpo <unk>, （ 由 joannah nanjekye 在 bpo <unk> 中 贡献 。 ）, （ 由 joannah nanjekye 在 bpo <unk> 中 贡献 。 ）
all except " " and "! " are <unk>, 所有 " " " " " 和 " " " " ", 所有 的 异常 ， " " 和 " ! " ， 都 是 抽象 的
changed in version 3.6: accepts a path like object for path and paths ., 在 3.6 版 更改 : 接受 一个 类 路径 路径 路径 路径, 在 3.6 版 更改 : 接受 一个 类 路径 对象 用于 path 和 paths
deprecated since version 3.6: openssl has deprecated all version specific protocols, 3.9 版后 已 移除 : deprecated has deprecated specific specific specific specific, 3.6 版后 已 移除 : openssl has deprecated all version specific <unk>
simple usage: checking examples in docstrings, class 的 示例 示例 示例 示例, 简单 用法 ： 检查 <unk> 中 的 示例
this marker indicates that execution of a python function has <unk>, 该 函数 一个 python python 执行 函数 " <unk> . <unk> ( ) " 函数, 这个 标记 表示 一个 python 函数 的 执行 已经 开始
the names in the module namespace are updated to point to any new or changed objects., 在 模块 中 的 名称 名称 到 一个 新 的 或 或 对象, 模块 命名 空间 中 的 名称 重新 指向 任何 新 的 或 更改 后 的 对象
note: to create an empty set you have to use <unk> not <unk> the latter creates an empty dictionary, a data structure that we discuss in the next section., 要 创建 一个 一个 空 ， ， 你 需要 使用 " <unk> " ， 在 一个 一个 一个 一个 ， ， 在 一个 <unk> 中 的 <unk>, 注意 ： 要 创建 一个 <unk> 你 只能 用 " set ( ) " 而 不能 用 " { } " ， 因为 后者 是 创建 一个 空 字典 ， 这种 数据结构 我们 会 在 下 一节 进行 讨论
deprecated since version 3.9: <unk> now supports "[]", 3.9 版后 已 移除 : " collections . abc . abc " now supports " [ ] ", 3.9 版后 已 移除 : " collections . abc . <unk> " now supports " [ ] "
return the largest number representable in the given context (or in the current thread's context if no context is <unk> that is smaller than the given operand., 返回 给定 给定 的 上下文 中 的 的 的 的 的 上下文 的 上下文 ， ， 上下文 的 " " " " " ", 返回 小于 给定 操作数 的 上下文 中 可 表示 的 最大 数字 （ 或者 当前 线程 的 上下文 中 的 可 表示 的 最大 数字 如果 没有 给定 上下文 ）
the return value <unk> has the same meaning as the key parameter to <unk>, 返回值 的 值 ， " 作为 " 作为 " 作为 形参 形参, 返回值 used _ key 与 " get _ value ( ) " 的 key 形参 具有 相同 的 含义
return the names of defined <unk>, 返回 定义 的 的 名称 名称, 返回 定义 字体 的 名字
return the argument default values of the function object op, 返回 参数 的 默认 的 值 值, 返回 函数 对象 op 的 参数 默认值
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
" <unk> specifies one of the <unk> sort values to sort the output by, " <unk> " <unk> " ， " 一个 " <unk> " 的 " 值 的 值, " s " 指定 " sort _ stats ( ) " 排序 值 之一 以 对 输出 进行 排序
implementation details of a number of macros and functions are now <unk>, 实现 " a . 了 " 的 的 函数 函数 是 是 现在 是 ：, 多个 宏 和 函数 的 实现 细节 现在 已 被 隐藏 :
<unk> for <unk> comparisons, <unk> : <unk> <unk> 运算, " compare _ op " 用于 <unk> 比较
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
the <unk> slot of <unk> has been removed, " <unk> . <unk> " 的 " <unk> _ <unk> ( ) " 的 已 移除, pytypeobject 的 " tp _ print " 空位 已 被 移除
e.g. <unk> returns <unk> <unk>, 例如 " " " " " " " " " " " " " " " " " " ", 例如 " <unk> ( " / / host / <unk> / dir " ) " 返回 " ( " / / host / <unk> " , " / dir " ) "
case is not <unk> so, for example, <unk> <unk> <unk> and <unk> are all acceptable <unk> for positive infinity., 不 不 <unk> （ 例如 " ' + ' " , " ' , ' , ' " 和 所有 <unk> ， 所有 <unk> 的 所有 <unk>, 字母 大小写 都 可以 ， 例如 ， “ <unk> ” 、 “ <unk> ” 、 “ infinity ” 、 “ infinity ” 都 可以 表示 正 无穷大
this always returns "false" for recursive objects., 此 总是 返回 " false " 返回 " false ", 此 函数 对于 递归 对象 总是 返回 " false "
the file is stored compressed <unk> os x <unk>, 文件 是 <unk> 的 <unk> 的 x x x, 文件 是 压缩 存储 的 （ mac os x <unk> + ）
returns a tuple of <unk> objects that define the fields for this dataclass, 返回 " " " " 的 的 对象 ， 其中 的 的 的 的, 返回 " field " 对象 的 元组 ， 用于 定义 此 数据 类 的 字 段
signal the executor that it should free any resources that it is using when the currently pending futures are done executing, " pwd " 应当 应该 应该 在 其他 情况 下 ， 当 使用 的 的 时 ， 时 被 取消, <unk> 执行 的 future 对象 完成 执行 后 向 <unk> 发送 信号 ， 它 就 会 释放 正在 使用 的 任何 资源
this type is not widely supported by c <unk> on a typical <unk> an unsigned short can be used for <unk> but not for math operations, 这个 类型 不是 c c 的 c " c " 的 " 的 " ， " " " " " " " " " " " " ", 此 类型 并 不 被 c 编译器 <unk> ： 在 <unk> 典型 的 机器 上 ， 可以 使用 unsigned short 进行 存储 ， 但 不会 被 用于 数学 运算
this function is typically called before any loggers are instantiated by applications which need to use custom logger behavior, 此 函数 在 调用 任何 任何 任何 任何 都 会 被 重载 ， 它 使用 " 的 ", 此 函数 通常 会 在 需要 使用 自定义 日志 记录器 行为 的 应用程序 实例 化 任何 日志 记录器 之前 被 调用
now "for y in <unk> in comprehensions is as fast as a simple assignment "y <unk>, 现在 " " " " " " " " " 作为 作为 作为 [ [ ] ] " [ ] ] ", 现在 推导 式 中 的 " for y in [ <unk> ] " 会 与 简单 赋值 语句 " y <unk> " 一样 快速
new in version 3.1., 3.1 新版 功能 ., 3.1 新版 功能 .
return the square root of the argument to full <unk>, 返回 指定 的 的 的 的 的 的 的, 返回 参数 的 <unk> 精确 到 完整 精度
sends the signal signal to the <unk>, 将 信号 至 屏幕 到, 将 信号 signal 发送给 子 进程
<unk> must be nonzero and have at most <unk> digits, <unk> 必须 为 " <unk> " 和 具有 最 大多数 的 的, " modulo " 必须 不为 <unk> 至多 有 ' precision ' 位
if the value is an integer, it will be passed <unk>, 如果 value value 是 ， 则 将 被 传递 给 ", 如果 该值 为 一个 整数 ， 它 将 被 原样 传递
usually an alias for <unk>, 通常 是 " c _ <unk> " 的 一个 别名, 通常 是 " c _ <unk> " 的 一个 别名
the original specification for packages is still available to read, although some details have changed since the writing of that document., 用于 的 的 的 是 是 为了 <unk> ， ， ， ， ， ， ， ， ， ， 因为 ， 这 在 的 的 的, 原始 的 包 规格 说明 仍然 可以 查阅 ， 但 在 撰写 该 文档 之后 许多 相关 细节 已 被 修改
create a shared "list" object and return a proxy for it., 创建 一个 共享 " " " " " 并 返回 它 的 代理, 创建 一个 共享 的 " list " 对象 并 返回 它 的 代理
see also the <unk> <unk>, 另 请参阅 " <unk> . <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk>, 另 请参阅 " total _ <unk> ( ) " 装饰 器
indicates if a message of severity level would be processed by this logger, 如果 指定 了 记录器 的 级别 的 则 此 属性, 指示 此 记录器 是否 将 处理 级别 为 level 的 消息
key a string: key (e.g. <unk> or key symbol (e.g. <unk>, key 一个 键 键 （ 例如 " 或 " 键 " 键 " ） ）, key 一个 字符串 : 键 ( 例如 " a " ) <unk> ( 例如 " space " )
blocks until there is something to receive, 将 直到 一直 阻塞 到 阻塞 到 阻塞, 此 方法 在 接收 到 数据 前 将 一直 阻塞
<unk> a stack traceback such as is provided by <unk> showing the call <unk>, <unk> 一个 <unk> 被 被 由 " <unk> ( ) " ， 被 调用 时 ， " 调用 " ", <unk> : 与 " traceback . print _ stack ( ) " 所 提供 的 类似 的 栈 回溯 信息 ， 显示 调用 的 层级 结构
note that all these functions are assumed to return c "int", which is of course not always the <unk> so you have to assign the correct "restype" attribute to use these functions., 请 所有 这些 这些 函数 都 被 用于 ， 而 不是 " 的 " ， 因此 ， 因此 ， 它 使用 " " " " " ", 请 注意 所有 这些 函数 都 应 返回 c " int " ， 当然 这 也 不是 绝对 的 ， 因此 你 必须 分配 正确 的 " restype " 属性 以 使用 这些 函数
the argument must be an instance of <unk> including subclasses (such as <unk>, 参数 必须 为 " " " " 实例 ， " " " " " " " " " " " ", 参数 必须 是 " pydatetime _ date " 包括 其子 类 ( 例如 " pydatetime _ datetime " ) 的 实例
a "tzinfo" <unk> methods should therefore be <unk> to accept a <unk> argument of "none", or of class <unk>, " " " ( ) " 方法 是 " " " " " " " " " " " " " " " " " " " " " " " ", 这样 " tzinfo " 子类 的 方法 应当 准备 好 接受 <unk> 参数值 为 " none " 或是 " datetime " 类 的 实例
the numeric constant for the bzip2 compression method, " 的 " 的 的 方法 方法, bzip2 压缩 方法 的 数字 常数
object oriented programs manipulate collections of objects, 对象 对象 的 对象 对象 的 对象 的 对象, 面向对象 程序 会 操作 一组 对象
if <unk> in <unk> is "true", <unk> can modify the permission bits of a symbolic <unk>, 如果 <unk> _ <unk> _ <unk> " ， 则 " " " " ， 则 " " " " ， 则 会 返回 的 的, 如果 " os . <unk> in os . supports _ follow _ symlinks " 为 " true " ， 则 " <unk> ( ) " 可以 修改 符号 链接 的 权限 位
"syslog" unix syslog library routines, unix syslog 库 例程, unix syslog 库 例程
there are two more things to do before you can use your new <unk> compiling and linking it with the python system, 有 两个 更 多 ， 你 可以 你 自己 的 新 的 " <unk> ( ) " 和 python python ， 并 并 其 python 并, 在 你 能 使用 你 的 新 写 的 扩展 之前 ， 你 还 需要 做 <unk> 事情 ： 使用 python 系统 来 编译 和 链接
if it is 2, <unk> <unk> is <unk> if it is 3, <unk> <unk> <unk> is pushed, 如果 它 为 " " " " ， 则 会 被 " " " " " " " " " " " " " " " " " " ", 如果 为 2 ， 则 推入 " slice ( tos1 , tos ) " ； 如果 为 3 ， 则 推入 " slice ( <unk> , tos1 , tos ) "
bpo <unk> the ssl module now <unk> with <unk> <unk>, bpo <unk> : " 模块 . <unk> " <unk> " <unk> " <unk> ", bpo <unk> : ssl 模块 现在 使用 <unk> 2.7 . 1 编译
more information can be found in <unk>, 更 多 信息 可以 在 " 中 . <unk> ( ) " 中, 更 多 详情 参见 元类
if a bytes object is specified as first argument, the buffer is made one item larger than its length so that the last element in the array is a nul termination character, 如果 一个 字节 字节 对象 对象 为 第一个 参数 ， 则 返回 " 的 长度 ， 长度 ， 长度 为 一个 元素 的 元素 ， 元素 ， 元素 为 一个 元素, 如果 将 一个 字节 串 对象 指定 为 第一个 参数 ， 则 将 使 缓冲区 大小 <unk> 长度 多 一项 以便 数组 的 最后 一项 为 一个 nul <unk>
customizing default python versions, 自定义 的 python python, 自定义 默认 的 python 版本
the "break" statement, like in c, <unk> out of the <unk> enclosing "for" or "while" loop., " " " " " " " " " " " " " " " " 或 " <unk> " 的 ", " break " 语句 ， 和 c 中 的 类似 ， 用于 <unk> 最近 的 " for " 或 " while " 循环 .
(contributed by <unk> <unk> <unk> <unk> and <unk> <unk> reedy in bpo <unk>, （ 由 <unk> <unk> <unk> 和 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> , <unk> <unk> 和 <unk> jan reedy 在 bpo <unk> 中 贡献 。 ）
the current version does not do this., 当前 的 版本 : 不 不 不 不, 当前 版本 并 不会 这样 做
why does the result of "id()" appear to be not <unk>, 为什么 <unk> 的 的 的 的 的 的, 为什么 " id ( ) " 的 结果 看起来 不是 唯一 的 ？
hint: if you want to specify default values for a specific section, use <unk> before you read the actual file., 如果 你 想要 指定 指定 的 值 ， 则 使用 " ， 请 使用 " <unk> ", 提示 ： 如果 你 想要 为 特定 的 小节 指定 默认 的 值 ， 请 在 读取 实际 文件 之前 使用 " read _ dict ( ) "
it <unk> about plus and <unk> <unk>, 它 的 <unk> 的 和 ‘, 它 能 识别 正负号 :
new in version 3.6., 3.6 新版 功能 ., 3.6 新版 功能 .
roughly equivalent to nested for loops in a generator expression, 在 相当于 于 在 在 中 中 的 的 函数, 大致 相当于 生成器 表达式 中 的 <unk>
if you want <unk> <unk> you have to pass in the name of your own <unk> or .exe which contains the message definitions you want to use in the event <unk>, 如果 你 想要 你 的 的 的 ， 你 的 的 或 或 ， 或者 ， 你 的 你 的 你 你 你 你 你 的 你 的 你 你 你 的 你 的, 如果 你 希望 有 较 小 的 日志 ， 你 必须 自行 传入 包含 你 想要 在 事件 日志 中 使用 的 消息 定义 的 . dll 或 . exe 名称 ）
note that the length of this list must be <unk> items., 请 注意 ， 的 的 长度 的 列表 必须 是 <unk>, 需要 注意 的 是 ， 列表 的 长度 必须 为 7
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
this module provides the "configparser" class which implements a basic configuration language which provides a structure similar to what's found in microsoft windows ini files, 此 模块 提供 了 " 类 " 类 实现 了 一个 配置 ， ， ， ， ， 用于 实现 的 的 的 的 的 的, 此 模块 提供 了 它 实现 一种 基本 配置 语言 " configparser " 类 ， 这种 <unk> 提供 的 结构 与 microsoft windows ini 文件 的 类似
dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human readable representation of parse trees to be generated., 字典 字典 的 的 的 的 的 的 值 的 字符串 ， 为 " __ " __ ( ) " 的 更 多 的 的 的, 将 此 模块 中 定义 的 常量 的 数值 映射 回 名称 字符串 的 字典 ， 允许 生成 更加 人类 可读 的 解析 树 表示
this may be most useful to <unk> additional information with a reference, but could also be used to insert additional processing on calls to retrieve the referent., 这 可以 需要 对 对 额外 的 额外 的 额外 的 ， 但 可以 在 调用 的 的 的 的 的 的, 这 对于 将 附加 信息 关联 到 引用 的 情况 <unk> 适用 ， 但 也 可以 被 用于 在 调用 中 插入 额外 处理 来 提取 引用
this is the equivalent of the python statement "o1 o2"., 这 相当于 python 语句 " o1 " 语句, 等价 于 python 语句 " o1 o2 "
this allows common <unk> usage patterns to be <unk> for convenient <unk>, 这 允许 " <unk> " " " 的 " " " " " " 的 <unk>, 这 允许 对 普通 的 " try " ... " except " ... " finally " 使用 模式 进行 封装 以 方便 地 重用
when eof is read, "eoferror" is raised, 当 时 时 ， 时 ， " " " ", 当 读取 到 eof 时 ， 则 触发 " eoferror "
this module defines four dictionaries, <unk> <unk> <unk> and <unk>, 此 模块 定义 了 " <unk> " <unk> " <unk> " 和 " <unk> " 和 " <unk> ", 该 模块 定义 了 四个 词典 ， " <unk> " 、 " <unk> " 、 " <unk> " 、 以及 " <unk> "
because the <unk> are <unk> this context is useful for applications that prefer to have result value of "nan" or <unk> instead of raising exceptions, 由于 是 是 是 的 的 ， 因为 这 意味着 的 的 的 的 或 或 的 的 的 的 的 而 不是 " 的 ", 由于 禁用 了 陷阱 ， 此 上下文 适用 于 希望 结果 值为 " nan " 或 " infinity " 而 不是 引发 异常 的 应用
"b" ("int") [unsigned <unk> convert a c "unsigned char" to a python integer object., " " " " " " " " " long " long " long long long long c unsigned long " unsigned long long 整形 整形 整形 整形 整形 整形 整形 整形 整形 " 长长 整形 整形 整形 " 长长 整形 整形 整形 ", " b " ( " int " ) [ unsigned char ] 将 一个 c " unsigned char " 无 符号 字符 型 转化成 python 整型 对象
"sqlite3" db api 2.0 interface for sqlite databases, " sqlite3 " sqlite 数据库 db api 2.0 接口 模块, " sqlite3 " sqlite 数据库 db api 2.0 接口 模块
"htmlparser" instances have the following methods:, " httpconnection " 实例 拥有 以下 方法 :, " htmlparser " 实例 有 下列 方法 ：
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
if <unk> is not present or returns <unk> search <unk> to parent widget, 如果 未指定 未指定 则 则 返回 " 或 " 则 返回 " true " 则 会 被 设为, 如果 dnd _ <unk> 不 存在 或是 返回 none ， 则 将 <unk> 控件 中 搜索
this subtype of "pyobject" represents a python complex number object., 这个 " " " " " 的 python 类型 的 python 类型 的 类型, 这个 c 类型 " pyobject " 的 子 类型 代表 一个 python 复数 对象
bpo <unk> recursive evaluation of <unk> in <unk>, bpo <unk> : <unk> 了 " <unk> " <unk> 的 的 <unk>, bpo <unk> : 在 " get _ type _ hints " 中 对 " typing . <unk> " 递归 求值
<unk> the name of the program (default: <unk>, <unk> 的 的 的 的 名称 名称, prog 程序 的 名称 （ 默认 ： " sys . argv [ 0 ] " ）
the bytecode is also cached in ".pyc" files so that executing the same file is faster the second time <unk> from source to bytecode can be <unk>, 该 的 也 会 在 " 文件 " 文件 ， ， 文件 描述符 文件 描述符 的 的 的 的 的 的 从 <unk> 的 的, 字节 码 还 会 缓存 在 " . pyc " 文件 中 ， 这样 <unk> 执行 同一 文件 时 速度 更 快 （ 可以 <unk> 将 源码 重新 编译 为 字节 码 ）
this method should be called from handlers when an exception is encountered during an "emit()" call, 当 方法 在 调用 时 时 ， 当 调用 时 引发 " 异常, 调用 " emit ( ) " 期间 遇到 异常 时 ， <unk> 处理器 中 调用 此 方法
this sets or <unk> the <unk> callback in the underlying library, 此 函数 或 <unk> 底层 底层 库中 rl rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl _ rl, 此 函数 会 设置 或 清除 底层 库 的 " rl _ <unk> _ <unk> _ matches _ hook " 回调 函数
to lock the lock, a thread calls its "acquire()" method; this returns once the thread owns the lock, 要 解锁 解锁 锁 ， 线程 线程 锁 ， 它 将 返回 线程 线程 线程 线程 线程, 若 要 锁定 锁 ， 线程 调用 其 " acquire ( ) " 方法 ； 一旦 线程 拥有 了 锁 ， 方法 将 返回
the returned string will always be unquoted as per <unk>, 返回 字符串 将 被 被 作为 为 ", 返回 的 字符串 永远 按照 " email . utils . <unk> ( ) " 方法 去除 引号
lines are defined slightly differently depending on whether the stream is a binary stream <unk> <unk> or a text stream <unk> character strings), 行 是 被 为 的 行 （ 行 ） 的 流 （ 由 流 ） ） ， 或 为 零 ） ） 转换 为 零 ）, 根据 <unk> 二进制 流 （ 产生 字节 ） 还是 文本 流 （ 产生 字符串 ） ， 行 的 定义 <unk>
the <unk> decorators makes it easy to temporarily replace classes in a particular module with a "mock" object, " <unk> " <unk> " 它 它 在 在 " 对象 " 模块 中 的 一个 模块, " <unk> ( ) " 装饰 器 <unk> " mock " 对象 临时 替换 特定 模块 中 的 类
the python language reference gives a more formal definition of the language, python 语言 的 引用 的 更 多 的 的 的, python 语言 参考 给出 了 更 <unk> 的 语言 定义
many other languages don't have this type of <unk> so people <unk> with python sometimes use a numerical counter instead:, 许多 其他 许多 都 是 <unk> 的 类型 的 ， 因此 的 python 的 python 的 python ， 是 使用 python 的 的, 许多 其他 语言 没有 这样 的 结构 ， 因此 不 熟悉 python 的 人 有时 会 选择 使用 一个 数字 计数器 :
the returned line does not include the trailing newline, 返回 的 不 不 包含 的 末尾, 返回 的 行 不 包含 末尾 的 换行符
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
build and c api changes, 构建 和 c api 的 改变, 构建 和 c api 的 改变
return the binary data represented by the hexadecimal string <unk>, 返回 由 由 字符串 的 字符串 表示 字符串, 返回 由 十六进制 字符串 <unk> 表示 的 二进制 数据
as a special case, a line beginning with the character <unk> is <unk> to the method <unk>, 作为 一个 特殊 ， ， " " " " " " " " " 方法 " 方法, 有 一个 特殊 情况 ， 分派 <unk> 字符 " ' ? ' " 的 <unk> 方法 " do _ help ( ) "
"termios" posix style tty control, " termios " posix 风格 的 tty 控制, " termios " posix 风格 的 tty 控制
this method can be called at any time before <unk>, 此 方法 在 在 任何 任何 任何 任何 任何 时间 时间 时间, 此 方法 可 在 " close ( ) " 之前 的 任何 时候 被 调用
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
the default is <unk>, 默认值 为 " " rb " ", 默认 为 " 9 "
return a dictionary containing type hints for a function, method, module or class object., 返回 一个 类型 的 " ctypes " 类 的 " 类 对象 的 类 对象, 返回 一个 字典 ， 字典 内 含有 函数 、 方法 、 模块 或类 对象 的 类型 提示
<unk> plain text, and <unk> html versions are also available at <unk>, " : " / / / / / / 和 " / <unk> / <unk> / <unk> / <unk> / <unk> / <unk> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /, 也 可 在 https : / / docs . python . org / 3 / <unk> . html 获取 <unk> 、 纯 文本 以及 可 下载 的 html 版本
changed in version 3.1: added support for <unk> ., 在 3.1 版 更改 : added 支持 对 " <unk>, 在 3.1 版 更改 : 添加 了 对 object _ <unk> _ hook 的 支持
<unk> utf 8 codec with bom signature, " ' utf 8 utf 8 8 8 8 bom 8 bom, " encodings . utf _ 8 _ sig " 带 bom 签名 的 utf 8 编解码器
returns "true" for broken symbolic links, 返回 " true " 的 返回, 对于 失效 的 符号 链接 ， 也 返回 " true "
the power operator has the same semantics as the built in <unk> function, when called with two arguments: it yields its left argument raised to the power of its right argument, " 运算符 " 具有 与 " 的 " ) " 方法 的 的 " ( ) " 函数 ， 它 其 参数 参数 参数 参数 参数 的 参数 参数 参数 的 参数 参数, 幂 运算符 与 附带 两个 参数 调用 内置 " pow ( ) " 函数 具有 相同 的 语义 ： 结果 为 对 其 左 参数 进行 <unk> 参数 所 指定 幂次 的 乘方 运算
changed in version 3.6: all optional parameters are now keyword only., 在 3.6 版 更改 : 接受 选 参数 都 是 关键字 现在 关键字, 在 3.6 版 更改 : 所有 的 可选 参数 现在 是 keyword only 的 了
these three variables are the c equivalents of the result in python of <unk> (see the section on module "sys" in the python library reference), 这些 三个 变量 是 c python 的 的 python 版本 中 的 的 python 版本 中 的 的 python, 这 三个 变量 是 python 中 " sys . exc _ info ( ) " 的 结果 在 c 中 的 对应物 （ 请参阅 python 库 参考 的 " sys " 模块 部分 ）
in the simplest case, the option and its value are passed as two separate arguments:, 在 这种 情况 下 ， 选项 选项 和 其 参数 ， 参数 参数 参数 都 参数, 在 最 简单 的 情况 下 ， 选项 和 它 的 值 是 作为 两个 单独 参数 传入 的 :
the pointer may not be "null"., 指针 可能 不 为 " null ", 指针 不可 为 " null "
if it is false, long words will not be <unk> and some lines may be longer than <unk>, 如果 它 被 取消 ， 则 ， 则 将 被 ， ， 则 可能 会 被 视为, 如果 为 假值 ， 超长 单词 不会 被 分开 ， 因而 某些 行 的 长度 可能 会 超过 " width "
the "pass" is silently <unk>, " pass " 会 静默 " 的 ", " pass " 会 被 静默 地 忽略 :
protect an awaitable object from being <unk>, 一个 对象 从 " 对象 " 对象 对象, 保护 一个 可 等待 对象 防止 其 被 " 取消 "
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
"tkinter" python interface to <unk>, " python " python . 接口 ", " tkinter " tcl / tk 的 python 接口
the default implementation just returns <unk>, 默认 实现 " 将 返回 " " ( ) ", 默认 实现 仅 返回 " <unk> .__ dict __ "
to avoid confusing existing tools that analyze import statements and expect to find the modules they're <unk>, 要 避免 <unk> ， ， ， ， " 语句 " 语句 和 语句 的 模块 的 模块, 避免 混淆 已有 的 分析 import 语句 并 查找 import 的 模块 的 工具
separator <unk> is <unk> from the right end of the output by default, if you wish to count from the <unk> supply a negative <unk> value., <unk> ， " <unk> " <unk> ， ， 如果 你 你 希望 <unk> <unk> <unk> <unk> <unk> <unk> " <unk> " " " " ， 则 " <unk> ", 分隔符 位置 默认 从 输出 的 <unk> 开始 计数 ， 如果 你 希望 从 <unk> 开始 计数 ， 请 提供 一个 负 的 bytes _ per _ sep 值
when the buffer gets too small for all pending <unk>, 当 缓冲区 的 的 时 ， 则 " " ", 当 缓冲区 对于 所有 挂 起 数据 而言 太 小时 ；
the count of <unk> tasks goes up whenever an item is added to the queue, 如果 <unk> 的 的 的 ， 将 被 添加 到 一个 为, 当 条目 添加 到 队列 的 时候 ， 未 完成 任务 的 计数 就 会 增加
<unk> checks of the input arguments are added to frame <unk>, <unk> 参数 的 参数 参数 添加 到 添加 的 <unk>, 输入 参数 的 <unk> 被 添加 到 框架 创建 中
pep <unk> built in <unk>, pep <unk> 内置 内置 . <unk> ( ) " 中 实现, pep <unk> : 内置 的 " <unk> ( ) "
return nonzero and set an exception on failure., 成功 时 返回 " 并 设置 一个 异常, 失败 时 返回 非零值 并 设置 一个 异常
we've just introduced yet another keyword, "default", 在 <unk> 面值 的 的 字典 中 的 的, 我们 <unk> 引入 了 又 一个 新 的 关键字 " default "
the list of possible values is below, 可能 的 值 是 值, 可能 的 值 列表 如下
new in version 3.5.4., 3.5 . 4 新版 功能 ., 3.5 . 4 新版 功能 .
one example of a "stringprep" profile is <unk> which is used for <unk> domain names., 一个 一个 " 的 " 的 例子 是 用于 用于 用于 用于 <unk> 的 的, " stringprep " 配置 的 一个 例子 是 " <unk> " ， 它 被 用于 国际化 <unk>
two more lines must be added:, 两个 两个 行 必须 为 ", 添加 另外 <unk> :
does not return pseudo fields which are "classvar" or <unk>, 不 不 返回 的 的 ， ， 它 是 " 或 " 或 ", 不 返回 " classvar " 或 " <unk> " 的 <unk>
changed in version 3.2: <unk> can now contain commands that continue <unk> such as "continue" or <unk>, 在 3.2 版 更改 : <unk> <unk> 现在 现在 可以 现在 ， <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 在 3.2 版 更改 : " . pdbrc " 现在 可以 包含 继续 调试 的 命令 ， 如 " continue " 或 " next "
return a sub window, whose upper left corner is at <unk> <unk> and whose <unk> is <unk> / nlines ., 返回 o1 的 的 " 的 " ， " " " " " " " " " " " " " " " " " " " " " " ", 返回 一个 子 窗口 ， 其 左上角 位于 " ( begin _ y , begin _ x ) " ， 并且 其 宽度 / 高度 为 <unk> / nlines
the format specifier mini language is the same as that used by the "str.format()" method., 格式 说明符 ， 语言 语言 的 " " " " 相同 的 方式, 这里 的 格式 说明符 微 语言 与 " str . format ( ) " 方法 所 使用 的 微 语言 一致
the following functions operate on the line <unk>, 以下 函数 函数 会 被 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~, 下列 函数 会 在 行 缓冲区 上 操作
this is needed for <unk> audio files, 这是 " <unk> " 的 文件 的 文件, 这 对于 wave 音频文件 是 必须 的
[1] except for one thing, [ 1 ] " 的 的, [ 1 ] 存在 一个 例外
when the reference count of an object drops to zero, it is <unk>, 当 引用 计数 对象 的 引用 的 的 ， 它 被 它, 当 一个 对象 的 引用 计数 <unk> 为 零时 ， 所 <unk> 将 被 释放
there are <unk> <unk> and <unk> available, 有 <unk> <unk> <unk> 和 <unk> <unk>, 有 许多 可 选择 的 教程 和 书籍
raised when a generator or coroutine is <unk> see <unk> and <unk>, 当 一个 生成器 或 或 被 被 引发 ， " ' r ' " ' " ' " ' " ' " ' " ' " ' " ' ", 当 一个 generator 或 coroutine 被 关闭 时 将 被 引发 ； 参见 " generator . close ( ) " 和 " coroutine . close ( ) "
in addition, "fraction" has the following properties and methods:, 在 " __ " __ ( ) " 方法 下列 属性 和 方法 :, 此外 ， " fraction " 还 具有 以下 属性 和 方法 ：
if the <unk> is omitted it defaults to <unk>, 如果 <unk> 为 " <unk> " ， 则 默认 为 " sys . <unk> ", 如果 省略 buffer _ size 则 使用 默认 的 " default _ buffer _ size "
other graphical user interface packages, 其他 的 gui 接口, 其他 图形用户界面 （ gui ） 包
it is important to know about them to understand how errors are passed <unk>, 它 在 在 解释器 的 的 被 如何 被 被 弃用, 了解 它们 对于 理解 错误 的 传递 方式 是 非常 重要 的
there are <unk> c objects corresponding to all built in python exceptions, such as <unk> which you can use directly, 有 python python 中 的 python 内置 的 内置 类型 ， 内置 类型 的 " ， ， ， 你 可以 使用 " py _ <unk> ( ) ", 所有 内置 的 python 异常 都 有 对应 的 <unk> 声明 c 对象 ， 例如 " pyexc _ <unk> " ， 你 可以 直接 使用 它们
some non standards compliant messages may not be internally consistent about their multipart <unk>, 某些 ， ， ， ， 可能 可能 可能 可能 会 被 它们 的 它们 的, 一些 不 遵循 标准 的 消息 在 其 内部 关于 它 是否 为 multipart 类型 <unk> 不 一
pep 492 coroutines with <unk> and <unk> syntax, pep <unk> <unk> <unk> <unk> 和 <unk> <unk>, pep 492 使用 async 和 await 语法 实现 协程
key : key for keyed hashing <unk> to 64 bytes for <unk> up to 32 bytes for <unk>, 密钥 密钥 哈希 哈希 哈希 为 " 的 字节 串 ， 用于 字节 字节 字节 字节 串, key : 用于 密钥 哈希 的 密钥 （ 对于 blake2b 最长 64 字节 ， 对于 blake2s 最长 32 字节 ）
<unk> with a single xml element and its sub elements are done on the "element" <unk>, <unk> 队列 的 元素 的 元素 元素 ， 并且 元素 元素 元素 元素 元素 元素 元素, 与 单个 xml 元素 及其 子 元素 的 交互 是 在 " element " 级别 完成 的
get a "streamwriter" factory function for the given encoding ., 获取 给定 的 的 函数 " 函数 " 函数 的 函数, 为 给定 的 encoding 获取 一个 " streamwriter " 工厂 函数
key specifies a key function of one argument that is used to extract a comparison key from each input element, key 指定 key 一个 键 参数 参数 一个 参数 参数 被 用来 一个 字典 ， 字典 ， 字典 字典 的 键 字典, key 指定 带有 单个 参数 的 key function ， 用于 从 每个 输入 元素 中 提取 比较 键
return a pair <unk> <unk> of integers that represent the given "decimal" instance as a <unk> in lowest terms and with a positive <unk>, 返回 一个 <unk> 的 " " " " " " 的 " " " " ， " " " " " 和 " " " " " " " ", 返回 一对 " ( n , d ) " 整数 ， 表示 给定 的 " decimal " 实例 作为 分数 、 <unk> 形式 项 并 带有 正 <unk> :
top level non object, non array values, 最高 层级 非 的 的 数组, <unk> 非 对象 ， 非 数组 值
the modules described in this chapter implement various algorithms of a cryptographic nature, 本章 模块 描述 的 模块 的 实现 了 一个 的 的 的, 本章 中 描述 的 模块 实现 了 加密 <unk> 的 各种 算法
the "type" keyword argument of "add_argument()" allows any necessary type checking and type conversions to be performed, " option _ 关键字 参数 参数 （ 允许 " type " 类型 类型 类型 类型 的 类型, " add _ argument ( ) " 的 " type " 关键词 参数 允许 任何 的 类型 <unk> 类型转换
the import machinery takes care of all the other <unk> of <unk> when <unk> is implemented., 导入 导入 了 所有 所有 的 的 " <unk> " " 的 " <unk> " 的 " <unk> ", 当 exec _ module ( ) 被 实现 的 时候 ， 导入 机制 关心 的 是 load _ module ( ) 所有 其他 的 <unk>
the expressions are evaluated from left to <unk>, 表达式 从 从 " 到 " 到 " 的, 表达式 将 从 左 至 右 被 求值
a "continue" statement was illegal in the "finally" clause due to a problem with the implementation, " 语句 " 语句 语句 在 语句 中 的 的 " <unk> " 的 " 的 ", 在 之前 版本 中 " continue " 语句 不 允许 在 " finally " 子句 中 使用 ， 这 是因为 具体 实现 存在 一个 问题
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
returns a tuple of that information, unless the parse fails, in which case a 2 tuple of <unk> <unk> is returned., 返回 一个 元组 的 元组 ， ， ， 表示 的 的 的 的 元组 ， 元组 " " " " " " " ", 返回 包含 这 两个 信息 的 一个 元组 ； <unk> 解析 失败 ， 则 返回 一个二元 组 " ( ' ' , ' ' ) "
to use the module, you must first create a "connection" object that represents the database, 要 使用 " __ 必须 必须 必须 一个 一个 创建 一个 对象 ， " 对象 " 对象 的 对象, 要 使用 这个 模块 ， 必须 先 创建 一个 " connection " 对象 ， 它 代表 数据库
new in version 3.8: see pep <unk> for more details about assignment expressions., 3.8 新版 功能 : pep 614 了解 详情 了解 详情, 3.8 新版 功能 : 请参阅 pep <unk> 了解 有关 赋值 表达式 的 详情
what's new in python 2.5, python 2.5 有 什么 新 变化, python 2.5 有 什么 新 变化
return the value of the environment variable <unk> as a bytes object, truncated to <unk> characters., " <unk> " 的 的 值 的 形式 的 字节 串 的 " " " ", 将 环境变量 " term " 的 值 <unk> 至 <unk> 个 字节 ， 作为 字节 串 对象 返回
a future statement is recognized and treated specially at compile <unk> changes to the semantics of core constructs are often implemented by generating different code, future 语句 语句 语句 被 并且 ， ， 在 <unk> 的 的 ， ， 的 的 的 的 代码 的 代码 的 代码, future 语句 在 编译 时会 被 识别 并 做 特殊 对待 ： 对 核心 构造 语义 的 改变 常常 是 通过 生成 不同 的 代码 来 实现
return the bitwise or of a and b ., 返回 表示 a 和 b 的 结果, 返回 a 和 b 按位 或 的 结果
compared with other programming languages, python's class mechanism adds classes with a minimum of new syntax and semantics, 其他 其他 许多 的 的 的 的 类 类 ， 使用 " 新 的 新 的 语法 和 新 的, 和 其他 编程语言 相比 ， python 用 <unk> 的 新 语法 和 语义 <unk> 加入 到 语言 中
specify a list of commands for breakpoint number <unk>, 指明 的 的 的 的 列表 列表, 为 编号 是 <unk> 的 断点 指定 一系列 命令
<unk> open for bzip2 compressed writing, " ' w ' " 打开 打开 用于 打开 的 的 的, " ' w : bz2 ' " 打开 用于 bzip2 压缩 的 写入
if the second argument, sentinel , is given, then object must be a callable object, 如果 第二个 第二个 第二个 ， 则 返回 " 对象 必须 必须 为 一个 对象, 如果 有 第二个 实参 sentinel ， 那么 object 必须 是 可 调用 的 对象
return the error handler previously registered under the name name ., 返回 当前 名称 的 名称 ， 则 返回 的 名称, 返回 之前 在 名称 name 之下 注册 的 错误处理 方案
by default, the locale encoding is used (see <unk>, 默认 情况 下 ， 会 使用 编码 格式 编码 " ( ( ) ", 默认 情况 下 ， 会 使用 当前 区域 的 编码 格式 ( 参见 " locale . <unk> ( ) " )
to avoid the task <unk> wrap it in <unk>, 要 避免 <unk> <unk> <unk> " " " " ", 要 避免 任务 " 取消 " ， 可以 加上 " <unk> ( ) "
it is straightforward to create an ordered dictionary variant that <unk> the order the keys were last inserted, 它 在 字典 创建 一个 字典 中 创建 一个 字典 ， 字典 键 的 键 的 键 的, 创建 记住 键值 最后 插入 顺序 的 有序 字典 变体 很 简单
note, however, that the "logging" package does not use process shared locks so it is possible <unk> on the handler <unk> for messages from different processes to get mixed up., 注意 ， 不 不 不 不 不 进程 的 ， ， ， 因此 的 的 ， 因为 在 不同 的 不同 的 不同 的 不同 的 不同 的, 注意 ， " logging " 模块 本身 并 没有 使用 进程 间 共享 的 锁 ， 所以 来自 于 多个 进程 的 日志 可能 （ 具体 取决于 使用 的 日志 handler 类型 ） 相互 覆盖 或者 <unk>
if this environment variable is set to a non empty string, enable python development mode, introducing additional runtime checks that are too expensive to be enabled by default., 如果 此 变量 为 一个 空 字符串 ， ， python 的 python ， 的 ， ， ， 则 会 被 被 调用, 如果 将 此 环境变量 设为 非空 字符串 ， 则 启用 python 开发 模式 ， 引入 在 默认 情况 下 启用 会 导致 开销 <unk> 的 运行 时 检查
the built in configuration would correspond to the following <unk>, 内置 的 " curses " 模块 的 以下 ： :, 内置 的 配置 对应 以下 的 turtle . cfg :
the <unk> and <unk> fields are integers specifying the outer limits <unk> for <unk>, <unk> <unk> 和 <unk> <unk> 是 是 <unk> 的 的 的 的 的, <unk> 和 <unk> 字 段 给定 指数 所 允许 的 外部 <unk>
the functions in this module may not handle <unk> and times before the epoch or far in the future, 在 此 模块 中 也 可能 在 <unk> 和 <unk> 中 ， 或 在 中 中 的 的, 此 模块 中 的 功能 可能 无法 处理 <unk> 之前 或 将来 的 <unk> 日期 和 时间
changed in version 3.3: return an <unk> object., 在 3.3 版 更改 : 返回 返回 一个 " 对象 " 对象, 在 3.3 版 更改 : 返回 一个 " io . bufferedreader " 对象
included for compatibility with the specification., " curses " 与 附带 的 的 的, 这 是 为 保持 与 规范 描述 的 兼容性 而 加入 的
return true if ob is either a reference or proxy object., 如果 ob 为 一个 对象 或 返回 " pydatetime " 对象 对象, 如果 “ ob ” 是 一个 引用 或者 一个 代理 对象 ， 则 返回 一个 true
logging (as of <unk> provides improved support for these two additional formatting <unk>, 日志 " <unk> " 的 提供 了 两个 的 的 的 的 额外 的 额外 的, 日志 （ 从 3.2 开始 ） 为 这 两种 格式化 方式 提供 了 更 多 支持
"configparser" configuration file parser, " 配置 . 配置 解析器, " configparser " 配置文件 解析器
this section details the public api for "set" and "frozenset" objects, 本 节 节 描述 和 " 和 " 的 api 的 api, 这一 章节 详细 介绍 了 " set " 和 " frozenset " 对象 的 公共 api
python has a 'with' statement that wraps the execution of a block, calling code on the <unk> and exit from the block, python python 一个 " 语句 " 的 " 的 " 的 " 的 " 的 的 的, python 具有 ' with ' 语句 ， 它 能 将 一个 代码 块 的 执行 包装 起来 ， 在 进入 和 退出 代码 块 时 调用 特定 的 代码
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
deprecated python modules, functions and methods, 已弃 用 的 python 模块 、 函数 和 方法, 已弃 用 的 python 模块 、 函数 和 方法
if <unk> signals eof the controlling terminal can no longer communicate with the parent process or the child process, 如果 " <unk> " ， 则 " ， 则 返回 " ， 进程 进程 进程 进程 进程 进程 进程 进程 进程 进程, 如果 stdin _ read 发出 eof 信号 则 控制 终端 就 不能 再 与 父 进程 <unk> 进程 进行 通信
return a <unk> object with the specified hour, minute, second, microsecond and <unk>, 返回 指定 的 指定 的 的 " ， " " " " " " " " " " " ", 返回 具有 指定 hour , minute , second , microsecond 和 fold 属性 的 " datetime . time " 对象
convert to a string, using <unk> notation if an exponent is needed., 将 转换 为 为 " ' ' ' ' ' 如果 ， 则 会 引发 ", 转换 为 字符串 ， 如果 需要 指数 则 会 使用 <unk> 标注 法
it's only supported by linux kernel <unk> or later., 在 只 支持 支持 <unk> <unk> <unk> <unk> <unk> 的 或, 仅 支持 linux <unk> <unk> 或 更 高 版本
while a task <unk> for the completion of a future, the event loop runs other <unk> <unk> or performs io operations., 虽然 一个 事件 事件 循环 事件 循环 事件 循环 事件 循环 的 事件 的 " <unk> ( ) " 或 其他 线程 的, 而 一个 task 对象 会 等待 一个 future 对象 完成 ， 该 事件 循环 会 运行 其他 task 、 回调 或 执行 io 操作
of course, it must be one of integer, string, or <unk>, 当然 ， 它 必须 是 一个 或 为 " none ", 当然 ， 它 必须 是 数字 、 字符串 或者 二进制 字符串 :
pep 343: the 'with' statement, pep 343 : " with " 语句, pep 343 : " with " 语句
the manual pages will document any <unk> and provide complete lists of all the functions, attributes, and <unk> " characters available to you., 该 的 的 任何 任何 任何 ， ， ， 所有 所有 所有 的 所有 所有 ， 所有 " <unk> ", 说明 页面 将 记录 任何 具体 问题 ， 并 提供 所有 函数 、 属性 以及 可用 " <unk> _ " 字符 的 完整 列表
other library modules may provide additional ways to create text or binary streams, 其他 模块 可以 可以 提供 了 额外 的 或 二进制 或 二进制 二进制 流, 其他 库 模块 可以 提供 额外 的 方式 来 创建 文本 或 二进制 流
the string is enclosed in double quotes if the string contains a single quote and no double quotes, otherwise it is enclosed in single quotes, 字符串 字符串 字符串 字符串 字符串 字符串 字符串 包含 一个 字符串 ， 并且 没有 没有 ， ， 否则 将 在 在 在 内部 时 将 被 引发, 如果 字符串 中有 单引号 而 没有 双引号 ， 该 字符串 <unk> 双引号 来 表示 ， 否则 <unk> 单引号
this is the default (and the only acceptable value) for <unk> and <unk>, 这是 默认 会 被 " " " " " " 的 的 的 ", 这是 " format _ <unk> " 和 " format _ raw " 的 默认值 （ 也 是 唯一 可 接受 的 值 ）
changed in version 3.7: added the " invalidation <unk> option., 在 3.7 版 更改 : the " " " " 选项 " 选项, 在 3.7 版 更改 : added the " invalidation mode " option .
directive meaning example notes <unk> weekday as locale's abbreviated <unk> <unk> ..., <unk> (1) name, " 的 例子 例子 " " " , " % , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " ,, 指令 意义 示例 注释 " % a " 当地 <unk> 的 缩写
using integers is short and handy (and provided by default by the functional <unk> but not strictly enforced, 使用 " " " " ， 并且 使用 默认 默认 默认 的 默认 情况 下 ， 默认 情况 下, 使用 整数 相当 简洁 方便 （ 并 由 functional api 默认 提供 ） ， 但 并 不 强制 要求 使用
<unk> all the objects tracked by gc move them to a <unk> generation and ignore all the future collections, <unk> 所有 所有 的 对象 的 所有 对象 ， 将 被 添加 到 " <unk> " ， ， 所有 所有 所有, 冻结 gc 所 跟踪 的 所有 对象 — — 将 它们 移至 <unk> <unk> 忽略 所有 未来 的 集合
an example that uses most of the list methods:, 一个 实现 了 示例 的 的 列表 ：, 列表 方法 示例 ：
some smaller changes made to the core python language are:, 一些 python 核心 核心 python 语言 改动 改动 ：, 对 python 语言 核心 进行 的 小 改动 ：
<unk> "profile" instead of <unk> if the latter is not available on your <unk>, " ' _ <unk> ( ) " ， 如果 " 如果 在 如果 在 在 上 上 ， 如果, （ 如果 " cprofile " 在 您 的 系统 上 不可 用 ， 请 使用 " profile " 。 ）
if imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like "int" and "float", 如果 align 为 ， 则 ， 则 和 " str " ， 则 将 " decimal " 和 " float " 和 " float ", 如果 省略 了 imag ， 则 默认值 为 零 ， 构造函数 会 像 " int " 和 " float " 一样 进行 数值 转换
<unk> is used to wait on socket <unk> it supports sockets and is limited to <unk> <unk>, <unk> 用于 unix 套 接字 接字 ， ， ， 套 接字 接字 ， <unk> " <unk> " " " " " " ", " <unk> " 只 被 用于 等待 套 接字 事件 ： 它 支持 套 接字 且 最 多 支持 512 <unk> 接字
this method does nothing., 这个 方法 <unk> ( ) ", 此 方法 不 执行 任何 操作
the same example using the "with" statement:, 使用 " with " 使用 " with " 语句, 使用 " with " 语句 的 同一个 示例 :
the default filename is <unk>, 默认值 为 " ' " ' ", 默认 文件名 为 " ~ / . history "
if wait is "true" then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed, 如果 等待 等待 为 true ， ， 则 将 返回 " true " ， 则 会 被 取消 的 ， 则 将 其 将 其 关联 的 的, 如果 wait 为 " true " 则 此 方法 只有 在 所有 待 执行 的 future 对象 完成 执行 且 释放 已 分配 的 资源 后 才 会 返回
read only attribute returning a list of <unk> events in the order they will be run, 只读 属性 属性 返回 一个 列表 中 的 列表 列表 列表, 只读 属性 按照 将要 运行 的 顺序 返回 即将 发生 的 事件 列表
while people have embedded python in other applications since its early <unk> the process of embedding python is less straightforward than writing an <unk>, 虽然 有 python 其他 语言 的 python 代码 ， 因为 python 代码 的 python 的 python 的 的 python 是 由 " 的 " 是 一个 别名, 虽然 <unk> 在 其他 应用 中 嵌入 python 的 做法 <unk> ， 但 嵌入 python 的 过程 没有 编写 扩展 模块 那样 方便 直观
samples are truncated in case of <unk>, 将 在 溢出 溢出 中 被 截断, 如果 发生 溢出 ， <unk> 的 采样 将 被 截断
assuming the population preferences haven't changed, what is the probability that the python <unk> will <unk> within its <unk> <unk>, 将 的 的 的 的 ， ， python python <unk> ” 将 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 假定 <unk> 的 偏好 没有 发生 改变 ， 那么 python <unk> 的 <unk> 不 超出 其 <unk> <unk> 的 可能性 是 多少 ？
similar to <unk> but set time with nanoseconds., 与 " <unk> ( ) " ， 但 但 设置 为 时间, 与 " clock _ <unk> ( ) " 相似 ， 但 设置 时间 为 纳秒
the <unk> module defines a completion function suitable for the "readline" module by <unk> valid python identifiers and <unk>, " <unk> " 模块 定义 了 一个 函数 " 模块 _ <unk> " ， " <unk> " <unk> " 和 " <unk> _ <unk> _ <unk> ", " <unk> " 通过 补全 有效 的 python 标识符 和 关键字 定义 了 一个 适用 于 " readline " 模块 的 补全 函数
a dictionary that maps unicode code points to html entity names., 一个 需要 码 的 unicode 码 的 " " " " 的 的 的, 将 unicode 代码 点 映射 到 html 实体 名称 的 字典
one <unk> is on small <unk> or embedded <unk> that don't run an x server, 一个 在 在 <unk> 上 或 <unk> 或 <unk> <unk> <unk> <unk> <unk> <unk>, 一个 小 <unk> <unk> 是 在 不 运行 x server 的 <unk> 或 嵌入式 unix 上
the memory is initialized to zeros., 内存 是 被 初始化 为, 内存 会 被 初始化 为 零
convert the color from <unk> coordinates to rgb coordinates., 将 从 rgb 从 rgb 到 " <unk> 到, 把 颜色 从 <unk> 值 转为 rgb 值
insert <unk> into the dictionary p using key as a key, 将 字典 字典 字典 字典 字典 键 键 键 键 键 键, 使用 key 作为 键 将 val 插入 到 字典 p
to learn about how to <unk> with shapes see screen method <unk>, 要 使用 如何 使用 " <unk> ( ) " 方法 请 使用 " 方法 ( ) " 方法, 要 了解 如何 处理 形状 请 <unk> screen 方法 " register _ shape ( ) "
changed in version 3.3: "oserror" is raised instead of "ioerror", now an alias of the <unk>, 在 3.3 版 更改 : " is " is " is " is " is " " " . <unk> " 的 别名 ., 在 3.3 版 更改 : " oserror " is raised instead of " ioerror " , now an alias of the <unk> .
(contributed by anthony <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 anthony <unk> 在 bpo <unk> 中 贡献 。 ）
the maximum level of nesting of json objects and arrays, " 的 " 的 的 的 对象, 嵌套 json 对象 和 数组 的 最高 水平
<unk> representing an email message, " ' " : 一个 一个 消息, " email . message " : 表示 一 <unk> 信息
on unix and windows, return the argument with an initial component of <unk> or <unk> replaced by that user 's home directory., 在 unix unix 和 ， 并 返回 其 参数 的 的 " 或 " 或 " 的 的 的 ， ， 的 的 的 的, 在 unix 和 windows 上 ， 将 参数 中 开头 部分 的 " ~ " 或 " ~ user " 替换 为 当前 用户 的 家 目录 并 返回
if <unk> <unk> with the argument list, the "pyarg_parsetuple()" function usually raises <unk>, 如果 <unk> _ <unk> _ args ( ) " ， 则 将 函数 会 引发 " indexerror . error _ error ", 如果 参数 列表 有 问题 ， " pyarg _ parsetuple ( ) " 函数 通常 会 引发 " pyexc _ typeerror "
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
const a constant value required by some action and <unk> <unk>, 将 一个 由 " <unk> _ <unk> ( ) " 和 " <unk>, const 被 一些 action 和 nargs 选择 所 需求 的 常数
this iterates over all the subparts of msg , returning only those subparts that match the mime type specified by <unk> and subtype ., 此 函数 会 导致 所有 的 " " " " ， 只有 " 所 由 " 的 " " " " " " " 的 ", 此 函数 会 迭代 msg 的 所有 子 部分 ， 只 返回 其中 与 maintype 和 subtype 所 指定 的 mime 类型 相匹配 的 子 部分
should be rewritten as, 应当 应当 为, 应当 重 写成 这样 ：
similarly, if <unk> returns "false" it doesn't guarantee that a subsequent call to <unk> will not block., 如果 如果 " " ( ) " 返回 " false " ， 则 调用 " 调用 " ( ) " 调用 调用 " " ( ) " ) " 不会 调用 ", 类似 的 ， 如果 <unk> ( ) 返回 " false " 也 不 保证 后续 调用 的 put ( ) 不 被 阻塞
many programs may need only this single window, but you might wish to <unk> the screen into smaller windows, in order to <unk> or clear them separately, 许多 可能 可能 可能 只 只有 ， ， ， ， 你 可能 需要 在 <unk> 到 到 到 到 的 的 的 <unk> 中 的, 许多 程序 可能 只 需要 这 一个 窗口 ， 但 你 可能 希望 把 屏幕 <unk> 为 多个 更 小 的 窗口 ， 来 分别 重绘 或者 清除 它们
format controls the archive format for writing, 格式 格式 格式 格式 格式 格式 格式 格式 格式, format 控制 用于 写入 的 归档 格式
the distutils <unk> command is now deprecated, use <unk> <unk> <unk> instead, distutils distutils <unk> 命令 命令 现在 是 现在 是 使用 " bdist _ wheel ( ) " ， 请 改用 " py _ wheel ( ) ", distutils 的 " bdist _ <unk> " 命令 现在 已 被 弃用 ， 请 改用 " bdist _ wheel " ( wheel 包 )
the fields of the header are:, 结果 的 的 如下 ：, 标头 的 字 段 为 ：
<unk> encode and decode binhex4 files, " uu " " 与 与 解码 的 文件, " binhex " 对 binhex4 文件 进行 编码 和 解码
this is useful to check for error return values and automatically raise an exception:, 这 适用 于 在 的 值 ， 返回 返回 " null " 异常, 这 在 错误 返回值 校验 和 自动 抛出 异常 等 方面 比较 有用
this method is provided as a hook to allow subclasses to modify the way objects are converted to strings, 此 方法 作为 作为 一个 一个 ， ， 它 允许 对象 的 对象 ， 对象 的 转换 为 转换 为 字符串, 此 方法 作为 一个 钩子 提供 ， 允许 子类 修改 将 对象 转换 为 字符串 的 方式
return a dictionary mapping key to value such that <unk> <unk> value", 返回 一个 映射 映射 到 映射 的 的 " <unk> " <unk> ", 返回 一个 字典 ， 其 元素 为 key 到 value 的 映射 使得 " match ( key , <unk> ) value "
combining positional and optional arguments, src 位置 和 可选 参数, 结合 位置 参数 和 可选 参数
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
they should be salted and <unk> using a cryptographically strong one way <unk> hash function., 它们 应该 使用 " 使用 . get ( ) " 和 " ， ( ) " 函数 来 创建 一个 函数 的 函数, 它们 应当 使用 高 加密 强度 的 <unk> （ 不可 恢复 ） 哈希 函数 来 <unk> 并 生成 哈希 值
objects of these types support efficient pickling via the "pickle" module., 这些 这些 对象 的 支持 模块 " 模块 " 模块 " 模块 " 模块, 这些 类型 的 对象 支持 通过 " pickle " 模块 进行 高效 的 封存
each entity refers to another entity several times, and the final entity definition contains a small string, 每个 的 都 是 一个 字典 的 的 ， ， ， ， 包含 包含 字符串 的 字符串, 每个 实体 多次 引用 另 一个 实体 ， 最终 实体 定义 包含 一个 小 字符串
changed in version 3.2: allow strings for indent in addition to integers., 在 3.2 版 更改 : 允许 允许 到 到 的 的 的 的 的, 在 3.2 版 更改 : 允许 使用 字符串 作为 indent 而 不再 仅仅 是 整数
changes in the python api, python api 的 变化, 改变 了 的 python api
image shapes do not rotate when <unk> the <unk> so they do not display the heading of the <unk>, 如果 没有 不 不 时 ， ， ， ， ， 不 不 不 改变 的 的 的, 当 海龟 <unk> 时 图像 形状 不会 <unk> ， 因此 无法 显示 海龟 的 朝向 !
replacing the standard import system, 替代 标准 标准, 替换 标准 导入 系统
also the <unk> base class of any new style class ., " class " 类 的 的 基类 的 类 基类, object 也 是 任何 new style class 的 最 顶层 基类 名
the allocated memory allows for the type structure plus size fields of the size given by the <unk> field of type, " 内存 " 内存 允许 允许 类型 的 的 的 的 的 的 的 的 的 字 段 的 类型 的 类型, 被 分配 的 <unk> <unk> 了 type 结构 加 type 对象 中 " tp _ itemsize " 字 段 提供 的 size 字段 的 值
how do i find undefined <unk> symbols <unk> or <unk>, 如何 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 如何 找到 未定义 的 g ++ 符号 __ <unk> _ new 或 __ <unk> _ virtual ？
often you'll <unk> new programs by <unk> existing functions in a new configuration and writing a few functions specialized for the current task., 在 你 的 " get _ ) " 函数 的 " 函数 " 新 的 新 的 函数 ， 并 将 其 函数 函数 函数, 通常 你 可以 重新 组织 已有 的 函数 来 组成 新 的 程序 ， 然后 为 当前 的 工作 写 一些 特殊 的 函数
hash lists by their address <unk> <unk>, 通过 通过 的 的 地址 ， <unk>, 哈希 按 其 地址 （ 对象 id ） 列出
this allows an application to e.g. generate url or filesystem safe base64 strings, 这 允许 " ' " 或 " 或 " 或 " 或 " 字符串 字符串 字符串, 这 允许 应用程序 生成 url 或 文件系统 安全 的 base64 字符串
if the meta path finder knows how to handle the named module, it returns a spec object, 如果 导入 路径 的 的 ， 将 其 创建 一个 命名 空间 对象 ， 它 将 返回 对象, 如果 元 路径 查找 器 知道 如何 处理 指定 名称 的 模块 ， 它 将 返回 一个 说明 对象
returns a new instance of the <unk> class, 返回 一个 " memoryhandler " 类 的 实例, 返回 一个 " <unk> " 类 的 新 实例
determine whether code is in <unk> <unk> control <unk>, 确定 是否 是否 是否 是否 是否 <unk> 控制 控制, 确定 code 是否 属于 <unk> . 1 ( ascii 控制字符 )
elements are returned in the order first encountered, 元素 中 的 元素 元素 元素, 元素 会 按 首次 出现 的 顺序 返回
it can save time when an expensive or i/o bound function is periodically called with the same arguments., 它 可以 在 一个 或 时 ， 时 ， 并 将 被 调用 时 被 调用, <unk> <unk> 高 开销 或 i / o 函数 的 调用 时间
"struct" interpret bytes as packed binary data, " struct " bytes 字节 串 解读 的 二进制 数据, " struct " 将 字节 串 解读 为 打包 的 二进制 数据
if <unk> is omitted or is "none", it returns the nearest integer to its input., 如果 " 为 " none " 或 " none " ， 则 返回 " false " ， 则 将 其 返回 的 的, 如果 <unk> 被 省略 或 为 " none " ， 则 返回 最 接近 输入 值 的 整数
for example, doctest like examples in a rest document could also be <unk> with this option., 例如 ， " 例子 . path " 例子 示例 示例 示例 : 可以 用 的 的 的, 举例来说 ， <unk> 文档 中 类似 <unk> 的 示例 也 可以 使用 这个 选项 进行 <unk>
(note that omitting the launcher also <unk> file <unk> and is only recommended for per user <unk> when there is also a system wide installation that included the <unk>, 请 注意 ， <unk> 的 " <unk> 文件 文件 文件 描述符 ， 在 在 用户 的 的 时候 ， 当 在 在 的 的 时 ， 也 会 被 执行, （ 请 注意 ， 省略 启动器 也 会 省略 文件 关联 ， 并且 仅 在 全局 安装 包含 启动器 时才 建议 用于 每 用户 安装 。 ）
notable changes in python 3.5.4, python 3.5 . 4 的 显著 变化, python 3.5 . 4 的 显著 变化
if domain is "none", then the current global domain is returned, otherwise the global domain is set to domain , which is returned., 如果 省略 为 " none " ， 则 则 会 被 取消 ， 则 会 被 设为 为 假值 ， 则 返回 真值, 如果 domain 为 " none " ， 则 返回 当前 的 全局 域 ， 不 为 " none " 则 将 全局 域 设置 为 domain ， 并 返回 它
there have been some <unk> for switch statement syntax, but there is no <unk> <unk> on whether and how to do range tests, 有 一些 的 （ 例如 " " 的 但 但 不 存在 的 ， ， 且 如何 如何 如何 如何 <unk>, 对于 <unk> 语句 语法 已经 有 了 一些 建议 ， 但 尚未 就 是否 以及 如何 进行 范围 测试 达成 <unk>
<unk> is a <unk> drop in replacement for "distutils" first published in <unk>, <unk> 是 一个 <unk> 在 在 <unk> 中 中 的 的 范围 中 的 范围, <unk> （ 在 很大 程序 上 ） 是 作为 " distutils " 的 取代 者 ， 于 <unk> 年 首次 发布
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
memory blocks are surrounded by <unk> <unk> <unk> byte <unk>, 内存 块 由 " <unk> " <unk> <unk> <unk> " <unk> " <unk> " <unk> ", 内存 块 被 " 禁止 字节 " <unk> （ " <unk> " ： 字节 " <unk> " ）
replacing older functions with the "subprocess" module, " subprocess " 模块 " 模块 的 函数, 使用 " subprocess " 模块 替换 旧 函数
the c variable may also be declared as "pyobject "., c 变量 可以 也 可以 为 " " " " ", c 变量 也 可 被 声明 为 " pyobject " 类型
to enable an object to be <unk> you must create an event binding for it that starts the drag and drop process, 要 要 一个 对象 必须 必须 必须 必须 必须 必须 创建 一个 一个 事件 的 ， ， 它 必须 进程 进程 进程, 要 将 对象 设为 可 拖放 ， 你 必须 为 其 创建 启动 拖放 进程 的 事件 绑定
if delay is true, then file opening is deferred until the first call to <unk>, 如果 delay 为 真值 ， 则 文件 文件 ， 则 将 被 推迟 至 第一次 ( ) ", 如果 delay 为 真值 ， 则 会 将 文件 打开 延迟 到 首次 调用 " emit ( ) " 的 时候
the prefix , suffix , and dir arguments are the same as for <unk>, " 、 . <unk> ( ) " 和 参数 和 是 是 " " " ", prefix 、 suffix 和 dir 的 含义 与 它们 在 " mkstemp ( ) " 中 的 相同
works, but this code:, 这个 但 但 此 代码 :, 正常 工作 ， 但是 以下 代码
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
this class provides methods to read, parse and <unk> questions about the "robots.txt" file at url ., 这个 类 提供 了 解析 和 方法 和 " <unk> " 的 的 文件 的 的, 这个 类 提供 了 一些 可以 读取 、 解析 和 <unk> 关于 url 上 的 " robots . txt " 文件 的 问题 的 方法
the rfc requires that json be represented using either utf 8, utf 16, or utf 32, with utf 8 being the recommended default for maximum <unk>, 需要 需要 的 的 的 表示 utf 8 utf 8 utf 8 utf 8 utf 8 utf 8 utf 8 utf 8, rfc 要求 使用 utf 8 ， utf 16 ， 或 utf 32 之一 来 表示 json ， 为了 最大 <unk> 推荐 使用 utf 8
here is a sample python 2.x source file, <unk>, 以下 是 python python 的 python python . py " 的 python ., 这里 有 一个 python 2 . x 的 源码 文件 ， " example . py " ：
same as "'e'" except it uses an upper case <unk> as the separator character, 与 " ' ( ) " 相同 ， 它 它 以 " " " " " " " " " ' " ' ", 与 " ' e ' " 相似 ， 不同之处 在于 它 使用 大写字母 ' e ' 作为 分隔 字符
changed in version 3.3: the handlers argument was added, 在 3.3 版 更改 : 增加 了 参数 参数, 在 3.3 版 更改 : 增加 了 handlers 参数
(contributed by <unk> <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> r ' <unk> ' <unk> 在 bpo <unk> 中 贡献 。 ）
in python 3.8 this happens in fewer cases, 在 python 中 中 ， 在 下 中 的, 在 python 3.8 中 这种 情况 会 <unk> 发生
named tuples are especially useful for assigning field names to result tuples returned by the "csv" or "sqlite3" <unk>, 命名 元组 是 被 用来 的 的 的 的 的 的 的 的 的 的 的 的, 命名 元组 尤其 有 用于 赋值 " csv " " sqlite3 " 模块 返回 的 元组
"profile" and <unk> module reference, " profile " 和 " cprofile " 模块, " profile " 和 " cprofile " 模块 参考
the "parse_args()" method is <unk> here: positional arguments may only begin with " " if they look like negative numbers and there are no options in the parser that look like negative <unk>, 如果 方法 是 " <unk> ( ) " 方法 ， " " " " " ， " ， " ， 并且 不 存在 不 存在 的 的 ， 但 不 存在 的, " parse _ args ( ) " 方法 在 <unk> 谨慎 <unk> ： 位置 参数 只有 在 它们 看起来 像 负数 并且 解析器 中 没有 任何 选项 看起来 像 负数 时 才能 以 " " <unk>
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
"curses" terminal handling for character cell displays, " curses . 终端 " 用于 处理 的 的, " curses " 终端 字符 单元 显示 的 处理
the finalizer can be called directly as well, 该 可以 可以 被 调用 " py _ t ( ) ", 终结 器 也 可以 被 直接 调用
see <unk> for more information about the how the factory is called., 请参阅 " <unk> 了解 更 多 信息 ， 更 多 信息, 请参阅 " <unk> ( ) " 了解 有关 如何 调用 该 工厂 方法 的 更 多 信息
non data descriptors provide a simple mechanism for variations on the usual patterns of binding functions into methods., 非 数据 的 提供 了 一个 简单 的 的 ， ， 的 函数 的 函数, 非 数据 描述 <unk> 把 函数 绑定 为 方法 的 通常 模式 提供 了 一种 简单 的 机制
if the specified value is "true", the configuration is processed as described in the section on incremental configuration., 如果 指定 的 值 ， " " " " ， 则 在 在 的 的 的 的 的, 如果 指定 的 值 为 " true " ， 配置 会 按照 增量 配置 部分 所 描述 的 方式 来 处理
each module has its own private symbol <unk> which is used as the global symbol table by all functions defined in the module, 每个 模块 具有 有 了 这些 方法 ， 这些 方法 在 所有 模块 中 的 模块 中 的 模块 的 模块 的 模块 的 模块, 每个 模块 都 有 它 自己 的 私有 符号表 ， <unk> 用作 模块 中 定义 的 所有 函数 的 全局 符号表
<unk> add <unk> / <unk> to <unk>, " ' . <unk> ( ) " : " ' " ' " ' " ' " ' " ) ", asyncio : 在 各 transport 类中 添加 了 set _ protocol / get _ protocol 方法
another useful resource is the <unk> <unk>, 另 我们 的 <unk> 是 <unk> <unk> :, 另 一个 有用 的 资源 是 macpython <unk> ：
for example, if the <unk> and "bar" modules <unk> in package <unk> one way to <unk> your source tree is, 例如 ， 如果 ， 如果 <unk> 和 <unk> ， ， 则 模块 ， 则 模块 ， ， 则 会 使用 " <unk> . <unk> ( ) ", 举个 例子 ， 假设 " foo " 和 " bar " 模块 属于 " <unk> " 包 ， <unk> 源文件 树 的 一种 方式 是 ：
<unk> the set of characters that prefix files from which additional arguments should be read (default: "none"), " <unk> " 读取 的 文件 文件 文件 的 文件 ， 应当 应当 读取 读取 的 的 的, <unk> _ prefix _ chars 当 需要 从文件 中 读取 其他 参数 时 ， 用于 标识 文件名 的 前缀 字符 集合 （ 默认值 ： " none " ）
return a tuple "(y, x)" of the <unk> and width of the window., 返回 一个 元组 " " " 的 的 的 的 <unk>, 返回 窗口 高度 和 宽度 的 元组 " ( y , x ) "
since in <unk> this is the object's memory <unk> it happens frequently that after an object is deleted from memory, the next <unk> created object is allocated at the same position in memory, 由于 在 " 中 ， 这种 情况 下 ， ， ， 它 在 在 一个 对象 中 ， ， 它 是 一个 对象 的 对象 ， 它 在 在 内存 中 的, 因为 在 cpython 中 ， 这是 对象 的 内存地址 ， 所以 经常 发生 在 从 内存 中 删除 对象 之后 ， 下 一个 新创建 的 对象 被 分配 在 内存 中 的 相同 位置
if newline has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller <unk>, 如果 有 已 被 取消 ， ， 则 输入 输入 的 行 ， 被 被 被 被 被 被 被 被 被 为 为 真值, 如果 newline 具有 任何 其他 合法 的 值 ， 则 输入 行将 仅 由 给定 的 字符串 结束 ， 并且 行 结束符 会不加 转写 即 返回 给 调用者
import modules at the top of a file, 导入 模块 模块 的 文件 文件, 在 文件 的 顶部 导入 模块
python's standard library is very <unk> offering a wide range of <unk> as indicated by the long table of contents listed below, python 标准 库 库 是 " <unk> " ， ， ， 其中 的 内容 的 的 的 的 内容 的 内容, python 标准 库 非常 <unk> ， 所 提供 的 组件 涉及 范围 十分 广泛 ， 正如 以下内容 目录 所 显示 的
changed in version 3.9: the encoding and errors arguments were added., 在 3.9 版 更改 : the encoding and errors 参数, 在 3.9 版 更改 : 增加 了 encoding 和 errors 参数
can i have tk events handled while waiting for <unk>, 可以 可以 是 python 程序 的 错误 时 ， ", 在 等待 i / o 操作 时 能够 处理 tk 事件 吗 ？
they currently have the same top menu but a different default title and context <unk>, 它们 它们 的 相同 的 ， 但 但 ， 但 不 包括 的, 它们 目前 有着 相同 的 主 菜单 ， 但是 默认 标题 和 上下文 菜单 不同
this function may open a large number of files, as the best way to determine if a file on the time zone path is a valid time zone is to read the <unk> <unk> at the <unk>, 此 函数 可以 在 在 文件 上 ， 如果 在 文件 上 ， 如果 在 文件 上 的 的 文件 ， 如果 在 文件 上 的 的 时间 ， 被 被 <unk>, 此 函数 可能 会 打开 大量 的 文件 ， 因为 确定 时 区 路径 上 某个 文件 是否 为 有效 时区 的 最佳 方式 是 读取 开头 位置 的 “ 魔术 字符串 ”
changes in the python api, python api 的 变化, python api 的 变化
all of these programming environments provide syntax <unk> <unk> <unk> and access to the interactive interpreter while coding, 这些 这些 编程 支持 提供 了 一些 的 " <unk> " <unk> " ， " 和 " <unk> " 解释器 的 解释器, 所有 这些 编程 环境 都 提供 语法 <unk> ， 自动 缩进 以及 在 编写 代码 时 使用 交互式 解释器 等 功能
they fail when the <unk> module wants to <unk> a name out of the first <unk> module import <unk> and the import is at the top level, 当 在 模块 时 ， 模块 模块 模块 模块 （ 模块 模块 （ 模块 模块 导入 模块 模块 ， 模块 导入 模块 层级 导入 模块 层级 导入, 但是 当 第 2 个 模块 想 从 第 1 个 模块 中 获取 一个 名称 ( " from module import name " ) 并且 导入 位于 顶层 时 ， 就 会 出错
this method can be used with any argument which <unk> the rules for sequence objects, including any new classes you might define yourself, 此 方法 可以 使用 任何 参数 参数 ， " <unk> " 序列 ， 序列 的 任何 任何 任何 的 的 的 新 的 的, 此 方法 的 参数 可以 是 任何 遵循 序列 规则 的 对象 ， 包括 您 自己 定义 的 任何 新 的 类
note that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call., 请 注意 ， 在 参数 中 的 参数 是 是 被 在 的 中 中 的 的 ， 它们 在 在 函数 中 中 的, 注意 打印 时 关键字 参数 的 顺序 保证 与 调用函数 时 提供 它们 的 顺序 是 相匹配 的
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
interactive input editing and history substitution, 交互式 编辑 和 历史 历史, 交互式 编辑 和 编辑 历史
the change is then applied to every character position in that <unk>, 改变 的 被 取消 为 " <unk> " ) " 被 视为, 随后 此 修改 将 应用 于 放置 到 该 窗口 中 的 每个 字符
an empty list is returned when no rows are available., 空 列表 时 返回 时 返回 返回 时 返回 返回, 当 没有 可用 行时 将 返回 一个 空 列表
this callable may either return a path entry finder that can handle the path entry, or it may raise "importerror", 此 调用 可以 接受 一个 一个 path " path " 对象 ， 可以 在 字符串 或 路径 或 或, 每个 可 调用 对象 或是 返回 可 处理 路径 条 目的 path entry finder ， 或是 引发 " importerror "
the module "curses" defines the following functions:, 模块 " 定义 了 定义 了 函数 ：, " curses " 模块 定义 了 以下 函数 ：
a "popen" "creationflags" parameter to specify that a new process is not associated with the <unk>, 用于 用于 进程 进程 创建 一个 新 的 进程 ， 并 将 阻塞, 指明 一个 新 进程 不会 关联 到 任务 的 " popen " " creationflags " 形参
note that exceptions which occur while calling "__hash__()" and <unk> methods will get <unk>, 请 注意 ， ， ， 并 调用 " dict . <unk> ( ) " 和 " 方法 ( ) " 方法 方法 将 将 " " ( ) " 方法, 需要 注意 的 是 ， 调用 " __ hash __ ( ) " 和 " __ eq __ ( ) " 方法 产生 的 异常 不会 被 抛出
as <unk> <unk> there's a module level <unk> function, too., 作为 " <unk> " ， " ， " 模块 级 级 的 函数, 正如 你 所 期望 的 那样 ， 还有 一个 模块 级 " re . <unk> ( ) " 函数
it is possible to crash the python interpreter with a <unk> <unk> string due to stack depth limitations in python's ast compiler., 它 python 解释器 解释器 的 python 解释器 解释器 的 python 解释器 的 字符串 ， ， 其中 的 python 中 的 的, 足够 复杂 或是 <unk> 的 字符串 可能 导致 python 解释器 的 崩溃 ， 因为 python 的 ast 编译器 是 有 栈 深 限制 的
locale information is not used by <unk>, 使用 " <unk> " ， 否则 使用 ", " ctime ( ) " 不会 使用 区域 设置 信息
the output string will not include time zone information, regardless of whether the input is aware or <unk>, 输出 字符串 字符串 不会 不会 时间 的 的 ， ， ， 或者 会 被 忽略, 输出 字符串 将 并 不 包括 时 区 信息 ， 无论 输入 的 是 感知 型 还是 简单 型
<unk> <unk> means that the copying operation occurs within the <unk> avoiding the use of <unk> buffers in python as in <unk>, " <unk> " 意味着 " ， " <unk> " 的 " <unk> " " " python . py _ <unk> " 中 的 " " " " " ", " fast copy " 意味着 拷贝 操作 将 发生 于 内核 <unk> ， 避免 像 在 " " <unk> . write ( <unk> . read ( ) ) " " 中 那样 使用 用户 空间 的 缓冲区
"tty" terminal control functions, " tty " 控制 函数, " tty " 终端 控制 功能
do not use "stdout pipe" or "stderr pipe" with this function, 不 使用 " 或 " 或 " pipe _ pipe _ pipe ( ) " 方法, 请 不要 在 此 函数 中 使用 " stdout pipe " 或 " stderr pipe "
the <unk> scope, which is searched first, contains the local names, " <unk> " " 的 是 包含 包含 包含 包含 名称 名称 名称, <unk> 搜索 的 最 内部 作用域 包含 局部 名称
pep 302 new import hooks, pep 302 : 新 的 钩子, pep 302 新 导入 钩子
this may cause issues because utf 8 is widely used on the internet and most unix systems, including <unk> (windows <unk> for <unk>, 这 可能 会 允许 因为 因为 因为 因为 在 大多数 平台 上 ， 大多数 大多数 的 <unk> <unk> <unk>, 这 可能 会 造成 问题 ， 因为 因特网 和 大多数 unix 系统 包括 <unk> ( windows <unk> for linux ) 广泛 使用 utf 8
like <unk> but raises an exception for duplicate keys., 类似 于 " <unk> _ <unk> ( ) " ， 但 引发 一个 异常 异常, 类似 于 " dict _ update " 但 对于 重复 的 <unk> 引发 异常
"argparse" will make sure that only one of the arguments in the <unk> exclusive group was present on the command line:, 将 将 在 将 只 在 在 " 中 的 " 中 的 " 中 " " " " " ", " argparse " 将会 确保 <unk> 组中 只有 一个 参数 在 命令行 中 可用 :
return a "datetime" corresponding to a date_string in one of the formats emitted by <unk> and <unk>, 返回 一个 对应 于 " " " " " " " " " " " " 的 ", 返回 一个 对应 于 " date . <unk> ( ) " 和 " datetime . <unk> ( ) " 所 提供 的 某 一种 date _ string 的 " datetime " 对象
<unk> may be used to declare abstract methods for properties and <unk>, " 可以 使用 用于 用于 用于 使用 的 属性 和 方法, " abstractmethod ( ) " 可 被 用于 声明 特性 属性 和 描述 器 的 抽象 方法
parser level defaults can be particularly useful when working with multiple parsers, 解析器 层级 的 默认 ， 可以 在 使用 " 解释器 ", 解析器 层级 默认值 在 需要 多 解析器 时会 特别 有用
the " x <unk> option now logs "close()" exceptions in <unk> <unk>, " x " " " 选项 " 选项 " " " " " " " " " " " " " " " ", " x dev " 选项 现在 在 " io . iobase " <unk> 函数 中 记录 " close ( ) " 异常
the argument must be an instance of <unk> including subclasses, 参数 必须 为 " 实例 " 实例 实例 的 实例, 参数 必须 是 " pydatetime _ <unk> " 包括 其子 类 的 实例
unicode objects are converted to c strings using "'utf 8'" encoding., unicode 对象 为 " null " ， c 字符串 为 " none ", unicode 对象 都 被 通过 " ' utf 8 ' " 编码 转化成 c 字符串
the <unk> keyword argument associates a different number of command line arguments with a single action, " <unk> 关键字 参数 参数 参数 " 参数 " 参数 参数 参数 参数 参数, " nargs " 命名 参数 关联 不同 数目 的 命令行 参数 到 单一 动作
think of this as <unk> the old tuple and creating a new one, only more efficiently, <unk> ， 此 属性 的 元组 ， 元组 和 ， 创建 一个 新 的 的 的, 把 它 <unk> 是 销毁 旧 元组 并 创建 一个 <unk> 组 ， 只会 更 有效
this method returns a list of 2 tuples of the form returned by <unk>, 此 方法 返回 返回 由 " 的 " 的 " 的 元组, 该 方法 返回 一个 <unk> " <unk> ( ) " 返回 的 二元 组 的 列表
it is used by the sun audio <unk> among others., 它 音频 音频 <unk> 的 <unk>, sun 音频 <unk> 等 使用 该 编码
this dictionary has the following strings as <unk>, 这个 字典 有 以下 字符串 :, 此 字典 具有 以下 字符串 作为 键 ：
use of the <unk> parameter with "emailmessage" objects is deprecated., 使用 " emailmessage " 对象 而言 对象 的 参数 是 被 弃用, 于 " emailmessage " 对象 而言 ， <unk> 参数 已 被 弃用
if the module has a "__spec__" attribute, the information in the spec is used to generate the repr, 如果 模块 具有 一个 " ， " ， 则 会 被 设置 的 的 的, 如果 模块 具有 " __ spec __ " 属性 ， 其中 的 规格 信息 会 被 用来 生成 repr
by default, this is equivalent to <unk>, 默认 情况 下 ， 相当于 " 相当于 ( ) ", 默认 状态 下 ， 相当于 " int ( num _ str ) "
the only lines that can appear before a future statement are:, 只有 只 在 在 之前 中 被 之前 语句, 可以 出现 在 future 语句 之前 行 只有 :
remove the given parameter completely from the content type header, 从 给定 的 的 的 的 的 的 的 形参, 从 content type 头字 段 中 完全 移 去 给定 的 参数
accessing a function on a loaded library raises an auditing event <unk> with arguments <unk> (the library object) and "name" (the <unk> name as a string or <unk>, 将 一个 一个 的 一个 一个 " ctypes " " " " " " " " " " " " " " " " " ， " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 引发 一个 审计 事件 " ctypes . <unk> " ， 附带 参数 " library " , " name "
deprecated functions and variables, 已弃 用 的 函数 和 变量, 已弃 用 的 函数 和 变量
similar to <unk> but also <unk> data to be used as an attribute value, 类似 于 " " " " " ， 但 " " " " " 作为 值 值 值, 类似 于 " <unk> ( ) " ， 但 还 会 对 data 进行 处理 以 将 其 用作 属性 值
the available presentation types for floating point and decimal values are:, 对于 的 的 类型 类型 为 十进制 为 的 值 值 ：, 浮点数 和 小 数值 可用 的 表示 类型 有 ：
when debugging is on, commands to be executed are <unk> and the shell is given <unk> x" command to be more <unk>, 当 调试 调试 被 被 时 ， 被 被 被 被 被 被 被 <unk> ， ， " " " " " " " " " " ", 当 启用 调试 时 ， 要 执行 的 命令 会 被 打印 出来 ， 并且 会 <unk> 终端 " set x " 命令 以 输出 更 详细 的 信息
what's a negative <unk>, 逗号 负数 负数 负数, 什么 是 负数 序号 ？
mac os x can <unk>, 安装 x x x ：, mac os x 返回 ：
the complete signature is:, 完整 的 的 如下 :, 完整 的 签名 为 :
a <unk> job is to determine whether it can find the named module using whatever strategy it knows about, <unk> <unk> 是 一个 <unk> ， 它 可以 通过 使用 模块 模块 的 模块 模块, 查找 器 的 任务 是 确定 是否 能 使用 其 <unk> 的 策略 找到 该 名称 的 模块
<unk> <unk> an integer or floating point number representing the modification time of the source code;, " _ <unk> _ <unk> ( ) " 或 整数 或 浮点数 浮点数 的 的 的 的 的, " ' mtime ' " ( <unk> 选项 ) : 一个 表示 源码 修改 时间 的 整数 或 浮点数 ；
finalization and de <unk>, " 和 " <unk> ", 终结 和 内存 释放
sometimes (e.g. when using <unk> it may be useful to simply override any older arguments with the same option string, 当 使用 时 时 ， 它 可能 可能 可能 被 使用 的 选项 的 的 参数, 有些 时候 （ 例如 ： 使用 <unk> ） ， 重写 旧 的 有 相同 选项 字符串 的 参数 会 更 有用
write the given bytes like object , b , and return the number of bytes written <unk> equal to the length of b in bytes, since if the write fails an "oserror" will be <unk>, 写入 给定 字节 like object 对象 ， 返回 返回 的 的 的 的 的 的 长度 的 长度 的 长度 的 长度 的 长度 的 长度 ， 如果, 写入 给定 的 bytes like object b ， 并 返回 写入 的 字节数 ( 总是 等于 b 的 字节 长度 ， 因为 如果 写入 失败 则 会 引发 " oserror " )
it is commonly called "the <unk> although it is only one of many different mathematical <unk>, 它 在 调用 的 " <unk> " ， 但 它 是 " 不同 的 不同 的 ", 通常 <unk> “ 平均数 ” ， 尽管 它 指示 <unk> 数学 平均数 之一
when a comma is <unk> in code such as <unk> <unk> <unk> <unk> the compiler displays a <unk> with a helpful suggestion, 当 一个 <unk> <unk> 时 ， ， <unk> <unk> " <unk> " " " " <unk> " ， ， ， ， ， ， <unk> <unk> <unk> 的 <unk>, 当 类似 " [ ( 10 , 20 ) ( 30 , 40 ) ] " 这样 在 代码 <unk> 了 一个 逗号 时 ， 编译器 将 显示 " <unk> " 并 附带 更 有 帮助 的 提示
<unk> and <unk> now raise a "valueerror" if the given timeout for their constructor is zero to prevent the creation of a non blocking socket, " <unk> . <unk> ( ) " 和 " <unk> ( ) " , " ) " ) " 将 被 阻塞 的 的 ， 如果 " ， 则 将 引发 阻塞 阻塞 套 接字, 现在 " <unk> " 和 " <unk> _ ssl " 当 它们 的 构造 器所 给定 的 超时 参数 为 <unk> 防止 创建 非 阻塞 套 接字 时会 引发 " valueerror "
alias for <unk> for backward <unk>, 别名 " <unk> " 的 的 （ 例如 " ）, " <unk> " 的 别名 ； 用于 向 后 兼容
leap seconds are excluded from this total on all posix compliant platforms., 在 " 中 中 的 ， 在 此 所有 所有 的 的 的, 在 所有 符合 posix 标准 的 平台 上 ， 闰秒 都 会 从 总 秒数 中 被 <unk>
get a child process watcher object., 获取 一个 进程 进程 进程 对象, 获取 子 进程 监视器 对象
<unk> <unk> <unk> "builtins" and other key modules is not recommended, " <unk> " 和 " 和 其他 其他 的 的 模块 的, 不 推荐 重新 加载 " " sys " ， " __ main __ " ， " builtins " 和 其它 关键 模块
changed in version 3.6: subclasses of "type" which don't override <unk> may no longer use the one argument form to get the type of an object., 在 3.6 版 更改 : " 了 " 的 _ <unk> ( ) " ， 不再 参数 参数 参数 作为 参数 参数 的 对象, 在 3.6 版 更改 : " type " 的 子类 如果 未 重载 " type .__ new __ " ， 将 不再 能 使用 一个 参数 的 形式 来 获取 对象 的 类型
return the absolute value of the argument, 返回 的 值 的 返回值, 返回 参数 的 绝对值
multi window text editor with multiple <unk> python <unk> <unk> <unk> call <unk> <unk> <unk> and other features, 在 " curses . <unk> " 的 python python <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ) ", 提供 多次 撤销 操作 、 python 语法 <unk> 、 <unk> 缩进 、 函数调用 提示 、 自动 补全 等 功能 的 <unk> 文本编辑 器
the methods <unk> <unk> and <unk> have been added, " " " " " " " " 和 " turtle . <unk> " 和 " turtle _ <unk> ( ) " 和 " turtle, 新增 了 " turtle . <unk> ( ) " , " turtle . <unk> ( ) " 和 " turtle . get _ <unk> ( ) " 方法
this <unk> with python's usage of the same character for the same purpose in string literals., 这 与 " 的 " 的 的 的 与 " 的 的 的 的 字符串 的 的 字符串, 这 与 python 在 字符串 文字 中 用于 相同 目的 的 相同 字符 的 使用 <unk>
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
psf license <unk> for python <unk>, <unk> <unk> <unk> python <unk> 的 python, 用于 python 3.9 . 0 的 psf 许可 协议
see section tutorial for an example., 请参阅 教程 教程 教程 教程, see section 教程 for an example .
these installers are primarily intended to add a per user installation of python, with the core interpreter and library being used by a single user, 这些 这些 是 要 在 的 的 的 的 的 的 的 的 的 的 的 的 使用 的 的 使用 的 使用, 这些 安装程序 主要 用于 每个 用户 单独 安装 python 时 ， 添加 核心 解释器 和 库
<unk> print or retrieve a stack traceback, " traceback . 打印 或 打印 堆栈 回溯, " traceback " 打印 或 检索 堆栈 回溯
end users typically would not expect <unk> + <unk> to display as <unk> as it does with binary floating <unk>, （ 不 不 不 不 不 <unk> ， ， " " " " " " <unk> " <unk> " <unk> " 的 的, <unk> 通常 不 希望 " 1.1 + 2.2 " 如 二进制 浮点数 表示 那样 被 显示 为 " <unk> "
this function attempts to guess which of the several simple database modules available <unk> <unk> or "dbm.dumb" should be used to open a given file., 此 函数 会 使用 了 简单 的 简单 的 数据库 （ 例如 " <unk> " 或 " " " 来 创建 一个 给定 的 的, 此 函数 会 猜测 各种 简单 数据库 模块 中 的 哪 一个 是 可用 的 " dbm . gnu " , " dbm . ndbm " 还是 " dbm . dumb " 应该 被 用来 打开 给定 的 文件
classes provide a means of <unk> data and functionality together, " 提供 " 类 的 数据 数据 和 " 的 ", 类 提供 了 一种 组合 数据 和 功能 的 方法
asynchronous iterable an object, that can be used in an "async for" statement, 异步 对象 可 可 对象 对象 可以 可以 在 " async " " async ", asynchronous iterable 异步 可 迭代 对象 可 在 " async for " 语句 中 被 使用 的 对象
keyword argument : an argument preceded by an identifier (e.g. <unk> ") in a function call or passed as a value in a dictionary preceded by " ", 关键字 参数 参数 参数 （ 一个 " " " " " " " " " " " " " " " " " " " " " " 的 值, 关键字 参数 : 在 函数调用 中 前面 带有 标识符 （ 例如 " name " ） 或者 作为 包含 在 前面 带有 " " 的 字典 里 的 值 传入
run command with arguments, 运行 参数 介绍, 附带 参数 运行 命令
embedding the array of fields into the same <unk> <unk> the number of <unk> <unk> the memory management <unk>, <unk> 数组 的 的 <unk> <unk> <unk> <unk> <unk> 内存 内存 的 内存, 将 字 段 的 数组 嵌入 到 相同 的 内存 分配 中 可以 减少 内存 分配 的 次数 ， 这 提高 了 内存 分配 的 效率
changed in version 3.8: added the optional initial parameter., 在 3.8 版 更改 : 添加 了 可选 的 参数, 在 3.8 版 更改 : 添加 了 可选 的 <unk> 形参
changed in version 3.5: an error is raised for invalid keys., 在 3.5 版 更改 : 在 一个 " is _ <unk> " " ", 在 3.5 版 更改 : an error is raised for <unk> keys .
if the path entry is not present in the cache, the path based finder iterates over every callable in <unk>, 如果 路径 条目 条目 不 存在 ， 则 基于 " 的 " ， 则 " " " " " ", 如果 路径 条目 不 存在 于 缓存 中 ， 基于 路径 的 查找 器会 迭代 " sys . path _ hooks " 中 的 每个 可 调用 对象
when writing functional style programs, you'll often need little functions that act as predicates or that combine elements in some way., 当 编写 风格 的 风格 ， ， ， ， ， 的 的 函数 函数 函数 返回 以 在 其他 函数 的 元素, 编写 函数 式 风格 程序 时 ， 你 会 经常 需要 很小 的 函数 ， 作为 谓词 函数 或者 以 某种 方式 来 组合 元素
deprecated since version 3.4: use "find_spec()" instead., 3.4 版后 已 移除 : " mkstemp _ <unk> ( ) ", 3.4 版后 已 移除 : 使用 " find _ spec ( ) " 来 代替
<unk> <unk> has an <unk> attribute., " _ <unk> " 具有 " <unk> " 一个 " <unk> " 属性, " server " 额外 拥有 一个 " address " 属性
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
in the latest versions of windows, this <unk> can be expanded to approximately <unk> characters, 在 这种 情况 下 ， 的 的 的 ， " " " " " " " " " " " " " ", 在 最新 版本 的 windows 中 ， 此 限制 可 被 扩展 到 大约 32 , <unk> 个字符
decode the <unk> encoded bytes like object or ascii string s and return the decoded "bytes"., 解码 <unk> 编码 的 编码 bytes like object 或 ascii 字符串 的 并 返回 " null ", 解码 <unk> 编码 过 的 bytes like object 或 ascii 字符串 s 并 返回 解码 过 的 " bytes "
if you're not using the "with" keyword, then you should call <unk> to close the file and immediately free up any system resources used by it, 如果 未 使用 " with ， ， 你 应该 调用 " <unk> ( ) " 来 ， 并 在 文件 并 在 任何 任何 任何 使用 的, 如果 你 没有 使用 " with " 关键字 ， 那么 你 应该 调用 " f . close ( ) " 来 关闭 文件 并 立即 释放 它 使用 的 所有 <unk>
return "true" if the current context references a file or directory in the zip file., 如果 当前 上下文 中 返回 一个 文件 中 " " " " 文件 " 文件 " 文件 ", 如果 当前 上下文 引用 了 zip 文件 内 的 一个 文件 或 目录 则 返回 " true "
"getpass" portable password input, " getpass " 便携式 密码 输入 输入, " getpass " 便携式 密码 输入 工具
the module provides a lot of functionality and flexibility, 模块 模块 提供 了 和 的 和 和, 这个 模块 提供 许多 强大 而 灵活 的 功能
equivalent to "del <unk>, 相当于 " " " " [ : ] ", 相当于 " del a [ : ] "
<unk> use <unk> or <unk>, " pyunicode _ <unk> ( ) " : 使用 " pyunicode _ <unk> ( ) " 或 " pyunicode _ <unk> ( ) ", " py _ unicode _ <unk> " : 使用 " pyunicode _ <unk> ( ) " 或 " pyunicode _ get _ length "
create and return a new event loop object., 创建 并 返回 一个 新 的 新 的 新 新, 创建 并 返回 一个 新 的 事件 循环 对象
the optional keyword only default parameter is returned by <unk> when no value for the variable is found in the current context., 可选 的 关键字 参数 的 默认值 为 " default " ) " 方法 返回 的 值 值, 调用 " contextvar . get ( ) " 时 ， 如果 上下文 中 没有 找到 此 变量 的 值 ， 则 返回 可选 的 仅 命名 参数 default
<unk> on the linux documentation <unk> howto <unk> this collection is an <unk> to <unk> documentation that's more detailed than the python library reference., 在 linux 上 文档 文档 文档 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> python python 的 更 更 更 更 更 更, <unk> 提供 比 python 库 参考 帮助 更 <unk> 的 文档
note that spaces and tabs appearing at the end of lines are always <unk> as per rfc <unk>, 请 注意 ， ， ， 0 ， ， ， 末尾 末尾 末尾 末尾 被 <unk> <unk>, 请 注意 出现 在 行尾 的 空格 与 制表符 总是 会 被 编码 ， 具体 描述 见 rfc <unk>
parameters: pen a dictionary with some or all of the below listed keys, 参数 : 字典 字典 字典 的 所有 或 所有 所有 所有 所有 所有, 参数 : <unk> 一个 包含 部分 或 全部 下列 键 的 字典
if the sample size is larger than the population size, a "valueerror" is raised., 如果 给出 长度 长度 ， 则 将 ， 则 将 引发 " valueerror ", 如果 样本 大小 大于 总体 大小 ， 则 引发 " valueerror "
if nothing appears to <unk> or if <unk> is <unk> command line editing isn't <unk> you'll only be able to use <unk> to remove characters from the current line., 如果 未 尝试 为 " 或 " 或 " ， 则 " " " ， 则 " ， 则 会 使用 " 0 " 中 的 当前, 如果 什么 都 没 发生 ， 或是 回显 了 " ^ p " ， 说明 不 支持 行 编辑 ； 你 只能 用 <unk> 键 从 当前 行中 删除 字符
class attributes can be used as defaults for instance attributes, but using mutable values there can lead to <unk> results, 类 属性 属性 可以 通过 实例 ， 实例 ， 但 使用 ， 但 ， ， 可以 为 " <unk> ( ) " 来 来, 类 属性 可 被 用作 实例 属性 的 默认值 ， 但 在 此 场景 下 使用 可变 值 可能 导致 未 预期 的 结果
these private code points will then be turned back into the same bytes when the <unk> error handler is used when writing data, 这些 这些 代码 代码 将 被 使用 " " " " " " " " " " " 时 ， 当 错误 时 的 错误, 当 在 写入 数据 时 使用 " <unk> " 错误 处理程序 时 ， 这些 私有 代码 <unk> 被 转 回到 相同 的 字节 中
active code (including globals that are initialized from imported <unk>, 在 代码 的 的 ， 有 从 <unk> 的 的, 活动 代码 （ 包括 从 导入 值 初始化 的 全局变量 ）
produces the following output (note that the initial newline is not <unk>, 以下 几行 以下 输出 输出 的 的 的 的, 将 产生 如下 输出 （ 注意 最 开始 的 换行 没有 包括 进来 ） :
in c, you can cast one type into another type, 在 ， 情况 下 ， 可以 为 一个 类型 类型 类型 类型 类型 类型, 在 c 中 ， 你 可以 将 一个 类型 强制 转换 为 另 一个
<unk> " ("str" or bytes like object ) <unk> this format accepts unicode objects as well as bytes like objects, " " " or " 或 或 bytes like object 对象 的 对象 的 对象 对象 对象 对象 对象 的 字节 串 对象 对象 对象 的 对象 对象, " s " ( " str " or bytes like object ) [ py _ buffer ] 这个 表达式 既 接受 unicode 对象 也 接受 类 字节 类型 对象
changed in version 3.2: allow the use of named arguments., 在 3.2 版 更改 : 添加 了 使用 参数, 在 3.2 版 更改 : allow the use of named arguments .
<unk> is the name for the <unk> style <unk> to be used, " 是 . <unk> " 的 的 <unk> 的 的 <unk>, <unk> 为 <unk> <unk> 的 名字
if the method fails, an "oserror" exception is raised., 如果 此 方法 引发 一个 异常 ， 则 引发 " 异常 " 异常, 如果 方法 失败 ， 则 引发 一个 " oserror " 异常
bpo <unk> fixed a memory leak in the compiler when it raised some <unk> errors during <unk>, bpo <unk> : 修复 在 遇到 时 ， 在 遇到 时 ， " 错误 错误 错误, bpo <unk> : 修复 了 编译器 在 标记 化 过程 中 引发 一些 不 常见 错误 时 内存 <unk> 的 问题
this example matches the word <unk> followed by a string enclosed in <unk> <unk> and changes <unk> to <unk>, 此 示例 示例 " ' " ' " ' " ' " ' " ' " ' " ' " 和 " <unk> " <unk> " <unk> ", 这个 例子 匹配 单词 " section " 后 跟 一个 用 " { " ， " } " 括 起来 的 字符串 ， 并 将 " section " 改为 " <unk> "
see also tim <unk> introduction to the <unk> chapter in the python cookbook , published by <unk>, 请参阅 " <unk> . <unk> ( ) " <unk> python python 中 的 的 <unk> 中 的 的 <unk> <unk> <unk> <unk>, <unk> tim peters 对 o ' <unk> <unk> 的 python <unk> 中 “ 算法 ” 章节 的 介绍
directory and files operations, 目录 和 文件 操作, 目录 和 文件 操作
the file <unk> <unk> and group are unaffected, 文件 文件 <unk> <unk> _ <unk> " 和 " 组 ", 文件 的 内容 、 所有者 和 分组 将 不受 影响
the base exception class is <unk>, 基本 " 类 " " 是 " " ., 基础 异常 类 是 " <unk> "
a buffered binary stream providing higher level access to a seekable "rawiobase" raw binary stream, 一个 缓冲 二进制 二进制 转换 为 " rawiobase " 的 二进制 流 的 二进制 流 的 二进制 流, 一个 提供 对 不可 查找 的 " rawiobase " 原始 二进制 流 的 高层 级 访问 的 缓冲 二进制 流
the return value of "__import__()" is used to perform the name binding operation of the "import" statement, 返回值 的 值 是 " 的 " 的 名称 名称 名称 名称 名称 名称, " __ import __ ( ) " 的 返回值 会 被 用于 执行 " import " 语句 的 名称 绑定 操作
if no argument is a float, the conversion and <unk> processes are exact <unk> information is <unk>, 如果 没有 参数 为 一个 ， 则 和 <unk> <unk> 的 的 ， 则 会 被 忽略, 如果 没有 任何 参数 为 浮点 型 的 情况 下 ， 则 转换 和 标准化 过程 将 是 完全 精确 的 （ 不会 丢失 信息 ）
<unk> if idle with the " n" switch <unk> <unk> is used, this value should be set to "true" in <unk>, " 如果 如果 " 如果 " " " " " " " " " " " " ， 则 将 " " " " " " " " " " " " " ", <unk> : 如果 启动 idle 时 使用 了 " n " <unk> ( <unk> 进程 ) ， " turtle . cfg " 中此 数值 <unk> 为 " true "
<unk> the specified bytes, which must have been previously <unk>, " 指定 指定 的 必须 必须 必须 必须 为 " <unk> ", 解锁 指定 的 字节 数据 ， 该 对象 必须 在 之前 被 锁定
the api is equally usable from c++, but for <unk> it is generally referred to as the python/c api, api api 的 " " " " " 的 ， 但 但 它 是 它 与 api 的 api, 该 api 在 c++ 中 同样 可用 ， 但 为 简化 描述 ， 通常 将 其 称为 python / c api
<unk> the set of characters that prefix optional arguments (default: ' <unk>, " <unk> " 的 的 的 参数 （ 即 （ 即 ） ） ）, prefix _ chars 可 选 参数 的 前缀 字符 集合 （ 默认值 ： ' ' ）
the path based finder, 基于 路径 的 查找, 基于 路径 的 查找 器
other fields of the object are not affected., 其他 对象 的 的 的 对象, 这个 对象 的 其他 字 段 不会 被 影响
supported clock names and the corresponding functions to read their value are:, 支持 的 名称 名称 和 与 " __ ( ) " 的 的 的 值 的 值, 支持 的 时钟 名称 和 读取 其值 的 相应 函数 是 ：
see the "import" statement for the exact details of that name binding operation., 请参阅 " import " 语句 的 的 的 名称 的 的 名称, 请参阅 " import " 语句 了解 名称 绑定 操作 的 更 多 细节
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
if t is not provided, the current time as returned by "localtime()" is used, 如果 未指定 不 为 " ， 则 返回 " os . localtime ( ) " 返回 返回 的 时间, 如果 未 提供 t ， 则 使用 由 " localtime ( ) " 返回 的 当前 时间
a number of browser types are predefined, 对 类型 的 类型 类型, 预定 义 了 许多 浏览器 类型
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
python is a high level general purpose programming language that can be applied to many different classes of problems., python 是 一种 了 一种 的 的 ， ， 可以 可以 是 不同 的 不同 的 不同 的, python 是 一种 高层 级 的 <unk> 编程语言 ， 可 用于 解决 许多 不同 <unk> 的 问题
instances of this class behave like <unk> <unk> except that the python gil is not released during the function call, and after the function execution the python error flag is checked, 这个 类 类 " <unk> " " " " " " " " ， ， python python 的 函数 ， 在 执行 函数 执行 执行 python 执行 python 执行, 这个 类 实例 的 行为 与 " <unk> " 类似 ， <unk> 不会 在 调用函数 的 时候 释放 gil 锁 ， 且 调用 结束 后 会 检查 python 错误码
if the future is cancelled before <unk> then "cancellederror" will be raised., 如果 future 被 取消 则 会 被 取消 则 将 " " ", 如果 <unk> 在 完成 前 被 取消 则 " cancellederror " 将 被 触发
the count parameter defaults to "none", resulting in the loop terminating only when all channels have been closed, 该 参数 默认 为 " none " " " " " " " " 的 所有 所有 的 所有, count 形参 默认 为 " none " ， 导致 循环 仅 在 所有 通道 关闭 时 终止
you can also extract a tar archive into a different directory by passing the directory's <unk>, 你 可以 还 可以 通过 一个 包含 的 的 的 的 的 的 的 的, 你 也 可以 通过 传入 目录 名称 将 一个 tar 归档 提取 到 不同 的 目录 :
many packages can also be installed via the <unk> extension or pip <unk> see <unk>, 许多 许多 可以 可以 可以 通过 通过 " <unk> " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", 许多 包 也 可以 通过 <unk> 扩展 或 pip 包装 器 安装 ， 请参阅 https : / / pip . <unk> . io /
another example that may behave differently from what one would expect is this:, 另 一个 可能 可能 从 从 从 中 从 " <unk> " 对象, 下面 是 另 一个 可能 和 预期 有 偏差 的 例子 :
extracting parameters in extension functions, 在 扩展 的 函数, 提取 扩展 函数 的 参数
thread identifiers may be recycled when a thread exits and another thread is created, 线程 可能 被 一个 线程 线程 线程 线程 线程 线程 线程 线程 线程, 当 一个 线程 退出 而 另外 一个 线程 被 创建 ， 线程 标识符 会 被 复用
"none" can be provided as a fallback value., " none " 可以 被 作为 一个 值, 可以 提供 " none " 作为 fallback 值
it has methods which allows tasks to be <unk> to the worker processes in a few different ways., 它 具有 定义 了 " __ " __ ( ) " 方法 的 的 的 的 的 的, 它 具有 允许 以 几种 不同 方式 将 <unk> 到 工作 进程 的 方法
return "true" if pathname path is a <unk> point : a point in a file system where a different file system has been <unk>, 如果 seq 为 为 一个 " ， 则 则 文件 ， 则 将 引发 一个 文件 的 文件 描述符, 如果 路径 path 是 <unk> 点 （ 文件系统 中 <unk> 其他 文件系统 的 点 ） ， 则 返回 " true "
this makes it possible to specify a format string for a "date" object in formatted string literals and when using "str.format()", 这 使得 它 指定 为 字符串 字符串 字符串 字符串 字符串 字符串 字符串 字符串 字符串 表示 的 字符串 和 " 字符串 " 和 " 字符串, 此 方法 使得 为 " date " 对象 指定 以 格式化 字符串 字 面值 表示 的 格式化 字符串 以及 使用 " str . format ( ) " 进行 格式化 成为 可能
the best possible value for j is then that <unk> <unk>, 最佳 的 值 值 ， 为 " <unk> [ : ] ", 这样 j 的 最佳 可能 值 就是 经过 舍入 的 <unk> :
return a string containing a printable representation of an object, 返回 一个 包含 一个 字符串 的 的 对象, 返回 包含 一个 对象 的 可 打印 表示 形式 的 字符串
pops tos and delegates to it as a <unk> from a generator ., 弹 " tos 并 将 其 从 一个 generator 一个 generator, 弹 出 tos 并 将 其 委托 给 它 作为 generator 的 子 迭代 器
the new <unk> format specifier described in pep <unk> format specifier for thousands <unk>, 新 的 <unk> <unk> 格式 格式 说明符 <unk> 中 的 pep <unk> 格式 说明符 格式 说明符 格式, the new " " , " " format <unk> <unk> in pep <unk> : 千位 分隔符 的 格式 说明符 .
an exception is raised at the point where the error is <unk> it may be handled by the <unk> code block or by any code block that directly or <unk> invoked the code block where the error occurred., 当 异常 在 在 <unk> 时 ， 将 被 由 " 子句 _ callmethod ( ) " 所 确定 的 代码 块 的 代码 块 ， 或 代码 块 的 代码 块 的 代码 块, 异常 会 在 错误 被 检测 到 的 位置 引发 ， 它 可以 被 当前 <unk> 代码 块 或是 任何 直接 或 间接 发起 调用 发生 错误 的 代码 块 的 其他 代码 块 所 处理
create and manage event loops, which provide asynchronous apis for <unk> running <unk> handling <unk> <unk> <unk>, 创建 和 和 事件 循环 ， ， ， " asyncio . <unk> " 的 的 的 <unk> <unk> <unk> <unk>, 创建 和 管理 事件 循环 ， 以 提供 异步 api 用于 " <unk> " , 运行 " 子 进程 " ， 处理 " os 信号 " 等等 ;
parameters: width if an integer, a size in <unk> if a float, a fraction of the <unk> default is <unk> of screen, 参数 : 如果 如果 一个 一个 ， 则 如果 一个 为 " 则 " ， 则 会 被 " default _ <unk> ", 参数 : width 如为 一个 整型 数值 ， 表示 大小 为 多少 <unk> ， 如为 一个 浮点 数值 ， 则 表示 屏幕 的 <unk> 比 ； 默认 为 屏幕 的 <unk>
if the argument is a tuple, it does not make a copy but returns the same object, so it is <unk> to call <unk> when you aren't sure that an object is already a tuple., 如果 参数 是 一个 ， ， ， 则 返回 一个 ， ， ， ， ， ， 当 调用 ， 当 调用 ， 当 调用 ， 当 调用 对象 ， 则 返回 一个 ", 如果 参数 为 一个 元组 ， 它 不会 创建 副本 而是 返回 同一 对象 ， 因此 如果 你 不 确定 某个 对象 是否 为 元组 时 也 可 简单 地 调用 " tuple ( ) "
the <unk> environment variable can be used to configure the memory allocators used by python., " <unk> " 环境变量 " 可以 用于 使用 内存 来 使用 内存 来 使用 的 内存, 环境变量 " pythonmalloc " 可 被 用来 配置 python 所 使用 的 内存 分配器
this is equivalent to the python expression <unk> in <unk>, 这 等价 于 python 表达式 " " " " " " " " ", 这 相当于 python 表达式 " value in o "
it requires windows <unk> but can be safely installed without <unk> other programs, 它 需要 windows 的 但 但 但 ， 但 不 不 ， 其他 其他 其他 其他 其他 其他, 它 需要 windows 10 ， 但 可以 安全 地 安装 而 不会 破坏 其他 程序
<unk> the <unk> api, a simple and <unk> xml processor, " xml . <unk> " xml 的 简单 的 xml xml xml xml, " xml . etree . elementtree " ： elementtree api ， 一个 简单 而 轻量级 的 xml 处理器
it can then be saved and used in the same manner as the function object, 它 可以 被 用作 用作 用作 用作 用作 和 和 的, 这样 就 可以 不 改变 形式 直接 传递
the return value from <unk> representing a process that has <unk>, 从 " <unk> " 的 一个 进程 的 进程 的 进程, " run ( ) " 的 返回值 , 代表 一个 进程 已经 结束 .
this performs a <unk>, <unk> <unk> 一个 <unk>, 这会 执行 一次 " screen . reset ( ) "
to call, <unk> a file object's <unk> method with arguments <unk> 0 (assuming the file object pointer is <unk>, 要 <unk> " 一个 " 文件 " " " " " " " " " " " " ， " ， 文件 ， 文件 描述符 文件 对象, 例如 调用 某个 文件 对象 的 " seek " 方法 并 传入 参数 10 , 0 ( 假定 文件 对象 的 指针 为 " f " ) :
when <unk> is applied in combination with other method <unk> it should be applied as the <unk> <unk> as shown in the following usage examples:, 当 " " " " " " " " " " " " " " " ， 它 应当 被 " " " " ， 因此 的 的 :, 当 " abstractmethod ( ) " 与 其他 方法 描述符 配合 应用 时 ， 它 应当 被 应用 为 最 内层 的 装饰 器 ， 如 以下 用法 示例 所示 :
the line number in the file where the definition <unk>, " <unk> " 中 的 的 文件, 定义 在 文件 中 起始 位置 的 行号
the <unk> function has some new <unk>, " <unk> . call ( ) " 函数 的 新 新 的 新, " ast . parse ( ) " 函数 具有 一些 新 的 旗标 ：
the following image types are <unk> as listed below with the return value from <unk>, 以下 是 类型 是 " " " " " " " " " " " " " " " " ", 接下来 的 图像 类型 是 可 识别 的 ， 返回值 来自 " <unk> ( ) " ：
multiple calls to <unk> with the same name will return a reference to the same logger object, 多个 调用 对象 的 相同 的 引用 ， 返回 将 返回 一个 对象 对象 引用 的 对象, 多次 调用 " getlogger ( ) " 具有 相同 的 名称 将 返回 对 同一 记录器 对象 的 引用
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
a class is the particular object type created by executing a class statement, 类会 类 是 " 对象 " 类 的 类 创建 类 创建 类 的 类, " 类 " 是 通过 执行 类 语句 创建 的 特定 对象 类型
unlike some other <unk> functions, this implementation will never implicitly call a system shell, 与 某些 其他 " ， " ， ， 实现 实现 将 调用 " 调用 " 调用 ", 不像 一些 其他 的 popen 功能 ， 此 实现 <unk> 隐式 调用 一个 系统 shell
you can pass in strings or integers if strings are passed, internal mapping dictionaries are used to convert them to integers., 你 在 在 字符串 字符串 字符串 字符串 或 字符串 字符串 字符串 ， 则 将 被 被 视为 将 被 被 转换 为, 你 可以 传入 字符串 或者 整数 — — 如果 传入 的 是 字符串 ， 则 会 使用 内部 的 映射 字典 将 其 转换 为 整数
the collector will call this method if it detects that this object is involved in a reference <unk>, 如果 调用 调用 此 方法 ， 此 方法 将 在 " 对象 " " " " " ", 当 垃圾 回收 器 检测 到 该 对象 在 循环 引用 中 时 ， 此 方法 会 被 调用
equivalent to <unk> <unk>, 相当于 " a [ len ( ) " [ ] ", 相当于 " put ( item , false ) "
that name can be retrieved from the "name" attribute of the returned file like object, 也就是说 名称 可以 通过 对象 的 对象 的 对象 对象 的 属性, 从 返回 的 文件 类 对象 的 " name " 属性 中 可以 检索 到 文件名
if value is a "tuple", it should have three <unk> a sign <unk> for positive or "1" for <unk> a "tuple" of digits, and an integer exponent, 如果 value 是 一个 ， ， 则 它 ， ， " " " " " " " " " " " ， " ， 一个 一个 整数 ， 并 返回 一个 整数 的 整数, 如果 value 是 一个 " tuple " ， 它 应该 有 三个 组件 ， 一个 符号 （ " 0 " 表示 正数 或 " 1 " 表示 负数 ） ， 一个 数字 的 " tuple " 和 整数 指数
the sequences do not have to be the same length, because they are <unk> over from left to right, not in parallel, 序列 的 不 必须 是 相同 的 的 因为 ， 它们 在 不 保证 不 不 被 不, 这些 序列 并 不 必须 同样 长 ， 因为 它们 会 <unk> 开始 遍历 ， 而 不是 同时 执行
generate n random bytes., 生成 n 随机 随机, 生成 n 个 随机 字节
see platform dependent efficient copy operations section., 参见 依赖于 具体 平台 的 高效 拷贝 操作 操作, 参见 依赖于 具体 平台 的 高效 拷贝 操作 一节
exposed the linux specific <unk> for sending to signals to a process using a file descriptor instead of a pid, 以下 " <unk> " 用于 " 一个 使用 进程 的 一个 文件 描述符 的 " 的 ", <unk> 公开 了 linux 专属 的 " signal . <unk> _ send _ signal ( ) " 用于 向 使用 文件 描述符 而 非 pid 的 进程 发送 信号
this module defines utilities to manipulate <unk>, 这个 模块 定义 了 " <unk> " <unk> ", 该 模块 定义 了 操作 html 的 工具
base class for warnings about <unk> <unk> in module <unk>, 用于 模糊 模块 的 " 模块 " 模块 的 模块 模块, 与 在 模块 导入 中 可能 的 错误 相关 的 警告 的 基类
bpo <unk> <unk> drop support for creating <unk> installers on non windows <unk>, bpo <unk> : 修复 / 对 / windows 的 windows 上 windows windows windows 的 windows, bpo <unk> : <unk> 取消 对 在 非 windows 系统 上 创建 bdist _ wininst 安装程序 的 支持
for <unk> the resulting bytes object always has exactly the specified number of bytes, 对于 字节 的 字节 bytes " bytes " bytes " bytes 字节 串 的 字节 串 的 字节 串, 对于 解包 操作 ， 结果 字节 对象 总是 恰好 具有 指定 数量 的 字节
its invocation should be replaced by a combination of <unk> and <unk> where, 它 的 应该 应当 由 " <unk> " 和 " <unk> ", 对 它 的 调用 应 被 替换 为 " <unk> _ unpack ( ) " 和 " <unk> _ <unk> ( ) " 的 组合 ， 其中
if the method returns "false" then the "future" was cancelled, i.e. <unk> was called and returned true, 如果 方法 返回 " false " ， 则 会 被 取消 " true " ， 则 会 调用 " true ", 如果 这个 方法 返回 " false " 那么 " future " 已 被 取消 ， 即 " future . cancel ( ) " 已 被 调用 并 返回 " true "
raises an auditing event <unk> with arguments "key", "sub_key", "access"., 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " key " , " sub " , " key ", 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " key " , " sub _ key " , " access "
(contributed by antoine pitrou in bpo <unk>, （ 由 antoine pitrou 在 bpo <unk> 中 贡献 。 ）, （ 由 antoine pitrou 在 bpo <unk> 中 贡献 。 ）
this calls <unk> in the underlying library., 此 此 调用 调用 底层 库中 " rl _ <unk> _ <unk> ( ) ", 此 函数 会 调用 底层 库中 的 " add _ history ( ) "
<unk> allows you to set a fixed value for the hash seed <unk>, " ' w ' " 允许 允许 指定 设置 为 " 的 值, " <unk> " 允许 你 为 哈希 种子 密码 设置 一个 <unk>
it also renames "next()" methods to <unk>, 它 也 会 " " " ( ) " 方法, 也 会 将 " next ( ) " 方法 重命名 为 " __ next __ ( ) "
note that one can also create synchronization primitives by using a manager object see <unk>, 请 注意 可以 可以 通过 创建 一个 创建 创建 的 创建 创建 一个 创建 的 的 原语, 注意 可以 使用 管理器 对象 创建 同步 原语 ， 参考 管理器
<unk> notation has an exponent which is a multiple of 3, " ' ' ' ' " ' 是 一个 指数 的 的 的, <unk> 标注 法 的 指数 是 3 的 倍数
this module's <unk> raises a "valueerror" when an initial bom is <unk>, 此 函数 会 引发 " valueerror " 时 ， 一个 " valueerror ", 此 模块 的 反 序列化 器 引发 " valueerror " 当 存在 初始 bom 标记
stateless encoding and decoding, 无 编码 编码 编码 和 解码, 无 状态 的 编码 和 解码
exactly like <unk> except that <unk> defaults to "true"., " 类似 " " " " " ， 它 它 默认 为 " true ", 除了 headersonly 默认 为 " true " ， 其他 与 " bytesparser " 类 完全 一样
because "yield" will often be returning "none", you should always check for this case, 由于 " 将 被 为 ， ， ， ， 你 应该 需要 需要 的 的, 因为 " yield " 很多 时候 会 返回 " none " ， 所以 你 应该 总是 检查 这个 情况
examples of usage: "datetime", class : timedelta 用法 示例, 用法 示例 : " datetime "
the module <unk> a core set of <unk> memory efficient tools that are useful by themselves or in combination, 模块 模块 <unk> 了 一个 <unk> 的 了 一个 <unk> 的 的 的 的 的 有用, 本 模块 标准化 了 一个 快速 、 高效 利用 内存 的 核心 工具集 ， 这些 工具 本身 或 组合 都 很 有用
distributing your extension modules, 发布 你 的 扩展 模块, 发布 你 的 扩展 模块
instance attributes (read only):, 实例 属性 （ 只读 ） ：, 实例 属性 （ 只读 ） ：
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
make an iterator that drops elements from the iterable as long as the predicate is <unk> <unk> returns every element, 创建 一个 迭代 器 的 元素 元素 ， 元素 ， 迭代 器 ， 返回 " " " " " " " " ", 创建 一个 迭代 器 ， 如果 predicate 为 true ， 迭代 器 丢弃 这些 元素 ， 然后 返回 其他 元素
any occurrence of a mixed operation is silently <unk> by setting "floatoperation" in the context flags, 任何 一个 一个 的 的 的 ， 由 " 将 " 将 上下文 中 的 的, 发生 的 任何 混合 运算 都 将 通过 在 上下文 旗标 中 设置 " floatoperation " 来 静默 地 记录
not specifying it <unk> "false"., 不 它 将 它 将 " false ", 没有 指定 时则 <unk> 赋值 为 " false "
dtrace and systemtap <unk> support, dtrace 和 systemtap systemtap, dtrace 和 systemtap <unk> 支持
to generate the same numeric value across all python versions and platforms, use <unk> & <unk>, 要 生成 的 的 的 的 的 所有 的 python 和 和 " os . <unk> ( ) ", 要 在 所有 python 版本 <unk> <unk> 生成 相同 的 数值 ， 请 使用 " <unk> ( data ) & <unk> "
each dataclass is converted to a dict of its fields, as <unk> value" pairs, 每个 的 都 是 为 " " " " 的 " 的 一个 " 的 ", 每个 数据 类 都 转换 为 <unk> 段 的 字典 ， 如 " name : value " 对
what we did is specify what is known as a positional argument, 我们 也 可以 是 被 作为 参数 作为 参数, 我们 所 做 的 是 指定 所谓 的 位置 参数
<unk> determines the type of the returned object: it is either a ctypes type or a one character <unk> of the kind used by the "array" module, " <unk> " 的 的 类型 的 的 类型 ， 是 类型 类型 类型 类型 类型 类型 类型 " " " " " " " " " " " " " " " " " " " " ", <unk> _ or _ type 指明 了 返回 的 对象 类型 : 它 可能 是 一个 ctypes 类型 或者 " array " 模块 中 每个 类型 对应 的 单 字符 长度 的 字符串
if the stdin argument was not "pipe", this attribute is "none"., 如果 未 参数 不 为 " none " ， 则 属性 " none ", 如果 stdin 参数 非 " pipe " ， 此 属性 为 " none "
the second <unk> <unk> is not <unk>, 第二个 " <unk> _ <unk> " ， 是 " <unk> ", <unk> 赋值 则 <unk> 处理
<unk> <unk> tos1 from <unk> <unk> exception instance or type at <unk> with "__cause__" set to <unk>, " <unk> " " " " " " " " " " " " " " " 或 " <unk> " " " " " " " " " " " " " ", 2 : " raise tos1 from tos " ( 在 " tos1 " 上 引发 异常 实例 或 类型 并 将 " __ cause __ " 设 为 " tos " )
that way you can control what builtins are available to the executed code by <unk> your own <unk> dictionary into globals before passing it to <unk>, 请 注意 你 可以 控制 的 代码 <unk> ， 由 " <unk> ( ) " 来 来 执行 的 字典 中 ， 它们 将 被 之前, 因此 ， 在 将 执行 的 代码 传递 给 " exec ( ) " 之前 ， 可以 通过 将 自己 的 " __ builtins __ " 字典 插入 到 globals <unk> 控制 可以 使用 哪些 内置 代码
"logging" logging facility for python, " logging " python 的 日志 记录, " logging " python 的 日志 记录 工具
this behavior now matches what the c tokenizer does internally, 此 行为 会 会 由 " c c 的 " " " ", 此 行为 现在 已 与 c 词法 分析器 的 内部 行为 相匹配
to simplify and <unk> error <unk> codecs may implement different error handling schemes by <unk> the errors string argument, 要 实现 和 " <unk> " " " " " " " 来 可能 会 使用 " os . <unk> ( ) " 来 来 访问 的 的 错误, 为了 简化 和 标准化 错误处理 ， 编解码器 可以 通过 接受 errors 字符串 参数 来 实现 不同 的 错误处理 方案
in this case, the encoding , errors and newline arguments must not be provided., 在 这种 情况 下 ， encoding encoding errors errors 参数 ， 参数 参数 参数, 在 这个 例子 中 ， encoding , errors 和 newline 三个 参数 一定 不要 设置
thanks to the many outside <unk> who have worked under <unk> direction to make these releases possible., 将 <unk> 的 <unk> ， ， ， 的 <unk> ， <unk> <unk> <unk> <unk> <unk> 这些 这些, 感谢 <unk> 在 guido 指导 下 工作 的 外部 志愿者 ， 使得 这些 发布 成为 可能
return the number of objects in the <unk> <unk>, 返回 对象 中 的 对象 对象 的 对象, 返回 <unk> <unk> 的 对象 数量
examples of usage: "date", class : timedelta 用法 示例, class : date 用法 示例
when this script is <unk> the following output should be <unk>, 当 这个 脚本 脚本 ， 以下 如下 : 输出 :, 运行 此 脚本 时 ， 应 看到 以下 输出 ：
the <unk> parameter, when set to true, enables a ctypes mechanism that allows accessing the system "errno" error number in a safe way, 当 " <unk> " ) " 方法 时 ， 一个 一个 ctypes ， ， ， 在 在 系统 系统 将 在 系统 错误 时 将 在 " 错误, use _ errno 参数 如果 设置 为 true ， 可以 启用 ctypes 的 机制 ， 通过 一种 安全 的 方法 获取 系统 的 " errno " 错误码
changed in version 3.8: <unk> now returns an <unk> if the target is an <unk> function., 在 3.8 版 更改 : " " _ <unk> " is " if " " " " " " " " " " " " ", 在 3.8 版 更改 : " <unk> ( ) " now returns an " <unk> " if the target is an async function .
the next line: <unk> <unk> standard <unk> indicates that the text string in the far right column was used to sort the output, <unk> 的 <unk> 的 <unk> 标准 标准 <unk> 的 文本 文本 文本 文本 的 的 输出 将 输出 输出, 下 一行 : " <unk> by : standard name " ， 表示 最 右边 <unk> 的 文本 字符串 用于 对 输出 进行 排序
reads and writes <unk> "bz2" and "lzma" compressed archives if the respective modules are available., " 和 " " " " " " 并且 并且 并且 的 的 的 的 的 的, 读写 " gzip " , " bz2 " 和 " lzma " 解压 的 归档 要求 相应 的 模块 可用
<unk> will remove all packages you installed directly into this python installation, but will not remove any virtual environments, " 将 . <unk> ( ) " 将 将 你 安装 安装 安装 安装 安装 ， 但 但是 不会 不会 任何 任何 任何, <unk> 将 删除 该 已 安装 python 程序 中 的 所有 软件包 ， 但 不会 删除 任何 虚拟环境
a generic version of <unk>, " collections . abc . <unk> " 的 泛型 版本, " contextlib . <unk> " 的 泛型 版本
on success, return a list of the keys in object o, 在 成功 时 返回 返回 一个 对象 中 的 列表, 成功 时 ， 返回 对象 o 中 的 键 的 列表
so, in the example above, the old " <unk> <unk> action is <unk> as the " f" action, because only the " <unk> option string was <unk>, 在 这种 例子 例子 中 的 " " " " " " " " " " " " " ， " " " " " " " " " " " " " " " " " " " 选项, 所以 ， 在 上面 的 例子 中 ， 旧 的 " f / foo " 行为 <unk> " f " 行为 保持 一样 , 因为 只有 " foo " 选项 字符串 被 重写
the increment operation then builds up the count for each <unk>, 目前 的 操作 ， 那么 将 被 设置 为 的, 后续 的 <unk> 操作 建立 起 对 每个 字母 的 计数
unlike other asyncio functions this function requires the loop argument to be passed explicitly., 其他 其他 函数 函数 函数 函数 函数 函数 函数 会 被 传递 给 参数, 不同 与 其他 asyncio 函数 ， 此 函数 要求 显式 地 传入 loop 参数
optimized the "subprocess" module on freebsd using <unk>, 在 " subprocess " 模块 的 模块 使用 " 模块 ", 在 freebsd 上 使用 " <unk> ( ) " 优化 了 " subprocess " 模块
non package modules should not have a "__path__" attribute., 非 模块 模块 提供 一个 一个 " 属性 " 属性, 不是 包 的 模块 不 应该 具有 " __ path __ " 属性
some languages have a construct that looks like this:, 有些 有 了 一个 如下 所示 ： 这样 ：, 有些 语言 具有 这样 的 结构 :
new and improved modules, 新增 和 改进 的 模块, 新增 和 改进 的 模块
<unk> : <unk> char <unk> function name, accessible using <unk>, " : : : / / / / / / / / / / / / / / <unk> . <unk> ( ) " 函数 使用 " <unk> _ <unk> ( ) ", " $ arg2 " : " ( const char ) " 函数 名 ， 使用 " user _ string ( $ arg2 ) " 访问
obviously changing the logrecord needs to be done with some <unk> but it does allow the <unk> of contextual information into logs (see using filters to <unk> contextual <unk>, 将 改变 需要 需要 的 的 的 的 ， 但 但 ， 使用 " <unk> ( ) " 来 使用 的 的 的 的, 显然 改变 logrecord 时 需要 相当 小心 ， 但 将 上下文 信息 注入 日志 确实 是 被 允许 的 ( 参见 使用 过滤器 传递 上下文 信息 )
source can either be a normal string, a byte string, or an ast object, 源文件 可以 是 一个 一个 一个 字符串 ， 一个 一个 字符串 对象 或 一个 对象, source 可以 是 常规 的 字符串 、 字节 字符串 ， 或者 ast 对象
the file may not be changed., 文件 可能 可能 被, 文件 不能 被 更改
many extension modules just provide new functions and types to be used from python, but sometimes the code in an extension module can be useful for other extension modules, 许多 扩展 模块 模块 提供 了 一些 函数 和 函数 和 函数 和 函数 ， 可以 在 代码 中 的 代码 中 ， 可以 在 其他 模块 模块, 很多 扩展 模块 提供 了 新 的 函数 和 类型 供 python 使用 ， 但 有时 扩展 模块 里 的 代码 也 可以 被 其他 扩展 模块 使用
a bit field that determines whether certain <unk> attributes are used when the process creates a window., 一个 " 的 " 对象 ， 的 键 的 的 的 属性 的 属性 被 用来, 一个 位域 ， 用于 确定 属性 " startupinfo " 是否 在 进程 创建 窗口 时 使用
"%x" locale's appropriate date representation, " % " 本地化 的 适当 的 的, " % x " 本地化 的 适当 日期 表示
new in version 3.1., 3.1 新版 功能 ., 3.1 新版 功能 .
the parameter must not be "null"., 形参 必须 为 " null ", 形参 必须 不 为 " null "
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
python implements various strategies to search for the named module when the import machinery is invoked, python python python 模块 提供 了 模块 " 模块 " 模块 的 模块 模块, 当 发起 调用 导入 机制 时 ， python 会 实现 多种 策略 来 搜索 指定 名称 的 模块
you don't have to create a pattern object and call its <unk> the "re" module also provides top level functions called <unk> <unk> <unk> <unk> and so forth, 你 需要 创建 一个 对象 ， " " " ( ) " 方法 ， 它 调用 " 模块 " ， " 模块 " 函数 " 函数 " <unk> ( ) " 和 " 函数 _ <unk> ( ) " 和 " 函数 ( ) " 和 " 函数 ( ) " 和 " <unk> ( ) ", 你 不必 创建 模式 对象 并 调用 其 方法 ； " re " 模块 还 提供 了 <unk> 函数 " match ( ) " ， " <unk> ( ) " ， " findall ( ) " ， " sub ( ) " 等等
notice how the second one is slightly easier to read, 将 如何 的 的 是 一个 的 的, 注意 第二种 方法 稍微 容易 一些
for a date d , <unk> is equivalent to <unk>, 例如 ， 日期 : " ' " ' " ' " 等价 于 " " " " ", 对于 日期 对象 d , " str ( d ) " 等价 于 " d . <unk> ( ) "
we'll start by <unk> about the simplest possible regular expressions, 通过 <unk> <unk> <unk> <unk> 的 的 <unk> 的 正则表达式, 我们 首先 要 了解 最 简单 的 正则表达式
for example, a function that takes a directory path and returns all the xml files in the directory, or a function that takes a filename and returns its <unk> can be applied to many different <unk>, 例如 ， 一个 函数 一个 一个 目录 ， 一个 目录 的 所有 ， ， ， 的 所有 ， ， 所有 的 函数 ， 返回 一个 " " " " " " " " " " ", 举例来说 ， 一个 接受 文件夹 目录 返回 所有 文件夹 中 的 xml 文件 的 函数 ； 或是 一个 接受 文件名 ， 然后 返回 文件 内容 的 函数 ， 都 可以 应用 在 很多 不同 的 场合
generator expressions return an iterator that <unk> the values as <unk> not needing to <unk> all the values at once, 生成器 表达式 返回 一个 迭代 器 ， 值 值 ， 但 不 为 所有 的 值, 生成器 表达式 会 返回 一个 迭代 器 ， 它 在 必要 的 时候 <unk> ， 避免 一次性 生成 所有 的 值
for passing messages one can use <unk> (for a connection between two <unk> or a queue (which allows multiple producers and <unk>, 对于 ， ， ， 可以 使用 " <unk> " " " ， " " " " 或 " int " 和 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、, 消息 机制 包含 ： " pipe ( ) " ( 可以 用于 在 两个 进程 间 传递 消息 ) ， 以及 队列 ( 能够 在 多个 生产者 和 消费者 之间 通信 )
<unk> abstract base classes related to import, " " . abc " 类 的 抽象 基类, " importlib . abc " — — 关于 导入 的 抽象 基类
changed in version 3.4: added "readline()" and <unk> support, 在 3.4 版 更改 : added " and and and and 支持, 在 3.4 版 更改 : added " readline ( ) " and " <unk> ( ) " support
same as <unk> but the memory block is resized to <unk> <unk> bytes, 与 " <unk> ( ) " 相同 ， 但 内存 内存 的 <unk> 为 <unk> 字节, 与 " pymem _ realloc ( ) " 相同 ， 但 内存 块 的 大小 被 调整 为 " ( n sizeof ( type ) ) " 字节
changed in version 3.4: the "__file__" attribute is no longer set on the module., 在 3.7 版 更改 : the " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ ", 在 3.4 版 更改 : the " __ file __ " attribute is no longer set on the module .
can be used to extract related fields from data where the internal structure has been <unk> (for example, a multi line report may list a name field on every third line), 可以 用来 在 内部 内部 的 的 的 结构 体 的 的 结构 体 （ 例如 ） ， ） ， 的 的 列表 可以 在 列表 中 的 的 列表, 可用 来 从 内部 数据结构 被 <unk> 的 数据 中 提取 相关 字 段 （ 例如 一个 多行 报告 ， 它 的 名称 字 段 出现 在 每 <unk> 上 ）
<unk> general calendar related functions, " <unk> " " " 的 " pickle 函数, " calendar " 日历 相关 函数
at least one of "x" or "y" must be nonzero, 至少 的 " 或 " 或 " ， " 必须 必须 为 ", " x " 或 " y " 至少 有 一个 不为 零
implements "tos tos1 <unk> tos"., 实现 " tos tos1 tos tos " tos ", 实现 " tos tos1 / / tos "
one solution is to <unk> the application with the tcl and tk libraries, and point to them at run time using the <unk> and <unk> environment variables., 一种 解决方案 是 <unk> 和 <unk> 和 和 和 和 和 和 <unk> 的 的 ， ， 在 运行 时 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 一种 解决 方法 是 将 程序 与 tcl 和 tk 库 <unk> 发布 ， 并且 在 运行 时 使用 环境变量 " tcl _ library " 和 " tk _ library " 指向 他们 的 位置
name or flags either a name or a list of option strings, e.g. <unk> or " <unk> <unk>, name 或 或 或 一个 名称 或 字符串 的 字符串 ， 或者 " ' " ' " ' " ' " ' ", name or flags 一个 命名 或者 一个 选项 字符串 的 列表 ， 例如 " foo " 或 " f , foo "
you can learn about this by interactively <unk> with the "re" module, 你 可以 通过 " 模块 " 模块 的 模块, 你 可以 通过 交互式 实验 " re " 模块 来 了解 这 一点
the host can be of the form <unk> should you need to use a specific port number, 主机 的 的 的 <unk> 的 ， 应当 应当 你 应该 使用 特定 特定 的 的, host 可以 为 " host : port " 的 形式 ， 如果 你 需要 使用 指定 端口号 的话
return amount of space the text would <unk> on the specified display when formatted in the current font, 返回 在 窗口 中 的 的 当前 中 的 的 当前 中 的 的 当前, 返回 以 当前 字体 格式化 时 文本 将 在 指定 显示 上 占用 的 空间 量
it builds upon the <unk> encoding and <unk>, 它 了 " <unk> . 编码 " 编码 编码 编码 编码 编码 编码 编码, 它 是 在 " <unk> " 编码 格式 和 " stringprep " 的 基础 上 构建 的
this method resumes the generator's code and the "yield" expression returns the specified value, 此 方法 会 包含 了 代码 的 并 返回 " " " " 返回 ", 这个 方法 会 恢复 执行 生成器 的 代码 ， 然后 " yield " 表达式 返回 特定 的 值
implements in place "tos tos1 tos"., 实现 " tos tos1 tos " tos ", 就 地 实现 " tos tos1 tos "
display url using the browser handled by this <unk>, 将 通过 " url 的 的 " <unk> " 模块, 使用 此 控制器 处理 的 浏览器 显示 url
deprecated since version 3.6: please use "asyncio" instead., 3.6 版后 已 移除 : use " send " " " ", 3.6 版后 已 移除 : 请 使用 " asyncio " 替代
python code in one module <unk> access to the code in another module by the process of importing it, python 代码 中 一个 模块 " <unk> " 模块 中 的 代码 块 代码 块, 一个 module 内 的 python 代码 通过 <unk> 操作 就 能够 访问 另 一个 模块 内 的 代码
on executing the "yield" expression, the generator outputs the value of <unk> similar to a "return" statement, 在 ， 上 将 " <unk> " 的 的 生成器 的 的 " " " " 语句 的 语句, 当 执行 " yield " 表达式 时 ， 生成器 会 输出 " i " 的 值 ， 就 像 " return " 表达式 一样
pep <unk> a boolean type, pep <unk> : " 类型 类型, pep <unk> : 布尔 类型
this is the recommended way to accept binary data., 这 是 使用 二进制 二进制 二进制 二进制, 这是 接受 二进制 数据 的 推荐 方法
the "argumentparser" object will hold all the information necessary to parse the command line into python data types., 如果 对象 将 被 所有 的 的 ， 将 被 执行 的 python 的, " argumentparser " 对象 包含 将 命令行 解析 成 python 数据类型 所 需 的 全部 信息
<unk> all of the flags to <unk>, " itertools " 的 所有 所有 :, 将 所有 旗标 重置 为 " 0 "
add a new action at the beginning, 添加 一个 新 的 的, 在 开头 添加 一个 新 的 动作
macro equivalent of <unk>, 宏 相当于 " <unk> ( ) " 的 逆, " pystructsequence _ getitem ( ) " 的 宏 版本
when an exception occurs in the "try" <unk> a search for an exception handler is started, 当 异常 中 中 发生 时 ， 异常 中 ， 异常 异常 异常 异常 异常, 当 " try " 子句 中 发生 异常 时 ， 将 启动 对 异常 处理器 的 搜索
the source will compile and run out of the <unk> on most unix platforms., 源文件 的 在 windows 上 平台 上 ， 在 运行 的 运行 的 运行, 该 源代码 将 可 在 大多数 unix 类 平台 上 直接 编译 并 运行
changed in version 3.6: <unk> defaults to the policy <unk>, 在 3.6 版 更改 : " default _ <unk> ", 在 3.6 版 更改 : _ factory 默认 为 策略 " message _ factory "
python strings cannot be changed they are immutable, python 字符串 中 被 它们 它们 它们 它们, python 中 的 字符串 不能 被 修改 ， 它们 是 <unk> 的
(contributed by victor stinner in bpo <unk>, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）
if the suite was exited due to an exception, and the return value from the "__exit__()" method was false, the exception is <unk>, 如果 <unk> 被 取消 为 一个 ， ， 则 返回 的 的 值 ， 则 会 引发 " 异常, 如果 语句 体 的 退出 是 由 异常 导致 的 ， 并且 来自 " __ exit __ ( ) " 方法 的 返回值 为 假 ， 则 该 异常 会 被 重新 引发
another use case is to <unk> keyword arguments when the parameter name is not helpful, 另 使用 " <unk> " 被 添加 参数 参数 参数 参数 参数 参数 的 参数 参数, 另 一个 用例 是 在 不 需要 形参 名称 时 排除 关键字 参数
"popen" raises an exception if the execution fails., 如果 失败 时 引发 " 异常 " 异常, " popen " 如果 执行 失败 会 引发 一个 异常
<unk> and <unk> otherwise., " email . <unk> " 和 " <unk>, 否则 ， " malloc ( ) " 和 " free ( ) "
if one returns a false value, the handler will not <unk> the <unk>, 如果 一个 一个 一个 ， 则 将 阻塞 阻塞 将 不会 等待, 如果 返回 一个 假值 ， 则 处理器 将 不会 发出 记录
this module supports both binary and xml plist files., 此 模块 支持 提供 了 xml xml 和 链接, 此 模块 同时 支持 二进制 和 xml plist 文件
the "plistlib" module: a property list parser, " 模块 " 模块 列表 列表 列表 列表, " plistlib " 模块 ： 属性 列表 解析器
for available values and the default, see the documentation for <unk>, 例如 ， 值 ， 请参阅 " 参见 " 参见 " 文档 . create _ <unk> ( ) " 文档, 可 使用 的 值 和 默认值 ， 请 <unk> " open ( ) " 的 文档
(the value <unk> is the smallest positive <unk> float and is equal to <unk>, （ " ' " ' 是 " ' ' ' ' " ' \ n ' " 和 " ' \ ' ", （ 2 <unk> <unk> <unk> <unk> <unk> 这个 数值 是 等于 " math . <unk> ( 0.0 ) " 的 未经 <unk> 的 最小 正 浮点数 。 ）
after requesting its <unk> a shared memory block may or may not be immediately <unk> and this behavior may differ across platforms, 在 其他 情况 下 ， 一个 一个 内存 块 的 一个 可能 会 被 捕获 ， 并 将 此 行为 可能 会 可能 会 引发 ", 发出 此 销毁 请求 后 ， 共享内存 块 可能 会 、 也 可能 不会 立即 销毁 ， 且 此 行为 在 不同 操作系统 之间 可能 不同
the func will be passed to <unk> for each <unk> before its "run()" method is called., 将 被 传递 给 " <unk> ( ) " 的 每个 调用 " 调用 " ) " 方法 会 被 调用, 在 每个 线程 的 " run ( ) " 方法 被 调用 前 ， func 会 被 传递 给 " sys . <unk> ( ) "
note that it generally doesn't make much sense to have more than one positional argument with "nargs ' <unk> but multiple optional arguments with "nargs ' '" is possible, 请 注意 ， 它 不会 注意 ， 因为 有 参数 参数 的 参数 参数 参数 的 参数 ， ， ， " " " " " " " " " " " " ", 注意 通过 " nargs ' ' " 来 实现 多个 位置 参数 通常 没有 意义 ， 但是 多个 选项 是 可能 的
you can also define a new exception that is unique to your module, 你 可以 还 一个 新 的 异常 ， 异常 " 异常 " 模块, 你 也 可以 为 你 的 模块 定义 一个 唯一 的 新 异常
where the long description is <unk> <unk> will be able to detect it by using the <unk> <unk>, 其中 的 的 <unk> <unk> <unk> " <unk> " " " " " 来 使用 " <unk> " 的, 长 描述 中有 问题 的 地方 ， 通过 使用 " <unk> " 解析器 ， " check " 能 进行 删除 ：
for example, at the <unk> forward <unk> of <unk> we <unk>, 例如 ， 在 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> . <unk> . <unk> . <unk> ", 例如 ， 在 2016 年 <unk> 时钟 向前 调整 时 ， 我们 得到 :
this module helps scripts to parse the command line arguments in "sys.argv", 此 模块 将 在 命令行 命令行 参数 中 参数 参数 介绍, 此 模块 可 协助 脚本 解析 " sys . argv " 中 的 命令行 参数
the <unk> class variable <unk> however, be defined before the type is first used (an instance is created, <unk> is called on it, and so on), " 类 " 类 类 的 " __ ( __ ( ) " 方法 在 在 " " " " " " " " " " " " " " " " true " 的 被 调用, 但是 ， " _ fields _ " 类 变量 必须 在 类型 第一次 被 使用 （ 创建 实例 ， 调用 " sizeof ( ) " 等等 ） 之前 进行 定义
this is a good approach if you write the class yourself, 这是 它 应该 你 应该 指定 类 的 类, 如果 类 是 你 自己 编写 的 ， 这 将 是 一个 很 好 的 方式
note that <unk> <unk> can be specified to create a naive datetime from an aware datetime with no conversion of date and time data., 请 注意 " <unk> _ <unk> " ， 指定 指定 一个 一个 从 一个 从 一个 " ， 从 一个 " datetime " ， 并 不 时间 的 时间, 请 注意 可以 通过 指定 " tzinfo none " 来 从 一个 感知 型 datetime 创建 一个 简单 型 datetime 而 不必 转换 日期 和 时间 数据
returns the <unk> release version, e.g. <unk> on <unk>, 返回 <unk> 的 的 发布 ， <unk> <unk> <unk> <unk>, 返回 系统 的 发布 版本信息 ， 例如 " ' # 3 on <unk> ' "
names beginning with <unk> are for internal use by the python implementation and should not be used by extension <unk>, 名称 使用 " python 使用 的 python ， 使用 " 并 使用 " 并 使用 " 使用 ", 以 " _ py " <unk> 的 名称 是 供 python 实现 内部 使用 的 ， 不应 被 扩展 <unk> 使用
<unk> interface to <unk> nis <unk> <unk>, " 接口 " <unk> " <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, " nis " sun 的 nis ( <unk> ) 接口
it can handle zip files that use the <unk> extensions (that is zip files that are more than 4 <unk> in <unk>, 它 可以 通过 zip 文件 ， ， ， ， 的 ， 是 在 文件 的 文件 是 在 在 <unk> 中 的 的 更 多, 它 可以 处理 使用 <unk> 扩展 （ 超过 4 <unk> 的 zip 文件 ） 的 zip 文件
the <unk> method requires only that the values be <unk>, " _ ( ) " 方法 只 只 值 值 是, " <unk> _ common ( ) " 方法 在 值 需要 排序 的 时候 用
the index in the <unk> array of the <unk> determines which field of the struct sequence is <unk>, 在 " <unk> " 数组 " 的 " 数组 的 结构 体 ， ， ， 的 序列, 在 " pystructsequence _ <unk> " 的 " fields " 数组 中 的 索引 确定 了 结构 序列 描述 的 是 哪个 字 段
similarly, compresslevel will override the constructor if given., <unk> 的 的 的 将 将 将 " 构造 器, 类似 地 ， 如果 给定 了 compresslevel ， 它 将 会 覆盖 构造 器
checks for an ascii whitespace <unk> space or <unk> tab., 检测 ascii ascii ， ， " ' ' ' ' " ' " ' " ' " ' ", 检测 ascii 空白 字符 ； 包括 空格 或 水平 制表符
changed in version 3.4: the <unk> attribute now always refers to the wrapped function, even if that function defined a <unk> attribute, 在 3.7 版 更改 : the " " " " " " 现在 " " " " " <unk> " 定义 了 一个 定义 的 定义 了 " __ " __ " __ " __ " __ " __ " __ ", 在 3.4 版 更改 : " __ wrapped __ " 属性 现在 总是 指向 被 包装 的 函数 ， 即使 该 函数 定义 了 " __ wrapped __ " 属性
if copy_function is given, it must be a callable that will be used to copy each file, 如果 给出 为 ， ， 必须 必须 必须 调用 的 的 的 的 文件, 如果 给出 了 copy _ function ， 它 必须 是 一个 将 被 用来 拷贝 每个 文件 的 可 调用 对象
codec authors also need to define how the codec will handle encoding and decoding errors., 编解码器 还 还 需要 定义 了 如何 编解码器 和 编码 编码 编码 编码 编码 编码 编码, 编解码器 作者 还 需要 定义 编解码器 将 如何 处理 编码 和 解码 错误
this method is called by the <unk> method., 此 方法 调用 调用 调用 " 调用 _ 调用 ( ) " 方法, 此 方法 会 由 " <unk> . <unk> ( ) " 方法 来 调用
deprecated python modules, functions and methods, 已弃 用 的 python 模块 、 函数 和 方法, 已弃 用 的 python 模块 、 函数 和 方法
return a list object with the same contents as the sequence or iterable o , or "null" on failure, 返回 对象 对象 相同 的 对象 相同 的 序列 对象 ， 如果 失败 时 返回 " null " ， 返回 " null ", 返回 一个 列表 对象 ， 其 内容 与 序列 或 可 迭代 对象 o 相同 ， 失败 时 返回 " null "
this might be important if some resource is freed when the object is garbage collected in the parent process., 如果 在 如果 存在 对象 时 ， 当 对象 被 垃圾 回收 时 被 被 被 为 真值, 如果 父 进程 中 的 某些 对象 被 垃圾 回收 会 导致 资源 释放 ， 这 就 变得 很 重要
you can pass the parser a bytes, string or file object, and the parser will return to you the root "emailmessage" instance of the object structure, 你 可以 通过 一个 字符串 或 字符串 或 文件 对象 ， 并 将 其 将 其 到 对象 的 实例 对象 的 实例 对象 的 实例 对象 的 实例 对象, 你 可以 传递 给 语法分析 程序 一个 字节 串 、 字符串 或者 文件 对象 ， 语法分析 程序 会 返回 给 你 对应 于 该 对象 结构 的 根 " emailmessage " 实例
the caller have to call "pybuffer_release()" when it is done with the buffer., 当 调用 调用 时 ， 时 ， 时 被 执行, 当 缓冲区 使用 <unk> 调用者 需要 调用 " pybuffer _ release ( ) "
there is no public constructor., 没有 公共 公共, 没有 公共 构造 器
if type indicates that the object <unk> in the cyclic garbage <unk> it is added to the <unk> set of <unk> objects, 如果 type 对象 对象 对象 对象 对象 ， 则 " " " ， ， 则 它 将 被 " " " " " " " " " " " " " " " ", 如果 type 声明 这个 对象 参与 循环 垃圾 检测 ， 那么 这个 对象 会 被 添加 进 垃圾 检测 的 对象 集中
new in version 3.1., 3.1 新版 功能 ., 3.1 新版 功能 .
different applications can then use different virtual environments, 不同 的 应用程序 ， 请 使用 不同 的, 然后 ， 不同 的 应用 将 可以 使用 不同 的 虚拟环境
it also matches the way the cpython executable handles its own <unk> argument <unk> the output of "python <unk>, 它 还 会 描述 的 的 的 的 的 的 的 参数 （ 即 <unk> <unk> 的 的 的 的, 这种 方式 更 常见 ， 也 和 cpython 的 可执行文件 处理 它 自己 的 <unk> <unk> 参数 的 方式 一致 （ 参考 " python help " 的 输出 ） ：
if you run <unk> , you should see this in <unk> :, 如果 你 希望 <unk> 你 你 应该 你 <unk> <unk> <unk> <unk>, 如果 你 运行 <unk> . py ， 你 应该 在 <unk> . log 中 看到 ：
<unk> a "long" integer, value , to file, " ' " ' " 将 将 将 导致 为 文件, 将 一个 " long " 整数 value 以 marshal 格式 写入 file
shell menu (shell window only), shell 菜单 （ 仅 window 编辑器 ）, shell 菜单 （ 仅 window 编辑器 ）
(contributed by steve dower in bpo <unk>, （ 由 steve dower 在 bpo <unk> 中 贡献 。 ）, （ 由 steve dower 在 bpo <unk> 中 贡献 。 ）
no message of desired type, 没有 消息 的 的, 没有 所 需 类型 的 消息
normally, a decimal point character appears in the result of these conversions only if a digit follows it, " 一个 " ' " 字符 的 字符 的 的 的 ， 只有 只有 只 在 它 的, 通常 只有 在 带有 小数 的 情况 下 ， 此类 转换 的 结果 <unk> 会 出现 <unk> 符号
if so, the mechanism described in user defined objects below is used to create an <unk> otherwise, the context is used to determine what to <unk>, 如果 在 在 用户 中 中 的 的 的 中 ， 被 用来 创建 一个 使用 ， 否则 使用 " context _ context ( ) " 来 使用 上下文 被 用作, 如果 需要 ， 则 会 使用 下面 用户 定义 对象 所 描述 的 机制 来 创建 一个 实例 ； 否则 ， 会 使用 上下文 来 确定 要 实例 化 的 对象
<unk> week number of the year <unk> as the first day (3) of the <unk> as a decimal number <unk>, " <unk> " <unk> " 表示 的 数 数 的 的 数 数 的 的 数 数 的 的 数, " % w " 十进制 数 [ 00 , 53 ] 表示 的 一年 中 的 <unk> （ 星期一 作为 ( 3 ) 一周 的 第一天 ） 作为
see python initialization configuration for the documentation., 请参阅 python 模块 的 配置 配置, 请参阅 python 初始化 配置 获取 详细 文档
specifically, the event loop needs to know when a child process has exited., 如果 事件 循环 进程 时 ， 当 一个 进程 进程 时 将 被, <unk> ， 事件 循环 需要 知道 子 进程 何时 退出
(the "freeze_support()" line can be omitted if the program will be run normally instead of <unk>, （ 如果 你 可以 被 运行 ， 如果 运行 运行 的 运行 时 ， 而 不是 ", （ 如果 程序 将 正常 运行 而 不是 冻结 ， 则 可以 省略 " freeze _ support ( ) " 行 ）
they were not generated by the parser and not accepted by the code generator in python 3, 它们 在 通过 解析器 并 并 在 python 中 中 的 python 中, 它们 不会 被 解析器 所 生成 且 不会 被 python 3 中 的 <unk> 器所 接受
<unk> the class namespace, " 类 " 类, 准备 类 命名 空间
<unk> tools for pickle developers, " email . pickle " 的 的, " <unk> " pickle 开发者 工具集
the " add <unk> option specifies a string to append to all output filenames, " help " 添加 添加 选项 选项 将 添加 到 到 的 的 的, " add suffix " 选项 接受 一个 字符串 ， 用来 作为 后缀 附加 在 输出 文件名 后面 的 后面
the <unk> and <unk> functions are now deprecated and will be removed in python <unk>, <unk> <unk> <unk> <unk> <unk> 函数 函数 被 移除 . py _ <unk> ( ) " 的 被 移除, " <unk> _ <unk> ( ) " 和 " <unk> _ <unk> ( ) " 函数 <unk> 被弃 用 并 将 在 python 3.11 中 被 移除
(default: <unk> the maximum length of wrapped lines, <unk> _ <unk> 长度 长度 长度 长度 长度, ( 默认 : " 70 " ) 自动 换行 的 最大 行 长度
there are exceptions to this <unk> some characters are special metacharacters , and don't match themselves, 有 异常 ， 但 一些 一些 字符 的 字符 ， ， ， ， 不 支持, 这 条 规则 有 例外 ； 一些 字符 是 特殊 的 <unk> ， 并且 不 匹配 自己
if not, when a "date" object is compared to an object of a different type, "typeerror" is raised unless the comparison is " " or "! ", 如果 当 一个 " 对象 " 对象 " 对象 ， 不同 的 不同 对象 ， 则 会 被 " " " " " " " " " " " " " " " ", 否则 ， 当 " date " 对象 与 不同 类型 的 对象 比较 时 将 会 引发 " typeerror " ， 除非 是 " " 或 " ! " 比较
when the execution is <unk> by <unk> on the next object returned by the asynchronous generator's methods, the function can proceed exactly as if the yield expression were just another external call, 当 执行 执行 时 返回 一个 " 对象 ( ) " 返回 的 的 ， ， 返回 的 函数 会 被 执行 的 表达式 ， 执行 执行 执行 的 执行, 当 执行 在 等待 异步 生成器 的 方法 返回 下 一个 对象 后 恢复 时 ， 该 函数 可以 <unk> 状态 继续 进行 ， 就 <unk> yield 表达式 只是 另 一个 外部 调用
they keep the sign that would have <unk> if the <unk> had been carried out to greater precision, 它们 ， 如果 <unk> ， 如果 如果 <unk> ， 则 将 <unk> 的 <unk> <unk> 舍入, 它们 保留 符号 是 为了 让 运算 结果 <unk> 更 高 的 精度 传递
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
handlers are passed "logrecord" instances intended for particular <unk>, 处理程序 " 传递 " " " 实例 的 子类 （ 例如 " ）, 传递 处理程序 用于 特定 目标 的 " logrecord " 实例
changed in version 3.4: the name attribute has been present in cpython since its <unk> but until python 3.4 was not <unk> specified, so may not exist on some platforms., 在 3.7 版 更改 : the 属性 的 " <unk> " ， 因为 因为 已 被 移除 ， 但 不会 被 不再 ， ， 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能 可能, 在 3.4 版 更改 : 该 属性 名称 自 被 引入 <unk> 存在 于 cpython 中 ， 但 在 python 3.4 之前 <unk> <unk> 指明 ， 因此 可能 不 存在 于 某些 平台 上
also, there is no requirement that the value of an object should be constructed in a particular way, e.g. <unk> of all its data attributes, 另外 ， 没有 没有 对象 的 对象 的 对象 是 一个 " 的 " 的 实例 的 属性 ， 数据 属性 数据 的 数据, 而且 ， 对象 值 并 不 要求 具有 特定 的 构建 方式 ， 例如 由 其 全部 数据 属性 组成 等
module "logging" api reference for the logging module., 模块 " logging " 模块 记录 模块 的 api, 模块 " logging " 日志 记录 模块 的 api 参考
the contents of this module are useful for python core developers who are working on the <unk> ordinary users of the "pickle" module probably won't find the <unk> module <unk>, 这个 模块 的 python python 是 在 python 的 是 是 在 模块 " 模块 " 模块 ， 模块 模块 ， 模块 " 模块 " 模块 " 模块 " 模块 " 模块, 此 模块 的 内容 对 需要 操作 " pickle " 的 python 核心 开发者 来说 很 有 用处 ； " pickle " 的 一般 用户 则 可能 会 <unk> " <unk> " 模块 与 他们 <unk>
the following functions use the global state created by <unk> if there is no active state, "runtimeerror" is raised., 以下 函数 函数 使用 " " " " " ， 如果 没有 没有 的 ， 则 会 引发 ", 下列 函数 会 使用 " fileinput . input ( ) " 所 创建 的 全局 状态 ； 如果 没有 活动 的 状态 ， 则 会 引发 " runtimeerror "
<unk> windows registry access, " winreg " windows 注册表 访问, " winreg " windows 注册表 访问
finally, the type determines how the data should be <unk>, 将 类型 的 数据 如何 数据 数据 应当 应当, 最后 ， type 确定 了 数据 应 如何 <unk>
the <unk> size of these chunks can be specified by setting <unk> to a positive integer, <unk> 的 的 的 的 的 可以 通过 指定 " <unk> . <unk> " 来 为 整数 整数, 这些 块 的 <unk> 数量 可以 由 <unk> 指定 正整数 设置
pep <unk> byte literals, pep <unk> : 多任务处理, pep <unk> : 字节 字 面值
numeric and mathematical modules, 数字 和 数学 模块, 数字 和 数学 模块
the original object can be retrieved by calling the reference object if the referent is still <unk> if the referent is no longer alive, calling the reference object will cause "none" to be returned, 原始 对象 对象 被 调用 对象 的 引用 的 引用 ， 如果 没有 被 引用 的 引用 引用 引用 引用 将 返回 " null " 将 返回 " none ", 如果 原始 对象 仍然 存活 ， 则 可以 通过 调用 引用 对象 来 检索 原始 对象 ； 如果 引用 的 原始 对象 不再 存在 ， 则 调用 引用 对象 将 得到 " none "
return " 2" if tracemalloc is <unk> otherwise return <unk>, 如果 返回 " true " ， 返回 " true " ， 否则 返回 " true ", 如果 tracemalloc 被 禁用 则 返回 " 2 " ， 否则 返回 " 0 "
size of the compressed data., " 的 " 的 大小, 已 压缩 数据 的 大小
can be an instance of "str" or a "charset", 可以 是 " 实例 " 实例 或 实例, 可以 是 一个 " str " 类 的 实例 ， 或者 一个 " charset " 类
the wrappers ensure that str [ size <unk> is always "'\0'" upon return, 该 的 的 的 的 的 大小 的 的 是 不 为 1 的 的, 包装 器 确保 str [ size 1 ] 在 返回 时 始终 是 " ' \ 0 ' "
note that unlike the c structure, the month value is a range of <unk> <unk> not <unk> <unk>, 请 注意 ， c " " " 的 值 是 " " " " " " " " " " " " ", 请 注意 ， 与 c 结构 不同 ， 月份 值 是 [ 1 , 12 ] 的 范围 ， 而 不是 [ 0 , 11 ]
it overrides one method and adds one writable instance variable, 它 是 一个 方法 和 一个 一个 类 实例, 它 重载 了 一个 方法 并 添加 了 一个 可写 的 实例 变量
if the object referenced by " p" is <unk> the original " p" is <unk>, 如果 " 为 " 的 " 对象 ， 则 " " " " " " " " " " ", 如果 替换 了 " p " 引用 的 对象 ， 则 原始 的 " p " 将 被 销毁
it defaults to octal <unk> (and will be modified by the <unk> <unk>, 它 默认 为 " float " ， " " " " " " " " " " ", 其 默认值 为 八进制 数 " <unk> " ( 并 将 被 当前 的 umask 所 修改 )
however, if deep writes and <unk> are <unk> it is easy to make a subclass that updates keys found <unk> in the <unk>, 但是 ， 如果 存在 的 " 和 " <unk> " ， 它 是 " " " " " " " " " " " " " " " " ", 然而 ， 如果 需要 深度 写 和 删除 ， 也 可以 很 容易 的 通过 定义 一个 子类 来 实现 它
a "future" is a special low level awaitable object that represents an <unk> result of an asynchronous operation., 一个 一个 是 一个 特殊 的 " " " 的 一个 对象 的 一个 一个 的 的 一个, " future " 是 一种 特殊 的 低 层级 可 等待 对象 ， 表示 一个 异步 操作 的 最终 结果
https support is only available if python was compiled with ssl support <unk> the "ssl" <unk>, 因此 支持 支持 只 在 python python 时 ， 则 会 使用 " <unk> ", https 支持 仅 在 编译 python 时 启用 了 ssl 支持 的 情况 下 （ 通过 " ssl " 模块 ） 可用
it is typically called repeatedly until an "oserror" exception is raised, <unk> no more values are available., 它 在 调用 调用 " " ( ) " 调用 时 ， " 异常 " 不会 被 任何 异常, 通常 它会 被 反复 调用 ， 直到 引发 " oserror " 异常 ， 这 说明 已经 没有 更 多 的 可用 值 了
when a database is accessed by multiple <unk> and one of the processes <unk> the database, the sqlite database is locked until that transaction is <unk>, 当 一个 可 被 多个 <unk> ， 并且 ， 的 数据库 的 数据库 的 数据库 的 数据库 的 数据库 的 数据库 的 的, 当 一个 数据库 被 多个 连接 访问 的 时候 ， 如果 其中 一个 进程 修改 这个 数据库 ， 在 这个 事务 提交 之前 ， 这个 sqlite 数据库 将会 被 一直 锁定
(contributed by victor stinner in bpo <unk>, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）
not all items in some free lists may be freed due to the particular implementation, in particular <unk>, 不 所有 中 的 的 ， ， 可能 会 可能 将 导致 将 在 " 中 中 的 的, 由于 特定 类型 特别 是 " float " 的 实现 ， 在 某些 空闲 列表 中 并非 所有 项 都 会 被 释放
instances have the following methods and attributes:, 实例 具有 下列 方法 和 属性 ：, 实例 具有 下列 方法 和 属性 :
return an iterator over elements repeating each as many times as its count, 返回 一个 迭代 对象 的 元素 ， 返回 一个 作为 作为 的, 返回 一个 迭代 器 ， 其中 每个 元素 将 重复 出现 <unk> 数值 所 指定 次
in general, you shouldn't change it, but read only access is not <unk>, 在 ， 情况 下 ， ， ， 但 但 不会 访问 ， 访问 访问 访问, 一般来说 ， 你 不 应该 修改 它 ， 但 并 不 强制 要求 只读 访问
the "float" type in cpython uses a c "double" for storage, " decimal " 类型 的 类型 是 一个 c c c ", cpython 中 的 " float " 类型 使用 <unk> 的 " double " 类型 进行 存储
examples of usage: "date", class : timedelta 用法 示例, class : date 用法 示例
<unk> all of the <unk> to <unk>, " " " " " 的 所有 所有 :, 将 所有 陷阱 重置 为 零 " 0 "
return the shell style pattern converted to a regular expression for using with <unk>, 返回 分配 的 以 " 以 " " 使用 " 使用 的 使用 ", 返回 shell 风格 <unk> 转换成 的 正则表达式 以便 用于 " re . match ( ) "
unpacking methods are of the form <unk> and take no arguments, " __ " __ " " " 的 和 和 参数 参数 的 参数, 解包 方法 的 形式 为 " unpack _ type ( ) " ， 并且 不 接受 任何 参数
this undocumented behaviour was considered a <unk> and was removed in python 3.4, but <unk> in <unk> due to <unk> backward <unk>, 此 函数 都 会 被 一个 " <unk> " " " python python 中 的 的 " 在 " 中 中 的 的 " 中 " " ", <unk> <unk> 文档 的 行为 被 视为 是 一个 错误 ， 并 在 python 3.4 中 被 移除 ， 但 又 在 3.4 . 2 中 被 恢复 以 保持 向下 兼容性
if set to the empty string (the default), the cursor is inherited for the parent widget, 如果 设置 为 空 字符串 字符串 ， 则 会 被 设为 为 ", 如果 设置 为空 字符串 （ 默认值 ） ， 则 为 父 控件 继承 光标
this does nothing for read only and non blocking <unk>, 这 函数 用于 读取 的 和 非 非 阻塞 的 阻塞, 这 对 只读 和 非 阻塞 流 不起作用
"site" site specific configuration hook, " site " — — — 域 域 的 配置 钩子, " site " — — 指定 域 的 配置 钩子
the presence of annotations does not change the semantics of a function, 不 的 的 的 改变 的 的 的, 标注 的 存在 不会 改变 函数 的 语义
the main module for a script is always called <unk>, 该 模块 模块 是 一个 " 总是 ( ) ", 一个 脚本 的 主 模块 总是 被 命名 为 " __ main __ "
for example, <unk> 2, <unk> yields <unk> 2, <unk> and <unk> yields <unk> <unk> <unk>, 例如 ， " ' ( ' , ' , ' , ' , ' " , " ' , ' , ' , ' " , " ' , ' " , " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", 例如 ， " list ( ( 1 , 2 , 3 ) ) " 产生 " [ 1 , 2 , 3 ] " 而 " list ( ' abc ' ) " 产生 " [ ' a ' , ' b ' , ' c ' ] "
the c structure used for coroutine objects., 用于 用于 的 的 结构 体, 用于 协程 对象 的 c 结构 体
you can create "tarinfo" objects directly, or by using <unk>, 你 可以 创建 " " " " " " " " " " " " ", 你 可以 直接 创建 " tarinfo " 对象 ， 或是 使用 " <unk> ( ) " 来 创建
a special problem is the <unk> of tuples containing 0 or 1 items: the syntax has some extra <unk> to <unk> these, 特殊 特殊 的 是 是 一个 元组 ， ， ， 或者 ， 的 的 的 的 ， ， 一些 一些 的 的, 一个 特殊 的 问题 是 构造 包含 0 个 或 1 个 元素 的 元组 ： 为了 <unk> 这种 情况 ， 语法 有 一些 额外 的 改变
before we move on calling functions with other parameter types, we have to learn more about "ctypes" data types., 在 windows 上 ， " 函数 其他 函数 的 参数 ， 我们 我们 更 多 的 的 更 多 的, 在 我们 开始 调用函数 前 ， 我们 必须 先 了解 作为 函数参数 的 " ctypes " 数据类型
pep <unk> function annotations the original specification for function annotations., pep <unk> : 重写 的 函数 的 函数, pep <unk> 函数 标注 最初 的 函数 标注 规范 说明
it is a subclass of <unk>, 它 是 " unicodeerror " 的 子类 子类, 此 异常 是 " unicodeerror " 的 一个 子类
2to3 supporting library "lib2to3" is, however, a flexible and generic library, so it is possible to write your own fixers for <unk>, <unk> 对象 库 的 ， ， ， ， 一个 类 ， ， ， ， 因此 ， 你 可以 你 的 你 的 的, 不过 2to3 的 支持 库 " lib2to3 " 是 一个 很 灵活 通用 的 库 ， 所以 还 可以 编写 你 自己 的 2to3 修复器
creates a new decimal instance from num but using self as context, 创建 新 的 实例 ， " ， ， 使用 的 上下文 使用, 基于 num 创建 一个 新 decimal 实例 但 使用 self 作为 上下文
the launcher was originally specified in pep <unk> ., <unk> 在 最初 中 指定 的 的 的, 启动器 最初 是 在 pep <unk> 中 指定 的
note that exit handlers and finally <unk> <unk> will not be executed., 请 注意 ， 处理程序 的 " " " " " " " " " " ", 请 注意 ， 不会 执行 退出 处理程序 和 finally 子句 等
this special case is deprecated, as the "staticmethod()" decorator is now correctly identified as abstract when applied to an abstract method:, 这 特殊 特殊 的 ， 是 与 " 的 " 是 是 " " " " " " " " " " ", 这个 <unk> 已 被 弃用 ， 因为 现在 当 " staticmethod ( ) " 装饰 器 应用 于 抽象 方法 时 它 会 被 正确 地 标识 为 抽象 的 :
if you're not using raw strings, then python will convert the "\b" to a <unk> and your re won't match as you expect it to, 如果 未 使用 " ， ( ) " 将 将 将 将 将 为 " <unk> " ， 并 将 其 <unk> ， 你 你 你 的, 如果 你 没有 使用 原始 字符串 ， 那么 python 会 将 " \ b " 转换 为 <unk> ， 你 的 正则 不会 按照 你 的 预期 匹配
the right hand side expressions are evaluated from the left to the <unk>, 结果 是 表达式 来自 的 的 的 的, 右手边 的 表达式 是 <unk> 被 求值 的
bpo <unk> the ssl module now <unk> with <unk> <unk>, bpo <unk> : " 模块 . <unk> " <unk> " <unk> " <unk> ", bpo <unk> : ssl 模块 现在 使用 <unk> 2.7 . 1 编译
the most complete book on regular expressions is almost certainly <unk> <unk> <unk> regular <unk> published by <unk>, 在 linux 上 的 的 的 是 由 <unk> <unk> （ 例如 " <unk> " <unk> " <unk> " " " " ", 关于 正则表达式 的 最 完整 的 <unk> 几乎 <unk> 是 由 o ' <unk> <unk> 的 <unk> <unk> 的 <unk> <unk> <unk>
the third argument must be a pointer to an <unk> the referenced integer will be set to the number of bytes in the output buffer., 第三个 参数 必须 为 一个 指向 一个 整数 的 整数 将 将 将 以 为 字节 的 的 的, 第三个 参数 必须 为 指向 一个 整数 的 指针 ； 被 引用 的 整数 将 被 设为 输出 缓冲区 中 的 字节数
<unk> exception and defect classes, " email . errors " 异常 并 和 类, " email . errors " : 异常 和 缺陷 类
bpo <unk> updated openssl to <unk> in windows installer, bpo <unk> : 修复 openssl 1.1 <unk> windows, bpo <unk> : 在 windows 安装程序 中将 openssl 更新 为 1.1 . <unk>
the <unk> class is used for encoding an input in multiple steps, " 类 " 类 用于 用于 用于 处理 的 的, " <unk> " 类 用来 对 一个 输入 进行 <unk> 编码
for non unix platforms, or when a remote browser is available on unix, the controlling process will not wait for the user to <unk> with the browser, but allow the remote browser to maintain its own windows on the display, 对于 非 unix ， 在 unix 时 ， 当 时 时 ， 时 ， 将 被 设置 用户 的 的 ， 但 将 不会 处理 消息 ， 并 将 在 windows 上 的 的, 对于 非 unix 平台 ， 或者 当 unix 上 有 远程 浏览器 时 ， 控制 过程 不会 等待 用户 完成 浏览器 ， 而是 允许 远程 浏览器 在 显示 界面 上 维护 自己 的 窗口
then call the <unk> function to restore the terminal to its original operating mode., 然后 调用 调用 " get _ completed ( ) " 函数 来 获取 其 的 的, 然后 ， 调用函数 " <unk> ( ) " 来 将 终端 还原 到 它 的 原始 操作 模式 ：
"await" <unk> send data to the "socket", " await " " " . <unk> " ) " 数据 将 输出, " await " " loop . sock _ <unk> ( ) " <unk> 到 " socket "
this can leave up to 3 digits to the left of the decimal place and may require the addition of either one or two trailing zeros., 这 导致 导致 转换 为 转换 为 的 的 ， ， ， 或者 两个 两个 两个, 这会 在 十进制 位 的 左边 保留 至多 3 个 数码 ， 并 可能 要求 添加 一至 两个 末尾 零
various date and time objects are supplied by the "datetime" module, 在 <unk> 和 和 时间 的 " 模块 ", " datetime " 模块 提供 了 各种 日期 和 时间 对象
invoke <unk> on the current path, 在 上 上 的 路径 路径, 在 当前 路径 上 发起 调用 " zipfile . open ( ) "
changed in version 3.2: rest parameter added., 在 3.2 版 更改 : 增加 了 parameter 形参, 在 3.2 版 更改 : <unk> parameter added .
the <unk> <unk> if used, must be called before <unk> is called, " <unk> " 如果 " ， 如果 " 必须 " " 被 调用 " 调用 " 调用, 如果 要 使用 " filter ( ) " 例程 ， 它 必须 在 调用 " <unk> ( ) " 之前 被 调用
the operation is done in place when o1 supports it, 当 o1 支持 时 ， 在 这个 支持 时 储存 储存, 在 o1 支持 的 <unk> 下该 操作 将 原地 执行
will print to standard output, 将 打印 打印 标准 输出, 将 在 标准 输出 中 打印
structure used to describe an <unk> allocator, 用于 <unk> <unk> <unk> 的 <unk>, 用来 描述 一个 <unk> 分配器 的 结构 体
return the maximum of the absolute value of all samples in a <unk>, 返回 由 <unk> 中 的 的 的 采样, 返回 片段 中 所有 采样 值 的 最大 绝对值
these functions should be <unk> in python 3, because they return encoded bytes, 这些 函数 在 python python 中 ， 它们 的 它们 它们 它们 返回 其 的 字节, 在 python 3 <unk> 避免 使用 这些 函数 ， 因为 它们 返回 的 是 编码 后 的 字节 串
constants added by the "site" module, 在 模块 " 模块 " 模块, 由 " site " 模块 添加 的 常量
now we <unk> "row" <unk>, 现在 我们 <unk> <unk> <unk> <unk> / <unk> ., 现在 我们 将 " row " 插入 :
required whether or not a <unk> must be provided, by default "false" <unk> in <unk>, 是否 是否 或 <unk> 必须 为 " <unk> _ <unk> ( ) " " " " " " ) ", <unk> 是否 必须 要 提供 子 命令 ， 默认 为 " false " ( 在 3.7 中 新增 )
raises a "invalidstateerror" error if the future is already done ., 如果 future 对象 则 会 引发 " invalidstateerror ", 如果 future 已经 完成 则 抛出 一个 " invalidstateerror " 错误
changed in version 3.4: the <unk> parameter was changed to also accept an iterable of test names., 在 3.4 版 更改 : the <unk> _ <unk> _ <unk> ( ) " 接受 接受 接受 的 的 可 接受 的, 在 3.4 版 更改 : the <unk> parameter was <unk> to <unk> <unk> an iterable of test names .
file menu (shell and editor), 文件 菜单 （ 命令行 和 编辑器 ）, 文件 菜单 （ 命令行 和 编辑器 ）
remove the specified option from the specified section, 从 指定 指定 的 选项 选项, 将 指定 的 option 从 指定 的 section 中 移除
if <unk> is "true" <unk> mode), a message <unk> handlers could be found for logger <unk> is printed once., 如果 <unk> _ <unk> " true " true " 则 " 消息 " 的 的 则 会 引发 " 的 ", 如果 logging . raiseexceptions 为 " true " （ 开发 模式 ） ， 则 会 打印 一条 消息 “ 无法 找到 记录器 x . y . z 的 处理程序 ”
raised to signal an error from the underlying ssl implementation (currently provided by the openssl <unk>, 当 到 来自 下层 下层 " " " " " 的 " " " " 来 由 " 的 ", 引发 此 异常 以 提示 来自 下层 ssl 实现 （ 目前 由 openssl 库 提供 ） 的 错误
the following exceptions are raised as <unk>, 以下 异常 异常 被 " <unk> " <unk> ", 下列 异常 可以 适当 地被 引发 :
it should be used when "turtle" is used as part of some <unk>, 它 应当 被 使用 " 被 用作 被 使用, 应 在 " turtle " 作为 某个 程序 的 一部分 的 时候 使用
note that <unk> is always "none" in the last case, even if the file could <unk> be imported directly as a module instead, 请 注意 " " " " " " " " " " " ， 如果 文件 描述符 的 的 是 在 模块 中 被 作为 模块, 请 注意 在 最后 一种 情况 中 " __ main <unk> spec __ " 总是 为 " none " ， 即使 文件 <unk> 说 可以 作为 一个 模块 被 导入
as such, a referent can contain proxy objects, 作为 " <unk> . get _ context 对象 对象 的 对象, 因此 ， 指涉 对象 可以 包含 代理 对象
in these cases, you may be better off writing python code to do the <unk> while python code will be slower than an <unk> regular expression, it will also probably be more <unk>, 在 ， 情况 下 ， 可以 安装 python 代码 代码 代码 代码 的 python 代码 ， ， ， ， 的 代码 ， ， ， ， ， ， ， 这 也 会 更 多, 在 这些 情况 下 ， 你 最好 编写 python 代码 来 进行 处理 ； 虽然 python 代码 比 <unk> 的 正则表达式 慢 ， 但 它 也 可能 更 容易 理解
returns the current unpack position in the data buffer., 返回 当前 当前 中 的 的 位置 的 位置, 返回 数据 缓冲区 中 的 当前 解包 位置
new in version 3.6., 3.6 新版 功能 ., 3.6 新版 功能 .
the main operations on a dictionary are storing a value with some key and extracting the value given the key, 在 的 的 操作 是 一个 的 键 ， 以及 与 给定 的 的 值, 字典 主要 的 操作 是 使用 关键字 存储 和 解析 值
one way of doing that is by using the " w" "default" command line option., 一种 使用 " 使用 " 选项 " 选项 将 命令行 选项 命令, 一种 方法 是 使用 " w " " default " 命令行 选项
exception raised by the "netrc" class when <unk> errors are encountered in source text, 当 在 <unk> 时 时 时 时 将 被 被 在 错误 时 将 被 引发, <unk> 文本 中 遇到 语法错误 时 由 " netrc " 类 引发 的 异常
"pyclbr" python module browser support, " pyclbr " python 模块 浏览器 支持, " pyclbr " python 模块 浏览器 支持
equality tests between "ordereddict" objects and other <unk> objects are order insensitive like regular dictionaries, <unk> 测试 之间 对象 " 对象 " 对象 ， 对象 对象 被 对象, " ordereddict " 对象 和 其他 的 " mapping " 的 相等 测试 ， 是 顺序 敏感 的 字典 测试
if the slice list contains at least one <unk> the key is a tuple containing the conversion of the slice <unk> otherwise, the conversion of the <unk> slice item is the key, 如果 列表 包含 包含 列表 ， 一个 一个 键 ， 是 一个 包含 " ， " ， " " " " " " " " " " 的 " ， ， ， 的 " <unk> " 的 ", 如果 切片 列表 包含 至少 一个 逗号 ， 则 键 将 是 一个 包含 切片 项 转换 的 元组 ； 否则 的话 ， 键 将 是 单个 切片 项 的 转换
deprecated since version 3.9: <unk> now supports "[]", 3.9 版后 已 移除 : " collections . abc . abc " now supports " [ ] ", 3.9 版后 已 移除 : " collections . abc . <unk> " now supports " [ ] "
pep <unk> flexible string representation, pep <unk> : string 字符串, pep <unk> : 灵活 的 字符串 表示
python on windows faq, 在 windows 上 上, python 在 windows 上 的 常见问题
parallel running of <unk> / <unk> / <unk> is now <unk> and <unk> now <unk> the actual running status of the <unk> generator, " <unk> " " " " " " " " " " " " 现在 是 " <unk> " 现在 会 会 在 <unk> <unk> <unk> <unk> <unk> 的 的, " <unk> ( ) " / " <unk> ( ) " / " <unk> ( ) " 的 并行 运行 现在 已 被 禁止 ， 且 " <unk> _ running " 现在 会 反映 异步 生成器 的 实际 运行 状态
see the deprecated section for a list of methods that should be replaced and their <unk>, 请参阅 用 的 的 的 的 方法 ， 是 " 和 " 的 的 的, see the 弃用 section for a list of <unk> that <unk> be <unk> and <unk> <unk> .
a <unk> version called <unk> is available, " <unk> . <unk> " , " <unk> _ <unk> " ) " 是 " <unk> ", 提供 了 一个 名为 <unk> 的 移植 版本
the "pyarg_parsetuple()" function and its arguments are documented in section extracting parameters in extension functions., 函数 函数 函数 和 参数 参数 参数 在 参数 中 的 参数, " pyarg _ parsetuple ( ) " 函数 及其 参数 的 文档 在 提取 扩展 函数 的 参数
thus, the logging <unk> of a long running application can be <unk> over time with no need to stop and restart the <unk>, 在 ， 日志 记录 日志 的 ， ， ， ， ， ， 可以 可以 需要 需要 需要 的 的 <unk>, 这样 ， 长时间 运行 的 应用程序 的 日志 记录 的 详细 程度 可 随 时间 改变 而无须 停止 并 重新启动 应用程序
return the message's envelope header, 返回 头 的 信封, 返回 消息 的 信封 头
the metaclass is responsible for taking those three arguments and creating the class, " 是 " 参数 " ， ， 参数 、 参数 和 创建 类, 元类 负责 接受 上述 三个 参数 并 创建 相应 的 类
changed in version 3.9: functions may be decorated with any valid <unk>, 在 3.9 版 更改 : 移 function 可以 被 任意 任意 任意 任何 ", 在 3.9 版 更改 : 函数 可 使用 任何 有效 的 " <unk> _ expression " 来 装饰
this method should never return "none"., 此 方法 应该 应该 返回 " none ", 该 方法 永远 返回 " none "
changed in version 3.5: added support for passing file descriptor to this function., 在 3.5 版 更改 : 添加 了 对 " 文件 的 的 函数 将 添加 此 函数, 在 3.5 版 更改 : added support for <unk> file <unk> to this function .
when the module is not a package, <unk> should be set to the empty string for top level modules, or for <unk> to the parent package's name, 当 模块 模块 时 ， ， ， 将 被 设为 空 字符串 设置 为 " 设置 " 设置 " 设置 " " ", 当 模块 不是 <unk> ， 对于 最高 层级 模块 " __ package __ " 应该 设为 空 字符串 ， 对于 子 模块 则 应该 设 为 其父 包名
base class for creating <unk> constants that can be combined using the bitwise operators without <unk> their <unk> membership, 用于 模糊 创建 的 的 ， ， 可以 使用 " __ ( ) " 来 使用 的 的 ， 而 不是 " <unk> ( ) " 的 的, 此 基类 用于 创建 可 使用 按位 运算符 进行 组合 而 不会 丢失 其 " intflag " 成员 <unk> 的 枚举 常量
some <unk> <unk> have been known to introduce startup overhead of two <unk> of magnitude when the <unk> is configured to <unk> all reads from the filesystem, 某些 " <unk> " ， 但 它 的 " " " " " 的 " " " " 的 " <unk> " 的 所有 来自 的 的, 当 将 <unk> 扫描 配置 为 监视 文件系统 中 所有 读取 行为 时 ， 一些 <unk> 扫描 程序 会 导致 两个 <unk> 的 启动 开销
if self is dead then return "none"., 如果 self 为 死亡 则 返回 " none ", 如果 self 已 死亡 则 返回 " none "
the use of this flag is <unk> in python 3 as the locale mechanism is very <unk> it only handles one <unk> at a time, and it only works with 8 bit <unk>, 这个 这个 方法 的 python python ， ， ， ， 是 在 其他 情况 下 ， 是 一种 <unk> ， 它 只 在 在 <unk> ， 它 在 它 只 在 只 在 哪里 的 情况 下 ， 它 只 在 哪里 的, 在 python 3 中 不 鼓励 使用 此 标志 ， 因为 语言 环境 机制 非常 不 可靠 ， 它 一次 只 处理 一个 “ <unk> ” ， 它 只 适用 于 8 位 语言 环境
decrements interval timer only when the process is <unk> and <unk> <unk> upon <unk>, 当 当 仅 在 进程 时 被 被 <unk> ， <unk> <unk> <unk> <unk>, 仅 在 进程 执行 时 递减 间隔 计时器 ， 并 在 到期 时 发送 <unk>
create a <unk> object., 创建 一个 " 对象 " 对象, 创建 一个 basemanager 对象
<unk> has a new parameter in the second position of the constructor ( <unk> ) to support positional only arguments defined in pep <unk>, <unk> 具有 " <unk> _ <unk> ( ) " 中 的 的 的 " 的 " 的 " 的 " 的 " <unk> " 位置 位置 位置 位置 参数 的 定义 的 定义, " types . <unk> " 在 构造 器 的 第二个 位置 新增 了 一个 形参 ( <unk> ) 以 支持 在 pep <unk> 中 定义 的 仅限 位置 参数
"io" core tools for working with streams, " 核心 与 使用 与 流 的 流, " io " 处理 流 的 核心 工具
a type that can be used to indicate to type <unk> that the corresponding variable or function parameter has a value equivalent to the provided literal (or one of several <unk>, 一个 类型 可以 用来 用来 用来 类型 的 函数 或 " 形参 ( ) " 函数 的 值 ， " " " " " ) " 的 值, 该 类型 将 指示 类型 检查 <unk> 变量 或者 函数参数 的 值 等价 于 提供 的 字面 量 （ 或者 提供 的 几个 字面 量 的 其中 之一 ）
exit dialog returning filename, if any., 如果 " 0 " ， 如果 " true ", 退出 对话 回到 文件名 , 如果 有 的话 .
modula 3 is the <unk> of the syntax and semantics used for exceptions, and some other python <unk>, <unk> 的 是 是 的 的 的 的 python 的 python 的 python 的 python 的 python, modula 3 是 python 中 异常 机制 所用 语法 和 语义 ， 以及 其他 一些 语言 特性 的 最初 来源
when a script is passed as first argument or the " c" option is used, enter interactive mode after executing the script or the command, even when "sys.stdin" does not appear to be a terminal, 当 脚本 被 作为 参数 参数 参数 ， " " " " " " " " " " " " " " " " 时 ， 在 在 时 时 ， 时 被 执行 时 ， 时 被 被 时, 当有 脚本 被 作为 首个 参数 传入 或 使用 了 " c " 选项 时 ， 在 执行 脚本 或 命令 之后 进入 交互 模式 ， 即使 是 在 " sys . stdin " 并 不是 一个 终端 的 时候
<unk> <unk> and <unk> from the object on top of the stack, <unk> <unk> 和 <unk> <unk> 堆栈 的 堆栈, 从栈 <unk> 对象 解析 " __ <unk> __ " 和 " __ <unk> __ "
begin by creating a file <unk>, 由 创建 创建 一个 文件 描述符, 首先 创建 一个 " <unk> . c " 文件
<unk> braces or the "set()" function can be used to create sets, " ' . set _ or ( ) " 或 " 函数 来 使用 创建 创建 创建 的 值, 花 括号 或 " set ( ) " 函数 可以 用来 创建 集合
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
the latter two functions perform best for smaller values of n, 两个 两个 函数 函数 都 将 为 为 值 的 值, 后 两个 函数 在 n <unk> 小时 性能 最好
if callback is specified then it should be a callable which accepts a single argument, 如果 回调 为 true ， 则 它 应当 是 一个 接受 一个 参数 ， 则 返回 一个 参数, 如果 指定 了 callback , 它 必须 是 一个 接受 单个 参数 的 可 调用 对象
on macos, open the configuration dialog by selecting preferences in the application menu, 在 unix 上 ， 打开 打开 的 的 的 ， 请 使用 的 应用程序, 在 macos 上 ， 通过 在 应用程序 <unk> 首选项 来 打开 配置 对话框
values specifies the list of values to display in the drop down <unk>, 值 将 值 值 值 值 转换 为 列表 的 值, 值 specifies the list of values to <unk> in the <unk> <unk> <unk>
with python 3 being the future of python while python 2 is still in active use, it is good to have your project available for both major releases of python, python python 3 python python python 的 python ， ， 在 python 的 ， ， 但 在 你 的 python 的 的 python 版本 的 python ide, python 3 是 python 的 未来 ， 但 python 2 仍 处于 <unk> 使用 阶段 ， 最好 让 您 的 项目 在 两个 主要 版本 的 python 上 都 可用
the <unk> directory in the python source distribution contains some example programs using the curses bindings provided by this module., python 的 " <unk> " 中 的 " " " 模块 提供 了 提供 了 模块 的 模块 提供 了 模块 的, python 源码 发布 包 的 tools / demo / 目录 包含 了 一些 使用 此 模块 所 提供 的 curses 绑定 的 示例 程序
this format requires two arguments, 这 格式 两个 两个 参数, 此 格式 需要 两个 参数
the optional file argument <unk> where the traceback is <unk> it defaults to <unk>, 可选 的 参数 参数 是 一个 参数 ， 即 " " " " " ", 可选 的 file 参数 指向 发送 回溯 的 位置 ； 它 默认 为 " sys . stderr "
useful for expensive computed properties of instances that are otherwise <unk> <unk>, 对于 " 的 " 的 的 的 的 的 实例 都 是 " <unk> ( ) ", 对于 在 其他 情况 下 实际 不可 变 的 高 <unk> 消耗 的 实例 特征 属性 来说 该 函数 非常 有用
the arguments are interpreted as for <unk>, 参数 解释 同 " debug ( ) ", 参数 解释 同 " debug ( ) "
with a single iterable argument, it returns an iterator of 1 tuples, 带有 一个 迭代 对象 ， 返回 ， 它 返回 一个 元组 的 元组, 当 只有 一个 可 迭代 对象 参数 时 ， 它 将 返回 一个 单元 组 的 迭代 器
a condition variable <unk> the context management <unk> using the "with" statement <unk> the associated lock for the <unk> of the enclosed block, " 变量 " 类型 " 上下文 上下文 的 " with " " " " " 语句 的 的 的 的 的, 条件 变量 遵循 上下文 管理 协议 ： 使用 " with " 语句 会 在 它 <unk> 的 代码 块 内 获取 关联 的 锁
changed in version 3.6: accepts a path like object ., 在 3.6 版 更改 : 接受 一个 类 路径 对象, 在 3.6 版 更改 : 接受 一个 类 路径 对象
asyncio is used as a foundation for multiple python asynchronous frameworks that provide high performance network and web <unk> database connection libraries, distributed task <unk> etc., asyncio 用作 python python 的 python 的 ， ， ， 的 的 和 <unk> <unk> <unk> <unk> 的 的 的 的, asyncio 被 用作 多个 提供 <unk> python 异步 框架 的 基础 ， 包括 网络 和 网站 服务 ， 数据库 连接 库 ， <unk> 任务 队列 等等
returns the largest representable number smaller than x ., 返回 o1 的 的 的 的, 返回 小于 x 的 最大 数字 表示 形式
in particular, capsules used to expose c apis should be given a name following this <unk>, 在 python 使用 使用 c c 的 的 ， 请 以下 属性 :, 通常 来说 ， capsule 用于 暴露 c api ， 其 名字 应该 遵循 如下 规范 ：
there are two <unk> different reasons for using the python/c api, 有 两种 使用 的 的 ， ， 用于 使用 的 的, 使用 python / c api 有 两个 基本 的 理由
some command line arguments should be selected from a restricted set of values, 一些 参数 应当 是 从 从 的 的 值, 某些 命令行 参数 应当 从 一组 受限 值中 选择
release date: 2018 03 13, 发布 日期 : 2018 03, 发布 日期 : 2018 03 13
macros to create objects:, " 创建 创建 创建 对象, 用于 <unk> 的 宏 ：
calling functions with your own custom data types, 使用 你 的 的 函数 函数, 使用 自定义 的 数据类型 调用函数
mark the future as done and set an exception., 读取 ， 并 并 设置 设置 设置 一个 异常, 将 future 标记 为 完成 并 设置 一个 异常
<unk> close and send eof after flushing buffered data, " <unk> " 和 " 和 " help ( ) " 的 一个 数据 的 数据, " transport . write _ eof ( ) " 在 <unk> 已 缓冲 的 数据 后 关闭 传输 和 发送 eof
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
now, how about doing something even more useful:, <unk> 如何 如何 更 多 的 更, 现在 ， 来 做 一些 更 有用 的 事情 ：
count the number of deque elements equal to x ., 将 以 的 的 的 元素 的 数量, 计算 deque 中 元素 等于 x 的 个数
otherwise, this attribute is ignored., 否则 ， 此 属性 ， 属性 属性, 如此 之外 ， 此 属性 被 忽略
<unk> is a package that collects several modules for working with <unk>, " 是 " 是 " <unk> " 用于 使用 模块 的 模块 的 模块, " urllib " 是 一个 收集 了 多个 涉及 url 的 模块 的 包 ：
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
for an instance x of a user defined class, <unk> returns an <unk> list of the names containing the instance attributes and methods and attributes defined by its class., 对于 一个 实例 定义 的 用户 定义 的 定义 ， " " " " " " 实例 的 实例 属性 ， 属性 属性 和 方法 定义 的 属性, 对于 一个 用户 自定义 类 的 实例 x ， " dir ( x ) " 将 返回 一个 按 字母 顺序 排序 的 包含 实例 属性 和 方法 及其 类 所 定义 的 属性 名称 的 列表
bpo <unk> raise <unk> if a member variable of a dataclass is of type field, but doesn't have a type <unk>, bpo <unk> : 如果 " 了 一个 " 的 " 的 " 的 " 类型 ， 但 不是 " 类型 " 类型 ， 但 " 类型 " 类型, bpo <unk> : 如果 数据 类 的 成员 变量 的 类型 为 field ， 但 没有 类型 注解 ， 则 引发 typeerror
here is an example of this function:, 以下 是 此 函数 的 例子 :, 以下 是 此 函数 的 示例 ：
with mixed operand types, the rules for binary arithmetic operators apply, 对于 操作数 ， ， 返回 二进制 二进制 的 的 值, 对于 混合 操作数 类型 ， 适用 <unk> 算术 运算符 的 规则
python on windows faq, 在 windows 上 上, python 在 windows 上 的 常见问题
returns a month's calendar in a multi line string using the <unk> of the <unk> class., 返回 一个 a 中 的 的 的 字符串 ， 字符串 字符串 字符串 的 字符串, 使用 " <unk> " 类 的 " <unk> ( ) " 以 多行 字符串 形式 返回 月份 日历
in addition to "int" and "float", python supports other types of numbers, such as "decimal" and "fraction", 除了 " " " 和 " 和 python 支持 类型 ， 许多 其他 类型 和 " decimal " 和 " 和 ", 除了 " int " 和 " float " ， python 也 支持 其他 类型 的 数字 ， 例如 " decimal " 或者 " fraction "
therefore, it's important to prevent <unk> from <unk> by having a coding convention or strategy that <unk> this kind of errors., 因此 <unk> <unk> <unk> <unk> <unk> 的 <unk> <unk> ， <unk> 或 <unk> 或 或 <unk> 或 <unk> <unk> <unk>, 因此 ， 有 必要 避免 内存 <unk> ， 通过 代码 规范 会 策略 来 最小化 此类 错误
to get error reporting use <unk> instead., 要 改用 " pydict _ getitemwitherror ( ) " 获得, 要 获取 错误报告 请 改用 " pyobject _ getitem ( ) "
return a proxy object that delegates method calls to a parent or <unk> class of type, 返回 一个 " 对象 ( ) " 方法 返回 一个 " 对象 " 或 " 对象 " 类 的 类 类型, 返回 一个 代理 对象 ， 它会 将 方法 调用 委托 给 type 的 <unk> 或 <unk> 类
string literals are described by the following lexical <unk>, 字符串 字 面值 是 由 以下 的 :, 字符串 字 面值 由 以下 词法 定义 进行 描述 :
setting the log level of the asyncio logger to <unk> for example the following snippet of code can be run at startup of the <unk>, 设置 asyncio 记录器 的 记录器 记录器 的 级别 的 ， ， 代码 代码 可以 在 运行 的 运行 的, 将 asyncio logger 的 日志 级别 设置 为 " logging . debug " ， 例如 ， 下面 的 代码 片段 可以 在 应用程序 启动 时 运行 :
the widget state is a <unk> of independent state <unk>, 控件 状态 是 是 " " " " " " 的 ", 控件 状态 是 <unk> 状态 标志 的 <unk> .
"processpoolexecutor" uses the "multiprocessing" module, which allows it to side step the global interpreter lock but also means that only <unk> objects can be executed and returned., " 使用 " 模块 " 模块 的 模块 ， 它 它 它 与 全局 全局 ， 它 的 对象 ， 它 意味着 " 对象 " 和 ", " processpoolexecutor " 会 使用 " multiprocessing " 模块 ， 这 允许 它 绕过 全局 解释器 锁 但 也 意味着 只 可以 处理 和 返回 可 封存 的 对象
methods may reference global names in the same way as ordinary functions, 方法 可以 通过 引用 的 与 内置 的 名称, 方法 可以 通过 与 普通 函数 相同 的 方式 引用 全局 名称
<unk> this text stream using new settings for encoding , errors , newline , <unk> and <unk> ., " ' ' ' " ' 使用 文本 使用 用于 的 的 的 的 的 的 <unk> <unk>, 使用 encoding , errors , newline , line _ <unk> 和 write _ through 的 新 设置 来 <unk> 此 文本 流
text and <unk> objects, text 和 <unk> 对象, text 和 <unk> 对象
use specialized methods like <unk> for changing the selection, 使用 " __ ( __ ( ) " 方法 来 获取 线程 的, 请 使用 专门 方法 例如 " <unk> _ set ( ) " 来 改变 选择
the encoding is done using a function from the <unk> library., encoding 使用 " <unk> . <unk> " 函数 的 函数 函数, 编码 需要 使用 一个 来自 " urllib . parse " 库 的 函数
[ <unk> pool ], [ [ ] ] ], [ 线程 / 进程 池 ]
pep 328: multi line imports, pep 328 : 多行 导入, pep 328 : 多行 导入
in <unk> with the <unk> the "decimal" module provides two ready to use standard contexts, <unk> and <unk>, 在 " " " 模块 " 模块 " 模块 提供 了 " 提供 了 两个 使用 " " " " " " " " " " " " " ", 根据 标准 ， " decimal " 模块 提供 了 两个 <unk> 的 标准 上下文 " <unk> " 和 " <unk> "
use <unk> to check the endianness of your system., 使用 " <unk> ( ) " 来 请 使用 " 的 ", 请 使用 " sys . <unk> " 来 检查 你 的 系统 字节 顺序
the frames are always ordered from oldest to <unk>, 将 总是 从 到 到 从 到 到, 框架 总是 从 按 从 旧 到 新 排序
what's new in python 3.3, python 3.6 . 5 新 变化, python 3.3 有 什么 新 变化
raises "typeerror" if the object is not a bytes object, 如果 对象 对象 为 " 对象 " 对象 则 返回 " bytes " 对象, 如果 该 对象 不 为 bytes 对象 则 会 引发 " typeerror "
curses programming with python, 用 python curses 编程, 用 python 进行 curses 编程
see also method <unk>, 另 请参阅 " <unk> ( ) " 方法, 另 请 参见 " time ( ) " 方法
microsoft foundation classes <unk> user interfaces, " " " 类 类 " 用户 用户 用户, microsoft foundation <unk> ( <unk> ) 用户界面
<unk> a tuple containing <unk> for free variables, making a <unk>, " <unk> 元组 元组 元组 " " " 的 一个 " <unk> " 的 一个 <unk>, " <unk> " 一个 包含 用于 自由 变量 的 单元 的 元组 ， 生成 一个 <unk>
note that the <unk> representation of the string is used as the character <unk> if escape sequences are needed in the representation, these may be <unk> when the representation is <unk>, 请 注意 " 表示 " 表示 的 字符串 表示 字符 ， 如果 在 " " " " " ， 如果 可能 会 被 被 被 被 被 被 被 被 被 被, 请 注意 字符 <unk> 使用 字符串 的 “ 正常 ” 表示 形式 ： 如果 表示 中 需要 <unk> 转义序列 ， 在 <unk> 表示 时 它们 可能 会 被 破坏
raised when <unk> contains an invalid component that will be <unk> <unk> such as a relative path., 当 " <unk> " 包含 一个 将 被 引发 将 被 引发 将 被 " 将 被 ", 当 " <unk> " 包含 将 被 过滤 掉 的 无效 组件 ， 例如 一个 相对路径 时 引发
here are a few examples of how to use the "email" package to read, <unk> and send simple email <unk> as well as more complex mime messages., 以下 是 如何 如何 使用 " <unk> " 的 " <unk> " 和 " <unk> . <unk> " ， 以及 与 <unk> 的 的 的 更 复杂 的, 以下 是 一些 如何 使用 " email " <unk> 读取 、 写入 和 发送 简单 电子邮件 以及 更 复杂 的 mime 邮件 的 示例
any parameter may have an <unk> even those of the form " <unk> or " <unk>, 任何 形参 可能 可能 有 一个 " " " " " " " " " " " " " " " " " " " " ", 任何 形参 都 可以 带有 标注 ， 甚至 " identifier " 或 " identifier " 这样 的 形参 也 可以
my program is too <unk>, 需要 程序 是 " " ( ) ", 我 的 程序 <unk> 了
to explicitly <unk> the usual site specific <unk> call the <unk> function., 要 显式 显式 " " " " ( ) " 调用 " 调用 " <unk> ( ) " 函数, 要 明确 地 触发 通常 域 特定 的 添加 ， 调用函数 " site . main ( ) "
each concrete class has an attribute <unk> which gives the names of all child <unk>, 每个 类 类 类 具有 一个 属性 属性 的 " 所有 所有 所有 的 所有 的 所有, 每个 具体 类 都 有 个 属性 " _ fields " , 用来 给出 所有 子 节点 的 名字
the <unk> and setup parameters can also take objects that are callable without arguments, <unk> _ args ( ) " 和 " 也 可以 也 可以 在 参数 参数 参数, <unk> 和 setup 参数 也 可以 使用 不带 参数 的 可 调用 对象
it fills a <unk> structure provided by the caller, 它 在 一个 由 " 结构 体 的 结构 体, 它 为 由 调用者 提供 的 " py _ buffer " 结构 赋值
<unk> by benjamin peterson and georg <unk>, 由 <unk> <unk> 和 和 <unk> <unk>, （ 由 benjamin peterson 和 georg brandl 实现 。 ）
changed in version 3.4: if "__loader__" is not set, raise "valueerror", just like when the attribute is set to "none"., 在 3.4 版 更改 : 如果 " none " ， " " " " " " " " " " " " " " " " ", 在 3.4 版 更改 : 如果 没有 设置 " __ loader __ " ， 会 引起 " valueerror " 异常 ， 就 像 属性 设置 为 " none " 的 时候 一样
"marshal" internal python object serialization, " 内部 " 内部 python 对象, " marshal " 内部 python 对象 序列化
flag to use as mode parameter, " 要 使用 作为 " mode, 用于 mode 参数 的 标识 值
if x defines <unk> <unk> returns <unk>, 如果 x 定义 了 " __ ( ) " , " " " " " " " " ", 如果 x 定义 了 " __ int __ ( ) " ， " int ( x ) " 将 返回 " x .__ int __ ( ) "
it is an <unk> ide with a built in debugger., 它 是 一个 内置 内置 的 内置, 它 是 一个 内置 调试器 的 可 嵌入 ide
if an object defines <unk> or <unk> it is considered a data descriptor, 如果 对象 定义 了 " __ ( ) " 或 或 或 或 ， 则 它 是 它 数据, 如果 一个 对象 定义 了 " __ set __ ( ) " 或 " __ delete __ ( ) " ， 则 它 会 被 视为 数据 描述 器
passing values into a generator, 传递 值 值 值, 向 生成器 传递 值
<unk> a panel stack extension for curses, " <unk> . <unk> " 用于 的 的 扩展, " curses . panel " curses 的 面板 栈 扩展
the filename argument is the <unk> of the database file <unk> any specific <unk>, 文件名 参数 是 <unk> 的 文件 （ 文件 ） （ 即 ） ）, filename 参数 为 数据库 文件 的 主 名称 （ 不带 任何 特定 扩展名 ）
when used with the "strptime()" method, the "%f" directive accepts from one to six digits and zero pads on the right, 当 使用 " " ( ) " 方法 将 被 从 为 一个 ， ， 到 一个 为 零 的 的 的, 当 与 " strptime ( ) " 方法 一起 使用 时 ， " % f " 指令 可 接受 一至 六个 数码 及 左边 的 零 填充
(contributed by antoine pitrou along with a number of other <unk> bpo <unk>, （ 由 antoine pitrou <unk> <unk> <unk> <unk> <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 antoine pitrou 以及 其他 一些 <unk> 在 bpo <unk> 中 贡献 。 ）
the following example shows various indentation <unk>, 下面 的 示例 了 安装 ： ：, 以下 示例 显示 了 各种 缩进 错误 :
if args is a string, the string specifies the command to execute through the shell, 如果 args 是 一个 字符串 ， 字符串 将 字符串 到 的 的 的 的, 如果 args 是 一个 字符串 ， 此 字符串 指定 将 通过 shell 执行 的 命令
use " p" to run fixers on code that already has had its print statements converted, 在 " " " " 在 运行 时 上 运行 时 的 代码 的 代码 ， 语句, 使用 " p " 来 为 已 转换 过 print 语句 的 <unk> 修复器
class which represents a chunk, " itertools " 类 一个 ", 代表 一个 分块 的 类
<unk> put locks around all calls, " <unk> " , " ) " ) " 所有 所有, 2 ) 在 所有 调用 外面 <unk>
new in version 3.8: the <unk> and <unk> parameters., 3.8 新版 功能 : the <unk> and and and and _ <unk> _, 3.8 新版 功能 : the xml _ <unk> and default _ namespace parameters .
return code handling translates as follows:, 返回 " 的 " 如下 所示 :, 返回 码以 如下 方式 处理 转写 :
see pep <unk> for further details., 请参阅 pep <unk> 了解 详情, 更 多 详情 可 参阅 pep <unk>
the callback is invoked for each attempt to access a column of a table in the database, 回调 函数 在 每个 每个 每个 的 的 的 的, 每次 在 访问 数据库 中 某个 表 的 某 一列 的 时候 ， 这个 回调 对象 将会 被 调用
changed in version 3.8: previously, a nonzero value was returned on success; zero was returned on error under windows, 在 3.8 版 更改 : 在此之前 一个 " 的 " on on on on on on on on on on on on, 在 3.8 版 更改 : previously , a <unk> value was returned on <unk> ; zero was returned on error under windows
an empty string shouldn't match at all, since "+" means <unk> or more <unk>, 空 字符串 的 <unk> ， 因为 " <unk> " ， " 或 " <unk> ( ) " 或 " <unk> . <unk> ( ) ", 空 字符串 根本 不 匹配 ， 因为 " + " 表示 “ 一次 或 <unk> ”
the module defines the following exception:, 模块 模块 定义 了 以下 ：, 此 模块 定义 了 以下 异常 ：
too many symbolic links encountered, " 过多 " 比较 的 比较, 遇到 过多 的 符号 链接
you can <unk> either m or n ; in that case, a reasonable value is assumed for the missing value, 你 可以 通过 " <unk> ( ) " 或 " 在 " 中 的 的 " " " 的 值 ， 值 是 值, 你 可以 省略 m 或 n ; 在 这种 情况 下 ， 将 假定 缺失 值 的 合理 值
for example if the <unk> is set to <unk> the underlying version information can be found by <unk> it as a 32 bit number in the following <unk>, 对于 " 如果 " <unk> " " . 设为 " 设置 为 " <unk> " ， 则 会 在 <unk> 的 " <unk> " 中 ， 它 可以 在 " <unk> " 中 的, 例如 ， 如果 " py _ version _ <unk> " 被 <unk> 为 " <unk> " , 其 包含 的 版本信息 可以 通过 以下 方式 将 其 作为 一个 32 位 数字 来 处理 ：
may be useful for turtle graphics programs too, 可以 用于 对 " 的 " " " 的, 也 可能 在 海龟 绘图 程序 中 使用
the design of this module is <unk> based on <unk> threading model, 此 模块 的 模块 是 基于 基于 的 的 的 的, 该 模块 的 设计 基于 java 的 线程 模型
given <unk> % <unk> instances of "%" in "string" are replaced with zero or more elements of <unk>, 给定 " <unk> " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 给定 " ' string ' % values " ， 则 " string " 中 的 " % " 实例 会以 零个 或 多个 " values " 元素 替换
normal distributions commonly arise in machine <unk> problems., 在 交互式 中 的 <unk> 中 的 <unk>, 在 机器 学习 问题 中 也 经常 会 出现 正态分布
returns the least "int" "> <unk>, 返回 " a " " " ", 返回 最小 的 " int " " > self "
note that this is in the very nature of binary floating <unk> this is not a bug in python, and it is not a bug in your code either, 请 注意 ， 这种 情况 下 ， 二进制 的 的 ， 但 不是 不是 在 不是 中 的 ， 但 它 在 你 的 代码 中 的, 请 注意 这种 情况 是 二进制 浮点数 的 本质 特性 ： 它 不是 python 的 错误 ， 也 不是 你 代码 中 的 错误
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm., 由于 算法 算法 的 被 用作 用作 用作 用作 使用 的 ， 因为 使用 使用 哈希 哈希 哈希 哈希, 此 算法 的 目的 仅为 验证 数据 的 <unk> ， 不 适合 作为 通用 散列 算法
debug menu (shell window only), 调试 菜单 （ 仅 window 编辑器 ）, 调试 菜单 （ 仅 window 编辑器 ）
if <unk> is a tuple of type objects (or <unk> other such <unk> return "true" if object is an instance of any of the types, 如果 <unk> 是 一个 一个 类型 的 " <unk> ( ) " 或 " 对象 ， 则 返回 " true " 对象 ， 如果 返回 " true " 对象, 如果 <unk> 是 类型 对象 元组 （ 或 由 其他 此类 元组 递归 组成 的 元组 ） ， 那么 如果 object 是 其中 任何 一个 类型 的 实例 就 返回 " true "
callback a <unk> function which is passed as an argument to be executed at some point in the future., 回调 函数 " <unk> _ function ( ) " 函数 会 被 作为 参数 在 在 在 中 中 中 的, callback 回调 一个 作为 参数 被 传入 以 <unk> 在 未来 的 某个 时刻 被 调用 的 子 例程 函数
whitespace in the regular expression that isn't inside a character class is ignored, 在 ， 表达式 表达式 表达式 类 会 被 类 类 的 类, 正则表达式 中 的 不是 在 字符 类中 的 空格 将 被 忽略
"multiprocessing" process based parallelism, " multiprocessing " 基于 进程 的 并行, " multiprocessing " 基于 进程 的 并行
only the <unk> statement is executed if the condition is true, but the indentation <unk> many to <unk> otherwise, 只有 " " " " " " " ， 如果 在 ， 但 " ' ' " ' " ' " ' ' ' ' " ' " ' " ' " ' ", 如果 条件 为 真 ， 则 只 执行 " x ++ " 语句 ， 但 缩进 会 使 你 认为 情况 <unk>
consult the operator module's documentation for a complete list., 使用 运算符 的 文档 文档 文档, 全部 函数 列表 可以 参考 operator 模块 的 文档
this can make it simpler to test if an object is a proxy without being dependent on naming both proxy types., 这 可以 让 它 在 必要 对象 ， 如果 有 一个 对象 ， 则 会 引发 " valueerror ", 这 可以 用于 更 方便 地 检测 一个 对象 是否是 代理 ， 而 不必 依赖于 两种 代理 对象 的 名称
a variant of the above script keeps the logging in the main process, in a separate <unk>, 在 上面 的 中 的 的 中 的 的 的 的 的 的 的, 上面 脚本 的 一个 变种 ， 仍然 在 主 进程 中 记录 日志 ， 但 使用 一个 单独 的 线程 :
see step 6 below., 参见 " ' . errors ( ) " 的, 参见 下面 的 第 6 <unk>
generator expressions are <unk> in these <unk>, 生成器 表达式 在 <unk> 中 的 " <unk> ", 这种 情况 下 生成器 表达式 会 更 受 <unk>
on the <unk> <unk> a type can export a <unk> <unk> which allows objects of that type to expose information about their underlying buffer, 在 <unk> <unk> <unk> <unk> 一个 类型 ， 可以 是 一个 <unk> <unk> <unk> <unk> ， ， 的 的 的 的 的 的 的 的 的 的, 在 生产者 这 <unk> ， 该 类型 的 协议 可以 导出 一个 “ 缓冲区 接口 ” ， 允许 公开 它 的 底层 缓冲区 信息
it needs to be treated just like any other object with <unk> to reference counts., 它 需要 被 任何 对象 ， 任何 其他 其他 其他 其他 对象 的 对象 对象, 它 需要 像 引用 计数 一样 处理 任何 其他 对象
changed in version 3.5: starting in python <unk> this method will not be optional when <unk> is defined., 在 3.5 版 更改 : 在 python 中 ， " is " __ ( ) " 方法 时 当 可选 的 可选 时, 在 3.5 版 更改 : 从 python 3.6 开始 ， 当 定义 了 " exec _ module ( ) " 的 时候 ， 这个 方法 将 不会 是 可选 的
it is a <unk> to use an "async with" statement outside the body of a coroutine function., 它 是 一个 " " " " 语句 " 语句 " 语句 的 一个 的 的, 在 协程 函数 体 之外 使用 " async with " 语句 将 引发 " syntaxerror "
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
an important convention throughout the python interpreter is the following: when a function fails, it should set an exception condition and return an error value <unk> a "null" <unk>, 在 " 脚本 " 脚本 解释器 时 ， 时 ， 它 的 异常 时 ， 它 异常 异常 并 返回 一个 " null " " " " ", 在 python 解释器 中有 一个 重要 的 惯例 ： 当 一个 函数 出错 时 ， 它 应当 设置 异常 条件 并 返回 错误 值 （ 通常 为 " null " 指针 ）
this module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm., 此 模块 提供 了 一个 实现 的 的 的 ， ， ， ， 会 被 执行, 这个 模块 提供 了 堆 队列 算法 的 实现 ， 也 称为 优先 队列 算法
it is not possible to submit a bug report <unk>, 它 不 需要 一个 一个 " <unk> " 的 一个 :, 您 不能 匿名 提交 一份 错误报告
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
the remaining <unk> <unk> around finding a pending task and making changes to its priority or removing it entirely, <unk> <unk> <unk> <unk> <unk> 的 的 的 ， ， ， ， 将 其 在 其 或 多个 或 或 多个, 其余 的 <unk> 主要 包括 找到 挂 起 的 任务 并 修改 其 优先级 或 将 其 完全 移除
see also: the "pathlib" module offers high level path objects., 参见 " struct " 模块 提供 了 " 高阶 " 路径 路径, 参见 : " pathlib " 模块 提供 高级 路径 对象
if the target is a <unk> the primary expression in the reference is evaluated, 如果 目标 是 一个 <unk> 的 的 表达式 ， 表达式 的 表达式, 如果 目标 为 一个 抽取 项 ： 引用 中 的 原型 表达式 会 被 求值
find a module, loading and initializing it if necessary, 将 一个 模块 的 ， ， 它 它 它 它 它, 查找 一个 模块 ， 如果 有 必要 还会 加载 并 初始化 模块
other exceptions which occur during the "emit()" method of a "handler" subclass are passed to its <unk> method., 其他 异常 异常 的 异常 ， " 方法 " 方法 " 方法 " 方法 " 方法 " 方法 " 方法, 在 " handler " 子类 的 " emit ( ) " 方法 中 发生 的 其他 异常 被 传递 给 它 的 " <unk> ( ) " 方法
the arguments shown above are merely some common ones, 上面 的 的 是 一些 一些 的, 上面 显示 的 参数 只是 常见 的 一些
changed in version 3.3: added explicit symlink handling for foreign <unk> thus <unk> it to the behavior of <unk> <unk>, 在 3.3 版 更改 : the " for " " " " " " " " <unk> " <unk> " <unk> " 的 的 的 行为, 在 3.3 版 更改 : 为 <unk> 文件系统 添加 了 显式 的 符号 链接 处理 ， 以便 使 它 <unk> gnu 的 <unk> 的 行为
for calling methods on objects, you can simplify yet further by using the "getattr()" built in to retrieve methods with a particular <unk>, 对于 " 在 " 方法 的 方法 ， 使用 使用 " 方法 来 使用 " 来 使用 " 方法 来 使用 " 方法 " 方法, 对于 对象 调用 方法 ， 可以 通过 使用 " getattr ( ) " 内置 检索 具有 特定 名称 的 方法 来 进一步 简化 ：
this is designed so that you can specify an iterable of potential configuration file locations (for example, the current directory, the user's home directory, and some system wide <unk> and all existing configuration files in the iterable will be read., 这 是 为了 你 可以 通过 " 的 " 的 文件 ， 可以 是 一个 文件 的 的 ， ， 可以 使用 " " " " ， 并 将 所有 的 所有 中 的 所有, 这样 的 设计 使得 你 可以 指定 包含 多个 潜在 配置文件 位置 的 可 迭代 对象 （ 例如 当前目录 、 用户 家 目录 以及 某个 系统 级 目录 ） ， 存在 于 该 可 迭代 对象 中 的 所有 配置文件 都 将 被 读取
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
read all lines available on the input stream and return them as a list of lines., 读取 所有 的 所有 的 ， 并 返回 其 将 其 作为 一个 列表, 从 输入 流 读取 所有 行 并 将 其 作为 一个 行 列表 返回
on <unk> <unk> this is <unk> , otherwise it is the same as <unk> ., 在 <unk> 上 ， ， ， 这是 ， ， 否则 会 被 求值 ， 与 " <unk> " 相同, 在 <unk> <unk> 上 ， 它 是 <unk> _ global ， 其余 系统 上 是 <unk> _ <unk>
future objects, sometimes exposed by libraries and some asyncio <unk> can be <unk>, " asyncio . deque " ) " 的 由 " asyncio . <unk> ( ) " 和 " asyncio . <unk> ( ) ", future 对象 有时 <unk> 和 某些 asyncio api 暴露 给 用户 ， 用作 可 等待 对象 :
these functions are thread safe, the gil does not need to be <unk>, 这些 函数 在 可 被 初始化 ， 需要 需要 需要 需要 为, 这些 函数 是 线程 安全 的 ， 不 需要 持有 全局 解释器 锁
unix <unk> synonym for <unk>, unix <unk> <unk> " <unk> " <unk> ", unix <unk> 中 " s _ <unk> " 的 同义词
this is the equivalent of the python expression: <unk> <unk>, 这 等价 于 python 表达式 " " ( ) ", 这 等价 于 python 表达式 " callable ( args ) "
threads interact <unk> with <unk> the <unk> exception will be received by an arbitrary thread, 另外 与 " <unk> " " " " " 异常 ， " 异常 " 异常, 线程 与 中断 奇怪 地 交互 ： " keyboardinterrupt " 异常 可能 会 被 任意 一个 线程 捕获
note that all these functions check ordinal bit values derived from the character of the string you pass <unk> they do not actually know anything about the host <unk> character encoding., 请 注意 所有 这些 函数 都 函数 都 会 在 字符串 的 的 值 ， ， 的 ， ， ， 不 不 不 不 的 的 的 的 <unk>, 请 注意 所有 这些 函数 都 是 检测 根据 你 传入 的 字符串 的 字符 所 生成 的 码位 值 ； 它们 实际上 完全 不会 <unk> <unk> 的 字符 编码 格式
"'w'" write only mode., " stringprep " 仅 仅, " ' w ' " 只 写 模式
run menu <unk> window only), 运行 " <unk> " ， " window " window, 运行 菜单 （ 仅 window 编辑器 ）
used as a placeholder by the bytecode <unk>, 用于 作为 <unk> 的 的, 用作 字节 码 优化 器 的 占位 符
as the python 2.7 standard library <unk> making effective use of the python package index (either directly or via a <unk> becomes more important for python 2 users, 作为 python 库 的 标准 库 库 ， ， python python 包 ， python 是 python 的 python 或 python ， ， 例如 python python python 3 python python ， 更 多 python python python 3 python 3, 随着 python 2.7 标准 库 的 <unk> ， 有效 地 利用 python 包 索引 （ 直接 或 通过 重新 <unk> ） 对 python 2 用户 来说 变得 更加 重要
(contributed by <unk> <unk> and <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 和 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 和 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
the new format syntax also supports new and different options, shown in the following examples., 新 的 格式 的 语法 ， 支持 支持 新 的 新 的 ， 这些 新 的 支持, 新 的 格式 语法 还 支持 新增 的 不同 选项 ， 将 在 以下 示例 中 说明
note that the <unk> attribute of a <unk> object or subclass of <unk> can also be used for <unk> <unk> functions., 请 注意 " 属性 " 对象 " 对象 " 对象 " 对象 " " " 的 子类 的 子类 ， " " " " " " " " " " " " ", 请 注意 一个 <unk> 对象 或 " pickle . <unk> " 的 子类 的 " dispatch _ <unk> " 属性 也 可以 被 用来 声明 <unk> 函数
<unk> is the file manager for the <unk> <unk> environment for unix, and only makes sense to use if <unk> is running, " 是 文件 文件 文件 文件 的 文件 （ 例如 " <unk> " 仅 仅 在 在 使用 使用 ， 如果 使用 " os . <unk> ", “ konqueror ” 是 unix 的 <unk> <unk> 的 文件 管理器 ， 只有 在 <unk> 运行 时才 有 意义
... install packages just for the current <unk>, ... 安装 安装 包 包, ... 只 为 当前 用户 安装 软件包 ？
string and bytes literals, 字符串 和 字节 字节, 字符串 和 字节 串字 面值
raised when an operation runs out of memory but the situation may still be <unk> (by deleting some objects), 当 一个 在 时 时 ， 时 ， 时 ， 时 ， 可能 会 被 引发 " " " " ", 当 一个 操作 耗尽 内存 但 情况 仍 可 （ 通过 删除 一些 对象 ） 进行 <unk> 时 将 被 引发
do not import this module directly, 不 模块 此 模块 的 模块, <unk> 直接 导入 此 模块
check the documentation to be <unk>, 检查 的 文档 的 <unk>, <unk> 信息 请 查阅 文档
use "object" to indicate that a value could be any type in a <unk> manner, 使用 " " " " 值 值 是 一个 值 的 类型, 使用 " object " <unk> 一个 值 可以 类型 安全 地 兼容 任何 类型
encodes the payload into quoted printable form and sets the content transfer encoding header to <unk> <unk> [1], 将 显示 的 的 和 转换 为 " 和 " 和 " 的 " ， " " " " " " " " " " ", 将 有效 数据编码 <unk> 转换 的 可 打印 形式 ， 并 将 content transfer encoding 标头 设置 为 " <unk> <unk> " [ 1 ]
day zero is a <unk>, [ 1 ] 一个 一个, 第 0 <unk> 星期天
let's look in more detail at built in functions often used with <unk>, 我们 更 更 多 的 函数 ， 使用 " 函数 " 函数 使用 " 函数, 我们 可以 看看 迭代 器 常常 <unk> 的 函数 的 更 多 细节
don't just use its value in expressions unless you're sure that the "send()" method will be the only method used to resume your generator function., 在 在 使用 " 中 使用 " 中 使用 " 的 " ， 因此 方法 将 使用 " 方法 ( ) " 方法 使用 的 函数, 不要 在 表达式 中 使用 " yield " 的 值 ， 除非 你 确定 " send ( ) " 是 唯一 的 用来 恢复 你 的 生成器 函数 的 方法
the <unk> home page is at <unk>, <unk> 的 的 <unk> 是 <unk> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /, psf 的 主页 是 https : / / www . python . org / psf /
the arguments must be types and there must be at least one., 参数 必须 必须 类型 必须 ， 必须 必须 为 0, 参数 必须 是 类型 ， 而且 必须 至少 有 一个 参数
only one ch can be pushed before "getch()" is called., 只有 一个 可以 被 调用 之前 ， 在 之前 之前 之前, 在 " getch ( ) " 被 调用 之前 只能 推送 一个 ch
[1] since " " has higher precedence than " ", " 3 2" will be interpreted as " <unk> <unk> and thus result in " <unk>, [ 1 " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", [ 1 ] 因为 " " 比 " " 有 更 高 的 优先级 , 所以 " 3 2 " 会 被 解释 成 " ( 3 2 ) " ， 因此 结果 是 " 9 "
to select a particular version, add a " version <unk>, 要 一个 一个 " " " " 的 一个 " " " ", 要 选择 特定 版本 ， 请 添加 " version 3 . x . y "
word is a sequence for which close matches are desired <unk> a <unk> and <unk> is a list of sequences against which to match word <unk> a list of <unk>, 如果 是 一个 序列 的 序列 ， 例如 " <unk> " ， " " " " " 是 一个 " 的 " ， ， 是 一个 <unk> 的 的 的, word 为 一个 指定 目标 近似 匹配 的 序列 （ 通常 为 字符串 ） ， <unk> 为 一个 由 用于 匹配 word 的 序列 构成 的 列表 （ 通常 为 字符串 列表 ）
these are also useful when checking for information about a file that isn't handled by <unk> like the tests for block and character <unk>, 这些 还 在 适用 于 <unk> 的 的 文件 ， ， ， ， ， 并 实现 <unk> 的 的, 这些 函数 也 适用 于 检测 有关 未 被 " os . path " 处理 的 信息 ， 例如 检测 块 和 字符 设备 等
<unk> is compatible with the mapping protocol <unk> a list of <unk> , <unk> pairs including the <unk>, <unk> 是 由 <unk> 的 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, " parser . items ( ) " 兼容 映射 协议 （ 返回 section _ name , section _ <unk> 对 的 列表 ， 包括 <unk> ）
in order to preserve backwards compatibility, enum values are also present in the <unk> module in the form of constants, 为了 为了 为了 ， ， 的 的 值 是 在 " 中 " " " 模块 的 的, 为了 保持 向 后 兼容性 ， 枚举 值 也 以 常量 形式 出现 在 " http . client " 模块 中 ，
<unk> is the class for importing zip files., " 是 " 用于 zip 的 的 的, " zipimporter " 是 用于 导入 zip 文件 的 类
the watcher avoids <unk> other code spawning processes by polling every process explicitly on a "sigchld" <unk>, 该 函数 会 <unk> 其他 其他 其他 的 的 ， 在 其他 情况 下 ， 会 被 在 处理, 此 监视器 会 在 收到 " sigchld " 信号 时 通过 显式 地 轮询 每个 进程 来 避免 干扰 其他 <unk> 的 进程
the "__import__()" function the "import" statement is syntactic <unk> for this function., " " " 函数 " 语句 " 函数 此 函数 此 函数, " __ import __ ( ) " 函数 " import " 语句 是 这个 函数 的 语法 <unk>
detects <unk> imports and converts them to relative <unk>, 对 " a . ps1 " 和 将 将 它们 将 它们 相对, 检测 <unk> <unk> ， 并 将 其 转换成 相对 import
as you probably expect by now, we're going to go over this and give more information about the various handlers, 因此 你 使用 通过 使用 的 ， ， ， 此 更 多 的 更 多 更 多 信息 更 多 信息, 正如 你 <unk> 到 的 一样 ， 我们 <unk> <unk> <unk> 详细 介绍 各种 处理程序
if the second operand is positive then the shift is to the left; otherwise the shift is to the right, 如果 第二个 操作数 ， ， 则 将 被 设为 为 <unk> ， 否则 将 被 忽略, 如果 第二个 操作数 为 正值 则 向 左 移位 ； 否则 向 右 移位
if a class method is called for a derived class, the derived class object is passed as the <unk> first argument., 如果 一个 类 方法 定义 了 一个 类 的 函数 的 " 类 的 类 对象 的 参数 作为 参数, 如果 类 方法 在 其 所属 类 的 派生类 上 调用 ， 则 该 派生类 对象 会 被 作为 <unk> 的 第一个 参数 被 传入
the operation is done in place when o1 supports it, 当 o1 支持 时 ， 在 这个 支持 时 储存 储存, 当 o1 支持 时 ， 这个 运算 直接 使用 它 储存 结果
changes in python behavior, python 的 的 的 变化, python 行为 的 改变
attempting to remove a file descriptor that was never registered is safely ignored., 当 轮询 轮询 文件 描述符 描述符 描述符 的 ， 已 被 被 弃用, 尝试 删除 从未 注册 过 的 文件 描述符 将 被 安全 地 忽略
<unk> implements all of <unk> methods except for <unk> which raises <unk>, " <unk> ( ) " 实现 所有 所有 的 " <unk> ( ) " 方法 的 " <unk> . <unk> ( ) ", " bufferedrwpair " 实现 了 " bufferediobase " 的 所有 方法 ， 但 " detach ( ) " 除外 ， 调用 该 方法 将 引发 " <unk> "
if n is "none", delete all <unk> if n > 0 delete first n <unk> else if n < 0 delete last n <unk>, 如果 n 为 " none " ， 如果 n n n ， 如果 ， 如果 n n n n ， ， 则 如果 n n n n n n n n n n n n n n n n n n n n n n n n n n n n, 如果 n 为 " none " 则 删除 全部 印章 ， 如果 n > 0 则 删除 前 n 个 印章 ， 否则 如果 n < 0 则 删除 后 n 个 印章
returns 1 if the object type of op implements the gc protocol and op is being currently tracked by the garbage collector and 0 otherwise., 如果 对象 对象 的 支持 类型 的 支持 ， ， ， 则 返回 " true " ， 否则 返回 " true " ， 否则 返回 " true ", 如果 op 对象 的 类型 实现 了 gc 协议 且 op 目前 正 被 垃圾 回收 器 追踪 则 返回 1 ， 否则 返回 0
a subclass of <unk> and <unk>, " httpexception " 的 " 子类 的 子类, " <unk> " 和 " <unk> " 的 一个 子类
<unk> and <unk> objects, <unk> 和 <unk> 对象, cookiejar 和 <unk> 对象
there is no longer any implicit import machinery the full import system is exposed through <unk>, 没有 没有 任何 任何 导入 导入 ， ， 导入 的 系统 是 " <unk> ., 不会 <unk> 任何 隐式 的 导入 机制 — — 整个 导入 系统 都 通过 " sys . meta _ path " 暴露 出来
this can result in the following <unk> <unk>, 这 可以 通过 以下 以下 : : " <unk> _ <unk> ( ) ", 这 可能 导致 以下 矛盾 行为 :
pep <unk> executing modules as scripts, pep 338 : 将 模块 作为 脚本, pep 338 : 将 模块 作为 脚本 执行
(note that the " <unk> option is only available with the launcher included with python 3.7 or <unk>, 请 注意 " " " 选项 选项 选项 " <unk> " python python python 的 python, （ 请 注意 " 64 " 选项 仅 适用 于 python 3.7 或 更 高 版本 中 包含 的 启动器 。 ）
why does python use methods for some functionality (e.g. <unk> but functions for other (e.g. <unk>, 为什么 python 的 一些 （ 例如 " 例如 . <unk> ( ) " 方法 （ 例如 " 其他 ( ) " 函数 的 函数 （ 例如 " ） . <unk> ( ) ", 为什么 python 对 某些 功能 （ 例如 list . index ( ) ） 使用 方法 来 实现 ， 而 其他 功能 （ 例如 len ( list ) ） 使用 函数 实现 ？
pushes <unk> onto the stack, 将 " " 推入 栈顶 推入 栈顶, 将 " builtins .__ build _ class __ ( ) " <unk> 到 堆栈 上
if you don't want <unk> you can use <unk> none)"., 如果 你 想要 安装 ， 你 你 可以 使用 " 使用 _ <unk> ( ) " 来 使用 ", 如果 你 不 想要 插值 ， 你 可以 使用 " configparser ( <unk> none ) "
all <unk> actions will take place in this <unk>, 所有 " <unk> " 将 将 将 导致 " <unk> " 中 的 ", 所有 滚动 操作 将 在 此 区域 中 进行
wait for child process to terminate, 等待 进程 进程, 等待 子 进程 被 终止
threading is a technique for <unk> tasks which are not <unk> dependent, 对于 是 一个 的 的 ， ， 但 不 不 的 的, 线程 是 一种 对于 非 顺序 依赖 的 多个 任务 进行 <unk> <unk> 的 技术
high speed is <unk> by <unk> <unk> building blocks over the use of for loops and generator s which <unk> interpreter <unk>, 默认 的 由 <unk> <unk> <unk> ， ， <unk> ， <unk> 的 的 的 ， 和 生成器 生成器 和 生成器 生成器 的 生成器, 速度 依然 <unk> ， 因为 倾向 于 使用 “ <unk> ” 构件 来 取代 解释器 开销 大 的 for 循环 和 generator
the "tarfile" module makes it possible to read and write tar <unk> including those using <unk> <unk> and lzma compression, " 模块 " 模块 提供 了 读取 读写 读取 读写 和 " tar " 和 " <unk> " 和 " 和 " 和 " 和 " 和 ", " tarfile " 模块 可以 用来 读写 tar 归档 ， 包括 使用 gzip , bz2 和 lzma 压缩 的 归档
also, used with "zip()" to add sequence numbers, 用于 用于 对 为 序列 的 序列 序列, 此外 ， 还 用于 " zip ( ) " 来 添加 <unk>
i was working in the <unk> distributed operating system group at <unk>, 在 在 在 <unk> 中 ， 请 在 " 系统 系统 （ https ）, 我 还 <unk> 在 <unk> 的 <unk> <unk> 操作系统 <unk> 工作
files which are in both a and b , but could not be compared., 文件 和 一个 b b b ， 但 但 但 不 可能, 在 目录 a 和 b 中 无法 比较 的 文件
many <unk> systems will do this automatically if they do not preserve files between <unk>, 如果 <unk> 的 ， 如果 没有 被 不 不 不 不 存在 则 会 引发 " valueerror ", 如果 在 构建 之间 不 保留 文件 ， 许多 <unk> 系统 将 自动 执行 此 操作
<unk> fun to mouse click events on this screen, <unk> 在 在 windows 上 上 ， 此 时间, 绑定 fun 指定 的 函数 到 鼠标 点击 屏幕 事件
because <unk> does not have a format placeholder for <unk> the millisecond value is appended using another format string, <unk> and both of these format strings have been <unk> into this method, 由于 " intflag ( ) " 不会 被 格式 格式 的 格式 ， 因此 的 格式 字符串 ， 格式 字符串 格式 字符串 格式 字符串 格式 字符串 的 字符串 的 方法, 因为 strptime 没有 表示 毫秒 的 占位 符 ， 毫秒 值 使用 了 另外 的 格式 字符串 来 添加 " ' % s , % <unk> ' " 这 两个 格式 字符串 代码 都 是 写 <unk> 在 该 方法 中 的
c++ does this through <unk> but python doesn't have declarations and it would be a <unk> having to introduce them just for this purpose, 在 此 函数 的 但 但 但 但 但 ， 但 它 并 它 是 它 是 一个 <unk> 的 的 的, c++ 通过 声明 来 做到 这 一点 ， 但是 python 没有 声明 ， 仅仅 为了 这个 目的 而 引入 它们 会 很 <unk>
embedding python in another application, 在 python 应用程序 嵌入 python, 在 其它 应用程序 嵌入 python
the usual dictionary methods are available for "counter" objects except for two which work differently for <unk>, 字典 字典 方法 有 " " " 对象 的 ， 例如 两个 两个 ， 例如 适用 于 " <unk> ", 通常 字典 方法 都 可 用于 " counter " 对象 ， 除了 有 两个 方法 工作 方式 与 字典 <unk>
add "true" or "false" if "true", a new binding will be added, otherwise it will replace a former binding, 如果 " true " ， 则 将 " 新 " ) " 将 将 被 调用 ， 否则 将 将 引发 " valueerror ", add " true " 或 " false " 如为 " true " 则 将 添加 一个 新 绑定 ， 否则 将 取代 先前 的 绑定
<unk> constants used with python parse trees, " symbol " 与 python 解析 树 一起 使用 的 常量, " token " 与 python 解析 树 一起 使用 的 常量
for example, the <unk> mean of three values a , b and c will be equivalent to <unk> + <unk> + <unk>, 例如 ， " ' [ : ] , ... , b , b ) " 和 " b " " " " " " " " " " " " " " " " " " " ", 比如说 ， 数据 a ， b ， c 的 <unk> 均值 等于 " 3 / ( 1 / a + 1 / b + 1 / c ) "
( timeout , input , check , and capture_output are <unk>, " time " , 输入 , , , 0 , <unk> , <unk>, （ timeout , input , check 和 capture _ output 除外 ）
if both are aware and have different "tzinfo" attributes, "a b" acts as if a and b were first converted to naive utc datetimes first, 如果 两个 为 " 和 " ， " ， 则 将 " " " " " ， 则 将 返回 " true " ， 否则 将 返回 " true ", 如果 两个 操作数 都 是 感知 <unk> 具有 不同 的 " tzinfo " 属性 ， " a b " 操作 的 效果 就 如同 a 和 b 首先 被 转换 为 简单 型 utc 日期 时间
the current code generator emits no code for an <unk> statement when optimization is requested at compile time, 当前 当前 代码 代码 代码 没有 代码 代码 时 ， 当 语句 被 引发 " " ", 如果 在 编译 时 请求 优化 ， 当前 <unk> 器 不会 为 assert 语句 发出 任何 代码
"x not in <unk> returns the negation of "x in <unk>, 在 " <unk> ( ) " 中 的 " 中 " ) " 中 的 ", " x not in s " 返回 " x in s " <unk> 后 的 值
the <unk> messages are written to standard output using the "print()" function., <unk> 的 的 使用 " 使用 " " " " 来 使用 " 使用 ", 诊断 消息 将 使用 " print ( ) " 函数 写入 到 标准 输出
all built in, non system exiting exceptions are derived from this class, 所有 " 定义 " 定义 系统 定义 的 的 的 方法, 所有 内置 的 非 系统 退出 类 异常 都 派生 自 此类
"find_spec()" takes two arguments: the fully qualified name of the module being imported, and the (optional) target module, " 两个 两个 两个 两个 ， 模块 模块 名称 ， 模块 和 " 模块 " 模块, " find _ spec ( ) " 接受 两个 参数 ， 即 要 导入 模块 的 完整 限定 名称 ， 以及 （ 可选 的 ） 目标 模块
this object is only exposed for <unk> never modify the contents of this dictionary., 这个 对象 仅 适用 于 " <unk> " ， 这个 此 内容 的 内容, 这个 对象 只是 出于 调试 目的 而 <unk> 公开 ； 绝对 不要 修改 此 字典 的 内容
this can be used to control some of the formatting produced by the method, since the specified policy will be passed to the <unk>, 这 可以 通过 " __ " __ ( ) " 将 被 传递 给 传递 给 传递 给 传递 给 传递 给 传递 给 传递 给 传递, 这 可 被 用来 控制 该 方法 所 产生 的 部分 格式 效果 ， 因为 指定 的 policy 将 被 传递 给 " <unk> "
<unk> of subsequent <unk> times is done only when <unk> occurs, and <unk> occurs only when <unk> output, 对 <unk> 的 的 <unk> <unk> <unk> <unk> 的 的 ， 当 仅 在 在 时 时 只 在 只 在 只 在 只 在 只 在 只 在 时 只 在 只 在, 后续 轮换 时间 的 计算 则 仅 在 轮换 发生 时 执行 ， 而 只有 当 提交 输出 时 轮换 才 会 发生
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
example of <unk> user specified command line arguments take precedence over environment variables which in turn take precedence over default values:, " tkinter . <unk> ( ) " 用户 用户 参数 参数 ， 环境变量 环境变量 环境变量 环境变量 ， 环境变量 可以 使用 " <unk> " 的 值, 让 用户 指定 的 命令行 参数 优先 于 环境变量 ， 优先 于 默认值 的 例子
important warning: the default value is evaluated only once, <unk> : 默认值 默认值 为 " true ", 重要 警告 ： 默认值 只会 执行 一次
push the value item onto the heap , <unk> the heap <unk>, 将 value 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 将 item 的 值 加入 heap 中 ， 保持 堆 的 <unk>
hook method executed just before the command line line is <unk> but after the input prompt is generated and issued, 在 之前 中 ， 在 之前 行 行 被 被 ， ， ， ， ， ， ， ， ， 依此类推, 钩 方法 在 命令行 line 被 解释 之前 执行 ， 但是 在 输入 提示 被 生成 和 发出 后
as we can see above, the api is pretty straightforward, 如 我们 可以 通过 c api ， api api api, 正如 我们 在 上面 所 看到 的 ， 相关 的 api 相当 直观
other languages, such as object <unk> <unk> and c++, use static types, so it's possible to <unk> in an <unk> way, what member is being assigned to, 其他 与 " 对象 " 对象 ， 例如 ， ， ， ， ， 使用 的 的 ， 因此 的 的 ， 因为 ， 它们 的 <unk> 的, 其他 语言 ， 如 <unk> 、 <unk> 和 c++ 使用 静态 类型 ， 因此 可以 <unk> 地 知道 分配 给 什么 成员
when creating a module that can raise several distinct errors, a common practice is to create a base class for exceptions defined by that module, and subclass that to create specific exception classes for different error <unk>, 当 创建 一个 模块 可以 在 " " " " ， ， ， 创建 一个 异常 ， 用于 创建 异常 的 异常 ， ， 用于 创建 一个 特定 的 ， 创建 一个 特定 的 的 的 异常, 在 创建 可能 引发 多个 不同 错误 的 模块 时 ， 通常 的 做法 是 为 该 模块 定义 的 异常 创建 基类 ， 并 为 不同 错误 条件 创建 特定 异常 类 的 子类 :
<unk> has special code to <unk> the bound method until either the object or the original function <unk>, " __ _ <unk> ( ) " 的 特殊 代码 " __ ( ) " 方法 方法 方法 将 对象 " 或 " 函数 ( ) " 函数, " <unk> " 包含 特别 代码 用来 重新 创建 绑定 方法 ， 直到 对象 或 初始 函数 被 销毁 :
this is the case for objects such as "gzipfile", 这 是 适用 对象 对象 的 例如 作为, 例如 " gzipfile " 之类 的 文件 就 属于 这种 情况
transport endpoint is not connected, 传输 <unk> 不 为, 传输 <unk> 未 连接
new in version 3.5: the <unk> extension ( rfc <unk> ) is now supported., 3.5 新版 功能 : the " <unk> " ， " <unk> " ， 现在 也 会 被 ", 3.5 新版 功能 : the <unk> extension ( rfc <unk> ) is now <unk> .
sequence objects typically may be compared to other objects with the same sequence type, 序列 对象 可 被 对象 对象 对象 的 对象 对象 的 类型 对象, 序列 对象 通常 可以 与 相同 序列 类型 的 其他 对象 比较
a class definition defines a class object (see section the standard type <unk>, 一个 类 定义 定义 定义 对象 类型 类型 类型 类型 类型 类型 类型 类型 类型 类型, 类 定义 就是 <unk> 对象 的 定义 ( 参见 标准 类型 层级 结构 一节 ) :
converters , default value: not set, <unk> ， 默认值 : 非 ", <unk> ， 默认值 : 不 设置
"cmd" support for line oriented command <unk>, " cmd " 支持 面向 面向 的 命令, " cmd " 支持 面向 行 的 命令 解释器
there are some more variants of the tar format which can be read, but not <unk>, 有 一些 的 的 的 ， ， 可以 可以 可以 但 但 但 但 但 不是 不 <unk>, 还有 一些 tar 格式 的 其他 变种 ， 它们 可以 被 读取 但 不能 被 创建 :
the lock must have been acquired earlier, but not necessarily by the same thread., 该 必须 被 包含 的 的 但 但 不 包含 整个, 锁 必须 已经 被 获取 过 ， 但 不 一定 是 同一个 线程 获取 的
if your scripts must modify the shared <unk> you will need to install the full <unk>, 如果 你 的 必须 必须 ， 必须 ， 的 的 ， 你 你 需要 需要 需要 的 完整 的, 如果 脚本 必须 修改 共享 位置 ， 则 需要 安装 完整 安装程序
if given, arcname specifies an alternative name for the file in the archive, 如果 给出 ， 则 指定 指定 指定 的 的 的 名称, 如果 给出 arcname 则 它 将 为 归档 中 的 文件 指定 一个 替代 名称
logging messages which are less <unk> than level will be ignored, 日志 记录 消息 记录 为 " 级别 的 级别, 日志 级别 小于 level 将 被 忽略
it is registered with the dialect name <unk>, 它 是 变种 的 名称 名称 名称, 它 在 变种 注册表 中 的 名称 是 " ' excel ' "
if more than one thread is blocked waiting until the lock is unlocked, only one at a time will be able to <unk> ownership of the lock, 如果 超过 唤醒 线程 线程 线程 ， 则 会 被 被 ， ， 则 将 被 被 被 被 被 被, 如果 多个 线程 被 阻塞 ， 等待 锁 被 解锁 ， 一次 只有 一个 线程 能 <unk> 到 锁 的 <unk>
timeout (a float or <unk> if specified, can be used to control the maximum number of seconds to wait before <unk>, timeout 的 " " " 或 " ， ， ， 可以 被 用来 为 零 的 的 的 元素, 如 指定 timeout ( float 或 int 类型 ) 则 它 将 被 用于 控制 返回 之前 等待 的 最长 秒数
methods of <unk> and corresponding functions, " screen " 和 " 和 函数, turtlescreen / screen 方法 及 对应 函数
now you need to make the "sqlite3" module know that what you select from the database is actually a point, 现在 你 需要 在 " sqlite3 " 中 的 的 ， ， 你 可以 在 <unk> 中 的 的, 现在 你 需要 让 " sqlite3 " 模块 知道 你 从 数据库 中 选取 的 其实 是 <unk> 对象
changed in version 3.6: accepts a path like object ., 在 3.6 版 更改 : 接受 一个 类 路径 对象, 在 3.6 版 更改 : 接受 一个 类 路径 对象
the "'r'" format code specifies the standard "repr()" format., " ' format 格式 指定 格式 的 格式 格式, " ' r ' " 格式 码 指定 了 标准 函数 " repr ( ) " 格式
changed in version 3.3: removed the strict argument, 在 3.3 版 更改 : 移 除了 strict 参数, 在 3.3 版 更改 : 移 除了 strict 参数
some applications can use sqlite for internal data storage, 某些 ， 应用程序 可以 使用 sqlite 内部 使用 的, 一些 应用程序 可以 使用 sqlite 作为 内部 数据 存储
"b" ("int") [unsigned <unk> convert a <unk> python integer to an unsigned <unk> int, stored in a c "unsigned <unk>, " " " ( " ) " [ ] ] " 将 一个 一个 python 一个 python 一个 整型 转化成 一个 c " c " c " c " c " c " " " " ", " b " ( " int " ) [ unsigned char ] 将 一个 <unk> 的 python 整型 转化成 一个 无 符号 的 微 整型 ， 存储 在 一个 c " unsigned char " 类型 中
equality tests between "ordereddict" objects are order <unk> and are implemented as <unk> <unk>, <unk> 测试 " 对象 " 对象 的 顺序 是 " " " " " " " " " " " " ", " ordereddict " 之间 的 相等 测试 是 顺序 敏感 的 ， 实现 为 " list ( <unk> . items ( ) ) list ( <unk> . items ( ) ) "
the extraction in zipfile module might fail due to some <unk> listed below., " 的 " 模块 " 模块 " 模块 还 可以 通过 " 一些 " 一些 一些 的 的, zipfile 模块 的 提取 操作 可能 会 由于 下面 列出 的 <unk> 而 失败
the "argparse" module provides a more sophisticated mechanism to process command line arguments, " 模块 " 模块 提供 了 一个 更 命令行 命令行 命令行, " argparse " 模块 提供 了 一种 更 复杂 的 机制 来 处理 命令行 参数
return the file handle for the file descriptor fd, 文件 描述符 文件 描述符 文件 描述符 文件 描述符, 返回 文件 描述符 fd 的 文件 句柄
enum class decorator that ensures only one name is bound to any one value., 枚举 类 ， 该 类 只 只 被 认为 是 一个 名称 的 一个, 此 enum 类 装饰 器 可 确保 只 将 一个 名称 绑定 到 任意 一个 值
doing so <unk> the <unk> namespace, and makes it much <unk> for <unk> to detect undefined names., 因此 ， 因此 <unk> <unk> ， ， ， 的 ， ， ， 其 在 <unk> <unk> <unk>, 这样 <unk> 使 导入 器 的 命名 空间 变得 <unk> ， 并且 使得 <unk> 更 难以 检测 未定义 的 名称
by default, prefix is added to all lines that do not <unk> solely of whitespace (including any line <unk>, 默认 情况 下 ， 会 被 添加 到 所有 的 的 ， ， ， ， 则 会 被 忽略, 默认 情况 下 ， prefix 会 被 添加 到 所有 不是 只 由 空白符 （ 包括 任何 行 结束符 ） 组成 的 行
the field width is normally 2 except for <unk> where it is 3., 该字段 宽度 宽度 宽度 为 " 2 " ， " " " " " " ； 它 它, 字 段 宽度 通常 为 2 ， 除了 " % j " ， 它 是 3
<unk> will always quote boundary if necessary, <unk> 将 将 将 将 不会 被 取消 ， 如果, " set _ boundary ( ) " 方法 永远 都 会 在 必要 的 时候 为 boundary 添加 引号
while other string literals always have a constant value, formatted strings are really expressions evaluated at run time., 虽然 其他 字符串 字 面值 的 字符串 字 面值 字符串 字 面值 字符串 ， 在 任何 任何, 而 其他 字符串 字 面值 总是 一个 常量 ， 格式化 字符串 字 面值 实际上 是 会 在 运行 时 被 求值 的 表达式
"pydoc" documentation generator and <unk> help system, " pydoc " 文档 生成器 和 帮助 帮助, " pydoc " 文档 生成器 和 在线 帮助 系统
this section aims to give a quick <unk> by on the various type methods you can implement and what they <unk>, 这 节 使得 在 <unk> <unk> <unk> <unk> 类型 的 方法 ， 你 可以 实现 实现 和 线程, 本 章节 目标 是 提供 一个 各种 你 可以 实现 的 类型 方法 及其 功能 的 简短 介绍
this section documents the objects and functions in the "ssl" module; for more general information about <unk> <unk> and <unk> the reader is referred to the documents in the <unk> <unk> section at the <unk>, 此 节 节 节 节 在 " 中 的 " 中 的 函数 和 函数 和 " <unk> " 和 " <unk> " <unk> " <unk> " <unk> " 中 的 的, 本 文档 记录 " ssl " 模块 的 对象 和 函数 ； 更 多 关于 tls , ssl , 和 证书 的 信息 ， 请参阅 下方 的 “ 详情 ” 选项
output is displayed in the shell window, 输出 是 在 的 中, 输出 显示 在 shell 窗口 中
differences between unix and windows, " 之间 " 和 " 和 windows, unix 和 windows 之间 的 差异
"false" if the "decompress()" method can provide more decompressed data before requiring new uncompressed input., 如果 在 " __ ( ) " 方法 ， 则 提供 了 " 提供 了 提供 了 更 多 的 ， 则 会 引发 " true ", 如果 在 要求 新 的 未 解压缩 输入 之前 " decompress ( ) " 方法 可以 提供 更 多 的 解压缩 数据 则 为 " false "
release date: 2017 03 <unk>, 发布 日期 : 2017 03 <unk>, 发布 日期 : 2017 03 21
how can i embed python into a windows <unk>, 如何 怎样 python python 3 一个 windows ？, 我 怎样 将 python 嵌入 一个 windows 程序 ？
deprecated since version 3.4: use <unk> instead., 3.4 版后 已 移除 : use " mkstemp _ <unk> ( ) ", 3.4 版后 已 移除 : use " importlib . util . module _ from _ spec ( ) " instead .
<unk> representing an email message, " ' " : 一个 一个 消息, " email . message " : 表示 一 <unk> 信息
note that most parent parsers will specify <unk> false", 请 注意 ， 没有 的 ， ， 将 导致 " <unk>, 请 注意 大多数 父 解析器 会 指定 " add _ help false "
the "print()" function produces a more readable output, by omitting the enclosing quotes and by printing escaped and special <unk>, " print ( ) " 函数 由 更 复杂 的 由 由 和 和 和 和 和 的 的 的 特殊, " print ( ) " 函数 会 生成 可读性 <unk> 的 输出 ， 即 略去 两边 的 引号 ， 并且 打印 出 经过 转义 的 特殊字符 :
(in python, the term method is not unique to class <unk> other object types can have methods as well, " ， " " " 方法 " 实例 ， 它 可以 其他 类型 对象 类型 ， 可以 可以 方法, （ 在 python 中 ， 方法 这个 术语 并 不是 类 实例 所 特有 的 ： 其他 对象 也 可以 有 方法
the automatic import can be <unk> using the <unk> " <unk> option., " 导入 " 可以 使用 " " " " " " " " " " " " ", 此 自动 导入 可以 通过 使用 解释器 的 " s " 选项 来 屏蔽
set ctx as the current context for the current thread, 设置 当前 上下文 当前 上下文 线程, 将 ctx 设 为 当前 线程 的 当前 上下文
pep 528 change windows console encoding to utf 8 pep written and implemented by steve <unk>, pep <unk> : windows 编码 编码 编码 的 utf 8 pep 由 <unk> <unk>, pep 528 将 windows 控制台 编码 更 改为 utf 8 pep 由 steve dower 撰写 并 实现
in plain <unk> both types of literals can be enclosed in matching single quotes <unk> or double quotes <unk>, 在 ， 情况 下 ， 类型 都 是 可以 在 " 内 " " " " " " " 或 " <unk> " 或 " <unk> ", <unk> 描述 : 两种 字 面值 都 可以 <unk> 对 单引号 ( " ' " ) 或 双引号 ( " " " ) 来 标示 <unk>
for each item in the list, an unsigned integer "1" is packed first, followed by the data value from the list, 对于 每个 中 的 的 " " " " " " " " " " " " " " " " " 的 " 的 " 的 值, 对于 列表 中 的 每个 条目 ， 先 打包 一个 无 符号 整数 " 1 " ， 再 添加 列表 中 数据 的 值
we make no guarantees as to which <unk> task set produces a faster build, 我们 ， 没有 将 被 设置 为 一个 设置 的 值, 我们 不 保证 哪个 <unk> 任务 <unk> 产生 <unk> 的 构建
note that <unk> <unk> in this case, 请 注意 在 此 情况 下 ， 请 j2 " j1 j2, 请 注意 在 <unk> <unk> " i1 i2 "
xxx <unk> how about a section <unk> just to the attributes of modules and packages, perhaps <unk> upon or <unk> the related entries in the data model reference <unk>, xxx <unk> 如何 如何 <unk> <unk> <unk> <unk> <unk> <unk> 的 模块 的 的 的 ， ， <unk> <unk> <unk> <unk> 的 的 的 的 的 的 的 的, xxx ( import _ machinery . <unk> ) 是否 要 专门 增加 一节 来 说明 模块 和 包 的 属性 ， 也许 可以 扩展 或 移植 <unk> 参考 页 中 的 相关 条目 ？
an alternate constructor that <unk> the <unk> cache, 一个 一个 构造 器 ， 请 <unk> 缓存, 一个 绕过 构造 器 缓存 的 替代 构造 器
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
more on the subject in the dedicated documentation section, 有关 更 多 的 更 多 信息 的 文档 章节 文档, 有关 该 主题 的 更 多 信息 请 参见 专门 的 文档 章节
here's an example of how to unpack a mime message like the one above, into a directory of files:, 以下 是 如何 如何 如何 一个 消息 ， 一个 消息 ， 其中 一个 " 的 " 的 一个, 以下 是 如何 将 上述 mime 消息 解压缩 到 <unk> 中 的 示例 ：
changed in version 3.4: test discovery supports namespace packages ., 在 3.4 版 更改 : 添加 了 <unk> 支持 的 命名 空间, 在 3.4 版 更改 : 探索性 测试 支持 命名 空间 包 （ namespace packages ）
this module provides tools to create, read, <unk> <unk> and list a zip file, 此 模块 提供 了 一些 工具 、 " <unk> " 和 " 和 " 文件 的 文件 列表, 这个 模块 提供 了 创建 、 读取 、 写入 、 添加 及 列出 zip 文件 的 工具
for a <unk> of these <unk> look at this example abc definition:, 对于 这些 的 的 ， ， 请 在 这个 例子 的 例子, 为了 对 这些 概念 做 一 演示 ， 请 看 以下 定义 abc 的 示例 ：
you can pass a parameter to <unk> which, if true, will log at error and critical levels otherwise, it only logs at <unk> info and warning <unk>, 你 可以 在 一个 " " " ， 如果 ， 如果 在 将 在 在 时 将 被 在 时 ， 将 在 在 <unk> <unk> ， 并且 会 被 忽略, 你 可以 给 " foo " 传递 一个 参数 ， 如果 为 true ， 它 将 在 error 和 critical 级别 记录 ， 否则 ， 它 只 在 debug 、 info 和 warning 级别 记录
pep <unk> introducing abstract base classes pep written by guido van rossum and <unk>, pep <unk> : 抽象 基类 pep 由 guido van rossum 和 <unk>, pep 3119 引入 抽象 基类 pep written by guido van rossum and <unk>
return a boolean value, i.e. one of "true" or "false", 返回 一个 " " " " 或 " " " " false ", 返回 一个 布尔值 ， " true " 或者 " false "
the mode argument may be any binary mode acceptable to the built in "open()" function; the <unk> is automatically added., mode 参数 参数 可以 任何 二进制 " 的 " 来 ( ) " 方法 的 的 " " " ", mode 参数 可以 是 内置 " open ( ) " 函数 所 接受 的 任意 二进制 模式 ； " ' b ' " 会 被 自动 添加
the default filename is <unk>, 默认值 为 " ' " ' ", 默认 文件名 为 " ~ / . history "
this <unk> the cpython implementation by making the object model (including critical built in types such as <unk> implicitly safe against concurrent access, 这 <unk> 实现 的 实现 的 对象 对象 （ 例如 内置 类型 类型 类型 ， 类型 ， 因此 的 " <unk> " ) ", 此 机制 通过 设置 对象 模型 （ 包括 " dict " 等 重要 内置 类型 ） 针对 并发 访问 的 隐式 安全 简化 了 cpython 实现
another useful function is <unk> which only takes an exception argument and constructs the associated value by inspection of the global variable "errno", 另 一个 函数 的 函数 " <unk> _ <unk> ( ) " 函数 仅 一个 异常 的 的 的 的 值 的 值 的 值, 另 一个 有用 的 函数 是 " pyerr _ <unk> ( ) " ， 仅 接受 一个 异常 对象 ， 异常 描述 包含 在 全局变量 " errno " 中
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
<unk> please to <unk>, " " " " " " " " ", ( 更 多 需求 请 <unk> <unk> @ <unk> . at )
in <unk> mode "sys.path" contains neither the <unk> directory nor the user's site packages directory, 在 " 模式 " 模式 " " " " " " " " " " " " 目录 目录 目录 目录 目录 目录 目录 目录, 在 <unk> 模式 下 " sys . path " 既 不 包含 脚本 所在 目录 也 不 包含 用户 的 site packages 目录
which <unk> in the python api (you can add a comment describing the purpose of the module and a <unk> notice if you <unk>, 在 python api 的 api api " " " " " " " 模块 的 模块 的 " 模块 ， ， 你 <unk> <unk>, 这会 导入 python api （ 如果 你 喜欢 ， 你 可以 在 这里 添加 描述 模块 目标 和 版权 信息 的 注释 )
cpython implementation detail: this table is generated from the cpython documentation, and may not represent events raised by other implementations, cpython implementation detail 实现 ， ， 从 <unk> 的 的 和 不 不 其他 其他 的 异常, cpython implementation detail : <unk> 根据 cpython 文档 生成 的 ， 可能 无法 表示 其他 实现 所 引发 的 事件
"concurrent.futures" launching parallel tasks, " concurrent . futures " 启动 并行任务, " concurrent . futures " 启动 并行任务
finds and returns the <unk> "fraction" to "self" that has denominator at most <unk>, " 并 " 返回 " ) " 将 " " " ( ) " 已 被 移除 的 的, 找到 并 返回 一个 " fraction " 使得 其值 最 接近 " self " 并且 <unk> 不 大于 max _ denominator
all that a client module must do in order to have access to the function <unk> is to call the function (or rather <unk> <unk> in its initialization function:, 所有 一个 模块 模块 模块 必须 必须 必须 是 " 函数 " 函数 的 函数 函数 在 函数 函数 函数 （ 在 函数 函数 函数 （ 在 函数 函数 ） ） 函数 的 函数 ）, 客户端 模块 必须 在 其 初始化 函数 里 按 <unk> 函数 " import _ spam ( ) " ( 或 其他 宏 ) 才能 访问 函数 " <unk> _ system ( ) "
build and c api changes, 构建 和 c api 的 改变, 构建 和 c api 的 改变
return or set the <unk> attributes in a <unk> <unk> with the following <unk> <unk>, 返回 或 设置 " <unk> " 属性 的 " 属性 " 的 " 属性 :, 返回 或 设置 画笔 的 属性 ， 以 一个 包含 以下 键值 对 的 " 画笔 字典 " 表示 :
pep <unk> universal newline support, pep <unk> : 换行 换行 支持, pep <unk> : 通用 换行 支持
converting an argument sequence to a string on windows, 在 参数 上将 参数 的 一个 字符串 的 字符串, 在 windows 上将 参数 列表 转换 为 一个 字符串
porting to python 3.3, 移植 到 python 3.3, 移植 到 python 3.3
if you want to create a new zip archive, specify its name after the " c" option and then list the <unk> that should be <unk>, 如果 你 想要 一个 新 的 ， ， 则 将 " " " " " " " " " " " ， 然后 ， 然后 ， 然后 列表, 如果 你 想要 创建 一个 新 的 zip 归档 ， 请 在 " c " 选项 后 指定 其 名称 然后 列出 应当 被 包含 的 文件名 :
changed in version 3.5: stdout and stderr attributes added, 在 3.5 版 更改 : 添加 了 和 stderr " 属性, 在 3.5 版 更改 : 添加 了 stdout 和 stderr 属性
if the key is not in the <unk> it is inserted with value <unk> and <unk> is returned, 如果 key 为 " none " ， 则 会 被 " " " " " " " " " " " " " " " " ", 如果 键 不 存在 ， 它会 和 值 <unk> 一起 插入 并 返回 <unk>
changed in version 3.7: don't remove explicit subclasses from unions at runtime., 在 3.7 版 更改 : 从 从 从 . <unk> ( ) " 来 从, 在 3.7 版 更改 : 不要 在 运行 <unk> 从 联合 类型 中 移除 显式 说明 的 子类
can i create my own functions in <unk>, 可以 通过 创建 创建 函数 函数 函数 函数 函数 函数, 可以 使用 c++ 语言 创建 自己 的 函数 吗 ？
we discuss the use of <unk> as a function return type later in this <unk>, 我们 ， 使用 " 作为 . <unk> ( ) " 函数 的 函数 中 的 的, <unk> 讨论 " <unk> _ func " 作为 函数 返回 类型 的 用法
points to the "contextvar" object that created the <unk>, 将 要 创建 对象 的 对象 创建 创建 器, 指向 创建 此 token 的 " contextvar " 对象
if move is true, the pen is moved to the bottom right corner of the text, 如果 为 为 ， 则 会 被 取消 为 <unk> ， ， 则 会 被 忽略 的, 如果 <unk> 为 true ， 画笔 会 移动 到 文本 的 右下角
new in version 3.8: added <unk> <unk> status code., 3.8 新版 功能 : added 了 " _ <unk> _ <unk> ", 3.8 新版 功能 : 添加 了 " 451 <unk> _ for _ <unk> _ <unk> " 状态 码
a dotted name does not have its <unk> implicitly imported as that requires loading them and that may not be desired, 一个 " 的 " 不 需要 的 的 ， ， 它 需要 需要 需要 需要 的 的 可能, <unk> 的 名称 没有 使得 它 父包 或 模块 隐式 地 导入 ， 因为 它 需要 加载 它们 并且 可能 不 需要
here is a small example using a dictionary:, 这是 是 使用 使用 示例 示例 示例, 以下 是 使用 字典 的 一些 简单 示例
writes all the attributes of a key to the <unk>, 将 所有 所有 映射 的 属性 的 属性, 将 某个 键 的 所有 属性 写入 注册表
if the attribute is not found, "importerror" is raised., 如果 属性 为 " ， 则 " " " " ", 如果 未找到 该 属性 ， 则 引发 " importerror "
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
at the end of the loop, the value of "x" is <unk> so all the functions now return <unk> <unk> i.e. <unk>, 在 " 的 值 的 值 ， " " " " ， ， 所有 的 函数 都 会 返回 " <unk> . <unk> ( ) ", 在 循环 结束 时 ， " x " 的 值 是 " 4 " ， 所以 所有 的 函数 现在 返回 " 4 2 " ， 即 " 16 "
if optional members is given, it must be a subset of the list returned by <unk>, 如果 可 选 的 的 ， ， 它 必须 是 由 返回 的 " 列表 _ fast ( ) " 返回 的 列表, 如果 给定 了 可选 的 <unk> ， 它 必须 为 " getmembers ( ) " 所 返回 的 列表 的 一个 子集
set turtle mode <unk> <unk> or <unk> and perform reset, 将 " 模式 " ' " ' 或 ' " 或 " ' 和 ' " 和 " ' " ' ", 设置 海龟 模式 ( " standard " , " <unk> " 或 " <unk> " ) 并 执行 重置
the first argument provides the initial value for the <unk> <unk> it defaults to "none", 第一个 参数 提供 了 " " " " " " " " " " " " " ", 本 对象 包含 一个 名为 " default _ factory " 的 属性 ， 构造 时 ， 第一个 参数 用于 为 该 属性 提供 <unk> ， 默认 为 " none "
otherwise, the string <unk> <unk> % level is returned., 否则 ， 会 字符串 字符串 ' " ' " 的 的, 在 其他 情况 下 ， 则 返回 级别 字符串 ' level % s ' % level
docstrings can be customized by making direct assignments to the <unk> <unk>, 以下 可以 通过 " " . <unk> " 来 让 给 " <unk> ", 文档 字符串 可以 自定义 ， 通过 直接 赋值 给 " __ doc __ " 属性 :
if tos is false, sets the bytecode counter to target, 如果 为 为 " 则 将 将 将 写入 到 到 的 的, 如果 tos 为 假值 ， 则 将 字节 码 计数器 的 值 设为 target
new in version 3.5: added <unk> support., 3.5 新版 功能 : added 了 " _ <unk> ", 3.5 新版 功能 : 增加 了 对 " is _ <unk> " 的 支持
token value for <unk>, " " " " " 的 权 标值, " " > " " 的 权 标值
filter on <unk> of memory blocks., 在 <unk> 的 内存 的, 对 内存 块 的 跟踪 进行 筛选
the default initial crc is zero, 默认 为 " 0 ", 默认 初始 crc 为 零
notable changes in python <unk>, python 3.5 . 1 中 的 重要 变化, python 3.7 . 6 中 的 重要 变化
as with addresses, creation of a particular kind of network can be <unk> by calling the class constructor directly instead of using the factory function., 与 使用 <unk> ， 的 的 ， 可以 通过 " __ ( ) " 来 使用 " namedtuple ( ) " 来 使用 " __ ( ) " 来 使用 " __ ( ) " 来 使用 " __ ( ) " 方法, 与 地址 一样 ， 可以 通过 直接 调用 类 构造函数 而 不是 使用 工厂 函数 来 强制 创建 特定 类型 的 网络
"xdrlib" encode and decode xdr data, " xdrlib " 编码 和 解码 xdr 数据, " xdrlib " 编码 与 解码 xdr 数据
status code returned by <unk>, " 由 " loop . create _ datagram ( ) " 返回 的 的, 由 <unk> 的 状态 码
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
macro version of <unk>, 宏 版本 的 " <unk> " 的 泛型 版本, c 函数 " <unk> _ size ( ) " 的 宏 版本
for tutorial information and discussion of more advanced <unk> see, 有关 教程 信息 更 多 更 多 的 更 多, 教程 信息 和 更 多 高级 用法 的 讨论 ， 请参阅
the supplied actions are:, 该 的 的 如下 ：, <unk> 的 动作 有 ：
increment the reference count for object o, 包含 对象 计数 引用 计数, 增加 对象 o 的 引用 计数
release date: 2016 09 12, 发布 日期 : 2016 12 12, 发布 日期 ： 2016 09 12
<unk> are early releases in which interfaces aren't yet <unk> it's not <unk> to see an interface change between two <unk> releases, <unk> 是 在 在 中 中 的 的 ， 但 不会 被 称为 ， 而 不是 <unk> 的 的 的 的 之间 的 的, 其中 alpha 版 是 早期 发布 的 <unk> ， 它 的 接口 <unk> 最终 确定 ； 在 两个 alpha 发布 版本 间 出现 接口 的 改变 并 不 意外
the utf 32 decoders no longer decode byte sequences that correspond to <unk> code <unk>, 该 包含 不 包含 不 包含 为 字节 字节 的 字节 的 的 的, utf 32 解码器 将 不再 解码 与 代理 码位 相对 应 的 字节 序列
i would use modula 3 <unk> since its object oriented semantics are closer to those of python than c++, but i expect that few readers have <unk> of <unk>, 我 使用 <unk> <unk> 的 的 ， 因为 对象 的 对象 的 因为 对象 的 python 的 的 ， 但 ， 但 有 <unk> 的 的 的 的 的, 我 还 会 使用 modula 3 的 术语 ， 因为 其 面向对象 的 语义 比 c++ 更 接近 python ， 但 我 预计 <unk> 读者 <unk> 过 它 。 ）
before looking for installed python <unk> this form will search the executable "path" for a python executable, 在 python 安装 安装 python python ， " 将 " python python 可执行文件 的 python, 在 寻找 已 安装 的 python 解释器 之前 ， 此 表单 将 搜索 可执行文件 " path " 以 获取 python 可执行文件
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
if you have reached the limit of what pure python can <unk> there are tools to take you further away, 如果 你 需要 了 python 的 的 的 ， ， ， ， 你 需要 你 的 内存, 如果 你 已经 达到 纯 python 允许 的 限制 ， 那么 有 一些 工具 可以 让 你 <unk> 得 更 <unk>
determine whether code is in <unk> <unk> space <unk>, 确定 是否 是否 是否 是否 是 <unk> <unk> <unk>, 确定 code 是否 属于 <unk> . 1 ( ascii 空白 字符 )
while there are valid use cases for the methods <unk> below, mapping protocol access is preferred for new projects, 虽然 有 有 使用 " 方法 ， 方法 方法 的 的 映射 访问 访问 的 访问 访问, 虽然 以下 介绍 的 方法 存在 有效 的 用例 ， 但 对于 新 项目 仍 建议 采用 映射 协议 访问
the code below would normally be executed automatically during interactive <unk> from the user's <unk> file., 代码 的 会 被 了 从 " <unk> " 的 " " " " " 的 ", 以下 代码 通常 应当 在 交互 会话 期间 从 用户 的 " <unk> " 文件 自动 执行
return the <unk> as an int from 1 through <unk>, 返回 小时 " datetime . 0 " ， 从 " <unk> ", 返回 月 ， 从 0 到 12 的 整数
deprecated since version 3.8, will be removed in version 3.10: the loop parameter., 3.8 since version 3.8 will be removed in version 3.10 :, deprecated since version 3.8 , will be removed in version 3.10 : loop 形参
use "async with <unk> instead., 使用 " " ( ) " 来 使用, 请 改用 " async with lock "
if you call <unk> from within <unk> the input may be done in the terminal you <unk> idle from rather than the idle window itself., 如果 你 调用 <unk> <unk> <unk> <unk> ， ， 可能 可能 会 在 窗口 中 ， ， 则 返回 " null " 窗口, 如果 你 从 idle 内部 调用 getpass ， 输入 可能 是 在 你 启动 idle 的 终端 <unk> 在 <unk> 窗口 本身 中 完成
it is usually a shared library (or <unk> but might in some cases be statically linked with the python interpreter., 它 通常 是 一个 c 的 " " " " " ， 但 但 在 python 解释器 的 python 解释器, 它 通常 是 一个 共享 库 （ 或 dll ） ， 但 在 某些 情况 下 也 可能 被 静态 链接 到 python 解释器
in c++ <unk> write, 在 c++ 中 贡献 ", 在 c ++ 中 ， 你 会 这样 写
in no delay mode, raise an exception if there is no input., 在 没有 情况 下 ， 如果 没有 引发 异常 ， 则 引发 " 异常, 在 无 延迟 模式 下 ， 如果 没有 输入 则 引发 一个 异常
"queue" a synchronized queue class, " queue " 一个 " 的 队列 队列, " queue " 一个 同步 的 队列 类
this pointer is initialized to point to an array of <unk> <unk> <unk> terminated by one whose members are all "null" or zero, 这 指针 是 <unk> 的 的 的 的 的 ， ， ， 的 所有 的 所有 或 " 或 ", 该 指针 被 初始化 为 指向 " struct _ <unk> " 数组 ， 以 " null " 或者 0 作为 结束 标记
creating a new class creates a new type of object, allowing new instances of that type to be made, 创建 一个 新 的 创建 一个 新 的 对象 的 新 的 新 的 类型, 创建 一个 <unk> 意味着 创建 一个 新 的 对象 类型 ， 从而 允许 创建 一个 该 类型 的 新 实例
these implement the following methods, defined in coroutine objects: <unk> <unk> and "close()", 这些 实现 定义 了 以下 定义 的 的 " <unk> " 和 " <unk> " 和 " <unk> ", 实现 了 如下 定义 在 协程 对象 : 里 的 方法 ： " send ( ) " ， " <unk> ( ) " 和 " close ( ) "
in this representation, the string "python" might look like this:, 在 这种 情况 字符串 字符串 ， 如下 所示 :, 在 这 一 表达方式 中 ， 字符串 “ python ” 可能 看起来 像是 这样 ：
a subclass of <unk>, " httpexception " 的 一个 子类, " httpexception " 的 一个 子类
display the top 10, 将 <unk> 的 窗口, 显示 前 10 项
go to <unk> look on the current line, 将 在 窗口 上 ， 当前 窗口, 跳转 到 文件 / 行 <unk> on the current line
to add set <unk> using <unk> inherit from both "set()" and <unk> then define <unk> <unk>, 要 添加 了 " __ _ <unk> ( ) " 和 " <unk> " 和 " <unk> " 和 " <unk> ( ) " ， 然后 " <unk> _ <unk> ( ) ", 为了 使用 <unk> <unk> 集合 添加 哈希 能力 ， 可以 同时 继承 " set ( ) " 和 " hashable ( ) " 类 ， 然后 定义 " __ hash __ set ._ hash "
alternatives to the interactive interpreter, 将 交互式 解释器 的 解释器, 默认 交互式 解释器 的 <unk>
<unk> with the warnings module, 警告 模块 的, 与 警告 模块 集成
when using the module level <unk> function, the pattern is passed as the first argument, 使用 " 模块 " 模块 ， ， ， 函数 将 被 参数 参数 参数 参数, 使用 模块 级别 " re . sub ( ) " 函数 时 ， 模式 作为 第一个 参数传递
<unk> use <unk> or <unk> (with <unk> <unk>, " pyunicode _ <unk> ( ) " : 使用 " <unk> ( ) " 或 " <unk> ( ) " , " <unk> ( ) ", " pyunicode _ <unk> ( ) " : 使用 " pyunicode _ <unk> ( ) " 或 " pyunicode _ <unk> ( ) " ( 和 " cp _ <unk> " code _ <unk> )
entries in the dictionary will be discarded when there is no longer a strong reference to the key, 在 字典 中 被 时 ， 当 被 执行 时 将 被 引用 的 引用, 当 不再 存在 对键 的 <unk> 引用 时 ， 字典 中 的 条目 将 被 丢弃
the above example defines a read only <unk> you can also define a read write abstract property by appropriately <unk> one or more of the underlying methods as <unk>, 上面 示例 定义 了 一个 只读 的 只读 只读 ， 可以 通过 " " " " " " " " " " " " " " " " " 的 " 的 " 的 ", 上面 的 例子 定义 了 一个 只读 特征 属性 ； 你 也 可以 通过 适当 地 将 一个 或 多个 下层 方法 标记 为 抽象 的 来 定义 可 读写 的 抽象 特征 属性 :
comparison should be <unk>, 比较 的 应当 是 ", 比较 应该 是 可 传递 的
python lambda expressions cannot contain statements because python's syntactic framework can't handle statements nested inside expressions, python 表达式 表达式 包含 语句 语句 ， ， ， ， ， ， ， ， ， ， 相关 语句, python 的 lambda 表达式 不能 包含 语句 ， 因为 python 的 语法 框架 不能 处理 嵌套 在 表达式 内部 的 语句
added <unk> <unk> <unk> and <unk> functions, 添加 了 " <unk> " , " <unk> " , " <unk> " 和 " 函数, 增加 了 " curses . get _ <unk> ( ) " , " curses . set _ <unk> ( ) " , " curses . get _ <unk> ( ) " 以及 " curses . set _ <unk> ( ) " 函数
changed in version 3.5: made the method <unk>, 在 3.5 版 更改 : the method method " 方法, 在 3.5 版 更改 : 使得 这个 方法 变成 静态 的
this function always succeeds., 此 函数 总是 会 成功 执行, 此 函数 总是 会 成功 执行
this is the equivalent of the python expression "o1 | o2"., 这 等价 于 python 表达式 " o1 o2 ", 等价 于 python 表达式 " o1 | o2 "
if no exception occurs, the except clause is skipped and execution of the "try" statement is <unk>, 如果 没有 异常 异常 ， 则 会 执行 " try " 语句 执行 " 执行 " 异常, 如果 没有 异常 发生 ， 则 跳 过 except 子句 并 完成 " try " 语句 的 执行
a call to this method will show the window, wait for the user to make a <unk> and return the selected color (or "none") to the <unk>, 调用 此 方法 将 方法 将 被 用来 为 一个 的 的 ， 并 将 其 将 其 到 到 " sys . <unk> ( ) ", 调用 此 方法 将 显示 相应 窗口 ， 等待 用户 进行 选择 ， 并 将 选择 的 颜色 ( 或 " none " ) 返回 给 调用者
the <unk> argument controls the amount of memory used for the internal compression state, <unk> 参数 参数 参数 用于 参数 的 参数 的 参数 的 参数, 参数 <unk> 指定 内部 压缩 操作 <unk> 占用 <unk>
if you don't want a newline <unk> you can set the handler instance's <unk> attribute to the empty string., 如果 你 想 一个 " <unk> " ， ， 你 可以 设置 设置 设置 一个 " ， 则 将 " 属性 " 属性, 如果 你 不 希望 以 换行符 终止 ， 你 可以 将 处理程序 类 实例 的 " <unk> " 属性 设为 空 字符串
<unk> the filename for compiled ( bytecode ) files by adding <unk> 1" before the ".pyc" extension (see pep <unk> ), " ' g ' " 的 的 的 文件 （ 例如 " os . <unk> ( ) " ， 在 pep <unk> pep <unk> pep <unk>, 通过 在 " . pyc " 扩展名 之前 添加 " . opt 1 " 来 <unk> 已 编译 文件 ( bytecode ) 的 文件名 ( 参见 pep <unk> )
<unk> the size of a terminal, <unk> <unk> 的 大小, 查询 终端 的 尺寸
parsing arguments and building values, 解析 参数 和 变量 变量, 语句 解释 及 变量 编译
it provides the "setup()" (which is called from the setup <unk>, 它 提供 了 从 从 " <unk> " 调用 " 调用, 它 提供 函数 " setup ( ) " （ 该 函数 被 setup 脚本 调用 ）
using alternative aliases for these encodings may result in slower <unk>, 使用 使用 的 的 ， 格式 可能 可能 导致 在 <unk>, 使用 这些 编码 格式 的 其他 别名 可能 会 导致 <unk> 的 执行 速度
optional <unk> is a flag specifying whether a lowercase alphabet is acceptable as input, 可选 的 " 是 " 是 一个 " ， 指定 指定 的 ， ， ， ， 是 " 的 ", 可选 的 <unk> 是 一个 指定 小写 <unk> 是否 可 接受 为 输入 的 标志
the field is appended to the end of the message's existing headers., 该字段 字段 是 被 的 的 的 的 的, 这个 字段 会 被 添加 在 已有 字 段 列表 的 <unk>
the "except" clause is selected depending on the class of the instance: it must reference the class of the instance or a base class <unk>, " tarfile " 子句 的 的 的 的 的 类 ， 它 必须 实例 实例 实例 实例 的 实例 类 实例 类 实例 类, " except " 子句 会 依据 实例 的 类来 选择 ： 它 必须 引用 实例 的 类 或是 其 所属 的 基类
base class for c callable foreign functions., c c c 的 函数 的 函数, c 可 调用 外部 函数 的 基类
issue tracking overview of the process involved in reporting an <unk> on the <unk>, <unk> 在 进程 进程 中 的 的 的 <unk>, 问题 跟踪 在 追踪 系统 上 参与 问题 改进 的 过程 概述
return "true" if obj is true, and "false" otherwise, 如果 为 为 " true " ， 否则 返回 " false " ， 否则 返回 " false ", 如果 obj 为 真值 则 返回 " true " ， 否则 返回 " false "
(contributed by <unk> <unk> <unk>, （ 由 <unk> <unk> <unk> <unk> <unk> <unk>, （ 由 <unk> <unk> <unk> 贡献 。 ）
in <unk> the cmp parameter was removed entirely (as part of a larger <unk> to simplify and <unk> the language, eliminating the <unk> between <unk> comparisons and the <unk> magic <unk>, 在 <unk> 的 的 的 参数 ， <unk> <unk> <unk> （ 即 <unk> <unk> 的 <unk> ， <unk> 和 <unk> <unk> 和 <unk> <unk> 的 的 <unk>, 在 <unk> 中 ， cmp 参数 被 完全 删除 （ 作为 简化 和 统一 语言 <unk> 的 一部分 ， 消除 了 <unk> 的 比较 与 " __ cmp __ ( ) " 魔术 方法 之间 的 冲突 ）
the float type is described in numeric types int, float, <unk>, " 类型 " 类型 类型 类型 类型 类型 类型 : " " " ", 数字 类型 int , float , complex 描述 了 浮点 类型
returns the number of keys in object o on success, and " 1" on failure, 如果 对象 的 的 对象 的 的 ， ， 失败 时 返回 " 1 ", 成功 时 返回 对象 o <unk> 的 数量 ， 失败 时 返回 " 1 "
that means that by adding this code at the end of your module:, 注意 意味着 在 代码 代码 代码 的 模块 的 末尾, 这 意味着 通过 在 你 的 模块 末尾 添加 这些 代码 :
raises an auditing event <unk> with argument <unk>, 引发 一个 审计 事件 " ctypes . <unk> " ， 附带 参数 " key ", 引发 一个 " tempfile . mkstemp " 审计 事件 ， 附带 参数 " <unk> "
(the expression list is a tuple except if it has exactly one <unk>, （ 表达式 列表 列表 （ 如果 元组 ） ， 如果 ， 则 会 被 忽略, （ 表达式 列表 为 一个 元组 ， 除非 其中 只有 一项 。 ）
the original specification for <unk> was pep 302 , with subsequent extension in pep 420 ., " struct " 用于 / o pep pep <unk> pep pep 525, 原始 的 " sys . meta _ path " 规格 说明 见 pep 302 ， 后续 的 扩展 说明 见 pep 420
note that <unk> is <unk>, 请 注意 " 是 " 是 " 是 ", 注意 " type [ c ] " 是 <unk> 的 ：
return "true" if it is a hard <unk>, 如果 <unk> 是 一个 " true ", 如果 为 硬 链接 则 返回 " true "
(contributed by victor stinner in bpo <unk>, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）
it is often much faster than creating a new dictionary and running multiple "update()" calls., 它 是 在 的 的 ， ， 一个 新 新 的 字典, 它 通常 比 创建 一个 新 字典 和 多次 调用 " update ( ) " 要 快 很多
<unk> see method resolution order ., " 参见 _ <unk> ( ) " 方法 的 方法, <unk> 参见 method <unk> order
for example, if your program displays some text in a window and then <unk> the window, there's no need to send the original text because they're never <unk>, 例如 ， 如果 你 在 一个 中 ， 则 显示 显示 的 ， ， ， ， 则 会 将 不会 被 <unk> ， 的 所有 <unk>, <unk> ， 如果 你 的 程序 在 一个 窗口 内 显示 一些 文本 然后 清楚 了 这个 窗口 ， 那么 这些 原始 文本 不 需要 被 发送 ， 因为 它们 甚至 <unk> 能 被 <unk>
this chapter <unk> explains how to create a windows extension module for python using microsoft <unk> c++, and follows with more detailed background information on how it works, 此 函数 <unk> 了 " python python ， python 模块 的 模块 ， 用于 模块 模块 的 模块 ， 更 多 信息 ， 更 多 信息, 这 一章 简要 介绍 了 如何 使用 microsoft <unk> c++ 创建 python 的 windows 扩展 模块 ， 然后 再 提供 有关 其 工作 <unk> 的 详细 背景 信息
it issues a <unk> statement first, then executes the sql script it gets as a parameter., 它 定义 了 " 语句 " 语句 语句 语句 ， ， ， 它 将 被 作为 作为 作为, 它会 首先 执行 一条 " <unk> " 语句 ， 再 执行 <unk> 参 方式 获取 的 sql 脚本
by default, a stack trace is printed and then the thread exits (but other threads continue to <unk>, 默认 情况 下 ， 一个 " sys . <unk> ( ) " 会 被 阻塞 线程 线程 线程 阻塞 阻塞 阻塞 阻塞, 在 默认 情况 下 ， 会 打印 堆栈 回溯 然后 该 线程 将 退出 （ 但 其他 线程 会 继续 运行 ）
create a shared <unk> object and return a proxy for it., 创建 一个 共享 " 对象 " 对象 " 对象 并 返回 一个 代理 代理, 创建 一个 共享 的 " threading . <unk> " 对象 并 返回 它 的 代理
this is true for all built in exceptions, but need not be true for user defined exceptions (although it is a useful <unk>, 所有 所有 的 内置 内置 ， 但 但 用户 用户 用户 的 用户 自定义 的 异常 ； 它 是 它 的 有用, 对于 所有 内置 异常 都 是 如此 ， 但 对于 用户 定义 的 异常 则 不 一定 如此 （ 虽然 这是 一个 有用 的 规范 ）
name mangling is helpful for <unk> subclasses override methods without <unk> <unk> method calls, name 是 " <unk> " 的 " ， " 方法 的 方法 方法 的 " ( ( ) " 方法, 名称 改写 有助于 让 子类 重载 方法 而 不 破坏 <unk> 方法 调用
otherwise, the contents of the files are compared., 否则 ， 会 被 内容 的 内容, 否则 ， 将 比较 文件 的 内容
where the optional <unk> may be either <unk> or ' ' and <unk> and <unk> (if <unk> are strings of decimal digits, 其中 的 可选 的 可以 是 " ' r ' ' ' ' ' ' " 和 " ' ' ' ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", 其中 的 可选项 " sign " 可以 为 ' + ' 或 ' ' 并且 " numerator " 和 " denominator " ( 如果 存在 ) 是 十进制 数码 的 字符串
changed in version 3.8: the keyword parameters mode and <unk> are now keyword only., 在 3.8 版 更改 : the 关键字 参数 mode " " " 现在 会 被, 在 3.8 版 更改 : 关键 字形 参 mode 和 <unk> 现在 是 仅限 关键 字形 参
this module contains functions that can read and write python values in a binary format, 此 模块 包含 了 可以 通过 " 和 " 和 " 和 python 的 python 的, 此 模块 包含 <unk> 能 以 二进制 格式 来 读写 python 值 的 函数
please refer to your system documentation for more information on using these terminal control <unk>, 请 注意 的 更 多 信息 ， 更 多 信息 ， 更 多 信息 ， 更 多 信息, 请 参考 你 的 系统 文档 了解 有关 如何 使用 这些 终端 控制 接口 的 更 多 信息
if no elements are present, raises an <unk>, 如果 没有 不到 则 会 引发 引发 引发 引发 引发 ", 如果 没有 元素 的话 ， 就 引发 一个 " indexerror "
convert a sequence of unicode digits in the string u to a python integer value., 将 指定 中 的 " 推测 " 的 的 的 字符串 为 一个 整数 整数, 将 字符串 u 中 的 unicode 数字 序列 转换 为 python 整数 值
note that if your server is not <unk> on udp port <unk> <unk> may appear not to work, 请 注意 如果 没有 未 未 不 （ 如果 未 ） 的 的 " ） ， 则 可能 可能 不 不 不 不 不 被 视为, 请 注意 如果 你 的 服务器 不是 在 udp 端口 <unk> 上 进行 <unk> ， 则 " <unk> " 可能 无法 正常 工作
the final path <unk>, " decimal " 路径, 最终 的 路径 组成部分
class definition blocks and arguments to "exec()" and "eval()" are special in the context of name resolution, " sys . open ( ) " 和 参数 和 和 字符串 和 " eval " 的 的 上下文 中 的 的, 类 定义 代码 块 以及 传给 " exec ( ) " 和 " eval ( ) " 的 参数 是 名称 解析 上下文 中 的 特殊 情况
python scopes and namespaces, python 常见问题 的 和, python 作用域 和 命名 空间
within a module, the module's name (as a string) is available as the value of the global variable "__name__", " 一个 模块 模块 的 的 名称 是 一个 的 的 的 的 的 值 的 值 的 值, 在 一个 模块 内部 ， 模块 名 （ 作为 一个 字符串 ） 可以 通过 全局变量 " __ name __ " 的 值 获得
adpcm coding is an <unk> coding <unk> <unk> each 4 bit number is the difference between one sample and the <unk> divided by a <unk> step, " " " 是 是 <unk> <unk> <unk> , <unk> , <unk> , <unk> , <unk> , <unk> 的 的 ， ， <unk> <unk> <unk> 的 的, adpcm 编码 是 一种 自 <unk> <unk> ， 其中 每个 4 比特 数字 是 一个 采样 值 与 下 一个 采样 值 之间 的 差 除以 （ <unk> 的 ） <unk>
this is mostly for <unk> but can be used for additional loader specific functionality, for example getting data associated with a <unk>, 这是 " <unk> " 的 但 但 但 用于 用于 用于 <unk> 的 的 的 数据 ， 而 数据 的 数据, 这 主要 是 用于 <unk> ， 但 也 可 用于 额外 的 加载 器 专用 功能 ， 例如 获取 关联 到 加载 器 的 数据
if <unk> is supplied, it must be a function, 如果 <unk> _ <unk> 为 " ， 则 它 必须 是 一个 函数, 如果 提供 了 <unk> ， 它 必须 是 一个 函数
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
if you want to know if two variables refer to the same object or not, you can use the <unk> <unk> or the built in function <unk>, 如果 你 想要 两个 变量 对象 ， 则 对象 对象 ， ， ， 你 可以 使用 " 函数 _ args ( ) " 函数 或 " 函数 ( ) " 函数, 如果 你 想 知道 两个 变量 是否 指向 相同 的 对象 ， 你 可以 使用 " is " 运算符 ， 或 内置 函数 " id ( ) "
the numeric arguments are first converted to a common type., 两个 参数 是 第一个 为 一个 的 的, 两个 数字 参数 将 先 被 转换 为 相同 类型
this <unk> doesn't take the current locale into <unk> it will if you also set the "locale" flag., 这 将 不会 被 当前 当前 的 的 当前 ， ， 它 将 设置 设置 设置 了 处理程序, 此 小写 不 考虑 当前 区域 设置 ； 如果 你 还 设置 了 " locale " 标志 ， 则 将 考虑
the <unk> character used to create the array., " <unk> " 用于 用来 创建 的 的, 用于 创建 数组 的 类型 码 字符
if true, this field is included in the generated "__hash__()" method, 如果 此 方法 ， 此 方法 会 使用 " 方法 ( ) " 方法, 如果 为 true ， 则 此 字 段 包含 在 生成 的 " __ hash __ ( ) " 方法 中
thus, for a logger named <unk> in the <unk> section, the relevant configuration details are held in a section <unk>, 在 ， 一个 一个 中 的 的 " " " ， ， ， 的 的 是 在 在 的 中 中 的 的, 因此 ， 对于 " [ loggers ] " 小节 中 名为 " <unk> " 的 日志 记录器 ， 相应 的 配置 详情 保存 在 " [ logger _ <unk> ] " 小节 中
the decorator takes a logger as a parameter and <unk> a memory handler for the <unk> of the call to the decorated function, 该 " 一个 " 一个 一个 一个 参数 的 " 和 " ) " 和 " <unk> ( ) " 的 一个 一个 " 的 " ) " 函数 的 一个 一个 函数, 装饰 器 使用 一个 记录器 作为 参数 ， 并 在 调用 被 装饰 的 函数 期间 附加 一个 内存 处理程序
to get <unk> here is a simple callback that shows the values it gets <unk>, 要 <unk> 的 " ， " 是 一个 简单 的 的 ， 它 它 它 它 的 值, 首先 ， 这是 一个 简单 的 回调 ， 它会 显示 传入 的 值 :
return true if p is a "frozenset" object or an instance of a subtype., 如果 p 是 一个 " frozenset " 或 " frozenset " 实例 则 返回 真值 的 实例, 如果 p 是 一个 " frozenset " 对象 或者 是 其子 类型 的 实例 则 返回 真值
also, much less <unk> cycles are consumed, 此外 ， 会 被 " " " " " ", 此外 还 将 消耗 <unk> 的 cpu 周期
the following is a <unk> <unk> list of conditions which will raise an error:, 以下 是 一个 " <unk> _ <unk> " 的 " 是 一个 列表 的 的, 下面 是 将 会 引发 错误 的 （ 可能 不 完整 的 ） 条件 列表 :
return the 8 bit character corresponding to the given ascii character (the character bit value is bitwise <unk> with <unk>, 返回 对应 的 字符 的 的 字符 的 字符 字符 字符 字符 字符 为 " ' " ' " ' " ' " ' " ' " ' " ' ", 返回 对应 于 给定 ascii 字符 的 8 比特 位 字符 （ 字符 比特 值会 与 <unk> 进行 按位 或 运算 ）
print objects to the text stream file , separated by sep and followed by end, 打印 对象 的 文本 流 为 " 文件 " ， 由 " " " 和 ", 将 objects 打印 到 file 指定 的 文本 流 ， 以 sep 分隔 并 在 末尾 加上 end
level is the compression level an integer from "0" to "9" or " 1", level 是 由 " 层级 " 的 " 0 " 0 " 或 " 0 ", 参数 level 为 压缩 等级 ， 是 整数 ， 可 取值 为 " 0 " 到 " 9 " 或 " 1 "
deprecated since version 3.4: use <unk> instead., 3.4 版后 已 移除 : use " mkstemp _ <unk> ( ) ", 3.4 版后 已 移除 : use " importlib . util . cache _ from _ source ( ) " instead .
names in this <unk> when used within the context of a class definition, are re written to use a <unk> form to help avoid name <unk> between <unk> attributes of base and derived classes, 当 在 当 被 使用 的 上下文 中 的 上下文 ， ， 可以 使用 " <unk> ( ) " 来 来 帮助 的 的 的 ， 例如 " <unk> " 的 的 的, 这种 名称 在 类 定义 中 使用 时 ， 会以 一种 混合 形式 重写 以 避免 在 基类 及 派生类 的 " 私有 " 属性 之间 出现 名称 冲突
packs a fixed length opaque data stream, similarly to <unk>, 打包 一个 长度 长度 长度 数据 ， 转换 为 " sys . <unk> ", 打包 固定 长度 不 透明 数据流 ， 类似 于 " pack _ <unk> ( ) "
the <unk> <unk> returns an iterator giving all possible r tuple <unk> of the elements contained in iterable ., " _ ( ) " ) " 返回 返回 一个 迭代 器 的 元素 元素 元素 元素 元素 元素 元素 元素 元素, " itertools . combinations ( iterable , r ) " 返回 一个 迭代 器 ， 它 能 给出 输入 迭代 器中 所 包含 的 元素 的 所有 可能 的 r 元 元组 的 组合
buffering has the same meaning as for the built in "open()" function, 与 具有 内置 内置 的 内置 函数 的 函数, <unk> 的 含义 与 内置 " open ( ) " 函数 中 的 相同
returns the first operand after adding the second value its <unk>, 返回 第一个 的 的 ， ， <unk> 的 的 <unk>, 返回 第一个 操作数 添加 第二个 值 的 指数 后 的 结果
<unk> now supports an optional headers keyword argument for a sequence of http headers to be sent with each request, " 现在 . set ( ) " 现在 支持 可选 的 可选 参数 参数 参数 的 序列 参数 的 序列 参数 的 序列, " xmlrpc . client . <unk> " 现在 支持 可选 的 headers 关键字 参数 作为 <unk> 每次 请求 发送 的 http 标头 序列
besides <unk> indent and <unk> the following categories of tokens <unk> identifiers , keywords , literals , operators , and delimiters, " <unk> " 和 " <unk> " 和 " <unk> <unk> <unk> , <unk> , , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk>, 除了 newline , indent 和 dedent ， 还 存在 以下 类别 的 形符 : 标识符 , 关键字 , 字 面值 , 运算符 以及 分隔符
the action names can be abbreviated as desired (e.g. " <unk> " <unk> " <unk> " <unk> and the interpreter will <unk> them to the appropriate action name., action 名称 可以 被 用作 " " " " " " " " " " " " " " " " " ", 操作 名称 可以 根据 需要 进行 缩写 ( 例如 " <unk> " , " <unk> " , " <unk> " , " <unk> " ) ， 解释器 将会 把 它们 解析 为 适当 的 操作 名称
the brackets and characters within them <unk> format <unk> are replaced with the objects passed into the "str.format()" method, " ' " 和 " ' " ' " ' " " " " " " " " " " " 方法 的 方法, 花 括号 和 其中 的 字符 （ 称为 格式 字 段 ） 将 替换 为 传递 给 " str . format ( ) " 方法 的 对象
the filters are <unk> in <unk> until one of them returns a false value, <unk> 是 <unk> 的 " " " " " " 的 一个 一个 " 一个 ", 过滤器 会 被 <unk> 使用 ， 直到 其中 一个 返回 假值 为止
enabling the python development mode shows this <unk>, python python 的 模式 安装 安装 安装, 启用 python 开发 模式 时会 显示 此 警告
python performs garbage collection via reference counting and a cyclic garbage collector that is able to detect and break reference cycles, python 的 支持 （ 引用 和 引用 和 和 和 ， ， ， ， 并 将 其 引用 计数 引用 引用 引用, python 是 通过 引用 计数 和 一个 能够 检测 和 打破 循环 引用 的 循环 垃圾 回收 器来 执行 垃圾 回收 的
consult the <unk> guide to find information for beginning python <unk> including lists of <unk>, <unk> psf <unk> <unk> python <unk> 的 的 的 ， 请 对 " 的 的, 请参阅 <unk> 指南 以 获取 针对 python 编程 <unk> 的 信息 ， 包括 教程 的 清单
it is expected to have the same value as <unk>, 它 将 被 与 " " " " " " " " ", 预期 它 与 " __ spec __. parent " 具有 相同 的 值
use <unk> or <unk> instead of <unk> and <unk> or <unk> instead of <unk>, 使用 " <unk> ( 或 " 或 " <unk> ( ) " , " <unk> ( ) " 和 " <unk> ( ) " 或 " <unk> ( ) " 或 " <unk> ( ) " 或 " <unk> ( ) ", 请 使用 " iter ( x ) " 或 " list ( x ) " 替代 " x . <unk> ( ) " 并用 " x . iter ( ) " 或 " list ( x . iter ( ) ) " 替代 " x . <unk> ( ) "
[ buffered streaming protocols ], [ 协议 ] 协议, [ 缓冲 流 协议 ]
a primary use case for template strings is for internationalization <unk> since in that context, the simpler syntax and functionality makes it easier to <unk> than other built in string formatting <unk> in python, 使用 使用 " 字符串 " 的 " ， " ， " ， 因为 中 的 ， ， ， ， ， ， 的 更 在 python 中 的 的 的 python 中 的 的, 模板 字符串 的 一个 主要 用例 是 文本 国际化 ( i18n ) ， 因为 在 此 场景 下 ， 更 简单 的 语法 和 功能 使得 文本 翻译 过程 比 使用 python 的 其他 内置 字符串 格式化 工具 更为 方便
this will appear in the default textual representation of our objects and in some error <unk> for example:, 这 将 在 默认 情况 下 默认 为 " " " " " " " " " " " " " ", 这 将 出现 在 我们 的 对象 的 默认 文本 表示 形式 和 某些 错误 消息 中 ， 例如 :
prior to python 3.5, these three functions <unk> the high level api to subprocess, 在 python python 函数 ， 这些 函数 函数 函数 函数 api api api api api api api, 在 python 3.5 之前 ， 这 三个 函数 组成 了 subprocess 的 高阶 api
however, for historical <unk> overflowerror is sometimes raised for integers that are outside a required range, 但是 ， " " " ， ， ， " " " " " " " " " " " " 的 " 是 " 的 " 是 一个 " 的, 但是 出于 历史 原因 ， 有时 也 会 在 整数 超出 要求 范围 的 情况 下 引发 overflowerror
return an iterator for the month month in the year year similar to "itermonthdates()", but not restricted by the "datetime.date" range, 返回 一个 迭代 器 的 迭代 器 ， 表示 的 " itermonthdates ( ) " 的 " itermonthdates ( ) " " " " " " " " " " " " ", 返回 一个 迭代 器 ， 迭代 器 的 内容 与 " itermonthdates ( ) " 类似 为 year 年 month 月 的 日期 ， 但 不受 " datetime . date " 范围 的 限制
the instance is initialized with the from and to addresses and subject line of the email, 实例 从 从 从 和 和 和 和 和 的 的 的, 该 实例 使用 电子邮件 的 <unk> 、 <unk> 地址 和 主题 行 进行 初始化
these must be functions or methods which have the same interface as the <unk> and <unk> methods of codec instances (see codec <unk>, 这些 必须 是 函数 或 、 函数 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 的 " 、 " 的 方法 :, 它们 必须 是 具有 与 codec 的 " encode ( ) " 和 " <unk> ( ) " 方法 相同 接口 的 函数 或 方法 ( 参见 codec 接口 )
there is also <unk> for setting values in a dictionary just during a scope and restoring the dictionary to its original state when the test <unk>, 在 也 在 字典 中 中 中 ， 字典 中 ， 字典 中 ， 字典 中 ， 字典 中 ， 字典 将 其 字典 到 其 内存 的 内存, 还有 一个 " <unk> . dict ( ) " 用于 在 一定 范围 内 设置 字典 中 的 值 ， 并 在 测试 结束 时 将 字典 恢复 为 其 原始 状态 ：
on error, sets the appropriate exception <unk> "valueerror" or <unk> and returns "null"., 在 失败 时 ， 将 引发 " 异常 " " " " " " " " " " " " " 返回 " null ", 发生 错误 时 ， 将 设置 适当 的 异常 ( " eoferror " , " valueerror " 或 " typeerror " ) 并 返回 " null "
the most interesting thing about enum members is that they are <unk>, 大多数 大多数 的 的 的 是 不可 的 的 是 是 是 是 是 是 是, 有关 枚举 成员 最 有趣 的 特点 是 它们 都 是 单例 对象
raises the "error" exception if any error occurs., 如果 失败 引发 引发 引发 " 异常 " 异常, 函数 发生 错误 时 抛出 " error " 异常
dtrace scripts can stop working or work <unk> without warning when changing cpython versions., <unk> 的 可以 使用 " 或 " 或 或 <unk> 在 处理 时 使用 的 时候, 更改 cpython 版本 时 ， dtrace 脚本 可能 会 停止 工作 或 无法 正常 工作 而 不会 发出 警告
it uses hmac as <unk> function., 它 使用 " 作为 ( ) " 函数 的 函数, 它 使用 hmac 作为 伪 随机 函数
new indent width open a dialog to change indent width, 新 的 身份验证 : 允许 以 到 的 的 的 的, 缩进 宽度 调整 打开 一个 对话框 以 更改 缩进 宽度
"doctest" test interactive python examples, " 测试 " 测试 测试 python python 示例, " doctest " 测试 <unk> 的 python 示例
the <unk> are removed from the queue and passed to the handlers for processing., <unk> 是 被 传递 给 传递 给 " 的 ", " <unk> " 会 从 队列 中 被 移除 ， 并 被 传递 给 句柄 进行 处理
(contributed by <unk> <unk> bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
module <unk> an interface to the <unk> password database, similar to this., 模块 " <unk> . <unk> " 接口 ， 用于 " 接口 " 类似 于 类似 于, 模块 " <unk> " 针对 <unk> 密码 数据库 的 接口 ， 与 本 模块 类似
make an iterator that <unk> the function using arguments obtained from the iterable, 创建 一个 迭代 器 ， 函数 函数 函数 的 函数, 创建 一个 迭代 器 ， 使用 从 可 迭代 对象 中 获取 的 参数 来 计算 该 函数
other return types can be specified by setting the "restype" attribute of the function object., 其他 其他 类型 类型 通过 指定 函数 对象 的 属性, 其他 返回 类型 可以 通过 设置 函数 对象 的 " restype " 属性 来 指定
this is the <unk> part of the string returned by <unk>, 这是 是 由 " 由 " 的 " 所 返回 的 " " ( ) " 所 返回 的 的, 准确 来说 ， 此 方法 返回 的 是 " get _ content _ type ( ) " 方法 所 返回 的 <unk> maintype / subtype 的 字符串 当中 的 maintype 部分
changed in version 3.4: raises "importerror" instead of "notimplementederror"., 在 3.4 版 更改 : 引发 " importerror " 而 不是 " notimplementederror ", 在 3.4 版 更改 : 引发 " importerror " 而 不是 " notimplementederror "
one way to remember how <unk> work is to think of the <unk> as pointing between characters, with the left edge of the first character <unk> 0, 一种 一种 <unk> 的 如何 <unk> ， ， <unk> <unk> 的 的 的 ， ， ， <unk> 的 的 <unk> 的 <unk>, 您 也 可以 这么 理解 切片 ： 将 索引 视作 指向 字符 之间 ， 第一个 字符 的 左侧 <unk> 0 ， 最后 一个 字符 的 右侧 <unk> n ， 其中 n 是 字符串 长度
this is <unk> in the example below., 这是 这个 例子 的 例子 例子 ：, 如下 例子 展示 了 这些
print information on <unk> objects found., 在 windows 上 上 的 <unk> 对象, 当 发现 <unk> 对象 时 <unk>
"configparser" goes a long way to provide support for the largest sensible set of ini <unk> available, 在 ， 的 的 <unk> 的 对 对 对 对 对 的 的 的 的 的 的 <unk> 的 的 <unk>, " configparser " 花费 了 很大 <unk> 来 为 尽量 大 范围 的 可用 ini 样式 提供 支持
changed in version 3.2: msg may be a byte string., 在 3.2 版 更改 : 添加 可以 是 一个 字节 串, 在 3.2 版 更改 : msg may be a <unk> string .
see also: pep <unk> reworking the os and io exception hierarchy, 参见 : pep <unk> <unk> 和 和 异常 异常, 参见 : pep 3151 重写 os 和 io 异常 的 层次结构
this is what a custom object will contain, 这是 一个 对象 对象 将 将 " 对象, 这 就是 一个 自定义 对象 所 包含 的
win <unk> <unk> windows on <unk> <unk> <unk> <unk> and <unk>, " <unk> " <unk> windows windows " : windows <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " <unk> ", win <unk> ( 在 <unk> , <unk> <unk> _ 64 , <unk> , 和 <unk> 上 的 64 位 windows )
an object that wraps os processes created by the "create_subprocess_exec()" and <unk> functions., 此 方法 的 的 的 " 创建 ( ) " 函数 创建 创建 的 的 函数, 一个 用于 包装 " create _ subprocess _ exec ( ) " and " create _ subprocess _ shell ( ) " 函数 创建 的 os 进程 的 对象
and even if symbols are <unk> <unk> the module whose functions one <unk> to call might not have been loaded <unk>, 如果 如果 是 是 " <unk> " ， " 模块 ， 则 函数 函数 会 被 函数 ， " " " ( ) " 函数 会 被 引发 " none ", <unk> 是 符号 是 全局 可见 的 ， 你 要 调用 的 模块 也 可能 尚未 加载
return the members as a list of their names, 返回 以 为 作为 列表 的 列表, 以 名称 列表 的 形式 返回 成员
changed in version 3.4: no longer abstract and a concrete implementation is provided., 在 3.4 版 更改 : 不 支持 " 和 " 和 " ， " 实现, 在 3.4 版 更改 : 不再 抽象 并且 提供 一个 具体 的 实现
a class can control what this function returns for its instances by defining a "__repr__()" method., 类会 类 可以 控制 " 实例 的 实例 的 实例 的 实例 的 实例, 类 可以 通过 定义 " __ repr __ ( ) " 方法 来 控制 此 函数 为 它 的 实例 所 返回 的 内容
lines starting with "import" <unk> by space or <unk> are executed., 将 " " " " " , " ' " ' " ' " 或 " ' " ' " ' ", 以 " import " 开始 的 行 （ <unk> 空格 或 tab ） 会 被 执行
<unk> is still raised if the wrapper function itself is missing any attributes named in updated ., " 函数 " 函数 " 函数 " 函数 " 函数 将 被 " 则 返回 " true ", 如果 包装 器 函数 自身 缺少 在 updated 中 命名 的 任何 属性 则 仍 将 引发 " attributeerror "
it defaults to <unk>, 它 默认 为 " " . <unk> ( ) ", 它 默认 为 " locale . <unk> ( false ) "
these <unk> filtering functions speed up matching to find differences and do not cause any <unk> lines or characters to be ignored, 这些 <unk> 的 函数 函数 会 被 所有 的 的 和 和 不 任何 任何 行 或 为 ascii, 这些 垃圾 过滤 函数 可 加快 查找 差异 的 匹配 速度 ， 并且 不会 导致 任何 差异 行 或 字符 被 忽略
encode bytes like object s using the standard base64 alphabet and return the encoded "bytes"., " bytes " 对象 类似 于 " 对象 " 对象 ， 并 返回 其 编码 的, 编码 bytes like object s ， 使用 标准 base64 字母表 并 返回 编码 过 的 " bytes "
the "multiprocessing" package mostly <unk> the api of the "threading" module., " curses " 包 " 模块 的 模块 api " 模块 api, " multiprocessing " 包 主要 复制 了 " threading " 模块 的 api
read the description of the <unk> method's isjunk parameter for an <unk>, 读取 " 的 _ <unk> " 形参 的 形参 形参 形参 形参 形参 形参, 请 阅读 " find _ longest _ match ( ) " 方法 的 isjunk 形参 的 描述 了解 详情
registering an <unk> callable, 注册 注册 的 <unk>, 注册 可 调用 的 适配器
(contributed by dong hee na in bpo 39259.), （ 由 dong hee na 在 bpo 39259 中 贡献 。 ）, （ 由 dong hee na 在 bpo 39259 中 贡献 。 ）
pushes a new dictionary object onto the stack, 将 一个 新 的 字典 对象 推入 栈顶, 将 一个 新 字典 对象 推入 栈顶
after <unk> used to reading and writing code using a particular <unk> it is normal to <unk> somewhat <unk> when reading (or being required to <unk> in a different one., 在 <unk> 用于 用于 读取 和 使用 的 ， 使用 使用 使用 的 代码 ， <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> 的 时候 ， <unk> <unk> <unk>, 在 <unk> 了 阅读 和 编写 某种 特定 风格 的 代码 之后 ， 当 阅读 （ 或 被 要求 编写 ） 另 一种 风格 的 代码 时 通常 都 会 令人 <unk> <unk> 不 <unk> ）
return a context manager that closes thing upon completion of the block, 返回 上下文 管理器 的 的 的 的 的 的 的, 返回 一个 在 语句 块 执行 完成 时 关闭 <unk> 的 上下文 管理器
this guide is meant to help you <unk> out how best to support both python 2 & 3 simultaneously., 这 <unk> 用于 帮助 帮助 的 更 如何 <unk> python 3 的 的 python 3, 本 指南 旨在 帮助 您 了解 如何 最好 地 同时 支持 python 2 和 3
<unk> functions: <unk> <unk> <unk> <unk> <unk>, " : : : " <unk> ( , , , , , , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , ", " select " 函数 : " <unk> . poll ( ) " , " epoll . poll ( ) " , " kqueue . control ( ) " , " poll . poll ( ) " , " select ( ) " ;
it is now deprecated, 它 现在 是 弃用, 此 行为 现在 已 被 弃用
each instance of a concrete class has one attribute for each child <unk> of the type as defined in the grammar, 每个 类 实例 的 类 实例 都 有 每个 每个 每个 每个 每个 的 每个 的 每个 类型 的 定义 的 的, 每个 具体 类 的 实例 对 它 每个 子 节点 都 有 一个 属性 ， 对应 类型 如 <unk> 中 所 定义
then python will be started with the " v" option, python 将 " " " " " 选项, 然后 python 将 以 " v " 选项 启动
[2] a string literal appearing as the first statement in the function body is transformed into the function's <unk> attribute and therefore the function's docstring ., 根据 一个 字符串 中 的 字符串 ， " " " " " " " " " " " " " " " 属性 的 的 字符串, [ 2 ] 作为 函数 体 的 <unk> 语句 出现 的 字符串 字 面值 会 被 转换 为 函数 的 " __ doc __ " 属性 ， 也 就是 该 函数 的 <unk>
set turtle shape to shape with given name or, if name is not given, return name of current shape, 设置 海龟 给定 的 给定 的 的 的 ， 如果 名称 为 名称 的 名称 ， 则 返回 返回 当前 名称 的 名称, 设置 海龟 形状 为 name 指定 的 形状 名 ， 如 未指定 形状 <unk> 返回 当前 的 形状 名
(contributed by tal einat in bpo <unk>, （ 由 tal einat 在 bpo <unk> 中 贡献 。 ）, （ 由 tal einat 在 bpo <unk> 中 贡献 。 ）
2to3 is available in the standard library as <unk> a <unk> entry point is provided as <unk>, 在 " <unk> " 标准 的 " <unk> " " " " 的 元组 的 元组, 2to3 包含 在 标准 库中 ， 模块 名为 " lib2to3 " ； 并 提供 一个 独立 入口 点 " tools / scripts / 2to3 "
if set to a non empty string, does not use the new console reader and writer, 如果 设置 为 一个 空 ， ， ， ， 则 新 新 的 新 的, 如果 设 为 一个 非空 字符串 ， 则 不 使用 新 的 控制台 <unk> 和 写入 器
the first step in <unk> a report is to determine whether the problem has already been reported, 第一个 第一个 第一个 第一个 的 <unk> 被 被 移除 的 已 被 被 被, <unk> 是 确认 是否 有 重复 的 报告
due to an <unk> earlier python versions <unk> accepted the following <unk>, 对应 于 一个 python 版本 / python 版本 / python 版本 版本 ” ：, 由于 一个 <unk> ， 之前 的 python 版本 会 错误 地 接受 以下 语法 :
<unk> are objects that describe some attribute of an object, <unk> 是 对象 对象 对象 ， 一些 对象 的 对象, “ 描述符 ” 是 描述 对象 的 某些 属性 的 对象
a higher order function takes one or more functions as input and returns a new function, 一个 一个 函数 的 函数 一个 或 多个 函数 函数 ， 并 返回 一个 新 的 函数, 高阶 函数 接受 一个 或 多个 函数 作为 输入 ， 返回 新 的 函数
close_fds must be true if non empty., 当 必须 为 " null " 则 必须 为, 如果 非空 ， close _ fds 必须 为 true
proxy objects are instances of subclasses of <unk>, 代理 对象 " 对象 " 实例 的 " " " ", 代理 对象 是 " <unk> " 派生类 的 实例
sometimes a c api function expects a pointer to a data type as parameter, probably to write into the corresponding <unk> or if the data is too large to be passed by value, c 一个 c api 函数 函数 函数 一个 指向 类型 的 ， ， " " " " " " " " " " " " " " " " " " " " " " ", 有时候 c 函数 接口 可能 由于 <unk> 某个 地址 写入 值 ， 或者 数据 <unk> 不 适合 作为 值 传递 ， 从而 希望 接收 一个 指针 作为 数据 参数 类型
exceptions are a means of <unk> out of the normal flow of control of a code block in order to handle errors or other exceptional conditions, 异常 是 一个 <unk> 的 的 的 的 的 的 的 的 的 的 ， ， 或者 其他 其他 线程 的 的, 异常 是 中断 代码 块 的 正常 控制 流程 以便 <unk> 或 其他 异常 条件 的 一种 方式
that's because names in the <unk> are not yet available, because the first module is <unk> importing the <unk>, 由于 由于 中 的 的 名称 ， ， ， ， ， 模块 模块 模块 （ 模块 ） ）, 这 是因为 第 1 个 模块 中 的 名称 还 不可 用 ， 因为 第 1 个 模块 正在 <unk> 着 导入 第 2 个 模块
the attack isn't as efficient as the <unk> case but it avoids <unk> parser <unk> that <unk> <unk> nested <unk>, " % " " 只要 与 <unk> 但 但 它 的 “ <unk> ” ， <unk> ” ”, 攻击 <unk> 递归 情况 有效 ， 但 它 避免 触发 禁止 深度 嵌套 实体 的 解析器 <unk>
even if the module name has <unk> out of scope, the module is probably available in <unk>, 如果 模块 模块 名称 名称 ， 模块 模块 模块 ， 在 在 在 <unk> 中 中, 即使 模块 名称 超出 了 作用域 ， 模块 也 可能 在 " sys . modules " 中 可用
"__spec__" is also populated when the "__main__" module is loaded as part of executing a directory, zipfile or other "sys.path" <unk>, " " " " 模块 被 模块 ， " 模块 " " " " " " " " " " " " " " ( ) " 或 其他 其他 的 的, " __ spec __ " 也 会 在 " __ main __ " 模块 作为 执行 某个 目录 ， zip 文件 或 其它 " sys . path " 条 目的 一部分 加载 时 被 填充
in most <unk> the <unk> of the code points are less than <unk> or less than <unk> so a lot of space is <unk> by <unk> bytes, 在 大多数 情况 下 ， 码位 代码 代码 的 码位 的 的 （ 如果 或 为 <unk> ） ， 的 <unk> <unk> 的 的 的 的, 多数 编码 都 小于 <unk> ， 或者 255 ， 所以 很多 空间 都 是 " <unk> "
<unk> means to ensure that the returned string will not look like an integer., " 意味着 " 意味着 " 的 字符串 ， 字符串 不会 不会 异常, " py _ <unk> _ add _ <unk> _ 0 " 表示 确保 返回 的 字符串 看起来 不 像是 一个 整数
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
first, it loads "__exit__()" from the context manager and pushes it onto the stack for later use by <unk>, 根据 ， 它 将 被 上下文 并 并 并 将 使用 " os . <unk> ( ) " 来 使用 的, 首先 ， 它 从 上下文 管理器 加载 " __ exit __ ( ) " 并 将 其 推入 到 堆栈 以供 以后 被 " with _ <unk> _ start " 使用
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
new in version 3.4: the <unk> parameter., 3.4 新版 功能 : the _ <unk> 形参, 3.4 新版 功能 : <unk> 形参
however, two enum members are allowed to have the same value, 但是 ， 两个 枚举 成员 允许 为 具有 相同 的, 但是 ， 允许 两个 枚举 成员 有 相同 的 值
[1] this <unk> occurs because the code that is executed by these operations is not available at the time the module is <unk>, [ 1 ] ， <unk> ， 因为 代码 的 代码 代码 的 代码 的 ， 在 在 其他 情况 下 ， 在 模块, [ 1 ] 出现 这样 的 限制 是 由于 通过 这些 操作 执行 的 代码 在 模块 被 编译 的 时候 并 不可 用
parameters: <unk> positive number, 参数 : " <unk> " 正 正 数值, 参数 : <unk> _ <unk> 正 数值
note that in all cases, any envelope header present in the message is not included in the mapping interface., 请 在 所有 中 中 所有 " 任何 " 中 没有 任何 " " " " " 不 不 存在 的, 还 请 <unk> ， 无论 在 什么 情况 下 ， 消息 当中 的 任何 信封 头字 段 都 不会 包含 在 映射 接口 当中
error handling is done in the same way as defined for the stream readers and <unk>, 错误处理 方案 的 是 与 <unk> 和 的 的 的 的 的 的, 错误处理 通过 与 流式 <unk> 和 写入 器所 定义 的 相同 方式 来 完成
this lets you change color 1, which is usually red, to <unk> or blue or any other color you like, 这 你 你 的 的 ， ， 通常 会 导致 或 其他 任何 其他 其他 的 的 任何 其他 任何, 这 允许 你 将 通常 为 <unk> 的 1 号 颜色 <unk> <unk> 或 <unk> 或者 任何 你 喜欢 的 颜色
referencing the name "a" <unk> is an error (at least until another value is assigned to <unk>, 将 " name " " " " " 的 一个 " 的 " 被 被 被 被 被 视为, <unk> 再 引用 " a " 时会 报错 （ 直到 另 一个 值 被 赋 给 它 ）
create a c callable function (a callback function) from a python callable ., 创建 一个 c 函数 调用 " 从 " 函数 ， 从 从 函数 中 删除 函数, 基于 python callable 创建 一个 c 可 调用函数 （ 回调 函数 ）
added <unk> and <unk> for <unk>, 添加 了 " <unk> " 和 " <unk> " <unk> " <unk> " <unk> ", 增加 了 " <unk> _ <unk> " 和 " <unk> _ <unk> " 作为 " <unk> _ code "
return an event loop object implementing the <unk> interface., 返回 事件 事件 循环 对象 " " " " " 对象, 返回 一个 实现 " <unk> " 接口 的 事件 循环 对象
entries in the week lists are tuples of day numbers and weekday numbers, 周 列表 的 元组 是 数字 数字 和 数字 的 数字, 周 列表 的 元素 是 由 表示 日期 的 数字 和 表示 星期 几 的 数字 组成 的 元组
methods <unk> and <unk> of classes "elementtree" and "element" in the "elementtree" module have been removed, " __ " __ " __ " 和 " 类 和 " 类 " 和 " 模块 " 模块 的 " 模块 " 模块 的 模块, " elementtree " 模块 中 " elementtree " 和 " element " 等 类 的 " <unk> ( ) " 和 " <unk> ( ) " 方法 已 被 移除
the values of <unk> <unk> <unk> <unk> <unk> and <unk> have the same meaning as they do in <unk>, " " " " " " " " " " " " " " " " " " " " " 和 " 与 " 相同 相同 的 " 相同 " 相同 " 相同, " init " 、 " repr " 、 " eq " 、 " order " 、 " <unk> _ hash " 和 " <unk> " 的 值 与 它们 在 " dataclass ( ) " 中 的 含义 相同
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
the <unk> utc is not a <unk> but a <unk> between <unk> and <unk>, " $ " " 是 " <unk> ， 但 是 " <unk> " 和 " <unk> " 和 " <unk> ", 缩写 utc 不是 错误 ， 而是 英语 和 <unk> 之间 的 <unk>
however, it is <unk> to use it to save typing in interactive <unk>, 但是 ， 它 它 在 在 交互式 中 使用 它 在 在, 不过 ， 在 交互式 编译器 中 为了 节省 <unk> 可以 这么 用
return true if its argument is a <unk>, 如果 参数 为 " key _ <unk> ", 如果 参数 是 一个 " pycapsule " 则 返回 true
using arbitrary values for <unk> can lead to invalid or impossible <unk>, 使用 任意 值 值 ， 可以 可以 为 " ' " ' " 或 " ' ", 使用 任意 值 作为 <unk> 可能 导致 无效 或 不 可能 的 结果
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
implements "del <unk> where <unk> is the index into <unk> attribute of the code object., 实现 " tos ( tos ) " " " ， 其中 " " " " 对象 的 对象 的 属性, 实现 " del name " ， 其中 namei 是 代码 对象 的 " co _ names " 属性 的 索引
<unk> the watcher to an event loop., <unk> <unk> 为 事件 事件 事件 事件, 给 一个 事件 循环 绑定 监视器
"wave" read and write wav files, " wave " 读写 wav 格式文件, " wave " 读写 wav 格式文件
a "popen" "creationflags" parameter to specify that a new process will not inherit its <unk> console, 用于 用于 进程 进程 的 新 的 进程 将 不会 " <unk> " 的 ", 指明 一个 新 进程 将 不会 继承 其父 控制台 的 " popen " " creationflags " 形参
<unk> the literal can be preceded by "+" or " " (with no space in <unk> and surrounded by whitespace, <unk> 的 通过 可以 通过 " " " " " " " " " " " " 和 " <unk> ", 该 文字 前 可以 有 " + " 或 " " （ 中间 不能 有 空格 ） ， <unk> 可以 有 空格
abc for classes that provide <unk> and <unk> methods, 对于 " 类 " 的 " <unk> " 和 " <unk> " 和 " 方法, 提供 了 " __ aiter __ " 和 " __ <unk> __ " 方法 的 抽象 基类
bit fields in structures and unions, 结构 体 和 联合 联合 联合 联合, 结构 体 和 联合 中 的 位域
the <unk> package is a reduced size python environment intended for use on <unk> <unk> and build systems that do not have a system wide install of python, <unk> 是 包是 是 一个 python python 的 python ， 在 在 上 使用 上 ， 在 使用 上 ， 在 不 上 的 系统 上, nuget . org 是 一个 <unk> 的 python 环境 ， 用于 在 没有 全局 安装 python 的 系统 的 持续 集成 和 构建
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
for example, when a destructor raises an exception or during garbage collection <unk>, 例如 ， 当 一个 异常 时 引发 引发 异常 或 引发 引发 引发 " 异常, 例如 ， 当 一个 <unk> 构器 在 垃圾 回收 时 ( " gc . <unk> ( ) " ) 所 引发 的 异常
more about this later., 更 多 的 的, 细节 将 稍后 说明
version indicates the file format., " 文件 " 文件 文件, version 指明 文件格式 的 版本
the result is "true" if the string is the name of one of the object's attributes, "false" if not, 结果 是 字符串 字符串 的 ， 则 如果 ， 则 如果 " ， 则 " " ", 如果 字符串 是 对象 的 属性 之一 的 名称 ， 则 返回 " true " ， 否则 返回 " false "
"urllib.request" for opening and reading urls, " urllib " 读写 " 读写 的 读写, " urllib . request " 打开 和 读取 url
see the python <unk> guide for details., 请参阅 python python for " for " for ", 请参阅 python 开发者 指南 了解 详情
example of an <unk> cache for static web <unk>, 一个 例子 的 的 问题 的 的 的 问题, 静态 web 内容 的 lru 缓存 示例 :
for example, to support arbitrary <unk> you could implement default like this:, 例如 ， " ctypes 支持 的 ， 你 可以 这样 这样 的 :, 比如说 ， 为了 支持 任意 迭代 器 ， 你 可以 像 这样 实现 默认设置 :
zip : zip file <unk> compressed files works only if the corresponding module is available)., zip zip zip 文件 文件 ， 则 文件 ， 则 模块 模块 ， 则 模块, zip : zip 文件 （ 只有 在 相应 模块 可用 时 才能 解包 压缩文件 ）
all function, type and macro definitions needed to use the python/c api are included in your code by the following line:, 所有 " 类型 " 类型 与 " 定义 定义 ， 使用 " api " 模块 提供 了 以下 代码 的 代码, 使用 python / c api 所 需要 的 全部 函数 、 类型 和 宏 定义 可 通过 下面 这 行 语句 包含 到 你 的 代码 <unk> ：
mailcap entries can contain named parameters like <unk> which will be replaced by the value of the parameter named <unk>, " 条目 " 可以 包含 " " " " " " " " " " " " " " " " " " " " " " " " " ", mailcap 条目 可以 包含 形 如 " % { foo } " 的 命名 形参 ， 它 将 由 名为 ' foo ' 的 形参 的 值 所 替换
iterator an object representing a stream of data, 迭代 器 一个 一个 的 的 的, iterator 迭代 器 用来 表示 <unk> 数据流 的 对象
in that case, check what address you should be using for a domain socket it's system dependent, 请 ， 检查 检查 ， ， 你 应当 使用 套 接字 接字 的 的, 在 这种 情况 下 ， 请 检查 你 应当 <unk> 套 接字 所 使用 的 地址 — — 它 依赖于 具体 的 系统
if you don't want the default to be shared between subsequent calls, you can write the function like this instead:, 如果 你 想要 指定 的 的 ， ， ， 你 可以 你 可以 通过 此 函数, 如果 你 不 想要 在 后续 调用 之间 共享 默认值 ， 你 可以 这样 写 这个 函数 :
the <unk> is an html version of the file built from the contents of the <unk> directory <unk> which contains all <unk> changes to python for the current <unk>, " 是 " 是 一个 " 的 " 的 " 的 " 的 " 的 " 的 所有 的 所有 的 的 的, 这个 “ 更新 日志 ” 是 <unk> / <unk> . d 目录 下 文件 构建 的 html 版本 ， 它 包含 了 对 当前 python 版本 进行 的 所有 重要 的 更改
this <unk> directories with a common name, such as <unk> <unk> <unk> valid modules that occur later on the module search path, 此 与 " <unk> " 的 的 的 （ 例如 " <unk> " " " 模块 的 的 模块 的 模块 的 模块 的 模块 的 模块 的 模块, 这样 可以 防止 具有 通常 名称 例如 " string " 的 目录 在 <unk> 中 隐藏 稍后 在 模块 搜索 路径 上 出现 的 有效 模块
you can now feed this object with bytes like objects <unk> <unk> using the "update()" method, 你 可以 现在 可以 通过 " bytes " 对象 " 对象 " 对象 " 对象 " 方法 的 方法, 你 可以 使用 " update ( ) " 方法 向 这个 对象 输入 字节 类 对象 ( 通常 是 " bytes " )
remove all elements from the deque leaving it with length 0., 从 中 中 的 元素 ， ， 它会 将 其, 移除 所有 元素 ， 使 其 长度 为 0 .
if the operand is a zero then <unk> <unk> is returned and the <unk> flag is raised, 如果 <unk> 为 一个 ， 则 返回 " true " ， 返回 " true " ， " " " ", 如果 运算 数为 零 将 返回 " decimal ( ' infinity ' ) " 并且 产生 the " <unk> " 标志
this operation is identical to the <unk> method, except that all <unk> signal, 这 操作 于 " <unk> " " " " " " <unk> " <unk> " <unk> ", 除了 所有 nan 信号 之外 ， 此 操作 与 " compare ( ) " 方法 相同
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
for example, to set the first weekday to <unk>, 例如 ， 要 设置 设置 为 " 的 ", 例如 ， 设置 <unk> 的 第一天 为 星期天
compiled struct objects support the following methods and attributes:, " ctypes " 对象 支持 支持 方法 方法 方法 ：, 已 编译 的 struct 对象 支持 以下 方法 和 属性 ：
for full details about the dialect and formatting parameters, see section <unk> and formatting parameters., 对于 完整 的 的 的 ， ， 和 和 更 多 细节 和 更 多 细节 和 更, 有关 变种 和 格式 设置 参数 的 完整 详细信息 ， 请 参见 变种 与 格式 参数 部分
it only supports the base64 standard <unk> and it adds newlines every <unk> characters as per rfc 2045, 它 只 支持 标准 标准 标准 的 ， 它 它 它 被 视为 ， 所以 字符 被 视为, 旧 接口 只 支持 标准 的 base64 字母表 ， 并且 按照 rfc 2045 的 规范 每 <unk> 个字符 增加 一个 换行符
the "global" statement must precede all uses of the name., " global " 语句 必须 必须 所有 的 的, " global " 语句 必须 位于 所有 对 其 所 指定 名称 的 使用 之前
return a copy of the decimal instance <unk>, 返回 " a _ <unk> ( ) " 的 的, 返回 decimal 实例 num 的 一个 副本
args and kwargs are as passed in to <unk>, args 和 解码器 传递 给 传递 给 传递 传递 传递 传递, args 和 kwargs 与 传给 " vformat ( ) " 的 一样
if the coroutine has completed successfully or was cancelled, this returns an empty list, 如果 协程 已经 被 或 或 ， 则 将 返回 " none " ， 则 返回 空 列表, 如果 协程 已 成功 完成 或 被 取消 ， 这 将 返回 一个 空 列表
deprecated since version 3.8, will be removed in version 3.10: the loop parameter., 3.8 since version 3.8 will be removed in version 3.10 :, deprecated since version 3.8 , will be removed in version 3.10 : loop 形参
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
module "logging.handlers" useful handlers included with the logging module., 模块 " logging . handlers " 日志 记录 模块 附带 的 处理程序, " logging . handlers " 模块 日志 记录 模块 附带 的 有用 处理器
returns the result of left shifting o1 by o2 on success, or "null" on failure, 返回 o1 左移 o2 o2 的 结果 结果 ， 如果 失败 ， 返回 " null ", 返回 o1 左移 o2 个 比特 后 的 结果 ， 如果 失败 ， 返回 " null "
if an exception occurs during execution of the try clause, the rest of the clause is skipped, 如果 在 异常 发生 发生 时 ， 则 会 引发 " 子句 " 子句 的 异常, 如果 在 执行 try 子句 时 发生 了 异常 ， 则 跳 过 该 子句 中 剩下 的 部分
while the python language reference describes the exact syntax and semantics of the python language, this library reference manual describes the standard library that is distributed with python, 虽然 python 语言 的 python api 的 python 和 python 的 python 库 的 python api ， 参考 api python 解释器, python 语言 参考 描述 了 python 语言 的 具体 语法 和 语义 ， <unk> 库 参考 则 介绍 了 与 python <unk> 发行 的 标准 库
the deallocator <unk> <unk> should call this for the object before any of the fields used by the "tp_traverse" handler become invalid., " <unk> _ <unk> ( ) " " 调用 调用 调用 对象 的 任何 <unk> 的 的 的 的 的 的 的 的 的, 释放器 ( " tp _ dealloc " 句柄 ) 应当 在 " tp _ traverse " 句柄 所 使用 的 任何 字 段 失效 之前 为 对象 调用 此 函数
additionally, maximum character width can be suggested, 将 字符 字符 的 的 可以 可以 被, 此外 ， 还 可以 设置 建议 的 最大 字符 width
the "pprint" module provides a capability to <unk> <unk> arbitrary python data structures in a form which can be used as input to the interpreter, " logging " 模块 提供 了 一个 " 的 " 的 " 的 " 的 " 的 " 的 " 对象 ， 可以 被 用来, " pprint " 模块 提供 了 “ 美化 打印 ” 任意 python 数据结构 的 功能 ， 这种 美化 形式 可用 <unk> 解释器 的 输入
porting to python 2.4, 移植 到 python 2.4, 移植 到 python 2.4
this is used by <unk> to break the string into either literal text, or replacement fields., 由 " <unk> " ' " 字符串 字符串 字符串 字符串 字符串 或 字符串 或 字符串, 它会 被 " vformat ( ) " 用来 将 字符串 分解 为 文本 字 面值 或 替换 字 段
tests whether the second value on the stack is an exception matching <unk> and <unk> if it is not, 如果 第二个 的 的 <unk> ， ， " " " " ， " ， " " " " " " ", 检测 堆栈 中 的 第二个 值 是否 为 匹配 tos 的 异常 ， 如果 不是 则 会 跳转
see pep <unk> for a full description., 请参阅 pep 590 了解 详情, 请参阅 pep <unk> 了解 详情
"wave" read and write wav files, " wave " 读写 wav 格式文件, " wave " 读写 wav 格式文件
return the control character corresponding to the given character (the character bit value is bitwise <unk> with <unk>, 返回 给定 的 的 字符 的 字符 字符 字符 " " " " " " " " " " " " " " " " ", 返回 对应 于 给定 字符 的 控制字符 （ 字符 比特 值会 与 <unk> 进行 按位 与 运算 ）
the following string values are defined and implemented by all standard python <unk>, 以下 字符串 是 由 " 标准 " 标准 标准 的 " 和 " ) " 和 " sys . <unk> ( ) " 和 ", 所有 标准 的 python 编解码器 都 定义 并 实现 了 以下 字符串 值 ：
even when the requested memory is used <unk> for <unk> highly specific purposes, delegating all memory requests to the python memory manager causes the interpreter to have a more <unk> image of its memory <unk> as a whole, 当 当 使用 " 时 ， 当 用于 特定 的 的 ， ， ， ， 将 内存 内存 内存 内存 内存 的 内存 内存 ， 内存 内存 内存 内存 的 内存, 即使 所 请求 的 内存 全部 只 用于 内部 的 、 高度 特定 的 目的 ， 将 所有 的 内存 请求 <unk> python 内存 管理器 能 让 解释器 对 其 内存 占用 的 <unk> 情况 有 更 准确 的 了解
they are free to add additional keyword arguments, but only the ones defined here are used by the python codec <unk>, 它们 在 它们 在 额外 额外 额外 额外 的 额外 ， 只有 在 的 的 的 方法 的 方式 是 通过 的 的 方式, 它们 可以 自由 地 添加 额外 的 关键字 参数 ， 但 只有 在 这里 定义 的 参数 才 会 被 python 编解码器 注册表 所 使用
explicit conversions with <unk> or <unk> do not set the flag., 将 " " " " 或 " 或 " 或者 " ， 则 将 不会 设置, 通过 " from _ float ( ) " 或 " create _ decimal _ from _ float ( ) " 进行 显式 转换 则 不会 设置 旗标
exception raised when non blocking <unk> (or <unk> is called on a "queue" object which is <unk>, 当 非 阻塞 时 时 时 时 时 （ " " ( ) " 时 引发 " " ( ) " 时 返回 " true ", <unk> 的 " queue " 对象 ， 调用 非 阻塞 的 " put ( ) " ( or " put _ nowait ( ) " ) 时 ， 引发 的 异常
each entry in the list must be a string containing the parameter name, an equals sign <unk> <unk> and the parameter's value, 每个 列表 列表 列表 是 一个 字符串 字符串 ， 包含 字符串 ， 包含 一个 " <unk> " <unk> " <unk> " 和 " <unk> ", 列表 中 的 每个 条目 必须 为 包含 形参 名称 的 字符串 、 等于号 ( " ' ' " ) 以及 形参 的 值
here is how to add a calculated field and a fixed width print format:, 这里 如何 如何 添加 了 一个 和 和 的 的 的, 这里 是 如何 添加 一个 计算 <unk> 宽 输出 打印 格式 :
be sure to try the following in a newly started python interpreter, and don't just continue from the session described above:, 通过 要 在 python 中 中 ， python 的 python ， 并 将 从 <unk> 的 的 的, 请 确认 启动 新 的 python 解释器 ， 不要 在 上 一个 环境 中 继续 操作 :
user defined generic types, 用户 定义 的 泛型 类型, 用户 定义 的 泛型 类型
used by queue <unk>, 由 队列 队列 队列, 由 队列 使用者 控制
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
"unittest" unit testing framework, " unittest " 单元测试 框架, " unittest " 单元测试 框架
in unix, there is only one type of library file <unk> which contains code from several object files <unk>, 在 ， 情况 下 ， 只有 " 文件 " 文件 " 的 文件 对象 的 " <unk> " 的 " 的 代码 对象 的 代码, 在 unix 中 ， 只 存在 一种 库 文件 ( " . a " ) ， 它 包含 来自 多个 对象 文件 ( " . o " ) 的 代码
the <unk> factory creates objects that can be passed to the type argument of "argumentparser.add_argument()", " <unk> " ) " 创建 可 可 被 传递 给 类型 类型 的 类型, " <unk> " 工厂 类 用于 创建 可 作为 " argumentparser . add _ argument ( ) " 的 type 参数 传入 的 对象
if turtleshape is a polygon, the <unk> of that polygon is drawn with the newly set <unk>, 如果 <unk> 为 多边形 ， 则 ， 则 会 被 设置 设置 " 设置 ", 如果 <unk> 为 多边形 ， 该 多边形 <unk> 也 以 新 设置 的 画笔 颜色 绘制
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
adding new distribution types, 添加 新 的 类型, 添加 新 的 发布 类型
same as the value of <unk> called on non "null" <unk> values., 与 " time " 的 " 的 " ( ) " 的 的 " " ( ) " 的 的 的, 与 " struct . <unk> ( ) " 调用 非 " null " " format " 的 值 相同
this function <unk> a reference to item and <unk> a reference to an item already in the list at the affected <unk>, 此 函数 会 <unk> 一个 引用 的 引用 引用 并 将 其 在 一个 引用 中 引用 的 引用, 此 函数 会 “ <unk> ” 一个 对 item 的 引用 并 丢弃 一个 对 列表 <unk> 影响 位置 上 的 已有 条 目的 引用
<unk> hour <unk> hour <unk> as a decimal number <unk>, " % . <unk> ( ) , " % 十进制 " 十进制 数 01 十进制 数 的 小时 小时, " % h " 十进制 数 [ 00 , 23 ] 表示 的 小时 （ 24 小时 制 ）
specifying anything else results in an error, 在 错误 错误 将 导致 错误, 指定 任何 内容 都 会 导致 错误
a negative timeout argument specifies an unbounded wait, 负值 timeout 参数 指定 一个 一个 等待 等待, 如果 传入 负 的 timeout ， 相当于 <unk> 等待
if base is "0", str is interpreted using the integer literals <unk> in this case, leading <unk> in a non zero decimal number raises a "valueerror", 如果 " 为 " none " ， ， 则 使用 " <unk> " ， 因此 在 <unk> <unk> <unk> <unk> 的 的 <unk> 为 一个, 如果 base 是 " 0 " ， str 将 使用 整型 数字 面值 定义 来 解释 ； 在 这种 情况 下 ， 一个 非零 的 十进制 <unk> 的 前导 零会 引发 一个 " valueerror "
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
the number does not usually represent a number of bytes in the underlying binary <unk>, 数字 不 不 表示 的 的 二进制 的 的 的 数量, 该 数字 通常 并 不 代表 下层 二进制 存储 中 对应 的 字节数
if allow_nan is true, their <unk> equivalents <unk> "infinity", " <unk> will be used., 如果 allow 为 " true " ， 则 " " " " " " " " " " " " " " " ", 如果 allow _ nan 是 true ， 则 使用 它们 的 <unk> 等价 形式 （ " nan " 、 " infinity " 和 " infinity " ）
the following snippet gets a copy of the current context and prints all variables and their values that are set in it:, 以下 是 以下 当前 上下文 上下文 上下文 上下文 和 所有 的 变量 的 值, 以下 代码 片段 会 获取 当前 上下文 的 拷贝 <unk> 设置 到 其中 的 所有 变量 及其 值 :
you can register new formats or provide your own <unk> for any existing formats, by using <unk>, 你 可以 通过 " asyncio . get _ get ( ) " 或 新 的 的 的 " 来 ( ) " 来 使用 的 函数 来 使用 " 函数 ( ) " 来 使用 的 函数, 你 可以 通过 使用 " register _ archive _ format ( ) " 注册 新 的 格式 或 为 任何 现有 格式 提供 你 自己 的 归档 器
the rounding mode of the context is used, " context " 的 的, 上下文 的 舍入 模式 将 被 使用
the "xml.etree.elementtree" module provides a new function <unk> that implements <unk> 2.0, " multiprocessing " 模块 提供 了 一个 新 的 函数 " <unk> ( ) " 函数 的 实现, " xml . etree . elementtree " 模块 提供 了 实现 <unk> 2.0 的 新 函数 " <unk> xml . etree . elementtree . <unk> ( ) "
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
<unk> mathematical functions for complex numbers, " <unk> " 数学 函数 函数, " <unk> " 关于 复数 的 数学 函数
key is an already open key, or one of the predefined hkey_ constants., key 为 某个 已经 打开 的 键 ， 或者 预定 义 的 hkey _ 常量 之一, key 为 某个 已经 打开 的 键 ， 或者 预定 义 的 hkey _ 常量 之一
base class for creating <unk> constants that can be combined using the bitwise operations without <unk> their "flag" <unk>, 用于 用于 创建 " 的 . get _ <unk> ( ) " ， 可以 使用 的 的 操作 ， 操作 操作 的 操作, 此 基类 用于 创建 枚举 常量 可 使用 按位 运算符 进行 组合 而 不会 丢失 其 " flag " 成员 <unk> 的 枚举 常量
the callback is called with the future object as its only argument., " callback _ args ( ) " 对象 的 对象 被 调用 对象, 调用 callback 时 ， future 对象 是 它 的 唯一 参数
however, some type specific optimizations can be present in order to suppress the garbage collector <unk> of simple instances (e.g. dicts containing only atomic keys and <unk>, 但是 ， 有些 类型 的 类型 ， 可以 可以 在 某些 中 的 ， ， ， ， ， 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 的 、 、 、 、 、 、 、 的 、 、 、 、 、 、 、 的, 然而 ， 会 有 一些 特定 类型 的 优化 以便 减少 垃圾 回收 器 在 简单 实例 （ 如 只 含有 原子 性 的 键 和 值 的 字典 ） 上 的 消耗
how are enums <unk>, 如何 是 ？ ？, 各种 枚举 <unk> 区别 ？
keyword argument see argument ., 关键字 参数 参数 参数, keyword argument 关键字 参数 参见 argument
the meta path finder can use any strategy it wants to determine whether it can handle the named module or not., " path " 类 的 可以 使用 任何 使用 " ， 它 可以 使用 它 可以 通过 " 模块 " 模块 来 它 的 模块, 元 路径 查找 器 可 使用 任何 策略 来 确定 它 是否 能 处理 指定 名称 的 模块
if no translation is found, return <unk> if n is <unk> return plural otherwise., 如果 没有 不到 ， 则 返回 " n n n 则 返回 " true " ， 否则 返回 " true ", 如果 未找到 翻译 ， 则 n 为 1 时 返回 <unk> ， 为 其他 <unk> 返回 <unk>
the above string takes 24 bytes compared to the 6 bytes needed for an ascii representation, " 字符串 " 用于 字符串 为 字节 串 的 字节 串 为 ascii 的 的, 上面 的 字符串 <unk> 24 bytes <unk> to the 6 bytes <unk> for an ascii <unk>
if optional members is given, it must be a subset of the list returned by <unk>, 如果 可 选 的 的 ， ， 它 必须 是 由 返回 的 " 列表 _ fast ( ) " 返回 的 列表, 如果 给定 了 可选 的 <unk> ， 则 它 必须 为 " getmembers ( ) " 所 返回 的 列表 的 一个 子集
there is new syntax ": " that assigns values to variables as part of a larger expression, 对于 新 的 语法 ， ， " 变量 变量 变量 变量 的 的, 新增 的 语法 " : " 可 在 表达式 内部 为 变量 赋值
print a brief description of how the "argumentparser" should be invoked on the command line, 打印 的 的 的 ， 或者 在 命令行 命令行, 打印 <unk> 简短 描述 ， 说明 应当 如何 在 命令行 中 发起 调用 " argumentparser "
convert the color from <unk> coordinates to rgb coordinates., 将 从 rgb 从 rgb 到 " <unk> 到, 把 颜色 从 <unk> 值 转为 rgb 值
<unk> can be configured using an environment variable., " 可以 使用 " py _ tailmatch ( ) " 来 使用 的, " <unk> " 可 使用 环境变量 进行 配置
the "lib2to3" module may be removed from the standard library in a future python version, 该 模块 的 被 在 未来 中 的 python 中, " lib2to3 " 模块 可能 会 在 未来 的 python 版本 中 被 <unk> 标准 库
the primary api method, 调用 的 api 方法 方法, <unk> 的 api 方法
for example, in the python <unk>, 例如 python 3.7 . 5 中, 例如 在 python 解释器 中 输入 :
the tag values are strings, with these <unk>, 该 值 是 使用 " <unk> " 的 ", tag 值为 字符串 ， 其 含义 如下 ：
"ctypes" allows creating c callable function pointers from python callables, " ctypes " 允许 " 创建 从 python 的 的 函数 函数, " ctypes " 允许 创建 一个 指向 python 可 调用 对象 的 c 函数
the abstract grammar is currently defined as follows:, 抽象 的 的 是 " 定义 定义 如下 如下 :, 抽象 <unk> 目前 定义 如下
<unk> is a windows specific ide, " 是 " 是 windows windows 的, <unk> 是 一个 windows 专属 的 ide
if replace is "false" (the default) the header is moved to the end of the list of headers, 如果 未 为 为 " false " ， 则 会 将 被 为 最后 末尾 末尾, 如果 replace 为 " false " （ 默认值 ） ， <unk> 字 段 会 被 移动 到 所有 头字 段 的 末尾
if mode is not specified, "'a'" is used, 如果 mode 不 为 " 则 " " ", 如果 未指定 mode ， 则 会 使用 " ' a ' "
keyword parameters are also referred to as named parameters., 关键字 参数 也 会 被 作为 命名 命名, 关键 字形 参 也 被 称为 命名 形参
a semaphore manages an atomic counter representing the number of "release()" calls <unk> the number of "acquire()" calls, plus an initial value, 一个 简单 的 的 的 的 的 ， ， " " ( ) " 的 的 的 的 的 的 的 值 ， 一个 一个 数值 的 值, 信号量 对象 管理 一个 原子 性 的 计数器 ， 代表 " release ( ) " 方法 的 调用 次数 减去 " acquire ( ) " 的 调用 次数 再 加上 一个 <unk>
<unk> "%z" time zone name <unk> string if <unk> utc, <unk> <unk> the object is <unk>, " ' " ' " ' " ' " ' " ' ' ' ' ' ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", <unk> " % z " 时 区 名称 （ 如果 对象 为 简单 型 则 为 空 ( 空 ) , utc , <unk> ( 6 ) 字符串 ）
the new, optional <unk> element is a callable with a <unk> <unk> signature, 元组 的 的 " 是 一个 " 的 " ， " 调用 " 调用 " 调用 " 调用 " 调用 ", 新增 的 <unk> 可 选 元素 是 签名 为 " ( obj , state ) " 的 可 调用 对象
you can call the "__next__()" method using the "next()" built in function; this example shows how it all <unk>, 你 可以 通过 方法 的 " __ ( ) " 方法 的 的 ， 这 意味着 这 一点, 你 可以 使用 " next ( ) " 内置 函数 来 调用 " __ next __ ( ) " 方法 ； 这个 例子 显示 了 它 的 运作 方式 :
it defaults to "none", in which case filename is opened to provide a file object., 它 默认 为 " none " ， " " " " 文件 对象 的 文件 对象, 当 filename 是 一个 文件 对象 时 ， 它 的 默认值 是 " none "
return the exception of the task., 返回 异常 的 异常, 返回 task 对象 的 异常
the <unk> module provides utilities upon which the python read <unk> print loop can be <unk> as is done in the "code" module, " logging . 模块 " 模块 提供 了 python 的 的 ， " " " " " " " " 模块 " " " 模块 " 模块, " <unk> " 模块 提供 了 可以 模拟 python 读取 执行 打印 循环 的 实用程序 ， 就 像 在 " code " 模块 中 一样
equality comparison across these types results in <unk> and ordering comparison across these types raises "typeerror"., 通常 的 的 比较 类型 的 比较 和 和 <unk> 的 的 ， 这些 类型 类型, 以上 对象 的 跨 类型 一致性 比较 结果 将 是 不 相等 ， 跨 类型 次序 比较 将 引发 " typeerror "
module an object that serves as an <unk> unit of python code, 模块 一个 对象 ， 作为 一个 <unk> 的 的 的 对象, module 模块 此 对象 是 python 代码 的 一种 组织 单位
if an object containing an unsupported type was marshalled with <unk> "load()" will <unk> "none" for the <unk> type., 如果 一个 包含 一个 一个 类型 的 类型 的 " " " " " ， " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 如果 通过 " dump ( ) " marshal 了 一个 包含 不 受 支持 类型 的 对象 ， " load ( ) " 将 为 不可 marshal 的 类型 替换 " none "
the latter technique also adds some extra methods that may not be found in hand written or built in named <unk>, 在 还 还 还 有 一些 一些 一些 的 的 的 方式 是 内置 内置 内置 " " ", 后 一种 方式 还会 添加 一些 手工 编写 或 内置 具名 元组 所 没有 的 额外 方法
more will likely be defined in future versions of python, 更 将 将 被 python 版本 中 的 python 版本, 未来 的 python 版本 中 还 将 定义 更 多 此类 名称
transports that can send data <unk> and unix <unk> pipes, etc), 传输 可以 可以 <unk> <unk> 和 unix 和 <unk> <unk>, 传输 可以 <unk> ( tcp 和 unix 链接 ， 管道 等 )
this context manager is reentrant., 该 上下文 管理器 是 reentrant, 该 上下文 管理器 是 reentrant
encode the contents of the input file and write the resulting quoted printable data to the output file, 将 输入 文件 文件 并 写入 写入 文件 的 文件 写入 文件, 编码 input 文件 的 内容 并 将 转换 后 可 打印 的 数据 结果 写入 output 文件
this is the basic mechanism controlling the <unk> of logging output., 这是 " logging . <unk> " ， " 的 日志 记录 的 的, 这是 控制 日志 记录 输出 详细 程度 的 基本 机制
the initial value before reading any headers is "none"., 在 之前 的 被 任何 为 " ' " ' " none ", 在 读取 任何 文件 头 信息 前 ， <unk> 为 " none "
however, mailcap files are supported on most unix <unk>, 但是 ， 在 文件 平台 上 平台 平台 上 支持, 不过 ， mailcap 文件 在 大多数 unix 系统 上 都 受到 支持
"b" ("int") <unk> convert a plain c <unk> to a python integer object., " " " " " " " [ ] " " 一个 c " c " long long long long long long python 整型 转化成 一个 python 整型 转化成, " b " ( " int " ) [ char ] 将 一个 c " char " 字符 型 转化成 python 整型 对象
on windows, the default event loop "proactoreventloop" supports <unk> whereas <unk> does not., 在 windows 上 ， 默认 事件 循环 循环 " " " " " " " " " " " " ", 在 windows 上 ， 默认 的 事件 循环 " proactoreventloop " 支持 子 进程 ， 而 " <unk> " 则 不 支持
<unk> dialect with name, " email " 的 " :, 将 name 与 dialect 关联 起来
for integer presentation types <unk> <unk> <unk> and <unk> underscores will be inserted every 4 digits, 对于 整数 的 " ， " 类型 " , " , " , " , " , " , " , " ) " 将 将 为 " ' \ n ", 对于 整数 表示 类型 " ' b ' " , " ' o ' " , " ' x ' " 和 " ' x ' " ， 将 为 每 4 个 数位 插入 一个 下划线
now let's <unk> we want to store <unk> objects not in iso representation, but as a unix <unk>, 现在 我们 我们 我们 我们 " " " " " " " " 对象 的 的 的 ， 但 在 一个 <unk>, 现在 假设 我们 想要 存储 " datetime . datetime " 对象 ， 但 不是 表示 为 iso 格式 ， 而是 表示 为 unix 时间 戳
this constructor should always be called with keyword arguments, 此 函数 应当 应当 为 参数 参数 参数 参数, 调用 这个 构造函数 时 ， 必需 带有 关键字 参数
for example, the static type checker did not report an error when assigning "a" to "s" even though "s" was declared to be of type "str" and receives an "int" value at <unk>, 例如 ， 静态 类型 类型 ， " any " 类型 ， 当 不会 被 用来 ， 当 尝试 的 的 ， ， " " " " " " " " " " " " " " " " " " " " " " ", 例如 ， 当 把 " a " 赋值 给 " s " 时 ， 即使 " s " 被 声明 为 " str " 类型 ， 在 运行 时 接收 到 的 是 " int " 值 ， 静态 类型 检查 器 也 不会 报错
if the syntax " expression" appears in the function call, "expression" must evaluate to a mapping , the contents of which are treated as additional keyword arguments, 如果 在 " 中 中 ， " 函数 中 的 函数 ， 必须 必须 为 一个 ， ， ， ， ， 该 对象 的 的 内容 的 内容, 如果 函数调用 中 出现 了 " expression " 句法 ， " expression " 必须 求值 为 一个 mapping ， 其 内容 会 被 当作 是 额外 的 关键字 参数
see also the <unk> note on <unk>, 请参阅 请参阅 " <unk> <unk> <unk> <unk> <unk> <unk>, 另 请参阅 " zoneinfo . key " 中 的 <unk> 说明
<unk> to <unk> to an internal or external object., " <unk> . <unk> " 到 " 或 " 或 " 对象 的 对象, 无法 解析 为 内部 或 外部 对象
with this class, an abstract base class can be created by simply <unk> from "abc" avoiding sometimes confusing metaclass <unk> for example:, 使用 此 方法 可 一个 基类 基类 ， 可以 通过 " " " " " " " " " " " " " " " " " " " " ", 抽象 基类 可以 通过 从 " abc " 派生 来 简单 地 创建 ， 这 就 避免 了 在 某些 情况 下会 令人 混淆 的 元类 用法 ， 例如 ：
attempts to parse a date according to the rules in rfc <unk>, 将 <unk> 以 <unk> 的 的 ， 以 rfc rfc rfc, 尝试 根据 rfc <unk> 的 规则 解析 一个 日期
return the debugging flags currently set., 返回 当前 的 的 的, 返回 当前 调试 标识 位
falling off the end of a function also returns "none"., 如果 指定 了 一个 函数 ， 返回 " none ", 函数 执行 <unk> 退出 也 会 返回 " none "
you can get python from <unk>, 你 可以 python " python . org " python python, 你 可以 从 <unk> 获取 、 安装 及 使用 各种 版本 的 python
when a coroutine is wrapped into a task with functions like <unk> the coroutine is automatically scheduled to run <unk>, 当 一个 协程 被 被 被 函数 函数 会 被 函数 的 函数 会 被 被 被 被 被 被 被 被 被 被 被 调用, 当 一个 协程 通过 " asyncio . create _ task ( ) " 等 函数 被 打包 为 一个 任务 ， 该 协程 将 自动 排入 <unk> 准备 立即 运行 :
depending on the platform, "multiprocessing" supports three ways to start a process, 依据 上 的 <unk> " <unk> . <unk> " 来 获取 一个 的, 根据 不同 的 平台 ， " multiprocessing " 支持 三种 启动 进程 的 方法
optional fp is a file like object to print the output to, 可选 的 文件 是 一个 文件 对象 文件 对象 的 的 的, 可选项 fp 是 一个 作为 打印输出 目标 的 文件 类 对象
there is no limit for the length of integer literals <unk> from what can be stored in available memory., 对于 没有 的 的 的 的 的 的 的 ， 可以 在 在 在 中 中, 整型 数字 面值 的 长度 没有 限制 ， 能 一直 <unk> <unk> <unk> <unk>
a generic version of <unk>, " collections . abc . <unk> " 的 泛型 版本, " contextlib . <unk> " 的 泛型 版本
the name of the type as mentioned in the previous <unk> this will appear in various <unk> almost entirely for <unk> purposes, 本章 描述 的 的 的 的 的 的 的 的 将 在 " <unk> " 中 的 的 的, 类型 的 名字 上 一章 提到 过 的 ， 会 出现 在 很多 地方 ， 几乎 <unk> 为了 诊断 目的
when a "datetime" object is passed in response to a "datetime" method, <unk> is the same object as self, 当 一个 " 对象 " 对象 中 被 被 被 被 被 为 " " " " " " " " " " " " " 对象, 当 传入 一个 " datetime " 对象 来 <unk> " datetime " 方法 时 ， " <unk> . tzinfo " 与 self 是 同一 对象
for example we see that we got <unk> as a positional argument, but we don't know what it does, other than by <unk> or by reading the source code, 例如 ， 我们 可以 在 <unk> <unk> <unk> ， ， ， <unk> ， ， 但 它 可以 在 其他 情况 下 ， 它 通过 其他 修改 的 其他 其他 的 的, 比如 我们 可以 知道 " echo " 是 一个 位置 参数 ， 但 我们 除了 <unk> <unk> 或者 看 源代码 ， <unk> 知道 它 是 用来 <unk> 的
previously, a "runtimeerror" was raised., 在 之前 版本 中则 中则 引发 " runtimeerror ", 在 之前 的 版本 中则 会 引发 " runtimeerror "
a ""def"" statement executed inside a function definition defines a local function that can be returned or passed around, " " " " 语句 执行 的 的 函数 定义 定义 定义 的 函数 可以 可以 返回 " 函数 ( ) " 函数, 在 一个 函数 内部 执行 的 " " def " " 语句 会 定义 一个 局部 函数 并 可 被 返回 或 传递
(contributed by <unk> <unk> and serhiy storchaka in bpo <unk>, （ 由 <unk> <unk> 和 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 和 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）
<unk> : exception value, can be "none"., exc : : 异常 异常 可以 可以 为 " none ", exc _ value : 异常 值 ， 可以 是 " none " .
blocks until all items in the queue have been gotten and processed., 将 队列 中 所有 所有 的 所有 的 被 和 处理完毕, 阻塞 至 队列 中 所有 的 元素 都 被 接收 和 处理完毕
using dlls in practice, 使用 实际 的 实际, dll 的 实际 使用
strings are printed without quotes, and a space is inserted between items, so you can format things <unk> like this:, 字符串 是 不可 被 的 ， ， ， ， ， ， ， 可以 可以 像 这样 的 :, 字符串 会 打印 不带 引号 的 内容 , 并且 在 参数 项 之间 会 插入 一个 空格 , 这样 你 就 可以 很 好 的 把 东西 格式化 , 像 这样 :
a subclass of "sslerror" raised when the ssl connection has been terminated <unk>, 当 一个 " 的 " 的 " 被 引发 被 被 被, " sslerror " 的 子类 ， 当 ssl 连接 被 突然 终止 时会 被 引发
you can <unk> either the latest <unk> source or just <unk> a <unk> <unk>, 你 可以 <unk> <unk> <unk> ， <unk> <unk> <unk> <unk> <unk> <unk> <unk> 或 <unk> <unk>, 您 可以 下载 最新 版本 的 源代码 ， 也 可以 直接 提取 最新 的 <unk>
the following list describes the comparison behavior of the most important built in types., 以下 列表 列表 列表 中 最 最 的 的 的 行为, 以下 列表 描述 了 最 主要 内置 类型 的 比较 行为
example for a turtlescreen instance named <unk> and a turtle instance named <unk>, 例如 一个 名为 实例 的 实例 ， " <unk> " 一个 " 实例 " 实例 " 实例 " " " ", 以下 示例 使用 一个 turtlescreen 实例 " screen " 和 一个 turtle 实例 turtle :
this is an instance of "pytypeobject" representing the python "frozenset" type., 这是 一个 " pytypeobject " pytypeobject " pytypeobject python 类型 的 类型, 这是 一个 " pytypeobject " 实例 ， 表示 python " frozenset " 类型
removed <unk> implementations from builtin types <unk> "int", "float", "complex" and few classes from the standard library, 移除 " 从 " 从 " 从 " <unk> " " " " " " " 和 " <unk> " 和 " 的 " 类 的 的 类, 从 内置 类型 " bool " , " int " , " float " , " complex " 和 标准 库 的 一些 <unk> 除了 " __ str __ " 实现
this is the default for <unk>, 这是 默认 的 默认值, 这是 " format _ xz " 的 默认值
"await" "loop.create_connection()" open a tcp connection, " loop . create " 打开 一个 一个 的 的, " await " " loop . create _ connection ( ) " 打开 一个 tcp 链接
the arguments are interpreted as for <unk>, 参数 解释 同 " debug ( ) ", 参数 解释 同 " debug ( ) "
the same is true for derived classes., 与 的 是 是 是 的 的, 对于 子类 来说 同样 是 正确 的
this can be used to raise an exception if invalid json numbers are encountered., 这 可以 被 引发 的 ， 则 会 引发 异常 的 异常, 如果 遇到 无效 的 json 数字 则 可以 使用 它 引发 异常
if <unk> is called, it <unk> removes this overriding level, so that logging output again depends on the effective levels of individual <unk>, 如果 <unk> 为 " <unk> " ， 则 此 此 此 此 ， ， ， 的 输出 的 输出 的 的 的 的 的 的 的, 如果 " logging . disable ( logging . notset ) " 被 调用 ， 它 将 在 实际上 移除 这个 重载 的 级别 ， 因此 日志 记录 输出 会 再次 取决于 单个 日志 记录器 的 有效 级别
tcl and the tk toolkit book by <unk> <unk> the <unk> of <unk>, <unk> 和 <unk> 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, tcl 及 tk 工具集 由 tcl <unk> <unk> <unk> <unk> 的 书籍
additional arguments passed to these functions must be addresses of variables whose type is determined by the format <unk> these are used to store values from the input tuple, 额外 参数 参数 参数 的 变量 变量 变量 的 的 类型 ， 是 通过 " 的 " 的 值 的 值 值 值, 传递 给 这些 函数 的 附加 参数 必须 是 由 格式化 字符串 确定 的 变量 的 地址 ； 这些 都 是 用来 存储 输入 元组 的 值
<unk> dynamic execution of statements is supported by the "exec()" function, " " " " " 语句 的 " " " " " " " " " ", 提示 ： " exec ( ) " 函数 支持 动态 执行 语句
the <unk> of <unk> and <unk> has been removed, " <unk> . <unk> " , " <unk> " 和 " <unk> . <unk> " 已 移除 已 移除 移除 移除, " modules / setup . <unk> " 与 " modules / setup " 两者 的 <unk> 已 被 移除
these are quick <unk> or links for some common tasks., 这些 是 在 python 或 或 或 的 的 的, 这是 一些 常见 任务 的 快速 <unk> 或 相关 链接
brief tour of the standard library part <unk>, 标准 库 简介 库 第二 部分, 标准 库 简介 — — 第二 部分
another common task is to find all the matches for a pattern, and replace them with a different string, 另 一个 的 的 的 的 所有 所有 所有 的 所有 ， ， 字符串 一个 字符串, 另 一个 常见 任务 是 找到 模式 的 所有 匹配 项 ， 并用 不同 的 字符串 替换 它们
an appropriate registry entry is created using this name, " 的 " 的 使用 的 的 属性, 将 使用 此 名称 创建 适当 的 注册表 条目
they have the same attributes as functions and two <unk>, 它们 具有 与 属性 函数 和 函数 ： ： ：, 它们 具有 与 function 对象 相同 的 属性 以及 两个 额外 属性
the key object is created using <unk>, key 对象 对象 为 " 使用 " 的 使用, 键 对象 是 使用 " pyunicode _ <unk> ( key ) " 创建 的
thus, you can also execute your scripts with command line options, see command line documentation., 这样 ， 你 可以 还 你 你 的 你 的 命令行 命令行 命令行 命令行, 因此 ， 您 还 可以 使用 命令行 选项 执行 脚本 ， 请参阅 命令行 文档
event loops use <unk> <unk> an event loop runs one task at a time, 事件 循环 使用 " <unk> _ <unk> ( ) " ， 在 事件 循环 事件 循环 的 一个, 事件 循环 使用 <unk> <unk> 调度 : 一个 事件 循环 每次 运行 一个 task 对象
width <unk> to 3) specifies the number of <unk> per row, width " <unk> ( ) " ， ， ， 指定 了 <unk> 的 的 的 次数, width ( 默认 为 3 ) 用于 规定 每 一行 显示 的 月份 数量
retrieve the file filter currently in <unk>, " 文件 " 文件 中 的 文件 操作, 获取 当前 使用 的 文件 过滤器 .
new documentation format: <unk> using <unk>, 新 文档 : : " <unk> . <unk> _ <unk> ( ) " :, 新 的 文档 格式 ： 使用 <unk> 的 <unk>
the initial call should pass "none" as the state., " parse _ parse ( ) " 作为 " 作为, 初始 调用 应 传入 " none " 作为 state
only use this if <unk> is nonzero, 只有 如果 此 了 " <unk> _ <unk> " ) ", 只有 当 " <unk> " 非 零时 才 使用 它
previous calls to "add_argument()" determine exactly what objects are created and how they are assigned, 在 调用 进程 的 对象 ， 对象 ， 对象 被 被 被 它们 被 它们 它们 被 它们, 之前 对 " add _ argument ( ) " 的 调用 决定 了 哪些 对象 被 创建 以及 它们 如何 被 赋值
see the book for algorithms for converting between proleptic gregorian <unk> and many other calendar <unk>, 请参阅 用于 <unk> 的 的 <unk> ， ， ， 和 其他 <unk> <unk> <unk> 其他 <unk> <unk> <unk>, 请参阅 <unk> 了解 在 预期 <unk> 高利 历 序列 与 许多 其他 历法 系统 之间 进行 转换 的 算法
<unk> is a pure python package with modified subclasses of all <unk> xml parsers that prevent any potentially <unk> operation, " 是 " 是 一个 python python 的 python 的 " <unk> " ， " ， " 的 任何 <unk> 的 的 的, <unk> 是 一个 纯 python 软件包 ， 它 修改 了 所有 标准 库 xml 解析器 的 子类 ， 可以 防止 任何 潜在 的 <unk> 操作
the import machinery calls the <unk> method with a single argument, the module object to execute, " parse _ args ( ) " 方法 ， 该 方法 将 一个 参数 的 对象 的 函数, 导入 机制 调用 " importlib . abc . loader . exec _ module ( ) " 方法 并 传入 一个 参数 来 执行 模块 对象
"distutils" building and installing python modules, " distutils " 构建 和 python 模块, " distutils " 构建 和 安装 python 模块
changed in version 3.6: calling <unk> on a zipfile created with mode "'r'" or a closed zipfile will raise a "valueerror", 在 3.6 版 更改 : " <unk> ( ) " , " ' " ' " ' " 或 " ' " ' " ' " 将 引发 " valueerror ", 在 3.6 版 更改 : 在 使用 " ' r ' " 模式 创建 的 zipfile 或 已 关闭 的 zipfile 上 调用 " <unk> ( ) " 将 引发 " valueerror "
these methods are used instead of the "assert" statement so the test <unk> can accumulate all test results and produce a <unk>, 这些 方法 在 " 语句 " 语句 " 语句 的 的 所有 <unk> ， 所有 所有 都 都 会 被 和, 使用 这些 方法 而 不是 " assert " 语句 是 为了 让 <unk> 者 能 聚合 所有 的 测试 结果 并 产生 结果 报告
if iterable is another array, it must have exactly the same type code; if not, "typeerror" will be raised, 如果 可 迭代 对象 ， 则 它 必须 为 存活 必须 必须 必须 为 真值 ， 则 返回 真值 ， 如果 如果 真值 ， 则 将 " " " ", 如果 iterable 是 另 一个 数组 ， 它 必须 具有 完全相同 的 类型 码 ； 否则 将 引发 " typeerror "
"configparser" configuration file parser, " 配置 . 配置 解析器, " configparser " 配置文件 解析器
the constructor accepts an optional float <unk>, 构造 器 接受 接受 可选 的 " " " ", 该 构造 器 接受 一个 可选 的 浮点数 初始化 器
formerly, it only supported the 2 d case, 在 它 只 只 支持 只 支持 ， 则 会 引发 ", 之前 它 仅 支持 2 d 的 情况
parsing named and numeric character references and converting them to the correct char <unk> these 3 references are all equivalent to <unk>, 解析 命名 和 和 字符 和 和 <unk> ， ， ， 这 <unk> <unk> ， 这 <unk> <unk> <unk> <unk> <unk>, 解析 命名 或 数字 形式 的 字符 引用 ， 并 把 他们 转换 到 正确 的 字符 （ 注意 ： 这 3 <unk> 转义 都 是 " ' > ' " ） :
a field should be considered in the hash if it's used for comparisons, 可 指定 的 应当 被 用作 使用 的 ， 使用 ", 如果 字 段 用于 比较 ， 则 应 在 hash 中 考虑 该字段
the <unk> argument is a list of <unk> <unk> pairs containing the attributes found inside the <unk> <unk> brackets, <unk> 参数 是 是 " <unk> " 的 " 的 " 的 " 的 " 的 " 属性 （ " ） " 的 " 属性 ）, <unk> 参数 是 一个 " ( name , value ) " 形式 的 列表 ， 包含 了 所有 在 标记 的 " < > " 括号 中 找到 的 属性
the "pprint" module added a sort_dicts parameter to several functions, " getpass " 模块 了 了 一个 形参 的 形参 形参, " pprint " 模块 为 一些 函数 添加 了 sort _ dicts 形参
if the optional second argument <unk> is given, it should be the mean of data, 如果 可选 的 参数 参数 ， 则 则 应当 应当 应当 应当 应当 应当 的 的, 如果 给出 了 可选 的 第二个 参数 <unk> ， 它 应当 是 data 的 均值
and some mathematical functions are also available to <unk>, 一些 一些 函数 的 函数 会 被 传递 给 " <unk> . <unk> _ <unk> ", decimal 也 可以 使用 一些 数学 函数 ：
raises an auditing event <unk> with argument <unk>, 引发 一个 审计 事件 " ctypes . <unk> " ， 附带 参数 " key ", 引发 一个 " tempfile . <unk> " 审计 事件 ， 附带 参数 " <unk> "
this calls <unk> in the underlying library, but ignores the return value., 此 方法 会 在 底层 的 ， 但 但 但 将 返回 " 值, 该 函数 会 调用 底层 库中 的 " rl _ <unk> _ text ( ) " ， 但会 忽略 其 返回值
common examples for decorators are <unk> and <unk>, 常见 的 的 <unk> 和 <unk> <unk> 和 <unk>, 装饰 器 的 常见 例子 包括 " <unk> ( ) " 和 " staticmethod ( ) "
if the encoding or errors arguments were specified or the universal_newlines argument was "true", the stream is a text stream, otherwise it is a byte stream, 如果 encoding 或 或 参数 或 参数 参数 参数 参数 " 参数 " ， 则 会 被 为 零 ， 则 返回 " true ", 如果 encoding 或 errors 参数 被 指定 或者 universal _ newlines 参数 为 " true " ， 此流 为 文本 流 ， 否则 为 字节 流
why is it printing <unk> ctypes instances are objects containing a memory block plus some descriptor s accessing the contents of the memory, 为什么 它 是 " 实例 _ 实例 ( ) " 方法 实例 实例 对象 的 一个 内存 的 实例 的 实例 的 内存 块, 为什么 这里 打印 了 " false " ？ ctypes 实例 是 一些 内存 块 加上 一些 用于 访问 这些 内存 块 的 <unk> 组成
"asynchat" asynchronous socket command/response handler, " asynchat " 异步 socket 指令 响应 处理器, " asynchat " 异步 socket 指令 / 响应 处理器
(note that all known installers only use <unk> so <unk> is typically <unk>, 请 注意 在 所有 的 的 " " " " " " " " " " " " " " " " ", （ 请 注意 ， 所有 已知 的 安装程序 都 只 使用 <unk> ， 因此 <unk> 通常 为空 。 ）
<unk> parsing email messages, " 解析 " 解析 解析, " email . parser " : 解析 电子邮件 信息
subclasses are <unk> <unk> <unk> and <unk>, 两个 是 " <unk> " , " <unk> " , " <unk> " 和 " <unk> " 和 " <unk> ", 其子 <unk> " <unk> " , " <unk> " , " <unk> " 和 " <unk> "
the thread executes the function function with the argument list args (which must be a <unk>, 该 函数 函数 函数 函数 参数 参数 参数 必须 为 为 一个 是 一个, 线程 执行 函数 function 并 附带 参数 列表 args ( 必须 是 元组 )
the ncurses man page, <unk> 的 的 的, ncurses 手册 主页 < https : / / linux . <unk> . net / <unk> / 3 / ncurses > ` _
pep <unk> adding a <unk> type written and implemented by <unk>, pep <unk> : <unk> 类型 类型 由 <unk> 撰写 并 实现, pep <unk> 添加 布尔 类型 由 <unk> 撰写 并 实现
the function <unk> calculates the mask for the individual priority <unk>, 函数 函数 " math _ id ( ) " 函数 的 函数 :, 函数 " log _ <unk> ( <unk> ) " 可 计算 单个 优先级 <unk> 的 掩码
changed in version 3.2: added use of the "__index__()" method for non integers., 在 3.2 版 更改 : 添加 了 " __ ( ) " 方法 的 方法, 在 3.2 版 更改 : 增加 了 针对 非 整数 使用 " __ index __ ( ) " 方法 的 特性
deletes the specified key., 指定 指定 的, 删除 指定 的 键
note that <unk> of negative values may be <unk> at first, 注意 注意 的 负值 负值 可能 可能 是 在 的 的, 请 注意 <unk> 数值 进行 标准化 的 结果 可能 会 令人 感到 <unk>
<unk> the object must be an iterable with the same number of items as there are targets in the target list, and the items are <unk> from left to right, to the corresponding <unk>, <unk> 对象 对象 必须 为 相同 的 的 相同 的 相同 的 元素 ， 其中 的 元素 ， 从 从 到 到 到 到 到 到 到 的 的, 否则 ： 该 对象 必须 为 具有 与 目标 列表 相同 项数 的 可 迭代 对象 ， 这些 项 将 按 从 左 至 右 的 顺序 被 赋值 给 对应 的 目标
this is an object that has the same methods as the entire module, but uses the unicode database version 3.2 instead, for applications that require this specific version of the unicode database (such as <unk>, 这 一个 具有 具有 具有 与 " 对象 " 的 " 对象 ， 但 " 数据库 的 数据库 ， 但 数据库 的 数据库 的 的 的 的 的 版本 的 的 版本 的 的, 这是 一个 与 整个 模块 具有 相同 方法 的 对象 ， 但 对于 需要 此 特定 版本 的 unicode 数据库 （ 如 <unk> ） 的 应用程序 ， 则 使用 unicode 数据库 版本 3.2
for example giving a "str" object to the "write()" method of a binary stream will raise a "typeerror", 对于 例子 例子 " " " 对象 " 对象 的 方法 方法 的 方法 将 返回 " " " " ", 例如 将 " str " 对象 给 二进制 流 的 " write ( ) " 方法 会 引发 " typeerror "
if the same attribute name occurs in both an instance and in a class, then attribute lookup <unk> the instance:, 如果 在 属性 中 中 ， 则 " " " " " " " " " " " " 属性 " 属性 " 属性 " 属性, 如果 同样 的 属性 名称 同时 出现 在 实例 和 类 中 ， 则 属性 查找 会 <unk> 实例 :
similar functionality <unk> only text string arguments, but more <unk> towards <unk> is also accessible using the <unk> class method., 类似 " " ( ) " " 只 只 在 字符串 字符串 （ 例如 字符串 ） ） 的 " " " " " " " " " " " " " " " " " ) " 方法, 使用 ： " bytes . <unk> ( ) " 类 方法 也 实现 相似 的 功能 （ 仅 接受 文本 字符串 参数 ， 不 限制 其中 的 空白 字符 ）
if you need to parse untrusted or unauthenticated data see xml vulnerabilities., 如果 you need to untrusted untrusted untrusted unauthenticated see see xml 漏洞 ., 如果 需要 解析 不可 信 或 未经 身份验证 的 数据 ， 请 参见 xml 漏洞
raise "typeerror" if iterable is not actually iterable, 如果 没有 存在 则 则 则 " null " 则 则 " typeerror ", 如果 iterable 实际上 不是 可 迭代 对象 则 引发 " typeerror "
similar to <unk> but return time as nanoseconds., 与 " time ( ) " 相似 ， 但是 返回 纳秒 时间, 与 " clock _ <unk> ( ) " 相似 ， 但 返回 时间 为 纳秒
[2] unlike other languages, special characters such as "\n" have the same meaning with both single <unk> and double <unk> quotes, 类似 与 其他 与 " 特殊 " ， 因此 与 与 与 <unk> 的 的 的 的 的 的 ， ， <unk> <unk>, [ 2 ] 和 其他 语言 不 一样 的 是 , 特殊字符 比如说 " \ n " 在 单引号 ( " ' ... ' " ) 和 双引号 ( " " ... " " ) 里 有 一样 的 意义
return "1" if found, "0" if not found, and " 1" if an error is encountered, 如果 o o " null " ， 则 返回 " 1 " ， 则 返回 " 1 ", 如果 找到 返回 " 1 " ， 如果 未找到 返回 " 0 " ， 如果 遇到 错误 则 返回 " 1 "
when <unk> is true (the default) the keys for dictionaries will be written to the plist in sorted order, otherwise they will be written in the iteration order of the dictionary., 当 " <unk> _ <unk> ( ) " 时 ， 将 被 被 为 为 " ， " ， 则 在 " 的 情况 下 ， 将 将 被 为 <unk>, 当 sort _ keys 为 真值 （ 默认 ） 时 字典 的 键 将 经过 排序 再 写入 plist ， 否则 将 按 字典 的 迭代 顺序 写入
the statement <unk> <unk> <unk> <unk> is an example of tuple packing : the values <unk> <unk> and <unk> are packed together in a tuple, " 语句 " " " " 是 " 的 是 是 是 是 一个 元组 的 元组 的 元组 （ 例如 " <unk> " 和 " <unk> " 和 " <unk> " ) " 是 在 的 元组, 语句 " t <unk> , <unk> , ' <unk> ! ' " 是 元组 打包 的 一个 例子 ： 值 " <unk> " , " <unk> " 和 " ' <unk> ! ' " 被 打包 进 元组
if none of these modules is installed, the <unk> but simple implementation in module "dbm.dumb" will be used, 如果 这些 模块 模块 ， ， ， 但是 ， 但是 ， 模块 中 的 模块 中 的 模块, 如果 未 安装 这些 模块 中 的 任何 一种 ， 则 将 使用 " dbm . dumb " 模块 中 <unk> 但 简单 的 实现
move turtle to the <unk> coordinates <unk> and set its heading to its start <unk> (which depends on the mode, see <unk>, 海龟 海龟 到 " <unk> _ <unk> ( ) " 和 " __ ( ) " 和 " __ ( ) " 和 " __ ( ) " 方法 的 " " " " " 的 " " " ) " 的 ", 海龟 移至 初始 坐标 ( 0 , 0 ) ， 并 设置 朝向 为 初始 方向 ( 由 海龟 模式 确定 ， 参见 " mode ( ) " )
note that lock is a keyword only argument., 请 注意 是 不 是 一个 关键字 参数, 注意 lock 只能 是 命名 参数
this instance of "pytypeobject" represents the python integer type, " pytypeobject " pytypeobject " 类型 的 python 类型 类型 类型, 这个 " pytypeobject " 的 实例 表示 python 的 整数 类型
a maximum of <unk> changes may be <unk>, 由 <unk> 的 的 的 <unk> 被 被, 最高 可以 <unk> 1000 条 操作 记录
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
mapping is any dictionary like object with keys that match the placeholders in the template, 映射 是 " 对象 " 对象 对象 对象 类似 于 " 对象 " 对象 的 的 对象, mapping 为 任意 字典 类 对象 ， 其中 的 键 将 匹配 模板 中 的 占位 符
in this example, file is closed after the "with" statement's suite is finished even if an exception <unk>, 在 这种 情况 下 ， 文件 被 在 " with " ， " ， " 子句 ， 则 会 引发 异常, 在 这个 示例 中 ， file 将 在 " with " 语句 块 执行 完成 之后 被 关闭 即使 是 发生 了 异常 :
if it <unk> returns a <unk> as described above, otherwise "none" is returned., 如果 " <unk> ( ) " 返回 一个 " ， 否则 ， 否则 返回 " none ", 如果 成功 ， 返回 上述 的 命名 元组 ， 否则 返回 " none "
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
<unk> stdout from the child process, 从 进程 进程 进程, 从子 进程 捕获 到 的 标准 输出
also, the attribute names are different for the first two attributes; <unk> names them <unk> and <unk>, 它 属性 属性 的 的 的 的 ， 两个 是 两个 的 名称 ， <unk> <unk> <unk> <unk> <unk> <unk>, 并且 前 两个 属性 的 属性 名称 也 不 一致 ； " os . uname ( ) " 是 将 它们 称为 " <unk> " 和 " <unk> "
the default <unk> returns <unk> of <unk> in the range <unk> <unk> x < 1.0, 默认值 " " ( ( ) " 返回 " " x x x x x x x ) ", 默认 的 " random ( ) " 返回 在 0.0 <unk> x < 1.0 范围 内 2 <unk> ⁵ ³ 的 倍数
therefore, <unk> sorts the list in place, 在 <unk> 中 中 的 的 列表, 因此 ， " list . sort ( ) " 对 列表 进行 了 适当 的 排序
the rules for <unk> a unicode string into a sequence of bytes are called a character encoding , or just an encoding ., " <unk> " <unk> " 字符串 的 字符串 字符串 的 字符串 的 字符 字符 字符 字符 ， 或者 为 一个 整数 的 整数, 将 unicode 字符串 <unk> 字节 序列 的 规则 被 称为 字符 编码 ， 或者 编码
see section path objects for details., 参见 " path " 对象 的 对象, 详情 参见 path 对象
the global namespace for a module is created when the module definition is read <unk> normally, module namespaces also last until the interpreter <unk>, 全局 全局 命名 空间 模块 模块 定义 了 模块 模块 ， 模块 时 ， 模块 模块 模块 ， 也 会 被 执行, 模块 的 全局 命名 空间 在 模块 定义 被 读入 时 创建 ； 通常 ， 模块 命名 空间 也 会 持续 到 解释器 退出
python uses dynamic types, python 使用 的 的 类型, python 使用 动态 类型
return a process safe wrapper object for a ctypes object which uses lock to synchronize access, 返回 一个 " 对象 " 对象 对象 对象 对象 对象 对象 对象 对象 的 对象 对象 的 对象, 将 一个 ctypes 对象 包装 为 进程 安全 的 对象 并 返回 ， 使用 lock 同步 对于 它 的 操作
why does python use indentation for grouping of statements?, 为什么 python 使用 进来 进来 的, 为什么 python 使用 <unk> 进来 分组 语句 ？
return the data associated with pathname, 返回 数据 的 的 的 数据, 返回 与 pathname 相关联 的 数据
exception raised when a specified option is not found in the specified section., 当 指定 选项 时 不 被 选项 时 被 引发 时 将 被 引发, 当 指定 的 选项 未 在 指定 的 <unk> 被 找到 时 引发 的 异常
in earlier versions, the <unk> was <unk> as <unk>, 在 " <unk> " 中 的 " <unk> ( ) " , " ' <unk> ' " ) ", 在 较 早 的 版本 中 ， <unk> 被 硬 编码 为 " ' \ n ' "
the "secrets" module provides access to the most secure source of <unk> that your operating system <unk>, " secrets " 模块 提供 了 访问 最 最 最 的 的 的 的 系统, 通过 " secrets " 模块 可以 访问 你 的 操作系统 所 能 提供 的 最 安全 的 <unk> 来源
importing this module will append site specific paths to the module search path and add a few <unk> unless " <unk> was used, 模块 此 模块 将 模块 搜索 路径 路径 路径 路径 ， 添加 添加 添加 添加 了 " " " " " " " " " ", 导入 此 模块 将会 附加 域 特定 的 路径 到 模块 搜索 路径 并且 添加 一些 内 建 对象 ， 除非 使用 了 " s " 选项
see class and module <unk> for more details., 参见 " 和 " 模块 " 模块 了解 更 多 细节, 查看 class and module <unk> 获取 更 详细 的 说明
<unk> package extension utility, " pkgutil " 包 扩展 工具, " pkgutil " 包 扩展 工具
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
changed in version 3.3: equality comparisons between aware and naive "time" instances don't raise "typeerror"., 在 3.3 版 更改 : the " " " , " notimplementederror " ， 否则 引发 " valueerror ", 在 3.3 版 更改 : 感知 型 和 简单 型 " time " 实例 之间 的 相等 比较 不会 引发 " typeerror "
like <unk> but look the message up in the specified domain ., 类似 于 " <unk> ( ) " 但 但 将 在 整个 中 的 的, 与 " <unk> ( ) " 类似 ， 但 在 指定 的 domain 中 查找 message
the instance's content is kept in a regular string object, which is accessible via the "data" attribute of <unk> instances, 对于 的 是 是 一个 字符串 ， 字符串 字符串 ， 但 " " " " " " " " 属性 " 属性 " 属性, 这个 实例 对象 的 内容 保存 为 一个 正常 字符串 ， 通过 " <unk> " 的 " data " 属性 存取
graphical user interfaces with tk, tk 图形用户界面 gui gui, tk 图形用户界面 ( gui )
note that <unk> is first checked if it is an alias to another name., 请 注意 " <unk> " ， 如果 是 是 一个 " " " " ", 请 注意 如果 <unk> 是 另 一 名称 的 别名 则 会 先 检查 别名
<unk> values behave like integers in other ways <unk> <unk>, " 值 值 : <unk> " <unk> ( ) " 其他 其他 的 的 其他 <unk>, " <unk> " 值 在 其他 方面 的 行为 都 如 你 预期 的 一样 类似 于 整数 :
this method should only be used in low level callback based code., 此 方法 仅 仅 在 基于 " 基于 " 的 的 的, 此 方法 应该 仅 在 低 层级 的 基于 回调 的 代码 中 使用
by default "shutil" provides these <unk>, 默认 默认 为 " 提供 " " " " ", 默认 情况 下 " shutil " 提供 以下 格式 :
given python's familiar name binding rules this might <unk> <unk> but it's actually a fundamental feature of the import system, 给定 的 操作 ， 这 名称 的 的 ， 这 意味着 这 意味着 “ 但 但 但 但 但 但 的 的 的 的, 按照 通常 的 python 名称 绑定 规则 ， 这 看起来 可能 会 令人 <unk> ， 但 它 实际上 是 导入 系统 的 一个 基本 特性
changed in version 3.6.2: the filename parameter accepts a path like object ., 在 3.6 版 更改 : 接受 形参 接受 一个 path like object, 在 3.6 . 2 版 更改 : filename 形参 接受 一个 path like object
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
note, the iteration order of a <unk> is determined by scanning the mappings last to <unk>, 注意 ， 的 元素 的 顺序 是 由 " " " 的 的 的 " 是 " 的 的, 注意 ， 一个 " chainmap ( ) " 的 迭代 顺序 是 通过 扫描 最后 的 映射 来 确定 的 :
the name of this attribute is determined by the "dest" keyword argument of "add_argument()", 此 属性 的 是 由 参数 参数 " 参数 " 参数 的 参数, 该 属性 的 名称 由 " add _ argument ( ) " 的 " dest " 关键字 参数 确定
in this case closefd must be "true" (the default) otherwise an error will be raised., 在 这种 情况 下 必须 必须 为 " true " （ 默认 情况 下 将 引发 " runtimeerror ", 在 此 情况 下 closefd 必须 为 " true " ( 默认值 ) 否则 将会 引发 异常
more <unk> these functions are not called if <unk> is greater than 0 and the module state (as returned by <unk> is "null"., 更 多 的 函数 函数 都 是 " true " ， 则 " " " " " " " " " " " " " " " " " " " " " " " ", 更 准确 <unk> ， 这些 函数 在 " m _ size " 大于 0 并且 模块 状态 （ 即 " <unk> _ getstate ( ) " 的 返回值 ） 为 " null " 时 将 不会 被 调用
this utility method may call "wait()" repeatedly until the predicate is <unk> or until a timeout occurs, 此 方法 会 调用 此 方法 调用 调用 调用 调用 调用 时 ， 直到 调用 " 直到 ( ) ", 这个 实用 方法 会 重复 地 调用 " wait ( ) " 直到 满足 判断 式 或者 发生 超时
the <unk> method in the <unk> class has been removed (it was deprecated since python <unk>, " " . _ " ( ) " 方法 在 " " _ <unk> ( ) " 已 python 已 被 移除 起 已 被 弃用, " html . parser . htmlparser " 类 的 " <unk> ( ) " 方法 已 被 移除 （ 它 自 python 3.4 起 已 被 弃用 ）
in decimal floating point, <unk> + 0.1 + 0.1 <unk> is exactly equal to zero, 实际上 ， <unk> ， <unk> ， <unk> <unk> <unk> ， <unk> <unk> <unk> <unk> <unk>, 在 十进制 浮点数 中 ， " 0.1 + 0.1 + 0.1 <unk> " 恰好 <unk>
search functions are expected to take one argument, being the encoding name in all lower case <unk> and return a <unk> object, 搜索 函数 函数 将 被 传递 一个 一个 参数 ， ， ， ， 所有 的 所有 的 所有 的 所有 <unk> 返回, 搜索 函数 预期 接收 一个 参数 ， 即 全部 以 小写字母 表示 的 编码 名称 ， 并 返回 一个 " <unk> " 对象
<unk> is the password used to <unk> <unk> zip files., " <unk> " 用于 用于 用于 zip zip 的 的, pwd 为 用于 <unk> 已 加密 zip 文件 的 密码
note that lock is a keyword only argument., 请 注意 是 不 是 一个 关键字 参数, 注意 lock 只能 是 命名 参数
determine whether code is in <unk> <unk> for canonical <unk>, 确定 是否 是否 是否 是否 是 <unk> <unk> <unk> <unk> <unk>, 确定 code 是否 属于 <unk> ( 不适 用于 规范 表示 )
if neither matching host nor default entry is available, return "none"., 如果 未指定 ， 则 则 会 默认值 为 " true " ， 返回 " none ", 如果 匹配 的 主机 或 默认 条目 均 不可 用 ， 则 返回 " none "
timeout can either be "none" or a float or int number of seconds to wait for, timeout 可以 是 " none " 或 " float ( ) " 或 为 " 的 数值, timeout 可以 为 " none " ， 也 可以 为 float 或 int 型 数值 表示 的 等待 秒数
if a call with blocking set to "true" would block, return "false" <unk> otherwise, set the lock to locked and return "true"., 如果 调用 调用 进程 设置 " true " ， 则 返回 " false " ， 否则 将 返回 " true " ， 否则 返回 " true ", 如果 调用 时 blocking 设 为 " true " 会 阻塞 ， 并 立即 返回 " false " ； 否则 ， 将 锁 锁定 并 返回 " true "
(contributed by giampaolo <unk> in bpo <unk>, （ 由 giampaolo rodol à 在 bpo <unk> 中 贡献 。 ）, （ 由 giampaolo rodol à 在 bpo <unk> 中 贡献 。 ）
multiple commands may be entered on a single line, separated by <unk>, 多个 可能 可能 可能 在 在 一个 " <unk> " 的 ", 在 一行 中 可以 输入 多个 命令 ， 以 " ; ; " 分隔
"getch()" <unk> the screen and then <unk> for the user to hit a key, displaying the key if <unk> has been called earlier, 请 " <unk> ( ) " 和 用户 用户 的 的 如果 " <unk> ( ) " 如果 " 如果 " " " ( ) " ) ", " getch ( ) " 会 刷新 屏幕 然后 等待 用户 按键 ， 如果 之前 调用 过 " echo ( ) " 还会 显示 所 按 的 键
if no codec is found, a "keyerror" is set and "null" returned., 如果 没有 为 " null " ， 则 返回 " null ", 如果 未找到 任何 编解码器 ， 则 将 设置 " keyerror " 并 返回 " null "
note that in these cases, the <unk> value is <unk> used to compute the initial <unk> and subsequent <unk> would be calculated via the normal interval <unk>, 请 注意 ， 这些 ， ， " " " " " 用于 用于 <unk> 的 的 " <unk> " 和 " <unk> " 的 的, 请 注意 在 这些 情况 下 ， <unk> 值 实际上 会 被 用于 计算 初始 轮换 ， 而 后续 轮换 将会 通过 正常 的 间隔时间 计算 来 得出
this includes standard streams and therefore affects the built in "print()" function as well., 此 包括 标准 和 流 和 内置 内置 内置 内置 函数 内置 函数, 这 包括 标准 流 ， 因而 也 会 影响 内置 的 " print ( ) " 函数
special considerations for <unk>, 特殊 特殊 的 特殊 特殊 ：, 有关 __ main __ 的 特殊 <unk>
<unk> purpose <unk> determine if the re matches at the beginning of the string, <unk> <unk> <unk> <unk> ， 如果 <unk> 的 正则 匹配 的 匹配, 方法 / 属性 目的 " match ( ) " 确定 正则 是否 从 字符串 的 开头 匹配
<unk> is an optional function that will be called with the result of any object literal decoded (a <unk>, " 是 一个 可 选 参数 的 函数 ， 将 被 调用 对象 的 任何 为 " 的 ( ) " 的 的 的, object _ hook 是 一个 可选 的 函数 ， 它会 被 <unk> 用于 每 一个 解码 出 的 对象 字面 量 （ 即 一个 " dict " ）
using a context manager for <unk> logging, 使用 上下文 上下文 管理器 的, 使用 上下文 管理器 进行 <unk> 记录
"overflowerror" is raised if <unk> would be smaller than <unk> or larger than <unk>, 如果 如果 <unk> 是 " <unk> " 或 " " " " " " " " " " ", 如果 <unk> . year 将要 小于 " minyear " 或 大于 " <unk> " 则 会 引发 " overflowerror "
<unk> waiting for i/o completion, " curses . <unk> " / o / o / o, " select " 等待 i / o 完成
however, this can only be done if not passing arguments to the program., 但是 ， 此 方法 将 不会 被 参数 参数, 但是 ， 只有 在 不 传递 任何 参数 给 程序 的 情况 下 才能 这么 做
the <unk> class handles drag and drop events tracking <unk> and <unk> events on the root of the event <unk>, " 类 类 类 的 处理 和 事件 事件 的 事件 循环 和 事件 的 的 事件, <unk> 类 处理 拖放 事件 ， 在 事件 控件 的 根 对象 上 跟踪 <unk> 和 <unk> 事件
a <unk> <unk> indicated with <unk>, " <unk> " " " " " <unk> " <unk> " <unk> " <unk> ", 一个 标记 的 指令 ， 用 " > > " 表示 ，
it will parse out the first word of the declared type, <unk> <unk> primary <unk> it will parse out <unk> or for <unk> it will parse out <unk>, 它 将 将 <unk> 的 的 的 的 的 ， ， ， ， ， ， 将 其 将 其 将 为 " <unk> ( ) " 或 " <unk> ( ) " ), 它会 <unk> 的 类型 的 第一个 单词 ， 比如 “ integer <unk> key ” ， 它会 解析 出 “ integer ” ， 再 比如 “ number ( 10 ) ” ， 它会 解析 出 “ number ”
note that exceptions which occur while calling the "__getitem__()" method will get <unk>, 请 注意 ， 异常 ， " __ ( ) " 方法 的 方法 将 将会 " 将会 ( ) " 方法, 请 注意 在 调用 " __ getitem __ ( ) " 方法 期间 发生 的 异常 将会 被 屏蔽
at this point, you can remove the application name from the registry as a source of event log entries, 此时 ， 你 可以 通过 从 名称 的 名称 名称 名称 名称 的 的 的 的 的, 这时 ， 你 就 可以 从 注册表 中 移除 作为 事件 日志 条目 来源 的 应用 名称
multiple scripts demonstrating different features of the "turtle" module, 多个 日志 " 模块 " 的 的 的, 多个 脚本 文件 ， 演示 " turtle " 模块 的 不同 特性
see the warning for <unk>, 请参阅 请参阅 警告 请参阅, 查看 " <unk> ( ) " 的 警告 信息
the following functions <unk> to the init file and user <unk>, 以下 函数 函数 将 被 写入 的 用户 用户 用户, 下列 函数 与 初始化 文件 和 用户 配置 有关 ：
example of how to read a compressed file:, 如何 gzip 示例 :, 读取 压缩文件 示例 ：
<unk> packages to the package index, " pip 包 包, <unk> <unk> 包 索引
regular packages are traditional packages as they <unk> in python 3.2 and earlier, 正则表达式 包 的 python python python 包 的 python 包, 常规 包是 传统 的 包 类型 ， 它们 在 python 3.2 及 之前 就 已 存在
now that you are about to write <unk> more complex pieces of python, it is a good time to <unk> about coding style, 现在 ， 你 可以 <unk> <unk> <unk> 的 更 复杂 的 的 更 多 的 <unk> <unk> 的, 现在 你 将要 写 更长 ， 更 复杂 的 python 代码 ， 是 时候 <unk> 代码 风格 了
changed in version 3.3: tz now can be <unk>, 在 3.3 版 更改 : 现在 现在 可以 是 " <unk> ", 在 3.3 版 更改 : tz 现在 可以 被 省略
changed in version 3.4: use <unk> ': ')" as default if indent is not "none"., 在 3.4 版 更改 : use " ' _ as _ string ( ) " 如果 没有 参数 为 " none ", 在 3.4 版 更改 : <unk> indent 不是 " none " 时 ， 采用 " ( ' , ' , ' : ' ) " 作为 默认值
there is one constructor method named for each type of hash, 有 一个 方法 方法 方法 的 方法 方法 的 方法, 每种 类型 的 hash 都 有 一个 构造 器 方法
the microsoft store package is a simple installation of python that is suitable for running scripts and packages, and using idle or other development environments, " 包是 " 包 是 python 的 python 的 的 ， 和 和 其他 和 其他 语言 的 其他 其他 其他 其他 其他 的, microsoft store 包是 一个 简单 的 python 安装 ， 适用 于 运行 脚本 和 包 ， 以及 使用 idle 或 其他 开发 环境
module maintainers should produce source <unk> to do so, they run, 模块 的 应该 应该 <unk> <unk> <unk> ， ， 它们 它们, 模块 <unk> 应该 <unk> 源码 包 ； 要 实现 可以 运行
there is a third party interface to the <unk> <unk> <unk>, 有 一个 需要 的 接口 接口 : <unk> <unk>, 还有 一个 适用 于 <unk> <unk> db 的 第三方 接口
return the result of repeating sequence object o count times, or "null" on failure, 成功 对象 返回 结果 对象 o 的 结果 ， 如果 失败 时 返回 " null ", 返回 序列 对象 o 重复 count 次 的 结果 ， 失败 时 返回 " null "
keys passed to <unk> but not found in the cache are ignored., 在 " sys . <unk> ( ) " ， 但 不 不 存在 的 但, 传给 " only _ keys " 但 在 缓存 中 找 不到 的 <unk> 被 忽略
after the last line of the last file has been read, returns the line number of that line., 在 最后 一行 文件 的 一行 一行 ， 则 返回 " true " 行号, 在 最后 一个 文件 的 最后 一行 被 读取 之后 ， 返回 该行 的 行号
the given end point is never part of the generated <unk> <unk> generates 10 values, the legal <unk> for items of a sequence of length 10, 给定 的 末尾 是 <unk> （ 即 的 的 （ 即 的 的 的 的 的 的 ， ， ， 其中 的 的 元素, 给定 的 终止 数值 并 不 在 要 生成 的 序列 里 ； " range ( 10 ) " 会 生成 10 <unk> ， 并且 是 以 合法 的 索引 生成 一个 长度 为 10 的 序列
changed in version 3.1: <unk> doesn't get called on <unk> <unk> <unk> anymore., 在 3.8 版 更改 : <unk> <unk> <unk> on <unk> <unk> <unk> <unk> <unk> <unk> <unk> " <unk> " <unk> " <unk> ", 在 3.1 版 更改 : parse _ constant 不再 调用 ' null ' ， ' true ' ， ' false '
this module provides an interface to the posix calls for tty i/o control, 此 模块 提供 了 一个 接口 的 " posix " i / o, 此 模块 提供 了 针对 tty i / o 控制 的 posix 调用 的 接口
an abstract method to return the source of a module, 一个 方法 方法 返回 一个 的 的 的, 一个 返回 模块 源 的 抽象 方法
unlike normal <unk> augmented assignments evaluate the left hand side before <unk> the right hand side, 与 <unk> <unk> " ， " ， " ， " ， ， ， ， <unk> <unk> 的 <unk>, 不同于 普通 赋值 ， 增强 赋值 会 在 对 右手边 求值 之前 对 <unk> 求值
the return value is a "timedelta" instance equal to the difference between the local time and <unk>, 返回值 是 一个 " true " 的 的 时间 的 时间 时间 时间 时间 时间 时间, 返回值 是 一个 " timedelta " 实例 ， 其值 等于 本地 时间 与 utc 之间 的 时差
in addition, the following methods unpack strings, bytes, and opaque <unk>, 在 ， 以下 方法 方法 和 方法 和 字符串 和 <unk>, 此外 ， 以下 方法 可用 来 解包 字符串 、 字节 串 以及 不 透明 数据 :
<unk> the "setcontext()" function automatically assigns its target to the current thread., 通过 函数 的 函数 函数 将 其 当前 的 的 的, 类似 的 " setcontext ( ) " 会为 当前 上下文 的 目标 自动 赋值
<unk> <unk> code part of the python documentation, describing how to convert code that uses <unk>, <unk> <unk> 代码 代码 代码 <unk> <unk> <unk> 如何 如何 如何 代码 的 代码 的 代码, 升级 optparse 代码 part of the python documentation , <unk> <unk> to convert code that <unk> " optparse " .
when identifying things (such as host <unk> in the <unk> it is often necessary to compare such <unk> for <unk>, 当 执行 时 时 ， 时 ， 在 执行 时 ， 时 ， 时 ， <unk> ， <unk> <unk> <unk> <unk>, 在 标识 因特网 上 的 <unk> （ 例如 主机名 ） ， 经常 需要 比较 这些 标识 是否 （ 相等 ）
the cpython bytecode which this module takes as an input is defined in the file <unk> and used by the compiler and the interpreter., cpython 的 模块 模块 模块 模块 作为 " " " " " 的 " 的 " 模块 中 的 的 的 的, 该 模块 作为 输入 的 cpython 字节 码 在 文件 " include / <unk> . h " 中 定义 ， 并 由 编译器 和 解释器 使用
unary addition and subtraction are <unk> for adding an empty counter or <unk> from an empty <unk>, 一元 的 的 均 为 一个 空 集合 ， 一个 空 或 " " " " " " " " " " " " ", 单目 <unk> （ 一元 操作符 ） 意思 是从 空 计数器 加 或者 减去
base class for warnings about features which are <unk> and expected to be deprecated in the future, but are not deprecated at the <unk>, 对于 模糊 的 的 的 的 的 ， ， ， 将 被 在 ， 但 在 在 的 情况 下 ， 但 不会 在 在, 对于 已 <unk> 并 预计 在 未来 弃用 ， 但 目前 尚未 弃用 的 特性 相关 警告 的 基类
however, this idiom is <unk> as it can give <unk> results when <unk> has a false boolean value, 但是 ， 这个 方法 ， 但 它 可以 在 " <unk> _ <unk> ( ) " 方法 时 ， 当 被 被 视为, 然而 这种 做法 并 不 <unk> ， 因为 当 on _ true 具有 布尔 假值 时 将 会 给出 错误 的 结果
changed in version 3.4: the return type is now "unsigned long" rather than <unk>, 在 3.4 版 更改 : 返回 返回 类型 is now " is " is " ", 在 3.4 版 更改 : the return type is now " unsigned long " <unk> <unk> " long " .
return <unk> <unk> of executing cmd in a <unk>, 返回 " a [ a b [ 1 ] ], 返回 在 shell 中 执行 cmd 产生 的 " ( <unk> , output ) "
this function always succeeds., 此 函数 总是 会 成功 执行, 此 函数 总是 会 成功 执行
here's an example that fails due to this <unk>, 这里 有 一个 例子 的 例子 ， 这 意味着 此 方法, 下面 是 一个 因为 此 限制 而 失败 的 例子 :
the api below differs from textbook heap algorithms in two <unk> <unk> we use zero based indexing, api 的 " <unk> " 的 " ， 两个 两个 " " " " ， ， ， 使用 " 使用 " 基于 " 的, 这个 api 与 <unk> 的 堆 算法 实现 有所不同 ， 具体 区别 有 两 方面 ： （ a ） 我们 使用 了 <unk> 的 索引
the default base is 10, 默认 为 " true ", 默认 的 base 为 10 ， 允许 的 进制 有 0 、 2 <unk>
registry api for unicode encoding error handlers, " api " api 的 unicode 编码 的 错误处理 方案, 用于 unicode 编码 错误 处理程序 的 注册表 api
raise a "curses.error" exception if line is not valid for the given window., 如果 没有 存在 则 则 则 则 则 则 则 则 引发, 如果 line 对于 给定 的 窗口 不可 用 则 会 引发 " curses . error " 异常
compare the easy with which we <unk> a <unk> like x <unk> into x a + x b to the <unk> of doing the same thing using a raw <unk> <unk>, 比较 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> , x , x x x x 的 的 ， ， 使用 " <unk> ( ) " ) " 的 的 的, 比较 一下 我们 将 x ( a + b ) 这样 的 <unk> 改写 为 x a + x b 的 容易 程度 ， 以及 使用 原始 oo 符号 做 相同 事情 的 <unk> 程度
this may <unk> for example, creating temporary or proxy <unk> directories, or starting a server process., 这 可能 、 、 、 或 或 或 <unk> <unk> 或 或 <unk> 的 或, 举个 例子 ， 这 可能 包含 创建 临时 或 代理 的 数据库 、 目录 ， 再 或者 启动 一个 服务器 进程
the portion of the population falling below the i th of m sorted data points is computed as "i / <unk> + 1)", 如果 的 的 的 ， ， <unk> 的 数据 的 数据 ， 为 " <unk> " , " ' " ' " ' " ' ", <unk> 在 m 个 排序 数据 点 的 第 i <unk> 个 以下 的 总体 部分 被 计算 为 " i / ( m + 1 ) "
if suffix is not "none", the file name will end with that <unk> otherwise there will be no suffix, 如果 未 不是 " none " ， 则 文件 文件 文件 ， 则 将 返回 " null " ， 否则 将 不会 被, 如果 suffix 不是 " none " 则 文件名 将 以 该 后缀 结尾 ， 是 " none " 则 没有 后缀
if they <unk> <unk> as a new <unk> for example, old expressions would be assuming that <unk> was a regular character and <unk> have escaped it by writing <unk> or <unk>, 如果 它们 <unk> <unk> ， ， ， ， 的 ， ， 表达式 ， 表达式 ， 表达式 ， 表达式 ， 表达式 ， ， <unk> <unk> <unk> 的 <unk> ， ， <unk> " <unk> " " " " " " " " " ", 例如 ， 如果 他们 选择 " & " 作为 一个 新 的 元字符 ， 旧 的 表达式 将 假设 " & " 是 一个 普通 字符 ， 并且 不会 编写 " \ & " 或 " [ & ] "
return the outcome of <unk> obj, 返回 " 的 _ <unk> ( ) " 的 逆, 返回 " not " obj 的 结果
equivalent to <unk> <unk>, 相当于 " a [ len ( ) " [ ] ", 相当于 " put ( obj , false ) "
if the second argument is an object, <unk> <unk> must be true, 如果 第二个 参数 是 一个 " ， " ， 则 " 必须 _ 必须 _ 必须 ", 如果 第二个 参数 为 一个 对象 ， 则 " isinstance ( obj , type ) " 必须 为 真值
they are python generators that use "yield from" expressions to <unk> on futures and other coroutines., 它们 在 python 使用 " 基于 " 的 " 的 " 和 其他 其他 其他 其他 其他 其他, 它们 是 使用 " yield from " 语句 创建 的 python 生成器 ， 可以 等待 future 和 其他 协程
<unk> arguments are <unk> e.g.:, <unk> 参数 : 是 被 移除, 多余 的 参数 会 被 跳 过 ， 比如 :
if using is "none", return a <unk> for a default browser appropriate to the <unk> environment., 如果 使用 为 " none " ， 则 返回 一个 默认 的 的 默认值, 如果 using 为 " none " ， 则 返回 适用 于 调用者 环境 的 默认 浏览器 的 控制器
the argument must not be "null", and the type is not <unk>, 参数 必须 为 " null " 和 " 类型 类型 类型 是 不 为 ", 参数 必须 不 为 " null " ， 并且 类型 不会 被 检查 :
the first argument of the call to "enum" is the name of the <unk>, 第一个 参数 的 " 是 " 是 名称 的 名称, 调用 " enum " 的 第一个 参数 是 枚举 的 名称
<unk> and handled in <unk>, " 和 " <unk> " 中 中 的, 在 " check ( ) " 中 捕获 并 处理
the python testing tools <unk> an <unk> list of python testing tools including functional testing frameworks and mock object <unk>, python 的 <unk> <unk> <unk> python python python 的 的 列表 ， 其中 哈希 和 和 <unk> 对象, python <unk> 分类 一个 python <unk> 的 详细 列表 ， 包含 测试 框架 和 模拟 对象 库
note that output requires use of "print" or <unk>, 请 注意 ， 请 使用 " " " " " ", 请 注意 ， 输出 需要 使用 “ 打印 ” 或 “ 写入 ”
for encoding, <unk> will be called with a <unk> instance, which contains information about the location of the error, 例如 ， " 将 " 将 被 调用 " <unk> ( ) " ， 一个 包含 一个 包含 的 的 信息, 对于 编码 操作 ， 将会 调用 error _ handler 并 传入 一个 " <unk> " 实例 ， 其中 包含 有关 错误 位置 的 信息
the expression "x if c else y" first evaluates the <unk> c rather than x, " " " " " " " " " " " " " " " " " " " " " " " " ", 表达式 " x if c else y " 首先 是 对 条件 c 而 非 x 求值
this is the equivalent of the python statement "o1 o2"., 这 相当于 python 语句 " o1 " 语句, 等价 于 python 语句 " o1 o2 "
although certain modules are designed to export only names that follow certain patterns when you use "import ", it is still considered bad practice in production code., 虽然 模块 模块 被 被 认为 只 在 当 你 的 时 ， 当 你 的 时候 ， 它 在 在 在 解释器 中 的, 虽然 某些 模块 被 设计 为 在 使用 " import " 时 只 导出 遵循 某些 模式 的 名称 ， 但 在 生产 代码 中 它 仍然 被 认为 是 <unk> 的 做法
loads the cell contained in slot i of the cell and free variable storage, 在 <unk> 中 的 的 中 的 的 版本 中 的 的 的 的, 加载 包含 在 单元 的 第 i 个 空位 中 的 单元 并 释放 可用 的 存储空间
the string argument passed to the built in functions "eval()" and "exec()" is a code block., 字符串 参数 传递 给 " 函数 " 函数 " 和 " ， " 是 " 是 " 代码 ", 传递 给 内置 函数 " eval ( ) " 和 " exec ( ) " 的 字符串 参数 也 是 代码 块
<unk> must be a memoryview <unk> this macro doesn't check its type, you must do it yourself or you will risk <unk>, <unk> 必须 为 一个 " <unk> " <unk> " 的 ， 因此 需要 的 的 ， ， 它 必须 你 或 你 的, <unk> 必须 是 一个 memoryview 实例 ； 这个 宏 不 检查 它 的 类型 ， 你 必须 自己 检查 ， 否则 你 将 <unk> 崩溃 风险
if newline is "''", universal newlines mode is <unk> but line <unk> are returned to the caller <unk>, 如果 newline 为 为 真 ， 则 会 被 取消 ， 则 会 被 " " true ", 如果 newline 为 " ' ' " ， 也 会 启用 通用 换行 模式 ， <unk> 结束符 会不加 转写 即 返回 给 调用者
if you require a <unk> end point, you should use <unk>, 如果 你 想要 一个 你 的 应该 应该 应该 使用 ", 想要 建立 一个 可 连接 的 <unk> ， 应该 使用 ' <unk> . 0.1 '
return the referenced object from a weak reference, <unk>, 从 对象 的 对象 的 对象 对象 对象, 返回 弱 引用 对象 <unk> 的 被 引用 对象
you can do it from the shell prompt by running <unk> and providing the path of a directory containing python files to <unk>, 你 可以 通过 " " " " " " " " ， 并 将 从 " " " " 的 " 文件 的 文件, <unk> 可以 是 在 命令行 提示符 中 运行 " <unk> . py " 并 提供 包含 要 编译 python 文件 的 目录 路径 :
if the return code was non zero it raises a "calledprocesserror", 如果 返回 <unk> 的 则 则 则 引发 引发 ", 如果 返回 <unk> <unk> 会 引发 " calledprocesserror "
<unk> include <unk> and <unk> in <unk> format., " ' seconds ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", " ' <unk> ' " : 以 " hh : mm " 格式 包含 " hour " 和 " minute "
while <unk> <unk> <unk> and "flag" are expected to <unk> the <unk> of use cases, they cannot <unk> them all, 虽然 <unk> <unk> , <unk> 和 <unk> ， ， 将 被 " ， 它们 在 它们 使用 " 它们 " 它们, 虽然 " enum " , " <unk> " , " intflag " 和 " flag " 预期 可 覆盖 大多数 应用 场景 ， 但 它们 无法 覆盖 全部
repeated names within an object, 对象 的 对象 的 名称, 对象 中 的 重复 名称
add as many components to this object as <unk> using the <unk> method., 添加 作为 " 对象 " 对象 的 对象 作为 " 对象 " 对象, 按照 需要 使用 " <unk> ( ) " 方法 向 此 对象 添加 多个 部件
the constructor accepts an optional integer initializer; no overflow checking is done., 构造 构造 器 接受 一个 可选 的 整数 ， 不 没有 溢出检查 溢出检查 溢出检查, 该 构造 器 接受 一个 可选 的 整数 初始化 器 ； 不会 执行 溢出检查
the file based on the dll name overrides the one based on the <unk> which allows paths to be restricted for any program loading the runtime if desired., 在 当前 中 的 的 的 的 日志 记录 的 的 的 ， ， ， 它 必须 在 在 运行 时 的 的 的, 基于 dll 名称 的 文件 覆盖 基于 可执行文件 的 文件 ， 如果 需要 ， 可以 为 加载 运行 时 的 任何 程序 限制 路径
returns the remainder of dividing o1 by o2 , or "null" on failure, 返回 o1 除以 o2 o2 的 ， 如果 失败 ， 返回 " null ", 返回 o1 除以 o2 得到 的 余数 ， 如果 失败 ， 返回 " null "
setting these variables only has an effect in a debug build of python., 设置 这些 变量 仅 包含 一个 包含 的 的 的, 设置 这些 变量 只会 在 python 的 调试 版本 中 产生 影响
api and feature removals, api 与 特性 的 移除, api 与 特性 的 移除
the components can also be accessed by name, so <unk> is equivalent to <unk> and so on., 可以 可以 通过 " ' ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", 三个 值 也 可 通过 名称 来 访问 ， 因此 " curses . ncurses _ version [ 0 ] " 等价 于 " curses . ncurses _ version . <unk> " ， 依此类推
raises an auditing event <unk> with argument <unk>, 引发 一个 审计 事件 " ctypes . <unk> " ， 附带 参数 " key ", 引发 一个 审计 事件 " ctypes . <unk> " ， 附带 参数 " obj "
<unk> can be any object which supports the iterator protocol and returns a string each time its "__next__()" method is called file objects and list objects are both suitable, " 可以 _ 可 可以 是 任何 对象 对象 对象 的 对象 ， 并 返回 一个 对象 的 对象 ， 而 不是 " 对象 " 对象, <unk> 可以 是 任何 对象 ， 只要 这个 对象 支持 iterator 协议 并 在 每次 调用 " __ next __ ( ) " 方法 时 都 返回 字符串 ， 文件 对象 和 列表 对象 均 适用
used by queue consumer threads, 由 队列 " <unk> ", 被 队列 的 消费者 线程 使用
the first place checked during import search is "sys.modules", 第一个 的 文件 ， 则 会 保持 文件, 在 导入 搜索 期间 首先 会 被 检查 的 地方 是 " sys . modules "
by default, the "zipinfo" constructor sets this member to <unk>, 默认 情况 下 ， 将 将 将 其 为 " true ", 默认 情况 下 ， " zipinfo " 构造 器 将 将 此 成员 设 为 " zip _ <unk> "
this module performs conversions between python values and c <unk> represented as python "bytes" objects, 此 模块 式 编程 和 python 之间 的 python c c python c " c " 对象 " python 对象, 此 模块 可以 执行 python 值 和 以 python " bytes " 对象 表示 的 c 结构 之间 的 转换
the "calledprocesserror" object will have the return code in the <unk> attribute and any output in the <unk> attribute., " 对象 将 将 将 其 在 代码 中 的 的 代码 中 的 " 属性 " 中 的 ", " calledprocesserror " 对象 将 在 " returncode " 属性 中 保存 返回 码 并 在 " output " 属性 中 保存 所有 输出
raises an auditing event <unk> with argument <unk> <unk>, 引发 一个 审计 事件 " ctypes . <unk> " ， 附带 参数 " 参数 " 参数 ", 使用 " module name " 参数 会 引发 审计 事件 " cpython . run _ module "
if "' '" is the only parameter in args, the list of files is taken from standard input., 如果 " ' " ' " ' " ， 则 会 被 从 来自 来自 的 文件 中 的, 如果 " ' ' " 是 args 中 唯一 的 值 ， 则 会 从 标准 输入 获取 文件 列表
passing pointers (or: passing parameters by reference), 传递 指针 传递 或 传递 （ 传递 传递 形参 ）, 传递 指针 （ 或 以 引用 方式 传递 形参 ）
what's new in python <unk>, python 2.2 有 什么 新 变化, python 3.5 有 什么 新 变化
raises an auditing event <unk> with arguments <unk> <unk> <unk>, 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " , " , " , " , " , " , " , ", 引发 一个 审计 事件 " shutil . <unk> " 附带 参数 " path " , " user " , " group "
also see <unk> for a variant that is useful for creating alternate class <unk>, 另 请参阅 请参阅 " <unk> _ <unk> ( ) " ， 用于 创建 类 创建 类 类 类 类 类 类, 另 请参阅 " <unk> ( ) " ， 用于 创建 备用 类 构造函数 的 变体
deleted and deprecated modules, 删除 和 弃 用 的 模块, 删除 和 弃 用 的 模块
<unk> cookie handling for http clients, " ' " ' " 的 的 的 的, " http . cookiejar " — — http 客户端 的 cookie 处理
in addition to <unk> this function should be suitable for checking the identity of servers in various ssl based protocols such as <unk> <unk> pops and others., 除了 " <unk> _ <unk> ( ) " 函数 应当 是 在 基于 的 的 的 ， 例如 " 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、 " 、, 除了 https ， 此 函数 还 应当 适用 于 各种 基于 ssl 协议 的 服务器 <unk> 检查 操作 ， 例如 <unk> , <unk> , <unk> 等等
this is useful if you have <unk> the module source file using an external editor and want to try out the new version without leaving the python interpreter, 如果 你 可以 使用 python 文件 ， 则 使用 " <unk> . <unk> ( ) " 来 在 python 解释器 解释器 的 python 解释器, 这样 做 是 有用 的 ， 如果 使用 外部 编辑器 <unk> 已经 <unk> 过 了 那个 模块 的 源代码 文件 并且 想 在 退出 python 解释器 之前 试验 这个 新 版本 的 模块
bpo <unk> fix a bug that causes <unk> to appear <unk> on <unk>, bpo <unk> : 修复 了 一个 <unk> 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, bpo <unk> : 修复 导致 <unk> 在 sys . meta _ path 上 出现 两次 的 错误
no feature description will ever be deleted from "__future__", 没有 特性 的 的 将 被 继承, " __ future __ " 中 不会 删除 特性 的 描述
derived from <unk> this exception class is raised when an executor is broken for some reason, and cannot be used to submit or execute new tasks., " __ " __ " __ " __ " __ " __ " 异常 " 异常 " 异常 " 异常 " 被 引发 " 被 用来 被 调用 ， 或 新 的 的 新 的, 当 <unk> 被 某些 原因 中断 而且 不能 用来 提交 或 执行 新 任务 时 就 会 被 引发 <unk> <unk> " runtimeerror " 的 异常 类
it is not used at all by data classes, and is provided as a third party extension mechanism, 它 在 所有 数据 数据 ， 所有 " " " " " ", 数据 类 根本 不 使用 它 ， 它 是 作为 第三方 扩展 机制 提供 的
return the value of the boolean capability corresponding to the terminfo capability name <unk> as an integer, 返回 对应 的 对应 的 对应 的 " ， " " 为 " 形式 为 整数 为 整数, 将 与 terminfo 功能 名称 <unk> 相对 应 的 布尔 功能 <unk> 整数 形式 返回
in most typical applications, "parse_args()" will take care of formatting and printing any usage or error messages, 在 大多数 情况 下 ， ， ， " ， " " " " 或 任何 任何 或 的 的, 在 大多数 典型 应用 中 ， " parse _ args ( ) " 将 负责 任何 用法 和 错误 消息 的 格式化 和 打印
pep <unk> syntax for delegating to a subgenerator, pep 380 : 委托 给子 给子 的, pep 380 : 委托 给子 生成器 的 语法
it will be called with the source path and the destination path as arguments, 它 将 与 路径 的 的 路径 ， 并 将 被 作为 参数, 它 在 被 调用 时会 <unk> 路径 和 目标 路径 作为 参数 传入
the execution of a function introduces a new symbol table used for the local variables of the function, 一个 函数 函数 函数 函数 函数 一个 新 的 的 函数 的 函数, 函数 的 执行 会 引入 一个 用于 函数 局部变量 的 新 符号表
this should be between 4 <unk> and <unk> <unk> <unk>, 这 应当 为 " <unk> " 和 " <unk> " , " <unk> ", 这 应当 在 4 <unk> 和 <unk> <unk> 之间 （ 包含 边界 ）
this feature can be disabled by setting <unk> to <unk>, 这 特性 特性 可以 通过 " " . <unk> ( ) " 来 来, 这个 特性 可以 设置 " allow _ <unk> " 为 " false " 来 关闭 :
zero and negative years are interpreted as <unk> by the iso 8601 standard, 一个零 和 负数 和 <unk> 被 由 iso 8601, iso 8601 标准 还 规定 了 0 和 负数 年份
the optimized pickle is <unk> takes less <unk> time, requires less storage space, and <unk> more <unk>, <unk> 的 是 " " " " ， " " " " " " 和 " <unk> " 和 " <unk> ", 优化 后 的 pickle 将 更为 简短 ， 耗费 更为 的 传输 时间 ， 要求 <unk> 的 存储空间 并 能 更 高效 地 解封
for instance, take the following incomplete snippet:, 例如 ， 下面 ， 以下 代码段 以下 代码段, 例如 ， 采用 以下 不 完整 的 代码段 :
this option may be used multiple times, in which case all test cases that match of the given patterns are <unk>, 此 选项 可以 在 多个 中 的 所有 所有 所有 的 所有 的 的 的 的 的 的 的, 可以 多次 使用 这个 选项 ， 以便 包含 匹配 子串 的 所有 测试用例
comments are ignored by the syntax., 在 由 通过 被 被, 注释 在 语法分析 <unk> 被 忽略
this example uses the iterator form:, 这个 例子 例子 使用 迭代 器 的 ：, 下面 是 一个 使用 迭代 器 形式 的 例子 ：
return a json string representation of a python data structure, o, 返回 一个 表示 表示 表示 一个 表示 的 的 的 的, 返回 python o 数据结构 的 json 字符串 表达方式
asyncio synchronization primitives are designed to be similar to those of the "threading" module with two important caveats:, asyncio 原语 原语 将 被 " " " " 的 " 的 " 的 " 的 ", asyncio 同步 原语 被 设计 为 与 " threading " 模块 的 类似 ， 但 有 两个 关键 注意事项 :
the comprehension consists of a single expression followed by at least one "for" clause and zero or more "for" or "if" clauses, <unk> 的 的 的 表达式 表达式 的 的 的 ， 由 " 子句 , , , 或 或 或 或 " 或 " 或 " 或 " 或 ", 推导 式 的 结构 是 一个 单独 表达式 后面 加 至少 一个 " for " 子句 以及 零个 或 更 多个 " for " 或 " if " 子句
data must be <unk>, data 必须 为 " <unk> ", data 必须 为 " str " 类型
key a string: key (e.g. <unk> or key symbol (e.g. <unk>, key 一个 键 键 （ 例如 " 或 " 键 " 键 " ） ）, key 一个 字符串 : 键 ( 例如 " a " ) <unk> ( 例如 " space " )
return a <unk> object with the specified year, <unk> <unk> hour, minute, second and <unk>, 返回 指定 的 的 " " " " " " " " " " ， " " " " " ， " " " " " " " " " " ", 返回 具有 指定 year , month , day , hour , minute , second 和 microsecond 属性 的 " datetime . datetime " 对象
just import the config module in all modules of your <unk> the module then becomes available as a global name, 在 导入 模块 中 的 模块 模块 模块 模块 模块 模块 模块 模块 ， 模块 ， 作为 模块 作为 一个 全局 全局, 只 需 在 应用程序 的 所有 模块 中 导入 配置 模块 ； 然后 该 模块 可 用作 全局 名称
strictly speaking, <unk> <unk> means to convert some data from internal to external form (in an rpc buffer for <unk> and <unk> for the reverse process., <unk> <unk> <unk> <unk> " <unk> " 到 从 内部 的 内部 的 的 的 的 ， ， 以 " " " " " " " " " " " " " ", 严格 <unk> ， 将 数据 从 内部 形式 转换 为 外部 形式 ( 例如 用于 rpc 缓冲区 ) 称为 " marshal " 而 其 逆 过程 则 称为 " <unk> "
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
it returns a new instance of type which points to the same memory block as obj, 它 返回 一个 新 的 实例 的 " ， " " " " " 的 内存 的, 它 返回 一个 type 的 新 实例 ， 该 实例 指向 与 obj 相同 的 内存 块
also unlike c, expressions like "a < b < c" have the interpretation that is <unk> in <unk>, 也 与 " c " " " " ( ) " " < < < " ， 但 ， 但 <unk> 的 <unk>, 另 一个 与 c 不同之处 在于 " a < b < c " 这样 的 表达式 会 按 传统 算术 <unk> 来 解读 :
new in version 3.6., 3.6 新版 功能 ., 3.6 新版 功能 .
in those <unk> note that when an in place method is called, the computation and assignment are performed in two separate steps, 在 这种 情况 下 ， 当 在 当 方法 时 ， 方法 方法 是 " 的 " 和 " 和 " ， 并 将 两个, 在 这些 例子 中 ， 请 注意 当 调用 一个 原地 方法 时 ， 运算 和 赋值 是 分成 两个 步骤 来 执行 的
this means that while python 2 continues to receive bug <unk> and to be updated to build correctly on new <unk> and versions of supported <unk> systems, there will be no new full feature releases for the language or standard library., 这 意味着 python python python 2 ， ， ， ， 在 <unk> 和 " os . x " 和 " os . x " 和 " os . x " 和 " 的 " ， ， 的 新 的 的 的, 这 意味着 ， 尽管 python 2 会 继续 修复 bug 并 更新 ， 以便 在 新 的 <unk> 和 支持 操作系统 版本 上 正确 构建 ， 但 不会 有 新 的 功能 发布
what is deterministic <unk>, 什么 是 " 的 ., 什么 是 确定性 性能 分析 ？
if an error occurs while retrieving the item, returns "null" and passes along the exception., 如果 一个 错误 ， ， 则 返回 " ， " ， " null " ， 并 返回 " null ", 如果 在 获取 条目 时 发生 了 错误 ， 则 返回 " null " 并且 传递 异常
pep <unk> syntax for variable annotations, pep 380 : 语法 标注 标注, pep 526 : 变量 注释 的 语法
construct <unk> objects explicitly if you need to adjust the width <unk>, （ 如果 你 想要 需要 需要 需要 需要 的 的 <unk> <unk>, 如果 你 需要 调整 宽度 限制 则 应 显式 地 构造 " prettyprinter " 对象
<unk> general wikipedia entry describing functional <unk>, " ' g ' " : " 条目 的 的, https : / / en . <unk> . org / <unk> / functional _ <unk> : <unk> 的 函数 式 编程 的 <unk> 条目
size gives the maximum number of turtle actions that can be <unk> by the <unk> <unk>, <unk> <unk> <unk> 最大 的 的 的 ， 可以 通过 " <unk> " <unk> ", size 表示 可 使用 " <unk> ( ) " 方法 / 函数 撤消 的 海龟 命令 的 次数 <unk>
calls <unk> sets the target to "none" and <unk> the buffer., 调用 " " " " " " " " " " " " " " " " " " ", 调用 " flush ( ) " ， 设置 目标 为 " none " 并 清空 缓冲区
bpo <unk> raise a <unk> for "async with" and "async for" statements outside of <unk> functions., bpo <unk> : 在 bpo <unk> ， " async for " async " async " " " " " " " " " " " " ", bpo <unk> : 在 异步 函数 外 使用 ` ` async with ` ` 和 " async for " 时 抛出 syntaxerror 异常
if the calling thread has not acquired the lock when this method is called, a "runtimeerror" is raised., 如果 该 调用 线程 不 存在 锁 ， 此 方法 会 引发 " runtimeerror ", 如果 线程 在 调用 此 方法 时 没有 获得 锁 ， 将会 引发 " runtimeerror " 异常
if your smtp server requires <unk> you can specify a <unk> <unk> tuple for the <unk> argument., 如果 你 的 <unk> 的 <unk> ， 你 你 可以 一个 一个 " <unk> _ <unk> _ <unk> _ <unk> ( ) " 来 一个 一个 元组, 如果 你 的 smtp 服务器 要求 验证 ， 你 可以 指定 一个 ( <unk> , password ) 元组 作为 <unk> 参数
pep 328: absolute and relative imports, pep 328 : 绝对 导入 和 相对 导入, pep 328 : 绝对 导入 和 相对 导入
<unk> if true (the default), this field is included in the string returned by the generated "__repr__()" method., " 如果 如果 如果 （ 如果 （ 如果 （ 默认 ） 的 ， 则 返回 " " " " " " ", " repr " ： 如果 为 true （ 默认值 ） ， 则 该 字 段 包含 在 生成 的 " __ repr __ ( ) " 方法 返回 的 字符串 中
<unk> the python interpreter is easily called <unk> and there is a standard interface to call a python function, python 解释器 的 解释器 是 " <unk> " <unk> ， ， 是 一个 python 接口 的 python 接口, <unk> 的 是 ， python 解释器 是 比较 方便 回调 的 ， 并 给 标准 python 函数 提供 了 <unk>
combining positional and optional arguments, src 位置 和 可选 参数, 结合 位置 参数 和 可选 参数
the number of bytes returned may be less or more than requested., 返回 字节 的 的 的 整数 或 或 更, 返回 的 字节 数量 可能 少于 或 多于 请求 的 数量
if <unk> <unk> <unk> python tries <unk> before <unk>, 如果 <unk> <unk> <unk> <unk> <unk> <unk> " <unk> " ， " python " <unk> " <unk> ", 如果 " b < : a " ， python 在 " a .__ add __ " 之前 尝试 " b .__ <unk> __ "
the "emailmessage" dictionary like interface is indexed by the header names, which must be ascii values, 字典 字典 字典 类似 的 接口 ， 由 " 对象 ， ， 必须 必须 为 ascii, " emailmessage " 的 类 字典 接口 的 字典 索引 是 头 字段名 ， 头 字段名 必须 是 ascii 值
registry api for unicode encoding error handlers, " api " api 的 unicode 编码 的 错误处理 方案, 用于 unicode 编码 错误 处理程序 的 注册表 api
the <unk> class represents a named font, " <unk> " 类 的 一个 名为 的, " <unk> " 类 表示 命名 字体
this will be done implicitly by the configuration system for things that it knows about, 这 将 通过 配置 配置 系统 的 系统 系统 的, 这 将 由 配置 系统 针对 它 所 了解 的 内容 隐式 地 完成
if both arguments are omitted, returns <unk>, 如果 两个 参数 为 " 则 返回 " true ", 如果 两个 实参 都 省略 ， 则 返回 " <unk> "
this class can be appropriate for applications that <unk> directly to <unk> or that perform brief tasks that should have limited <unk>, 该类 类 可以 为 " " " " " " " " <unk> " 的 的 的 ， 或者 应该 需要 做 的 的, 这个 类 只 适用 于 直接 与 <unk> “ 对话 ” ， 或者 执行 <unk> 任务 具有 受限 中断 的 应用
note that some of these operations also apply to certain non numeric types, 请 注意 某些 某些 的 的 还 还 都 会 用来 类型 的 类型 的 类型, 请 注意 某些 此类 运算符 也 作用 于 特定 的 非 数字 类型
in addition to the operations listed above, "timedelta" objects support certain <unk> and <unk> with "date" and "datetime" objects (see below)., 除了 的 的 了 " 实现 " 对象 ， 支持 支持 " " " " 和 " 和 " 和 " 对象 " 和 " 对象 ", 除了 上面 <unk> 的 操作 以外 ， " timedelta " 对象 还 支持 与 " date " 和 " datetime " 对象 进行 特定 的 相加 和 <unk> 运算 （ 见下文 ）
changed in version 3.4., 3.4 . 4 . 4 ., 在 3.4 版 更改 .
2to3 <unk> python 2 to 3 code translation, 2to3 python <unk> python python 3 代码 代码 代码, 2to3 自动 将 python 2 代码 转为 python 3 代码
if the exception is not handled by an "except" clause, the exception is re raised after the "finally" clause has been executed., 如果 没有 异常 异常 ， 则 会 引发 " 异常 " 异常 ， 则 会 引发 " typeerror ", 如果 异常 没有 被 某个 " except " 子句 所 处理 ， 则 该 异常 会 在 " finally " 子句 执行 之后 被 重新 引发
the mathematical and bitwise operations are the most <unk>, " 和 " 和 " 操作 操作 会 被 执行, 数学 和 按位 运算 的 <unk> 是 最 多 的 ：
the preferred way to use a lock is an "async with" statement:, 使用 使用 " __ " __ " __ " 语句 " 语句 " :, 使用 lock 的 推荐 方式 是 通过 " async with " 语句 :
save the original value of p to avoid <unk> memory when handling errors., 将 " <unk> " 的 的 <unk> <unk> <unk> 处理 处理 的 内存, 请 保存 p 的 原始 值 ， 以 避免 在 <unk> 时 丢失 内存
the sign of the result, if non zero, is the same as that of the original <unk>, 如果 <unk> 的 <unk> 为 与 与 <unk> 的 的, 结果 的 符号 ， 如果 不为 零 ， 则 与 原始 <unk> 的 符号 相同
it is <unk> rare that you must do this, however, so this usage is not yet <unk>, 它 是 为了 ， 必须 必须 ， 但是 ， 因此 ， 因此 的 的 行为, 然而 ， 必须 这样 做 的 情况 相当 <unk> ， 所以 这种 用法 还 没有 <unk>
changed in version 3.2: lock <unk> can now be interrupted by signals on posix if the underlying threading implementation supports it., 在 3.2 版 更改 : 现在 会 <unk> " <unk> _ <unk> " on on on 的 的 ， ， 则 会 引发 " <unk> ", 在 3.2 版 更改 : 现在 如果 底层 线程 实现 支持 ， 则 可以 通过 posix 上 的 信号 中断 锁 的 获取
an example time in this format is <unk> 01 23 <unk>, 在 这种 时间 时间 时间 ， <unk> <unk> <unk> : 00 : 00 :, 此 格式 的 时间 <unk> 例如 " <unk> 01 23 00 : 29 : 50 , <unk> "
windows <unk> is still supported., windows <unk> <unk> <unk> 是 <unk>, windows <unk> 仍然 受 支持
the module defines the following:, 模块 模块 定义 了 以下内容, 该 模块 定义 以下内容 ：
in addition, the set object <unk> a <unk> method., 在 " 设置 " 中 设置 了 " 对象 " 对象 _ <unk> ( ) " 方法, 另外 ， 集合 对象 需要 " test _ c _ api ( ) " 方法
empty matches are replaced only when they're not adjacent to a previous empty <unk>, 空 " 只 " 仅 只 在 遇到 时 ， 一个 空 ？, 仅 <unk> 匹配 与 前 一个 空 匹配 不 相邻 时 ， 才 会 替换 空 匹配
the variables defined in the "signal" module are:, " 模块 " 模块 模块 模块 定义 了 模块 ：, 在 " signal " 模块 中 定义 的 变量 是 ：
"doctest" test interactive python examples, " 测试 " 测试 测试 python python 示例, " doctest " 测试 <unk> 的 python 示例
this is in fact the default <unk> expected by the <unk> and the one that requires the least work to describe in your setup script:, 这 在 在 默认 情况 下 ， 默认 情况 下 ， 默认 情况 下 ， 该 函数 将 在 代码 中 的 代码, 这 其实 是 distutils 默认 的 <unk> ， 也 是 你 的 配置 脚本 中 需要 的 <unk> 最小 的
this follows normal convention of <unk> being month number 1, so it has a length of 13 and <unk> is the empty string., 这 <unk> <unk> 的 的 " " " , " , " , " ) ， ， ， 的 长度 的 的 元素, 这 遵循 <unk> 的 月 号 为 1 的 通常 惯例 ， 所以 它 的 长度 为 13 且 " month _ <unk> [ 0 ] " 是 空 字符串
set the default content type, 设置 默认 的 类型, 设置 默认 的 内容 类型
changed in version 3.9: added the counts parameter., 在 3.9 版 更改 : 增加 了 形参 形参, 在 3.9 版 更改 : 增加 了 <unk> 形参
by default, each warning is printed once for each source line where it occurs, 默认 情况 下 ， 每个 每个 都 会 被 每个 每个 每个 每个 兼容, 默认 情况 下 ， 每个 警告 都 对于 其 发生 所在 的 每个 <unk> 都 会 打印 一次
see also the definition of coroutine ., 另 请参阅 定义 的, 参见 coroutine 的 定义
the unary "+" <unk> operator yields its numeric argument unchanged., 这个 的 值 的 值 ， 其 参数 参数 的 参数, 一元 运算符 " + " ( 正 ) 会 产生 与其 数值 参数 相同 的 值
second, it means that no special syntax is necessary if you want to explicitly reference or call the method from a particular class, 如果 它 没有 没有 特殊 的 ， ， 如果 你 调用 " __ ( __ ( ) " 方法 方法, <unk> ， 这 意味着 如果 要 显式 引用 或 从 特定 类 调用 该 方法 ， 不 需要 特殊 语法
<unk> tables can be built by <unk> interest and applying <unk>, <unk> : 可以 通过 " <unk> " 和 " 和 " <unk> ", <unk> <unk> 通过 <unk> <unk> 和 <unk> <unk> 得到
wraps the single paragraph in text (a string) so every line is at most <unk> characters long, 将 <unk> 的 的 文本 行 （ 仅 在 " 行 行 ） ， 在 大多数 行 ）, 对 text ( 字符串 ) 中 的 单独 段落 自动 换行 以 使 <unk> 长度 <unk> " width " 个字符
the <unk> module <unk>, " 模块 " 模块, " multiprocessing . <unk> " 模块 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
"struct" interpret bytes as packed binary data, " struct " bytes 字节 串 解读 的 二进制 数据, " struct " 将 字节 串 解读 为 打包 的 二进制 数据
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
in addition, the "formatter" defines a number of methods that are intended to be replaced by <unk>, 此外 ， " " 定义 了 " 方法 的 方法 是 " " . <unk> ( ) " 来 来 " " ., 此外 ， " formatter " 还 定义 了 一些 旨在 被子 类 替换 的 方法 ：
allowing non resource names to be returned is to allow for situations where how a package and its resources are stored are known a <unk> and the non resource names would be useful, 默认 需要 将 被 用来 为 " ， " ， ， 并且 需要 的 的 的 的 ， 并且 被 被 被 被 被 被 被 ， ， 并且 将 被 调用, 允许 非 资源 名字 被 返回 是 为了 允许 存储 的 一个包 和 它 的 资源 的 方式 是 已知 <unk> 的 并且 非 资源 名字 会 有用 的 情况
(contributed by raymond <unk> bpo <unk>, （ 由 raymond hettinger 在 bpo <unk> 中 贡献 。 ）, （ 由 raymond hettinger 在 bpo <unk> 中 贡献 。 ）
the "import" statement is the most common way of invoking the import <unk> but it is not the only way, " import " 语句 是 最 的 的 的 的 的 的 ， 但 它 仅 仅, " import " 语句 是 发起 调用 导入 机制 的 最 常用 方式 ， 但 不是 唯一 的 方式
the most likely cause is a <unk> connection, 最 的 的 为 一个 一个 " <unk> ", 最 可能 的 原因 是 连接 丢失
this simple example shows how an application can use object ids to retrieve objects that it has <unk> before, 这个 简单 的 例子 如何 如何 如何 使用 可以 使用 " 对象 " 对象 对象 对象 对象, 这个 简单 的 例子 演示 了 一个 应用 如何 使用 对象 id 来 提取 之前 出现 过 的 对象
a process can be <unk> many times., 进程 可以 被 <unk> <unk>, 一个 进程 可以 被 join 多次
if <unk> is not a full <unk> one endpoint of the <unk> is the current pen position, 如果 <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> 的 一个 的 的 的 的, 如果 <unk> 不是 完整 <unk> ， 则 以 当前 画笔 位置 为 一个 <unk> 绘制 <unk>
<unk> will select a quote character based on the content of data , attempting to avoid encoding any quote characters in the string, " <unk> " 将 " " " " 的 字符 的 的 字符 ， 以 为 字符串 的 字符串 字符 字符串, " <unk> ( ) " 将 基于 data 的 内容 选择 一个 引号 字符 ， 以 <unk> 在 字符串 中 编码 任何 引号 字符
the associated value is an error message that includes the name that could not be found., 关联 的 是 一个 空 的 的 的 ， 则 不 需要 的 的, 关联 的 值 是 一条 错误信息 ， 其中 包含 未找到 的 名称
performance <unk> vary across python implementations, python <unk> . <unk> " python 的 python, 不同 的 python 实现 具有 不同 的 性能 特点
<unk> memory mapped file support, " 内存 " 文件 文件 支持, " <unk> " 内存 映射 文件 支持
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
some examples of integer literals:, 一些 例子 的 示例 用法 示例, 一些 整型 数字 面值 的 示例 如下 :
<unk> value of the <unk> can be set / modified in <unk>, " <unk> _ value " " 可以 在 在 " 中 中 的 " 中 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /, " _ value _ " 成员 的 值 ； 可以 在 " __ new __ " 中 设置 / 修改
the latest representable date, <unk> <unk> <unk>, 最晚 的 的 " <unk> " , " , " , " , " , " , " , " , " , " , " , " , " , ", 最大 的 日期 ， " date ( <unk> , 12 , 31 ) "
start a new thread and return its identifier, 启动 一个 新 的 线程 并 返回 其 的, 开启 一个 新 线程 并 返回 其 标识
objects instantiated from <unk> can only have their value set to bytes or integers., " object " 对象 的 " __ ( ) " 方法 将 其 值 值 或 字节 字节 串, 使用 " c _ char _ p " 实例 化 的 对象 只能 将 其值 设置 为 bytes 或者 整数
(contributed by batuhan taskaya in bpo <unk>, （ 由 batuhan taskaya 在 bpo <unk> 中 贡献 。 ）, （ 由 batuhan taskaya 在 bpo <unk> 中 贡献 。 ）
in particular, <unk> <unk> and <unk> exclusive groups that include both <unk> and <unk> are not supported., 在 <unk> 中 ， " <unk> 和 " <unk> ( ) " 和 " <unk> " 和 " 和 " 和 " 和 " <unk> ", 特别 地 ， 子 解析器 ， " argparse . <unk> " 以及 同时 包括 可选 与 位置 参数 的 <unk> 分组 是 不受 支持 的
note that this method is automatically added to the class: it is not directly specified in the <unk> definition shown above., 请 注意 此 方法 会 被 " <unk> " ) " 方法 ， 它 在 直接 定义 定义 定义 了 " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ ", 请 注意 ， 此 方法 会 自动 添加 到 类 中 ： 它 不会 在 上面 显示 的 " <unk> " 定义 中 直接 指定
the most <unk> is the list , which can be written as a list of comma separated values <unk> between square brackets, 最 的 是 是 是 是 列表 ， 列表 ， 可以 是 一个 列表 的 的 的 的 的, 其中 最 常用 的 列表 ， 可以 通过 方括号 <unk> 、 逗号 分隔 的 一组 值得 到
any other modifications may go in either "__new__()" or <unk> with "__init__()" being <unk>, 任何 其他 的 字 段 可能 在 " " " " " " " " " " " " " " ", 任何 其他 修改 可以 用 " __ new __ ( ) " 也 可以 用 " __ init __ ( ) " ， 应 优先 使用 " __ init __ ( ) "
return "true" if it is one of character <unk> block device or <unk>, 如果 <unk> 为 " 1 " " " " " " " " " " " " " " " ", 如果 为 字符 设备 、 块 设备 或 fifo 之一 则 返回 " true "
<unk> the object input and returns a tuple <unk> object, length <unk>, <unk> 对象 的 输入 并 返回 一个 元组 元组 " " " 长度 长度, 解码 input 对象 并 返回 一个 元组 ( 输出 对象 , 消耗 长度 )
note that using this function may require some external synchronization if there are other threads whose state is unknown, 请 注意 此 函数 此 函数 可以 在 其他 情况 下 ， ， 如果 其他 情况 下 ， 则 会 被 忽略, 请 注意 使用 此 函数 时 ， 如果 存在 状态 未知 的 其他 线程 ， 则 可能 需要 执行 外部 同步
some of this is specific to the <unk> <unk> but describes general good <unk>, 一些 ， 是 为了 <unk> “ ” ， 但 但 " " " " " " " " ", 部分 仅 针对 <unk> 项目 ， 不过 其 描述 了 通用 的 <unk> 做法
<unk> parses xml from a string directly into an <unk> which is the root element of the parsed tree, " xml . create _ xml 从 xml 从 一个 字符串 中 一个 一个 " 的 " 的 " 的 的 的, " <unk> ( ) " 将 xml 从 字符串 直接 解析 为 " element " ， 该 元素 是 已 解析 树 的 根 元素
first, they expose several methods to application code so that applications can log messages at runtime, 将 它们 的 方法 方法 ， ， 有 可能 可以 可以 在 任何 消息, 首先 ， 它们 向 应用 <unk> 公开 了 几种 方法 ， 以便 应用程序 可以 在 运行 时 记录 消息
"json" json encoder and decoder, " json " json 解码器 和 解码器, " json " json 编码 和 解码器
the time taken by this routine is <unk> to <unk>, 上次 此 时间 的 时间 时间 为 为 " <unk> ", 本 例程 所 需 的 时间 与 " len ( <unk> ) " <unk>
what's new in python 3.6, python 有 什么 新 变化, python 3.6 有 什么 新 变化
pep <unk> importing modules from zip archives, pep 273 : 从 zip 压缩包 导入 模块, pep 273 : 从 zip 压缩包 导入 模块
added support of <unk> escapes in <unk> <unk>, 添加 了 " of " <unk> " , " <unk> " , " <unk> " , " <unk> ", 添加 " \ n { name } " 转义 <unk> " 正则表达式 " 中 的 支持 :
when to use "__new__()" <unk> "__init__()", 当 使用 " <unk> . <unk> ( ) ", 何时 使用 " __ new __ ( ) " 与 " __ init __ ( ) "
looks <unk> <unk> but it's <unk>, <unk> ， ， ， 但 " ， 但 " " ( ) " ， 但 " ", 看起来 <unk> 是 <unk> ， 但 却 不是
call to <unk> event), 调用 < <unk> _ target _ target _ target _ event _ event _ event _ event _ event _ event, 调用 < new _ target > . dnd _ enter ( source , event )
assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the "streamreader" object., 将 此 属性 属性 ， 它 将 在 不同 的 不同 的 不同 的 不同 的 ， 但 将 不会 被 对象, 通过 对此 属性 赋值 就 可以 在 " streamreader " 对象 的 生命 <unk> 在 不同 的 错误处理 策略 之间 进行 切换
creates a new object of the same type of <unk> replacing fields with values from <unk>, 创建 一个 类型 的 类型 的 类型 类型 的 类型 的 的 的 值 的 值 :, 创建 一个 " instance " 相同 类型 的 新 对象 ， 用 " <unk> " 中 的 值 替换 字 段
if no name has been explicitly assigned to the task, the default asyncio task implementation generates a default name during <unk>, 如果 没有 名称 名称 ， 则 将 显式 默认 的 默认 的 则 会 引发 " 名称 " 名称, 如果 没有 一个 task 名称 被 显式 地 赋值 ， 默认 的 asyncio task 实现 会 在 实例 化 期间 生成 一个 默认 名称
the returned data should be concatenated with the output of any previous calls to <unk>, 返回 data 的 的 的 任何 （ 即 的 的 的 的 的, 返回 的 数据 应当 与 之前 任何 " decompress ( ) " 调用 的 输出 进行 拼接
the "counter" class is similar to <unk> or multisets in other <unk>, " " " 类 是 " " " 或 " 的 " 的 ", " counter " 类 <unk> 其他 语言 中 的 <unk> 或 <unk>
these will be propagated into <unk>, 这些 将 将 被 传递 为 ", 这些 将 <unk> time . <unk>
wide char variant of <unk> returning a unicode value., " " ( ) " 返回 一个 返回 一个 的 的, " getch ( ) " 的 宽 字符 版本 ， 返回 一个 unicode 值
given a sequence produced by <unk> or <unk> extract lines <unk> from file 1 or 2 <unk> which <unk> <unk> off line <unk>, 给定 一个 由 <unk> 或 或 <unk> （ 或 <unk> 文件 或 文件 的 文件 （ 或 文件 或 <unk> ） 或 <unk> ） （ （ ） ） ） ） ） ） ）, 给出 一个 由 " differ . compare ( ) " 或 " ndiff ( ) " 产生 的 序列 ， 提取 出来 自 文件 1 或 2 ( <unk> 形参 ) 的 行 ， 去除 行 前缀
return a list of labels on the message., 返回 的 的 的 列表, 返回 邮件 上 的 标签 列表
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
if there is a saved exception it is re raised at the end of the "finally" clause, 如果 有 一个 异常 ， 则 抛出 " 子句 " 子句 则 抛出 " 子句, 如果 存在 被 保存 的 异常 ， 它会 在 " finally " 子句 的 末尾 被 重新 引发
for "'r'", the supplied precision must be 0 and is ignored, 对于 " " " ， " 必须 为 " 0 " 和 为 0, 对于 " ' r ' " , 提供 的 精度 必须 是 0
that <unk> "' <unk> from matching the "' <unk> at the tail end of the second sequence directly, 也就是说 " <unk> " 从 " " " " " " ， 表示 的 的 的 的 的 的 末尾, 这 将 防止 " ' <unk> ' " 直接 与 第二个 序列 末尾 的 " ' <unk> ' " 相匹配
equivalent to <unk> <unk> <unk>, 相当于 " a [ len ( ) " , " " [ ] " ) ", 与 " as _ string ( policy self . policy . <unk> ( utf8 true ) ) " 等价
go to line move the cursor to the beginning of the line requested and make that line visible, 将 该行 右 到 右 到 的 行号 ， 并 将 其 该行, <unk> 行 <unk> the cursor to the <unk> of the line <unk> and <unk> that line <unk>
wake up all tasks waiting on this condition., 唤醒 所有 所有 的 所有 的 所有 所有, 唤醒 所有 正在 等待 此 条件 的 任务
this module does not copy types like module, method, stack <unk> stack frame, file, <unk> window, array, or any similar types, 此 模块 支持 类型 类 ， " " " ( ) " 方法 的 的 <unk> 、 " 、 " 或 " 类型 类型 类型 类型 类型, 该 模块 不 复制 模块 、 方法 、 栈 追踪 （ stack trace ） 、 <unk> （ stack frame ） 、 文件 、 套 接字 、 窗口 、 数组 以及 任何 类似 的 类型
this context is used by the "context" constructor as a prototype for new contexts, 此 上下文 使用 " 作为 " 作为 " 作为 " 的 " 的 ", 此 上下文 被 " context " 构造 器 用作 新 上下文 的 原型
the documentation for the "contextlib" module., " zlib " 模块 的 的, " contextlib " 模块 的 文档
some smaller changes made to the core python language are:, 一些 python 核心 核心 python 语言 改动 改动 ：, 对 python 语言 核心 进行 的 小 改动 ：
it returns a boolean value: "true" if a filling process is under way, "false" otherwise, 它 返回 一个 如果 被 终止 ， 则 会 被 取消 ， 否则 返回 " false ", 该 方法 返回 一个 布尔值 : 如果 填充 过程 正在 进行 为 " true " ， 否则 为 " false "
mandatoryrelease may also be "none", meaning that a <unk> feature got dropped., 也 可以 也 是 " none " ， 请 " " " " " " " ", <unk> 也 可能 是 " none " , 表示 这个 特性 已经 被 撤销
code to create and run the server looks like this:, 代码 创建 和 运行 运行 运行 ： 如下 所示 :, 用于 创建 和 运行 服务器 的 代码 看起来 像 这样 ：
pep <unk> defines executing modules as <unk>, pep <unk> : 定义 了 " 模块 . <unk> ", pep 338 定义 了 将 模块 作为 脚本 执行
<unk> will call <unk> with no arguments if the log is not currently <unk>, " callback . <unk> ( ) " 将 调用 时 将 不会 被 取消 的 则 将 不会 被 忽略, 如果 日志 当前 未 打开 则 " syslog ( ) " 将 不带 参数 地 调用 " <unk> ( ) "
if you have two lists of length 3, the output list is 9 elements <unk>, 如果 你 两个 两个 列表 ， 列表 ， 列表 列表 元素 元素 元素, 如果 你 的 两个 列表 长度 为 3 ， 那么 输出 的 列表 长度 就是 9 :
nested tuples cannot be parsed when using keyword <unk> keyword parameters passed in which are not present in the <unk> will cause "typeerror" to be raised., 在 元组 使用 " 时 使用 " 时 ， 当 使用 " " " 中 被 在 在 运行 时 被 被 被 将 被 引发 将 被 引发, 嵌套 的 元组 在 使用 关键字 参数 时 无法 生效 ， 不 在 <unk> 中 的 关键字 参数 会 导致 " typeerror " 异常
what <unk> to the <unk> <unk> python raises an exception when a function that requires an argument is called without any even if the argument isn't actually <unk>, 当 <unk> 在 python 一个 一个 一个 函数 一个 一个 函数 ， 当 一个 函数 参数 时 ， 如果 没有 参数 ， 如果 没有 参数 参数 ， 则 不 参数 任何 参数, 这个 参数 发生 了 什么 事 ？ <unk> 参数 地 调用 一个 需要 参数 的 函数 时 python <unk> 会 引发 异常 即使 参数 实际 未 被 使用 ...
you can also see that there was no previous binding for <unk> before the "global" <unk>, 你 可以 还 在 任何 任何 任何 任何 任何 任何 任何 <unk> 的 任何 <unk> 的 任何 <unk>, 您 还 可以 在 " global " 赋值 之前 看到 之前 没有 spam 的 绑定
the sample size is the size in bytes of each sample, 缓冲区 大小 大小 大小 字节 大小 字节 字节 大小, 采样 大小 是 以 字节 表示 的 每次 采样 的 大小
in case of duplicate keys, the last <unk> if override is true, else the first <unk>, 在 ， 在 下 ， 如果 如果 （ 如果 ） ） ， 则 会 会 被 求值, 当 存在 重复 的 键 时 ， 如果 override 真值 则 最后 出现 的 键 <unk>
other module level changes, 其他 模块 级 更改, 其他 模块 级 更改
if flag is "true", then <unk> is called automatically whenever there is a change in the window., 如果 flag 为 " true " ， 则 会 调用 " <unk> _ <unk> ( ) " 是 在 的 的, 如果 flag 为 " true " ， 则 " <unk> ( ) " 会 在 窗口 发生 改变 的 任何 时候 自动 被 调用
otherwise, it will be a "valueerror" to encode such <unk>, 否则 ， 它 将 将 将 引发 " valueerror ", 否则 ， 它 将 是 一个 " valueerror " 来 编码 这些 浮点数
it uses the <unk> callback to clear the <unk> bit and <unk> the remove, 它 将 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 它会 使用 <unk> 回调 函数 来 清除 只读 属性 位 并 再次 尝试 删除
most python users will not want to use this module directly, but instead use the cross version tools maintained by the python <unk> <unk>, 大多数 python python 不会 不会 模块 模块 ， ， ， 请 使用 " python . <unk> " python python 3 的 python 版本, 大多数 python 用户 不会 想要 直接 使用 这个 包 ， 而是 使用 python 包 <unk> 维护 的 跨 版本 工具
"inspect" inspect live objects, " inspect " 检查 对象, " inspect " 检查 对象
the letter may be <unk> and there might be other things after it, so you might just as easily see something like:, 对于 可能 是 ， ， ， ， ， 可能 会 在 其他 情况 下 ， 你 可能 需要 在 你 的 的, 前面 的 字母 可能 会 不同 ， 而且 后面 有 可能 会 有 其他 东西 ， 所以 你 也许 会 看到 类似 这样 的 东西 ：
create an instance of the "fileinput" class, 创建 一个 " 实例 " 实例 的 实例, 创建 一个 " fileinput " 类 的 实例
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
deprecated since version 3.9: <unk> now supports "[]", 3.9 版后 已 移除 : " collections . abc . abc " now supports " [ ] ", 3.9 版后 已 移除 : " collections . abc . sequence " now supports " [ ] "
a "netrc" instance or subclass instance encapsulates data from a netrc file, " " " 实例 " 实例 的 数据 数据 数据 数据 数据 数据 数据 数据 数据, " netrc " 的 实例 或 其子 类 的 实例 会 被 用来 封装 来自 netrc 文件 的 数据
for example, consider a file named <unk> with the following code:, 例如 ， 考虑 ， 一个 名为 " 名为 " 的 " 的 " :, 例如 ， 对于 有 如下 代码 的 名为 " <unk> . py " 的 文件 ：
the <unk> attribute of the object or type lists the method resolution search order used by both "getattr()" and "super()", " " 对象 " 对象 " 对象 " 方法 " 方法 " 方法 " 方法 " 方法 " 方法 的 字符串 ， 并 使用 " 和 ", object or type 的 " __ <unk> __ " 属性 列出 了 " getattr ( ) " 和 " super ( ) " 所 共同 使用 的 方法 解析 搜索 顺序
modify <unk> shearfactor and <unk> according to the given <unk>, <unk> <unk> 和 <unk> 和 <unk> <unk> <unk>, 根据 指定 的 矩阵 修改 <unk> 因子 ， 剪切 因子 和 <unk>
return to normal <unk> mode with line buffering., 返回 缓冲 的 <unk> <unk> " <unk> " 模式, 返回 具有 行 缓冲 的 正常 " <unk> " 模式
delete the line under the cursor, 删除 行 的 行, 删除 在 光标 之下 的 行
the <unk> parameter and the using custom converters registered with the module level <unk> function allow you to easily do that., " <unk> 使用 " 使用 " 模块 的 模块 的 模块 的 函数 的 函数 ， 你 需要 需要 的 的 的, 使用 <unk> _ types 参数 和 模块 级别 的 " register _ converter ( ) " 函数 注册 转换器 可以 简单 的 实现
you might be <unk> why appending an element to "y" changed "x" too., 你 ， 是 " <unk> _ <unk> ( ) " 来 一个 一个 的 的, 你 可能 想 知道 为什么 追加 一个 元素 也 改变 了 x
a backslash does not continue a token except for string literals <unk> tokens other than string literals cannot be split across physical lines using a <unk>, 反 斜杠 不 在 一个 字符串 （ 例如 字符串 字符串 字符串 字符串 ， 字符串 字符串 ， 字符串 ， 字符串 ， 字符串 ， 字符串 ， 例如 字符串 ， 例如 一个 字符串 ）, 反 斜杠 不能 用来 拼接 形符 ， 字符串 除外 ( 即 <unk> 字符串 以外 的 形符 不能 用 反 斜杠 分隔 到 两个 物理 行 )
show call <unk> after an <unk> <unk> for a function, open a small window with function parameter hints, 在 " callback _ callback ( ) " 在 调用 一个 一个 函数 ， ， 一个 函数 的 函数 ， 函数 的 函数 函数, 显示 调用 <unk> 在 函数 的 右 括号 后 ， 打开 一个 带有 函数参数 提示 的 小 窗口
the buffer interface allows objects to <unk> allow or <unk> <unk> of read write and read only <unk>, 缓冲区 的 " 允许 " 对象 " 对象 " 、 " 、 " 、 " 、 " 的 " 和 " 的 ", 缓冲区 接口 使得 对象 可以 <unk> 地 允许 或 <unk> 读写 或 只读 缓冲区 的 导出
changed in version 3.5: matching of ip addresses, when present in the <unk> field of the <unk> is now supported., 在 3.5 版 更改 : 当 " " " " " " " <unk> " ， <unk> <unk> <unk> " <unk> " 的 ", 在 3.5 版 更改 : 现在 支持 匹配 存在 于 证书 的 <unk> 字段 中 的 ip 地址
the marker bits are a sequence of zero to four "1" bits followed by a "0" bit, " control " 是 一个 序列 的 数字 为 " a " " " " " " ", 标志 <unk> 由 <unk> 四个 值为 " 1 " 的 二进制位 加 一个 值为 " 0 " 的 二进制位 构成 的 序列
it can be set directly to override the selection process, but this is <unk>, 它 可以 设置 设置 设置 设置 为 " 的 " ， 但 这 是, 可以 直接 给 它 赋值 ， 这样 可以 覆盖 自动 选择 的 路径 ， 但是 不 建议 这样 做
the function's docstring and name are retrieved from the code object, 随后 名称 和 和 名称 名称 名称 名称, 从 代码 对象 中 提取 函数 的 文档 字符串 和 名称
the optional info argument should be a 3 tuple containing an exception type, exception value, and traceback object, exactly like the tuple returned by <unk>, 可选 的 参数 参数 是 一个 一个 包含 一个 包含 一个 异常 的 异常 ， 并且 一个 " " " " " " " " " ", 可选 的 info 参数 应为 一个 包含 异常 类型 ， 异常 值 和 回溯 对象 的 3 元组 ， 与 " sys . exc _ info ( ) " 所 返回 的 元组 <unk>
changed in version 3.6: accepts a path like object ., 在 3.6 版 更改 : 接受 一个 类 路径 对象, 在 3.6 版 更改 : 接受 一个 path like object
how do i call a method defined in a base class from a derived class that overrides it?, 如何 在 在 定义 中 定义 一个 类 的 类 的 的 的 的, 如何 从 覆盖 基类 的 派生类 调用 基类 中 定义 的 方法 ?
data attributes correspond to <unk> <unk> in <unk> and to <unk> <unk> in c++, 数据 属性 的 " <unk> ( ) " 和 " <unk> ( ) " 和 " <unk> ( ) " 和 " <unk> ( ) ", 数据 属性 对应 于 <unk> 中 的 “ 实例 变量 ” ， 以及 c++ 中 的 “ 数据 成员 ”
base class for warnings related to <unk>, 用于 与 字典 的 的 的 的 的, 与 unicode 相关 的 警告 的 基类
return a "pylistobject" containing all the values from the dictionary p ., 返回 字典 字典 中 的 所有 值 的 值, 返回 一个 包含 字典 中 所有 值 ( values ) 的 " pylistobject "
constructor for an "incrementaldecoder" instance., " 为 " 的 的 的 实例, " incrementaldecoder " 实例 的 构造 器
later assignments to the <unk> class variable will raise an <unk>, 将 " " " " 类 类 实例 ， " 引发 " 异常 ", <unk> 对 " _ fields _ " 类 变量 赋值 将会 引发 attributeerror
but not <unk> <unk> etc, 但是 不 <unk> <unk> ， <unk>, 但 ' a . <unk> ' , ' b . a . b ' 等 则 不 允许
changed in version 3.5: a list of named tuples <unk> filename, <unk> function, <unk> <unk> is returned., 在 3.5 版 更改 : 接受 一个 元组 元组 " , " <unk> " , " <unk> _ <unk> " , " <unk> ", 在 3.5 版 更改 : a list of named <unk> " <unk> ( frame , filename , <unk> , function , code _ context , index ) " is returned .
see the <unk> function, 参见 " <unk> . 函数 ( ) " 函数, 参见 " get _ ident ( ) " 函数
this is enough to make scripts executable from the command prompt as <unk>, 这 将 被 从 从 " 中 的 " " " " 的 ", 这 足以 使 脚本 在 命令提示符 下 作为 “ foo . py ” 命令 被 执行
why can't raw strings <unk> strings) end with a <unk>, 为什么 原始 原始 原始 字符串 （ 以反 ） ） ， 以反 结尾, 为什么 原始 字符串 （ r strings ） 不能 以反 斜杠 结尾 ？
the constructor accepts the same optional argument passed to <unk>, 构造 器 接受 接受 可选 的 参数 传给 传递 给 " 形参, 构造 器 接受 的 可选 参数 与 传递 给 " sys . exit ( ) " 的 相同
modify the filename of a log file when <unk>, 在 文件 文件 文件 文件 时 文件 文件 文件, 当 轮换 时 修改 日志 文件 的 文件名
and an empty string means that the traversal scripts make the <unk> about whether or not to focus on the window, 并且 空 字符串 ， 并 不 的 窗口 的 窗口 的 窗口 的 窗口 的 窗口, 并且 空 字符串 意味着 遍历 <unk> 本 决定 是否 关注 窗口
before an except <unk> suite is executed, details about the exception are stored in the "sys" module and can be accessed via <unk>, 在 " " " " " " " " " " 异常 异常 异常 异常 模块 被 被 模块 可以 通过 " <unk> ", 在 一个 except 子句 体 被 执行 之前 ， 有关 异常 的 详细信息 存放 在 " sys " 模块 中 ， 可 通过 " sys . exc _ info ( ) " 来 访问
[1] while <unk> < <unk> is true <unk> for floats it may not be true <unk> due to <unk>, [ 1 ] " ] " < < < < ] " " " " " " ； 为了 可能 可能 导致 为 " <unk> ", [ 1 ] 虽然 " abs ( <unk> y ) < abs ( y ) " 在 数学 <unk> 为 真 ， 但 对于 浮点数 而言 ， 由于 舍入 的 存在 ， 其 在 数值 上 <unk> 为 真
drop support for python 2.6 and older, " python python 的 python 和 和 的, 删除 对 python 2.6 及 更 早 版本 的 支持
the "dataclass()" decorator will add various <unk> methods to the class, described below, 将 " " " " " " " " 方法 来 方法 来 描述 的 方法, " dataclass ( ) " 装饰 器 将 向 类 中 添加 各种 “ dunder ” 方法 ， 如下 所述
if an <unk> exception occurs in the block, it is <unk> inside the generator at the point where the yield occurred, 如果 在 <unk> 中 ， " 异常 " 异常 ， 在 异常 中 发生 " <unk> " 中 ， 则 该 函数, 如果 在 该 语句 体中 发生 了 未 处理 的 异常 ， 则 该 异常 会 在 生成器 发生 yield 时 重新 被 引发
this howto <unk> python's support for the unicode specification for representing textual data, and explains various problems that people commonly <unk> when trying to work with <unk>, 这个 <unk> <unk> 支持 对 支持 的 支持 的 支持 的 ， ， ， ， ， <unk> <unk> 的 <unk> <unk> 的 <unk>, 本 指南 讨论 了 python 对于 表达 文本 数据 的 unicode 规范 的 支持 ， 并且 解释 了 <unk> 试图 使用 unicode 时 经常 遇到 的 问题
<unk> defines standard options and methods supported by tk themed widgets and is not supposed to be directly <unk>, " tkinter . dom " 标准 标准 选项 和 和 方法 和 和 方法 和 " sys . <unk> ( ) " 和 " 不会 被 忽略, " ttk . <unk> " 定义 了 由 tk 带 主题 部件 所 支持 的 标准 选项 和 方法 ， 它们 不 应该 被 直接 实例 化
pep <unk> byte literals, pep <unk> : 多任务处理, pep <unk> : 字节 字 面值
however, for a <unk> complicated <unk> writing a corresponding class can be much <unk>, 但是 ， 例如 " <unk> . <unk> " 的 ， ， 可以 是 一个 类 的 的, 然而 ， 对于 一个 <unk> <unk> 的 生成器 ， 写出 一个 相应 的 类 可能 会 相当 <unk>
and the last uses all three calling conventions in the same function definition:, 在 所有 中 所有 所有 所有 中 的 所有 函数, 而 最后 一个 则 在 同一 函数 定义 中 使用 了 全部 三种 调用 方式 :
changed in version 3.6: keyword arguments are packed in a tuple instead of a dictionary, <unk> indicates the total number of arguments., 在 3.6 版 更改 : 关键字 参数 是 " 元组 " 元组 " 元组 " ) " 方法 的 元组, 在 3.6 版 更改 : 关键字 参数 会 被 打包 为 一个 元组 而 非 字典 ， <unk> 指明 参数 的 总 数量
now let's <unk> the original item 1 was an instance of a user defined class, and let's further <unk> that the class defined a "__del__()" method, 现在 ， 我们 " 原始 " 的 实例 定义 的 定义 的 实例 ， 实例 的 实例 ， 定义 的 定义 定义 定义 定义 定义 的 方法, 现在 假设 原来 的 成员 1 是 用户 定义 类 的 实例 ， 且 假设 这个 类 定义 了 " __ del __ ( ) " 方法
if you want the <unk> or <unk> hash functions, they are available in the "zlib" module., 如果 你 想要 或 或 或 或 ， ， ， ， ， 它们 在 在 " 中, 如果 你 想 找到 <unk> 或 <unk> 哈希 函数 ， 它们 在 " zlib " 模块 中
the optional lock argument must be a "lock" object or "none", 可选 的 参数 必须 为 一个 " none " 或 " none ", 可选 的 lock 参数 必须 为 " lock " 对象 或 " none "
if an argument outside those ranges is given, "valueerror" is raised., 如果 一个 参数 的 参数 ， 则 会 被 ， 则 会 引发 " valueerror ", 如果 参数 不 在 这些 范围 内 ， 则 抛出 " valueerror " 异常
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
if the name is not found <unk> the builtins namespace is searched, 如果 名称 名称 ， 则 会 被 ， 则 返回 " 空间 ", 如果 未 在 其中 找到 指定 名称 ， 再 搜索 内置 命名 空间
class method that makes a new instance from an existing sequence or iterable., " 类 ( ) " 方法 从 一个 新 的 实例 ， 或 迭代 对象 或 迭代 对象, 类 方法 从 存在 的 序列 或 迭代 实例 创建 一个 新 实例
changed in version 3.8: setting workers to 0 now <unk> the <unk> number of <unk>, 在 3.8 版 更改 : 将 添加 " <unk> " <unk> " 现在 " <unk> . <unk> _ <unk> ", 在 3.8 版 更改 : <unk> <unk> to 0 now <unk> the <unk> number of <unk> .
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
so, if the input iterable is sorted, the combination tuples will be produced in sorted order., 如果 如果 输入 输入 的 的 ， 则 会 在 " 条目 " 中 的 顺序 顺序, 因此 ， 如果 所 输入 iterable 是 已 排序 的 ， 组合 元组 也 将 按 已 排序 的 顺序 生成
new in version 3.6., 3.6 新版 功能 ., 3.6 新版 功能 .
the returned file descriptor may be used as a parameter to <unk> to create a file object., 返回 的 文件 描述符 可 用作 用作 一个 文件 对象 的 文件 对象, 返回 的 文件 描述符 可以 被 用作 " os . <unk> ( ) " 的 形 <unk> 创建 一个 文件 对象
this article explains the new features in python <unk> compared to <unk>, 本文 介绍 python 3.8 . 2 . 2 中 的 新 的 新 的 新, 本文 解释 了 与 3.5 相比 ， python 3.6 中 的 新 功能
python has only one type of module object, and all modules are of this type, regardless of whether the module is implemented in python, c, or something else, python 3.6 仅 包含 模块 模块 类型 ， 模块 的 所有 模块 ， 模块 是 " 模块 " 模块 的 " " " " " " " " ", python 只有 一种 模块 对象 类型 ， 所有 模块 都 属于 该 类型 ， 无论 模块 是 用 python 、 c 还是 别的 语言 实现
the backslash <unk> character is used to escape characters that otherwise have a special <unk> such as <unk> backslash itself, or the quote character., 反 字符 字符 字符 字符 的 字符 （ 字符 ） ， 因此 的 特殊 的 " " " " " " " " " " " 或 " <unk> " ) " 或 " <unk> " ) ", 反 斜杠 ( " \ " ) 字符 被 用来 对 特殊 含义 的 字符 进行 转义 ， 例如 换行 ， 反 斜杠 本身 或是 引号 等 字符
[1] typing an interrupt while a command is executing raises the <unk> exception, which may be handled by a "try" statement., [ 1 ] " 一个 " ， " " " " " " " " " ， " 会 被 引发 " " ", [ 1 ] 在 <unk> 时 键入 中断 引发 的 " keyboardinterrupt " 异常 ， 可以 由 " try " 语句 处理
allocate a new python object using the c structure type type and the python type object type, 在 python c 类型 的 python 类型 对象 类型 类型 类型 类型 类型 类型 类型, 使用 c 的 数据结构 类型 type 和 python 的 类型 对象 type 分配 一个 新 的 python 对象
return the median of grouped <unk> data, calculated as the <unk> <unk> using interpolation, 返回 与 <unk> 的 的 ， ， <unk> 的 " <unk> " ， <unk> " <unk> <unk> <unk> <unk> 的 <unk>, 返回 分组 的 连续 数据 的 中位数 ， 根据 第 50 个 <unk> 的 位置 使用 插值 来 计算
pep <unk> format specifier for thousands separator, pep <unk> : 千位 格式 的 格式 说明符, pep <unk> : 千位 分隔符 的 格式 说明符
if the module is imported, the code is not <unk>, 如果 模块 模块 被 取消 ， 则 会 被 忽略, 如果 模块 是 被 导入 的 ， 那些 代码 是 不 运行 的 :
pep 3151: reworking the os and io exception hierarchy, pep 3151 : 重写 os 和 异常 异常 层次结构, pep 3151 : 重写 os 和 io 异常 的 层次结构
this is useful for accessing inherited methods that have been overridden in a class., 这 适用 于 适用 于 方法 的 方法 的, 这 对于 访问 已 在 类 中 被 重载 的 继承 方法 很 有用
the python curses module, python 模块 的 模块, python 的 curses 模块
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
each statement in <unk> is of the form:, 每个 语句 的 " 语句 " 是 是 是 的, " __ future __. py " 中 的 每 一条 语句 都 是 以下 格式 的 ：
<unk> enum members and values, 枚举 枚举 成员 和 值, 复制 枚举 成员 和 值
<unk> statements are a convenient way to insert debugging assertions into a <unk>, " " " 语句 " 是 一个 指向 的 的 的 字典, assert 语句 是 在 程序 中 插入 调试 性 断言 的 简便 方式 :
supported, iana registered status codes available in <unk> are:, " <unk> " 在 " 的 " 中 的 " <unk> ( ) " 的 的, 已 支持 并且 已 在 " http . httpstatus " iana 注册 的 状态 <unk> ：
<unk> <unk> are a compact way of showing just the lines that have changed plus a few lines of context, <unk> 是 是 是 是 是 是 的 的 的 的 的 的 的 的 的 的, 所以 统一 差异 是 一种 只 显示 有 更改 的 行 <unk> 几个 上下文 行 的 紧凑 形式
return a new "bytes" object, which is an immutable sequence of integers in the range "0 < x < <unk>, " frozenset " 对象 " 一个 新 的 ， 是 一个 " ， " ， " ， " ， " " " x x y " x ", 返回 一个 新 的 “ bytes ” 对象 ， 是 一个 不可 变 序列 ， 包含 范围 为 " 0 < x < 256 " 的 整数
see <unk> setting environment variables for other ways to <unk> python., 请参阅 " <unk> . <unk> " <unk> 获取 其他 <unk> 的 <unk> <unk> <unk> <unk> 的 <unk>, 请参阅 附录 ： 设置 环境变量 了解 启动 python 的 其他 方式
touch all locations in <unk> of the window that have been changed in the window., 将 所有 中 的 的 中 的 的 帧, <unk> 已 在 窗口 中 被 改变 的 此 窗口 的 各个 上级 窗口 中 的 所有 位置
changed in version 3.3: removed the strict argument that was deprecated in 2.4, 在 3.3 版 更改 : 移 除了 strict 参数 <unk> in ., 在 3.3 版 更改 : 移 除了 在 2.4 版本 中 被 弃 用 的 strict 参数
the function objects created in this way by default accept any number of arguments, accept any ctypes data instances as arguments, and return the default result type specified by the library loader, 函数 函数 对象 的 函数 对象 ， 默认 任何 任意 任意 任意 任意 任意 任何 数据 的 实例 ， 并且 返回 默认 的 的 默认 的 默认, <unk> 方式 创建 的 函数 对象 默认 接受 任意 数量 的 参数 ， 接受 任意 ctypes 数据 实例 作为 参数 ， 并且 返回 库 加载 器所 指定 的 默认 结果 类型
generalized iterable unpacking in "yield" and "return" statements no longer requires enclosing parentheses, 在 迭代 中 的 迭代 器 ， 并 将 " " " " ", 在 " yield " 和 " return " 语句 中 的 一般 可 迭代 对象 解包 不再 要求 加 圆括号
returns two sets of <unk> <unk> <unk>, 返回 两个 " <unk> " " " " ", 返回 两个 task / future 集合 : " ( done , <unk> ) "
the constructor accepts an optional integer initializer; no overflow checking is done., 构造 构造 器 接受 一个 可选 的 整数 ， 不 没有 溢出检查 溢出检查 溢出检查, 该 构造 器 接受 一个 可选 的 整数 初始化 器 ； 不会 执行 溢出检查
if the referent is no longer <unk> returns <unk>, 如果 没有 没有 没有 则 返回 " <unk> ", 如果 被 引用 对象 不再 存在 ， 则 返回 " py _ none "
calls a callable object with positional arguments, 调用 参数 调用 对象 参数 参数, 调用 一个 可 调用 对象 并 传入 位置 参数
return the null terminated contents of the object obj through the output variables buffer and length ., 返回 对象 的 对象 的 内容 的 的 的 和 的 的 长度, 通过 输出 变量 buffer 和 length 返回 以 null 为 <unk> 的 对象 obj 的 内容
<unk> extensions that expect to be built in their installation directory is almost always a bad <unk> <unk>, " <unk> . <unk> " 的 的 的 的 的 ， ， 是 一个 " 总是 " " " " " " ", （ 但是 ， 发布 预期 在 其 安装 目录 中 被 构建 的 扩展 几乎 总是 一个 <unk> 。 ）
a <unk> object that would <unk> on obj , if obj is an awaitable <unk> is used for the <unk>, <unk> 对象 的 对象 （ 如果 如果 为 " 为 " ， 则 会 被 " " " " ", 等待 obj 的 " task " 对象 ， 如果 obj 是 一个 可 等待 对象 ( " inspect . isawaitable ( ) " 用于 测试 )
see the python cookbook for a long discussion of many ways to do this:, 请参阅 python python for 一个 <unk> 的 的 的 的 的 的 :, 有关 执行 此 操作 的 许多 方法 的 详细 讨论 ， 请参阅 python <unk> :
"cmd" support for line oriented command <unk>, " cmd " 支持 面向 面向 的 命令, " cmd " 支持 面向 行 的 命令 解释器
see also: microsoft <unk> tool a tool to find dll <unk>, 参见 : " <unk> " <unk> " <unk> " <unk> " 的 的 的, 参见 : microsoft <unk> 工具 一个 用于 查找 dll 依赖 的 工具
beyond just reporting bugs that you <unk> you are also <unk> to submit <unk> to fix them, 在 某些 需要 的 的 的 ， 你 你 可以 <unk> <unk> <unk> <unk> <unk>, 除了 仅仅 报告 您 所 发现 的 错误 之外 ， 同样 <unk> 提交 修复 它们 的 补丁
calling <unk> to assign to variables in the module also <unk>, 调用函数 " <unk> ( ) " 来 到 模块 中 的 " 模块 中 的 ", 调用 " pyobject _ <unk> ( ) " 为 模块 中 的 变量 赋值 也 是 可以 的
<unk> and formatting parameters, <unk> 和 和 参数, 变种 与 格式 参数
the operation is done in place when o1 supports it, 当 o1 支持 时 ， 在 这个 支持 时 储存 储存, 当 o1 支持 时 ， 这个 运算 直接 使用 它 储存 结果
after the module is created but before execution, the import machinery sets the import related module attributes <unk> in the pseudo code example <unk> as <unk> in a later section., 在 模块 模块 模块 ， 在 之前 ， 但 在 模块 导入 导入 模块 （ 导入 模块 模块 中 的 模块 的 " 模块 " ） ， <unk> 的 " <unk> " <unk> ", 在 模块 创建 完成 但 还 未 执行 之前 ， 导入 机制 会 设置 导入 相关 模块 属性 （ 在 上面 的 示例 伪 代码 中为 “ _ init _ module _ <unk> ” ） ， 详情 参见 后续 部分
note that only <unk> will be <unk>, 请 注意 " " " " " " " 是 ", 需要 注意 只有 <unk> 会 被 <unk>
otherwise ( block is <unk> return an item if one is immediately available, else raise the <unk> exception ( timeout is ignored in that <unk>, 否则 其他 情况 下 ， " " " " " " " " " " " " " " " " " " " " " " 异常 ， " 异常 " " " ", 反之 ( block 是 false ) , 如果 一个 项目 立即 可 得到 ， 则 返回 一个 项目 ， 否则 引发 " empty " 异常 ( 这种 情况 下 ， timeout 将 被 忽略 )
<unk> are by default <unk> but can be set via the <unk> and <unk> <unk> angle <unk> depends on the turtle mode, see <unk>, <unk> 默认 默认 情况 下 ， 但 但 通过 " " " " " " " " <unk> " <unk> " <unk> " 的 " " " " " " " " ", ( 单位 默认 为 角度 ， 但 可 通过 " <unk> ( ) " 和 " <unk> ( ) " 函数 改变 设置 。 ) 角度 的 正负 由 海龟 模式 确定 ， 参见 " mode ( ) "
changed in version 3.2: source_address , context and <unk> were added., 在 3.2 版 更改 : <unk> 了 context 上下文 和 <unk>, 在 3.2 版 更改 : 添加 了 source _ address , context 和 check _ hostname
"0 < seconds < <unk> <unk> (the number of seconds in one <unk>, （ < < < < < < <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk>, " 0 < seconds < <unk> 24 " ( 一天 的 秒数 )
type of the <unk> function passed to the "tp_traverse" handler, " math . <unk> _ function ( ) " 函数 的 函数 的 域, 传给 " tp _ traverse " 处理 的 访问 函数 的 类型
the lowest valued entries are retrieved first (the lowest valued entry is the one returned by <unk>, 该 器 的 的 是 （ （ （ 由 " " . create _ fast ( ) " 返回 的 的, 最小值 先 被 取出 ( 最小值 条目 是 由 " sorted ( list ( entries ) ) [ 0 ] " 返回 的 条目 )
python shell open or wake up the python shell window., python shell 打开 或 python 的 shell, python shell 打开 或 唤醒 python shell 窗口
using the connection as a context manager, 使用 连接 作为 上下文 管理器, 使用 连接 作为 上下文 管理器
the optional facility keyword argument (default is <unk> sets the default facility for messages which do not have a facility explicitly <unk>, 可选 的 关键字 参数 参数 （ " " " " " " " ， " ， " 的 " ， 默认 的 的 默认 的 的, 可选 的 <unk> 关键字 参数 ( 默认 为 " log _ user " ) 为 没有 显式 编码 <unk> 的 消息 设置 默认 的 <unk>
<unk> color string or color tuple, " ' r ' 字符串 字符串 或 字符串 的 元组, " pencolor " : 颜色 字符串 或 颜色 元组
to <unk> this need for additional information, you can replace the default field value with a call to the provided "field()" function, 为了 <unk> 这个 需要 的 的 的 ， 你 可以 使用 默认 参数 默认 为 " none " 函数, 为了 满足 这种 对 附加 信息 的 需求 ， 你 可以 通过 调用 提供 的 " field ( ) " 函数 来 替换 默认 字 段值
the type or class may have other features as well., 类型 或 " 类 可以 被 其他 其他 的 的, 这样 的 类型 或类 还 可能 拥有 其他 特性
this is equivalent to the python expression <unk>, 这 相当于 python 表达式 " 表达式 ", 这 相当于 python 表达式 " len ( o ) "
it has two basic methods, "acquire()" and "release()", 它 具有 两个 基本 " " " 和 " 和 " 和 ", 它 有 两个 基本 方法 ， " acquire ( ) " 和 " release ( ) "
attributes of that exception hold the arguments, the exit code, and stdout and stderr if they were <unk>, 当 参数 的 参数 ， 并且 和 和 并且 和 ， 如果 ， 如果 没有 被 忽略, 这个 异常 的 属性 将 设置 为 参数 , 退出 码 , 以及 标准 输出 和 标准 错误 , 如果 被 捕获 到 .
<unk> who also provided an implementation, " ' " ' " 也 也 会 使用 " 实现, <unk> 编写 ， 他 也 提供 了 实现
<unk> the message had a continuation line as its first header line., <unk> 消息 消息 消息 ， 将 其 作为 其 第一个 的 的, " <unk> " 消息 以 一个 继续 行 作为 其 第一个 <unk>
patch by pablo galindo <unk>, 由 pablo galindo galindo 修正, 由 pablo galindo <unk> 提供 补丁
force the stdout and stderr streams to be <unk>, 将 stdout stdout 和 " sys . stdout " 和 " sys . stdout ", 强制 stdout 和 stderr 流 不 使用 缓冲
when the <unk> routine is used, normal flush of input and output queues associated with the <unk> <unk> and <unk> characters will not be done, 当 " <unk> " ， ， ， 会 被 为 真值 ， ， 并 将 其 " " " " " " " " " " " " " " " " " " " " " ", 当 使用 " <unk> ( ) " 例程 时 ， 与 " <unk> " , " <unk> " 和 " <unk> " 字符 相关联 的 输入 和 输出 队列 的 正常 刷新 将 不会 被 执行
accessing values exported from dlls, 访问 的 导出 的 导出, 访问 dll 的 导出 变量
"a <unk> b)" is equivalent to "a <unk> b"., " a a b " a b " " " " " " " " " " " " " " " " ", " a <unk> ( a , b ) " 等价 于 " a / / b "
changed in version 3.5: on windows, the function now also supports socket <unk>, 在 3.5 版 更改 : 在 windows 中 现在 now now now now " now " now, 在 3.5 版 更改 : on windows , the function now <unk> supports socket <unk> .
every python developer should read it at some <unk> here are the most important points extracted for <unk>, python python 的 应该 在 ， 某些 某些 某些 （ 例如 是 在 大多数 的 最 在 <unk> 的 <unk>, 每个 python 开发人员 都 应该 在 某个 时候 阅读 它 ； 以下 是 为 你 提取 的 最 重要 的 几个 <unk> ：
since the representation is <unk> it is useful for <unk> porting values across different versions of python <unk> <unk> and exchanging data with other languages that support the same format (such as java and <unk>, 由于 字典 是 是 <unk> ， ， <unk> 的 的 ， ， 的 的 python 的 的 的 的 的 ， ， 和 和 的 的 的 和 和 <unk> 的, 由于 这种 表示法 是 精确 的 ， 它 适用 于 跨越 不同 版本 （ 平台 <unk> ） 的 python 移植 数值 ， 以及 与 支持 相同 格式 的 其他 语言 （ 例如 java 和 <unk> ） 交换 数据 .
if it is <unk> the <unk> length is added to it, 如果 它 是 " <unk> _ <unk> " ， 则 会 被 移除, <unk> 为 负值 ， 则 再 加上 序列 长度
encode the contents of the binary input file and write the resulting base64 encoded data to the output file, 将 二进制 文件 的 文件 文件 写入 写入 写入 写入 的 的 文件, 编码 二进制 input 文件 的 内容 并 将 经 base64 编码 的 数据 写入 output 文件
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
changed in version 3.6: accepts a path like object ., 在 3.6 版 更改 : 接受 一个 类 路径 对象, 在 3.6 版 更改 : 接受 一个 类 路径 对象
(contributed by victor stinner in bpo <unk> and bpo <unk>, （ 由 victor stinner 在 bpo <unk> 和 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 和 bpo <unk> 中 贡献 。 ）
the function <unk> is modified in a <unk> <unk>, 函数 " " " " " " 是 一个 " " " ", 函数 " spam _ system ( ) " 按照 如下 方式 修改 :
the module should already be initialized when <unk> is called, 该 模块 将 被 调用 时 被 调用 时 被 调用, 当 调用 " exec _ module ( ) " 的 时候 ， 那个 模块 应该 已经 被 初始化 了
reference counting in python, python 2.6 的, python 中 的 引用 计数
see also the documentation for <unk> <unk> and <unk>, 请参阅 " 文档 . <unk> " <unk> " <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk>, 另 请参阅 " sys . version " , " sys . <unk> " 以及 " sys . version _ info " 的 文档
checks for an ascii <unk> <unk> it is equivalent to <unk> or <unk>, 对于 一个 ascii 的 ， ， 它 它 将 " " " " " " " " " " " " " " " " " ", 检测 ascii 字母 类 字符 ； 它 等价 于 " <unk> ( c ) or <unk> ( c ) "
<unk> you can inherit from built in classes such as "int", "list", "dict", etc., " 你 . <unk> _ <unk> " 中 " 和 " 类 " 和 " 类 " " " " " " " " " " ", 是 的 ， 您 可以 继承 内置 类 ， 例如 " int " ， " list " ， " dict " 等
<unk> can be a python dictionary that will be used as the <unk> <unk> it can be used to perform <unk> across multiple pickles created by the same <unk>, <unk> 可以 是 一个 python python 字典 将 被 用作 用作 可 使用 " <unk> " 来 来 使用 " 来 使用 的 的, memo 可以 是 一个 将 被 用作 pickle 的 <unk> 记录 的 python 字典 ； 它 可 被 用来 对 由 同一 封存 器 创建 的 多个 封存 对象 执行 反汇编
creating a compressed file:, 创建 一个 创建, 创建 一个 压缩文件 :
many uses of <unk> are <unk> when written as "for" <unk>, 许多 " <unk> " <unk> " <unk> " <unk> " <unk> " <unk> " <unk> " <unk> ", 许多 使用 " functools . reduce ( ) " 的 情形 可以 更 <unk> 地 写成 " for " 循环 的 形式
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
this can be a mutable dictionary or "null"., 这 是 一个 字典 或 字典 或 ", 这 可以 是 一个 可变 字典 或 " null "
interface options for equivalent functionality on the command line <unk> <unk>, 接口 ， " os . x " 的 " 命令 ( ) " , " <unk> _ <unk> ( ) ", 接口 选项 for <unk> <unk> on the command line ( " python path / to / <unk> " ) .
it defaults to <unk> which causes "valueerror" to be raised in case an encoding error occurs., 它 默认 为 " false " ， 它 在 在 错误 的 错误, 默认值 " ' strict ' " 表示 在 出现 编码 错误 时 引发 " valueerror "
the first week of an iso year is the first <unk> calendar week of a year containing a <unk>, 第一个 一个 的 的 （ 由 <unk> <unk> 的 的 的 的 的 的 一个 <unk>, 一个 iso 年 的 第一个 星期 就是 （ 格列 高利 ） 历法 的 一年 中 第一个 包含 <unk> 的 星期
it turns out to be very <unk> for a variety of <unk>, 它 将 被 为 为 <unk> <unk> 的 的, 出于 多种 原因 它 被 证明 是 非常 有用 的
in addition, there is one class defined for each constructor on the right hand <unk> these classes inherit from the classes for the left hand side trees, 此外 ， ， 在 类 每个 每个 的 的 每个 中 的 的 的 ， 类 ， 类 类 的 类 类 的 类 的 类 的 类, 另外 ， 在 抽象 语法 定义 的 右侧 ， 对 每 一个 构造 器 也 定义 了 一个 类 ； 这些 类 继承 <unk> 左侧 的 类
for binary mode, this function is equivalent to the <unk> <unk> <unk> mode, compresslevel <unk>, 对于 二进制 函数 ， 此 函数 会 等价 于 " <unk> _ <unk> ( " " " " " " " ", 对于 二进制 模式 ， 这个 函数 等价 于 " <unk> " 构造 器 : " <unk> ( filename , mode , compresslevel compresslevel ) "
for instance, a statistics package may include a container class for experimental data, 例如 ， 一个 字符串 ， 可以 包含 一个 类 的 类, 例如 ， 一个 统计 用 的 包 可能 包含 一个 实验 数据 的 容器 类
terminals usually return special keys, such as the cursor keys or <unk> keys such as page up and <unk> as a <unk> escape sequence, 如果 通常 的 的 特殊 ， ， " ， " 作为 键 的 键 ， 例如 和 <unk> 和 <unk> 的 <unk>, 终端 通常 会以 多 字节 转义序列 的 形式 返回 特殊 按键 ， 比如 <unk> 和 <unk> 比如 <unk> up 键 和 home 键
new built in features:, 新 的 内置 特性 ：, 新 的 内置 特性 ：
because "strftime()" is implemented per platform it can sometimes offer more directives than those listed, 由于 " __ ( ) " __ ( ) " __ init __ ( ) " ， 它 可以 通过 更 多 的 更 多 信息, 因为 每个 平台 都 实现 了 " strftime ( ) " ， 它 有时 会 提供 比 列出 的 指令 更 多 的 指令
<unk> <unk> number, positive <unk>, " <unk> " , " <unk> " , " <unk> ( ) ", " <unk> " : ( 正 数值 , 正 数值 )
in the configuration <unk> this is done by giving each destination object an id which identifies it <unk> and then using the id in the source object's configuration to indicate that a connection exists between the source and the destination object with that <unk>, 在 配置 配置 中 ， 这个 函数 会 被 调用 对象 ， 每个 对象 对象 一个 一个 对象 ， ， 它 将 在 python 解释器 的 ， ， 并 将 其 与 <unk> 的 的 的 对象, 在 配置 字典 中 ， 这是 通过 给 每个 目标 对象 一个 id 来 无 歧义 地 标识 它 ， 然后 在 源头 对象 中 使用 该 id 来 实现 的
by the time you get around to doing anything with the file name it returns, <unk> else may have <unk> you to the <unk>, 默认 情况 下 ， 要 需要 的 的 文件 ， ， 的 的 ， ， ， 可能 可能 可能 需要 需要 需要 的 的, 当 你 开始 使用 本 方法 返回 的 文件 执行 任何 操作 时 ， 可能 <unk> 已经 <unk> 了
unix man page <unk> ., unix ， <unk> ( ) ), 请 参见 unix 手册 页 <unk> ( 2 )
here are some simple examples:, 以下 是 一些 简单 的 例子 :, 以下 是 一些 简单 的 例子 :
usually, the local scope references the local names of the <unk> current function, 通常 是 以下 的 的 名称 名称 名称 名称 名称 名称 名称, 通常 ， 当前 局部 作用域 将 （ 按 字面 文本 ） 引用 当前 函数 的 局部 名称
if timeout is a positive number, it blocks at most timeout seconds and raises the <unk> exception if no item was available within that time, 如果 timeout 是 一个 ， 则 ， 则 会 引发 ， 则 在 没有 没有 没有 ， 则 引发 " <unk> " 异常, 如果 timeout 是 正数 ， 将会 在 阻塞 了 最 多 timeout 秒 之后 还是 没有 可用 的 对象 时 抛出 " queue . empty " 异常
it defaults to 1 which means that the default buffer size will be used., 它 默认 为 " false " ， ， 默认 为 字节 的 大小, 默认值 1 表示 将 使用 默认 的 缓冲区 大小
types which do not store references to other objects, or which only store references to atomic types (such as numbers or <unk> do not need to provide any explicit support for garbage collection., 类型 ， 不 其他 其他 其他 或 其他 变量 ， 例如 " " " " " " " ， 例如 不 需要 的 任何 支持 的 支持, 不 保存 其它 对象 的 引用 的 类型 ， 或者 只 保存 原子 类型 （ 如 数字 或 字符串 ） 的 引用 的 类型 ， 不 需要 显式 提供 垃圾 回收 的 支持
this chapter will discuss some of the <unk>, 这 将 将 " " " 一些 一些 一些, 本章 将 讨论 一些 可能性
<unk> <unk> <unk> of <unk>, " <unk> " <unk> " <unk> " <unk> " 的 <unk>, " dbm . gnu " gnu 对 dbm 的 重 解析
the constructor takes three optional arguments a message format string, a date format string and a style <unk>, 构造 器 接受 接受 可选 参数 参数 一个 字符串 格式 字符串 格式 字符串 格式 字符串 和 字符串, 构造函数 有 三个 可 选 参数 — — 消息 格式 字符串 、 日期 格式 字符串 和 样式 指示 符
compares <unk> and <unk> (lists of strings) and returns a string which is a complete html file containing a table showing line by line differences with <unk> line and intra line changes <unk>, " " " " " 和 " 和 " ( ) " 和 " 的 一个 字符串 ， 一个 一个 一个 的 的 的 的 的 的 的 的 ， ， 的 的 行 ， 以及 在 命令行, 比较 <unk> 和 <unk> ( 字符串 列表 ) 并 返回 一个 字符串 ， 表示 一个 完整 html 文件 ， 其中 包含 <unk> 差异 的 表格 ， <unk> 与 <unk> 的 更改 将 <unk> 显示
to decompress a multi stream input with <unk> you must create a new <unk> for each stream., 要 指定 一个 数据 ， 输入 输入 输入 ， ， 必须 必须 必须 必须 必须 为 一个 新 的 新 的, 要 通过 " <unk> " 来 解压缩 多个 数据流 输入 ， 你 必须 为 每个 数据流 都 创建 一个 新 的 <unk> 压缩器
<unk> interface to <unk> nis <unk> <unk>, " 接口 " <unk> " <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, " nis " sun 的 nis ( <unk> ) 接口
if the <unk> function returns the argument tuple it receives <unk> "ctypes" continues the normal processing it does on the output parameters, 如果 " <unk> ( ) " 函数 返回 元组 元组 ， 则 返回 " <unk> " ， 则 其 在 输出 的 的, 如果 " <unk> " 不 加 更改 地 返回 它 所 接收 的 参数 元组 ， 则 " ctypes " 会 继续 对 输出 形参 执行 常规 处理
the "wave" module defines the following function and exception:, " 模块 " 模块 定义 了 以下 函数 和 ：, " wave " 模块 定义 了 以下 函数 和 异常 :
backwards compatibility is maintained by default (as you would <unk> but by explicitly specifying a style parameter, you get the ability to specify format strings which work with "str.format()" or <unk>, <unk> 是 默认 情况 下 ， 默认 情况 下 ， 你 你 可以 通过 一个 " ， " ， 你 可以 指定 格式 字符串 的 字符串 或 " ' " ' " ' ", 其 保持 了 向 后 兼容 （ 如 您 <unk> ） ， 但 通过 显示 指定 样式 参数 ， 你 可以 指定 格式化 字符串 的 方式 是 使用 " str . format ( ) " 或 " string . <unk> "
arguments are converted to those <unk>, 参数 是 被 转换 为 ", 参数 单位 的 <unk> 规则 如下 ：
deprecated and no longer used., 已弃 和 和 没有 的, 已弃 用 和 不再 使用 的
the <unk> method of <unk> is where the contextual information is added to the logging output, " __ _ __ ( ) " 方法 的 是 是 是 在 的 日志 记录 输出 的 输出, " <unk> " 的 " process ( ) " 方法 是 将 上下文 信息 添加 到 日志 的 输出 中
the barrier can be <unk> any number of times for the same number of threads., 可以 可以 为 " 任何 _ <unk> ( ) " 的 的 相同 的 次数, 栅栏 对象 可以 被 多次 使用 ， 但 进程 的 数量 不能 改变
return the value of the "filename" parameter of the content <unk> header of the message, 返回 的 的 的 的 的 内容 的 内容, 返回 信息 头 当中 content <unk> 字 段 当中 名为 " filename " 的 参数值
if there are no remaining values, returns "null" with no exception set, 如果 没有 没有 存在 则 返回 " null " ， 则 返回 " null ", 如果 没有 <unk> 的 值 ， 则 返回 " null " 并且 不 设置 异常
to handle platform independent data formats or <unk> implicit pad bytes, use <unk> size and alignment instead of <unk> size and <unk> see byte order, size, and alignment for details., 要 避免 ， ， 数据 数据 或 数据 ， ， ， 的 数据 ， ， 使用 " 和 " 和 " 和 " 和 " 和 " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' " 和 " ' ", 要 处理 平台 独立 的 数据格式 或 省略 隐式 的 填充 字节 ， 请 使用 " standard " 大小 和 对齐 而 不是 " native " 大小 和 对齐 ： 详情 参见 字节 顺序 ， 大小 和 对齐 方式
the name of the module defining the class <unk>, 该 模块 定义 的 类 ：, 定义 了 所 描述 类 的 模块 名称
a pointer to the start of the logical structure described by the buffer fields, 一个 指针 的 的 的 的 的 的 的 的 的 的 的, 指向 由 缓冲区 字 段 描述 的 逻辑 结构 开始 的 指针
raises <unk> and returns " 1" on failure., 引发 " " " " " 时 返回 " 1 ", 失败 时 引发 " systemerror " 异常 并 返回 " 1 "
checks to see if this logger has any handlers configured, 如果 此 此 模块 ， 任何 任何 处理程序 处理程序, 检查 此 记录器 是否 配置 了 任何 处理器
the "for" statement does that automatically for you, creating a temporary <unk> variable to hold the iterator for the <unk> of the loop, " for " 语句 用于 创建 一个 的 的 " <unk> " 的 " 的 " 的 " 的 的 迭代 器 的 迭代 器, " for " 语句 会为 你 自动 处理 那些 操作 ， 创建 一个 临时 的 <unk> 变量 用来 在 循环 期间 保存 迭代 器
creates a <unk> object, 创建 一个 对象 对象, 创建 一个 " calendar " 对象
allocate a new python object using the c structure type type and the python type object type, 在 python c 类型 的 python 类型 对象 类型 类型 类型 类型 类型 类型 类型, 使用 c 结构 类型 type 和 python 类型 对象 type 分配 一个 新 的 python 对象
pep <unk> universal newline support written and implemented by <unk> <unk>, pep <unk> <unk> 支持 支持 <unk> 由 <unk> <unk> 撰写 并 实现, pep <unk> 通用 换行 支持 由 <unk> <unk> 撰写 并 实现
unlike strings, which are immutable , lists are a mutable type, i.e. it is possible to change their <unk>, 与 字符串 的 是 是 列表 ， 是 是 一个 ， ， ， 它 被 移除 的 的, 与 <unk> 的 字符串 不同 , 列表 是 一个 <unk> 类型 ， <unk> ， 它 自己 的 内容 可以 改变 :
are there <unk> restrictions on the use of python?, 是否 有 在 上 ， 请 使用 使用, 使用 python 是否 存在 版权 限制 ？
raise a <unk> if set is not an instance of "set" or its subtype., 如果 " set " set " " " 或 " 实例 " 实例 则 引发 " typeerror ", 如果 set 不是 " set " 或 其子 类型 的 实例 则 会 引发 " systemerror "
set the mouse events to be <unk> and return a tuple <unk> <unk>, 设置 设 为 为 一个 返回 一个 元组 元组 元组 元组 元组 元组, 设置 要 报告 的 鼠标 事件 ， 并 返回 一个 元组 " ( <unk> , <unk> ) "
the one exception is <unk> where "__spec__" is set to none in some cases., 一个 异常 异常 是 " " " " " " 设置 为 " 设置 为 ", 唯一 的 例外 是 " __ main __ " ， 其中 的 " __ spec __ " 会 在 某些 情况 <unk> 为 none .
deprecated since version 3.3: it is now possible to use <unk> with <unk> making this decorator <unk>, 3.3 版后 已 移除 : 现在 会 被 " __ _ <unk> ( ) " ， 使用 " <unk> _ <unk> " ) " ， 此 此 函数, 3.3 版后 已 移除 : 现在 可以 让 " <unk> " 配合 " abstractmethod ( ) " 使用 ， 使得 此 装饰 器 变得 冗余
the <unk> parameter is used on windows to specify how the library is loaded (since mode is <unk>, <unk> windows windows windows windows windows 的 如何 如何 如何 如何 <unk> 的 模式 模式, <unk> 参数 用于 在 windows 平台 上 指定 库 的 加载 方式 ( 因为 mode 会 被 忽略 )
pep <unk> formatted string literals, pep <unk> : 字符串 文字, pep <unk> : 格式化 的 字符串 文字
<unk> is a subclass of "mock" with all the magic methods pre created and ready to use, " 是 " " " 的 " 的 " 的 " ， " 方法 的 方法 和 方法 使用 的 的 和 ", " <unk> " 是 " mock " 的 子类 ， 它 有 所有 <unk> 创建 且 可 使用 的 魔术 方法
the frame argument must not be "null"., 参数 参数 必须 为 " null ", frame 参数 必须 不 为 " null "
<unk> convenient web browser <unk>, " http . <unk> " : / / www . org ., " <unk> " 方便 的 web 浏览器 控制器
push ch so the next "getch()" will return it., 推送 ， ， ， 将 导致 将 返回 " true ", 推送 ch 以便 让 下 一个 " getch ( ) " 返回 该 字符
it allows use of the new features on a per module basis before the release in which the feature becomes <unk>, 它 允许 在 新 的 的 的 的 ， 模块 在 解释器 的 " 特性 " 的 " 的 ", 它 允许 基于 每个 模块 在 某种 新 特性 成为 标准 之前 的 发行版 中 使用 该 特性
the attribute of every character in the window is changed to the new background attribute., 在 " 中 的 " 中 的 的 " 将 添加 新 的 属性, 窗口 中 每个 字符 的 属性 会 被 修改 为 新 的 background 属性
pep <unk> add new apis to customize python memory allocators pep written and implemented by victor <unk>, pep <unk> 添加 添加 到 python 3.9 python 内存 内存 由 pep 由 victor stinner 撰写 并 实现, pep <unk> add new <unk> to <unk> python memory <unk> pep 由 victor stinner 撰写 并 实现
<unk> is free for all applications., " 是 适用 于 " 的 的, <unk> 则 可以 自由 使用 于 <unk> 软件
you could write a unix shell script or windows batch files for some of these <unk> but shell scripts are best at moving around files and changing text data, not well <unk> for gui applications or <unk>, 你 可以 编写 编写 安装 或 脚本 ， 或 在 windows 的 文件 ， ， ， ， ， 的 <unk> 和 非 的 的 的 的 ， 并且 在 <unk> 的 的 的 的 <unk>, 对于 这些 任务 ， 你 也 可以 写 unix 脚本 或者 windows 批处理 完成 ， 但是 shell 脚本 最 <unk> 移动 文件 和 替换 文本 ， 并 不 适合 gui 界面 或者 <unk> 开发
the match object methods that <unk> with capturing groups all accept either integers that refer to the group by number or strings that contain the desired <unk> name, " <unk> " 方法 的 方法 将 所有 " 的 " ， " " " " " " " " 或 " 字符串 的 字符串 ， 字符串 表示 的 的, 处理 捕获 组 的 匹配 对象 方法 都 接受 按 编号 引用 组 的 整数 或 包含 <unk> <unk> 的 字符串
otherwise, implements "tos <unk>, 否则 ， " tos ( ) " tos ", 否则 实现 " tos iter ( tos ) "
if you're only interested in where the sequences match, <unk> is <unk>, 如果 你 只 在 在 " " " " " " " " ", 如果 你 只 对 两个 序列 相匹配 的 位置 感兴趣 ， 则 " get _ <unk> _ <unk> ( ) " 就 很 方便 ：
decrement the reference count for object o, 减少 对象 o 的 引用 计数, 减少 对象 o 的 引用 计数
parsing is performed by the <unk> class, whose constructor is passed the dictionary used for <unk> and has a <unk> method, 解析 是 通过 " 的 " （ " 方法 被 用于 创建 和 字典 的 " <unk> " 方法 具有 具有 的 方法, 解析 由 " <unk> " 类 执行 ， 该类 的 构造 器 可 传入 用于 配置 的 字典 ， 并且 具有 " <unk> ( ) " 方法
use this function if you no longer need lines from files previously read using <unk>, 如果 你 没有 没有 任何 <unk> ， 则 使用 " <unk> " 来 使用 ", 如果 你 不再 需要 之前 使用 " <unk> ( ) " 从文件 读取 的 行 即可 使用 此 函数
update the current cursor position of all the <unk> of the window to reflect the current cursor position of the window., 更新 当前 当前 位置 的 位置 位置 位置 <unk> 当前 窗口 的 当前 位置 的 当前 位置, 更新 窗口 所有 上级 窗口 的 当前 光标 位置 以 反映 窗口 的 当前 光标 位置
"lzma" compression using the lzma algorithm, " lzma " lzma lzma 算法 lzma, " lzma " 用 lzma 算法 压缩
otherwise, if the argument is an integer or a floating point number, a floating point number with the same value <unk> python's floating point <unk> is returned, 否则 ， 参数 是 一个 整数 或 " str " ， 则 " " " " " " " " " " " " " " " " " " " " " " " " ", 另一方面 ， 如果 实参 是 整数 或 浮点数 ， 则 返回 具有 相同 值 （ 在 python 浮点 精度 范围 内 ） 的 浮点数
in the following <unk> file there are some examples of "tzinfo" <unk>, 在 以下 中 ， 文件 文件 有 一些 一些 一些 的 一些 ：, 在 以下 " tzinfo _ examples . py " 文件 中有 一些 " tzinfo " 类 的 例子 ：
the <unk> and <unk> have been removed, " <unk> . <unk> ( ) " 和 " 已 移除 移除, " asyncio . task . current _ task ( ) " 和 " asyncio . task . all _ <unk> ( ) " 已 被 移除
the sum <unk> + <unk> must be at most <unk>, 如果 <unk> <unk> <unk> <unk> 必须 必须 必须 为 “ ” ）, <unk> 值 " lc + <unk> " 必须 不 大于 4
pep <unk> new command line parsing module pep written by steven <unk>, pep <unk> 新 的 命令行 模块 模块 模块 pep 由 pep 由 eric, pep <unk> 新 的 命令行 解析 模块 pep 由 steven <unk> 撰写
"n" <unk> <unk> ] same as <unk> except it doesn't increment the reference count on the object, 内置 " <unk> ( ) " 与 与 相同 的 相同 ， 它 它 在 它 引用 的 引用 计数, " n " ( object ) [ pyobject ] 和 " o " 相同 ， 然而 它 并 不 增加 对象 的 引用 计数
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
this is why config parsers also provide <unk>, 这 是 也 也 也 也 问题 问题, 为 解决 这个 问题 配置 解析器 还 提供 了 " <unk> ( ) "
descriptors can be used to create instance variables with different implementation details., 可 可 用于 创建 实例 实例 实例 的 " 实例 " 实例, 可以 使用 描述 器来 创建 具有 不同 实现 细节 的 实例 变量
this extension module is designed to match the api of <unk> an open source curses library <unk> on linux and the bsd variants of <unk>, 此 模块 模块 是 <unk> <unk> 的 的 的 的 的 ， ， <unk> 的 c / <unk> 的 的 的, 此 扩展 模块 旨在 匹配 ncurses 的 api ， 这是 一个 <unk> 在 linux 和 unix 的 bsd 变体 上 的 开源 curses 库
this is an instance of "pytypeobject" and represents the python function type, 这是 " pytypeobject " 实例 的 实例 ， python 类型 的 python 类型, 这是 一个 " pytypeobject " 实例 并 表示 python 函数 类型
the tables are declared as three fields of the type object:, 函数 的 是 作为 类型 类型 的 类型 字 段, 表 被 声明 为 object : : 类型 的 三个 字 段 :
this is used to flag <unk> sorts, 这 用于 用来 为 <unk> <unk>, 这 用于 标记 <unk> 排序
my class defines <unk> but it is not called when i delete the object., " 类 定义 了 " __ __ __ __ __ __ __ __ __ __ __ __ __ " __ " 对象 时 被 调用 对象, 类 定义 了 __ del __ 方法 ， 但是 删除 对象 时 没有 调用 它
parameters: <unk> a number (optional), 参数 : <unk> 一个 数值 ( ) " 的 一个, 参数 : <unk> 一个 数值 ( 可 选 )
for two collections to compare equal, they must be of the same type, have the same length, and each pair of corresponding elements must compare equal (for example, <unk> <unk> is false because the type is not the <unk>, 对于 两个 的 的 的 ， 它们 必须 必须 具有 相同 的 的 元素 ， 相同 的 元素 的 元素 ， 的 元素 ， 是 是 " 的 " 类型 ， 因为 类型 是 不 类型 的, 两个 多项 <unk> 相等 ， 它们 必须 为 相同 类型 、 相同 长度 ， 并且 每 对 相应 的 元素 都 必须 相等 （ 例如 ， " [ 1 , 2 ] ( 1 , 2 ) " 为 假值 ， 因为 类型 不同 ）
why doesn't <unk> return the sorted list?, 为什么 推导 式 排序 返回 排序 排序 排序 排序 排序, 为什么 list . sort ( ) 没有 返回 排序 列表 ？
kevent stores the integer internally., 解压缩 ， 一个 整数 的, kevent 在 内部 存储 整数
note that if the except clauses were <unk> (with "except b" <unk> it would have printed b, b, b the first matching except clause is <unk>, 请 注意 ， 如果 " <unk> " , " , " , " , " , " ) " ， 则 会 产生 的 行 （ 如果 ） ） ） ， 否则 会 被 " " " ", 请 注意 如果 except 子句 被 <unk> （ 把 " except b " 放到 第一个 ） ， 它 将 打印 b ， b ， b 即 第一个 匹配 的 except 子句 被 触发
using <unk> would look like:, 使用 " ' _ traverse _ traverse ( ) " 如下 :, 使用 " auto " 的 形式 如下 :
"optparse" parser for command line options, " optparse " 解析器 的 命令行 选项, " optparse " 解析器 的 命令行 选项
(contributed by mark <unk> in bpo <unk>, （ 由 mark dickinson 在 bpo <unk> 中 贡献 。 ）, （ 由 mark <unk> 在 bpo <unk> 中 贡献 。 ）
deprecated since version 3.9: <unk> now supports "[]", 3.9 版后 已 移除 : " collections . abc . abc " now supports " [ ] ", 3.9 版后 已 移除 : " collections . abc . coroutine " now supports " [ ] "
hint can be specified to control the number of lines <unk> no more lines will be read if the total size (in <unk> of all lines so far <unk> hint ., strict 可以 指定 控制 控制 控制 的 ， 如果 如果 如果 <unk> ， 则 将 导致 行 行 的 行, 可以 指定 <unk> 来 控制 要 读取 的 行数 ： 如果 （ 以 字节 / 字符 数 表示 的 ） 所有 行 的 总 大小 超出 了 <unk> 则 将 不会 读取 更 多 的 行
for nested functions, the <unk>, 例如 ， ， ， ：, 对于 嵌套 函数 则 为 上级 函数
this is done by using the <unk> and <unk> functions in <unk> and not by actually invoking a <unk>, 使用 " 使用 " <unk> ( ) " 和 " 函数 和 函数 和 函数 和 函数 <unk>, 这是 通过 配合 使用 " os . <unk> ( ) " 和 " fnmatch . fnmatch ( ) " 函数 来 实现 的 ， 而 不是 通过 实际 发起 调用 子 终端
(default: <unk> if <unk> is true, then all tab characters in text will be expanded to zero or more <unk> depending on the current column and the given tab size., 如果 " 如果 _ 如果 如果 " microsecond 为 " true " ， 则 将 将 被 视为 将 被 视为 为 " true " ， 或 在 <unk> 的 的 或 为 ", ( 默认 : " 8 " ) 如果 " <unk> _ <unk> " 为 真值 ， 则 text 中 所有 的 制表符 将 扩展 为 零个 或 多个 空格 ， 具体 取决于 当 <unk> 位置 和 给定 的 制表 宽度
(default: "true") if true, after tab expansion but before <unk> the <unk> method will replace each whitespace character with a single space, 如果 " true " ， 如果 " " ( ) " ， 如果 " " ( ) " ， 则 将 " " ( ) " 方法 将 返回 " true " 将 被 " " ", ( default : " true " ) 如果 为 真值 ， 在 制表符 扩展 之后 、 自动 换行 之前 ， " wrap ( ) " 方法 将 把 每个 空白 字符 都 替换 为 单个 空格
traditional gc also becomes a problem when python is embedded into other applications, " <unk> " 也 会 被 python python 时 ， python 将 被 执行, 当 python 嵌入 到 其他 应用程序 中 时 ， 传统 的 gc 也 成为 一个 问题
the source code is loaded from the file named file, 源文件 的 文件 是 文件 文件 的 文件, 源代码 从 名为 file 的 文件 中 加载
convert data to floats and compute the arithmetic <unk>, 将 转换 为 和 <unk> <unk>, 将 data 转换成 浮点数 并且 计算 算术 平均数
if shear is not <unk> return the current <unk> <unk> <unk> of the shear <unk> by which lines parallel to the heading of the turtle are <unk>, 如果 未 给出 不 为 " ， 则 返回 当前 的 的 ， ， ， ， 的 <unk> ， 则 将 <unk> 的 的 的 的 的 的 的, 如 未指定 <unk> 参数 : 返回 当前 的 剪切 因子 即 剪切 角度 的 <unk> ， 与 海龟 朝向 <unk> 的 <unk> 将 被 剪切
n is the number of characters expected, n 是 字符 的 的, n 为 期望 的 字符 数量
the standard bytes to bytes codecs do not support this method., 标准 字节 字节 数据 的 不 不 不 支持, 标准 的 字节 到 字节 编解码器 不 支持 此 方法
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
formal parameters using the syntax " <unk> or " <unk> cannot be used as positional argument <unk> or as keyword argument names., " 使用 " " " " " " " " " " " " " " " " " 参数 参数 参数 作为 参数 参数 作为 参数, 使用 " identifier " 或 " identifier " 句法 的 <unk> 参数 不能 被 用作 位置 参数 空位 或 关键字 参数 名称
parameters not specified keep current <unk> except <unk> <unk> is used when encoding is specified but errors is not specified., 如果 指定 了 在 当前 中 的 当前 " " " " " " 被 被 被 被 被 被 被 忽略, 未指定 的 形参 将 保留 当前 设定 ， <unk> 是 当 指定 了 encoding 但 未指定 errors 时 将 会 使用 " errors ' strict ' "
significant improvements in the standard <unk>, 将 用 的 " <unk> ", 标准 库中 的 <unk> 改进 ：
return the i th element of o , or "null" on failure, 返回 o1 的 元素 o 的 结果 ， 如果 失败 ， 返回 " null ", 返回 o 中 的 第 i 号 元素 ， 失败 时 返回 " null "
the currently implemented default is to cache <unk> statements., 目前 默认 默认 为 " ' " ' " ' ", 当前 实现 的 默认值 是 缓存 100 条 语句
compare a and b (lists of bytes objects) using <unk> ; yield a sequence of delta lines (also bytes) in the format returned by <unk>, 比较 使用 " " " " 的 " 的 " 和 " 的 ( ) " 的 的 序列 的 序列 的 序列 ， 其中 " " " " " " " " ", 使用 <unk> 比较 a 和 b ( 字节 串 对象 列表 ) ； 产生 以 <unk> 所 返回 格式 表示 的 差异 行 列表 （ 也 是 字节 串 ）
the <unk> source for the documentation is part of the python source distribution., python 的 源代码 的 文档 是 python 的 python 是 python 的, 文档 的 <unk> 源文件 是 python 源代码 发布 版 的 一部分
bpo <unk> update macos installer build to use openssl <unk>, bpo <unk> : 更新 安装程序 以 构建 openssl 1.0 . 1.0 ., bpo <unk> : 在 macos 安装程序 中将 openssl 更新 为 1.1 . <unk>
allows <unk> to produce a string containing the <unk> message in a readable format., 允许 " ' ' " ' 字符串 字符串 包含 字符串 的 字符串 表示 的 字符串, 这 将 让 " str ( msg ) " 产生 的 字符串 包含 人类 可读 的 的 序列化 <unk>
<unk> <unk> [const <unk> ] convert a python unicode object to a c pointer to a nul terminated buffer of unicode characters, " " " " " " " [ ] ] " ] " 一个 一个 python 一个 python 一个 " int " 的 c c 一个 c 的 的, " u " ( " str " ) [ const py _ unicode ] 将 一个 python unicode 对象 转化成 指向 一个 <unk> 终止 的 unicode 字符 缓冲区 的 指针
make an iterator that returns selected elements from the iterable, 创建 一个 迭代 器 返回 迭代 器 元素 迭代 器, 创建 一个 迭代 器 ， 返回 从 iterable 里 <unk> 的 元素
the only solution is for the package author to provide an explicit index of the package, 唯一 解决方案 是 为了 <unk> 的 的 的 的 的 的, 唯一 的 解决方案 是 让 包 作者 提供 一个包 的 显式 索引
additional arguments must be passed to the function, each of which should be a pointer to a "pyobject " <unk> these will be filled in with the values from args ; they will contain borrowed references, 额外 参数 必须 必须 传递 给 参数 的 函数 ， ， 必须 为 一个 " " " " " " " 的 值 ， 值 将 被 从 当前 代码 的, 额外 的 参数 必须 被 传入 函数 ， 每个 参数 必须 是 一个 指向 " pyobject " 变量 的 指针 ； 它们 将 以 来自 args 的 值 填充 ； 它们 将 包含 <unk> 的 引用
at the <unk> only compression type "none" is supported, meaning no compression., 在 " ' " ' " ， 返回 类型 ， " none " 不 不 无, 目前 只 支持 " none " 即 无 压缩 格式
if the request fails, <unk> returns "null" and p remains a valid pointer to the previous memory area., 如果 请求 了 " pymem . <unk> " ， 返回 " null " ， 则 将 其 指向 内存 内存 的 指针, 如果 请求 失败 ， " pyobject _ realloc ( ) " 返回 " null " ， p 仍然 是 指向 先前 内存 区域 的 有效 指针
note that calling "close()" does not cause the shared memory block itself to be <unk>, 请 注意 " 不 " 不 不 不 需要 的 的 的 的 块 的, 调用 " close ( ) " 并 不会 销毁 共享内存 区域
the second parameter, callback , can be a callable object that receives <unk> when ob is garbage collected; it should accept a single parameter, which will be the weak reference object itself, 第二个 参数 ， 可以 是 一个 对象 对象 ， 当 对象 的 垃圾 回收 对象 的 垃圾 回收 ， ， 它 应当 被 垃圾 回收 对象, 第二个 形参 callback 为 一个 可 调用 对象 ， 它会 在 ob 被 作为 垃圾 回收 时 接收 通知 ； 它 应该 接受 一个 单独 形参 ， <unk> 引用 对象 本身
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
deprecated since version 3.6: please use "asyncio" instead., 3.6 版后 已 移除 : use " send " " " ", 3.6 版后 已 移除 : 请 使用 " asyncio " 替代
when an array object is printed or converted to a string, it is represented as <unk> <unk>, 当 对象 对象 对象 或 或 或 或 为 " true " ， ， 它 被 为 " <unk> " " ", 当 一个 数组 对象 被 打印 或 转换 为 字符串 时 ， 它会 表示 为 " array ( <unk> , initializer ) "
changed in version 3.3: blocking parameter was added., 在 3.3 版 更改 : 添加 了 style 形参, 在 3.3 版 更改 : 添加 了 blocking 形参
returns "true" if x is a <unk> or <unk> otherwise returns "false"., 如果 x 是 一个 " 或 " " " " " ， 否则 返回 " true " ； 否则 返回 " false ", 如果 x 是 <unk> 或 <unk> 则 返回 " true " ； 否则 返回 " false "
it must be one of the following <unk>, 它 必须 为 以下 的 :, 它 必须 为 以下 常数 之一 :
changed in version 3.9: added the " <unk> " <unk> " e" and " <unk> <unk> options, 在 3.9 版 更改 : the " " " " " " " " " " " " 选项 " 选项 " 选项, 在 3.9 版 更改 : added the " s " , " p " , " e " and " hardlink dupes " <unk>
a bounded semaphore checks to make sure its current value doesn't <unk> its initial value, <unk> 的 的 值 的 值 值 的 值 值 值 值 值 值 值 值 值, 有 界 信号量 通过 检查 以 确保 它 当前 的 值 不会 超过 <unk>
for example, in cpython release 3.3 the compiled version of <unk> would be cached as <unk> <unk>, 例如 ， 版本 版本 版本 版本 版本 版本 版本 版本 版本 版本 ， " " " " " " " " " " ", 例如 ， 在 cpython 版本 3.3 中 ， spam . py 的 编译 版本 将 被 缓存 为 " __ <unk> __ / spam . cpython <unk> . pyc "
week 1 is the first week in which the d <unk> day occurs, 在 " 1 " 是 是 第一个 第一个 的 的 ， ，, 第 1 <unk> 第 d <unk> 发生 的 <unk>
returns "true" if x is a zero; otherwise returns "false"., 如果 x 是 是 " true " ， 否则 返回 " false ", 如果 x 为 <unk> 返回 " true " ； 否则 返回 " false "
it was part of the original <unk> programming language developed by <unk> <unk> <unk> <unk> and <unk> <unk> in <unk>, 它 是 由 <unk> 的 的 的 <unk> ， <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 最初 来自 于 <unk> <unk> , <unk> <unk> 和 <unk> <unk> 于 <unk> 年 所 <unk> 的 <unk> 编程语言
see the warnings filter and describing warning filters for more details., 请参阅 警告 和 警告 和 警告 警告 请参阅, 请参阅 the <unk> filter 和 <unk> warning filters 了解 更 多 细节
each value type can define its own <unk> mini <unk> or interpretation of the format_spec ., 每个 值 都 可以 通过 定义 的 " ， " " " " " " " 或 " 的 ", 每种 值 类型 可以 定义 自己 的 “ 格式化 迷你 语言 ” 或 对 format _ spec 的 解读 方式
this is implemented using the gnu readline library, which supports various <unk> of editing, 这 使用 使用 " <unk> " 的 ， ， 它 支持 <unk> 的 的, 这个 功能 使用 了 gnu readline 来 实现 ， 一个 支持 多种 编辑 方式 的 库
if the context variable was not found, value will point to:, 如果 上下文 变量 不 ， 则 将 引发 ", 如果 上下文 变量 没有 找到 ， value 将 指向 ：
note that we now specify a new keyword, <unk> and give it the value <unk>, 我们 我们 现在 现在 是 一个 新 的 " <unk> " ， 并且 它 将 其 <unk>, 注意 我们 现在 指定 了 一个 新 的 关键词 " action " ， 并 赋值 为 " " store _ true " "
macros to extract fields from date objects, 一些 用来 从 从 对象 中 提取 的 的, 一些 用来 从 date 对象 中 提取 字段 的 宏
maxsize is an integer that sets the <unk> limit on the number of items that can be placed in the queue, <unk> 是 一个 整数 的 的 数 ， 其中 的 的 元素, maxsize 是 个 整数 ， 用于 设置 可以 放入 队列 中 的 <unk> 的 <unk>
for example usage of the former case, see the examples section of the <unk> documentation., 例如 示例 示例 示例 示例 ， 请 查看 请参阅 <unk> 示例 的 的 示例, for example usage of the <unk> <unk> , see the 示例 section of the " importlib " documentation .
almost all machines <unk> <unk> <unk> use ieee 754 floating point arithmetic, and almost all platforms map python floats to ieee 754 <unk> <unk>, 几乎 所有 " <unk> " , " , " , " , " ， " 和 " <unk> " 和 所有 python 的 python, 目前 （ 2000 年 11 月 ） 几乎 所有 使用 ieee 754 浮点运算 标准 的 机器 以及 几乎 所有 系统 平台 都 会 将 python 浮点数 映射 为 ieee 754 “ 双 精度 类型 ”
pep 343: the 'with' statement, pep 343 : " with " 语句, pep 343 : " with " 语句
leap days are <unk> and it is possible to refer to <unk> <unk>, <unk> 的 是 是 <unk> 的 ， 它 可以 为 " " " " ", <unk> <unk> ， 可以 引用 2 月 29 日
<unk> to <unk> of an owned reference creates a memory <unk>, <unk> <unk> <unk> 的 一个 ， 一个 一个 内存 的 一个 内存, 忘记 <unk> 一个 拥有 的 引用 会 导致 内存 <unk>
(contributed by dong hee na in bpo <unk>, （ 由 dong hee na 在 bpo <unk> 中 贡献 。 ）, （ 由 dong hee na 在 bpo <unk> 中 贡献 。 ）
the default on <unk>, " 系统 系统 系统, unix 中 的 默认值
(contributed by inada <unk> in bpo <unk>, （ 由 inada naoki 在 bpo <unk> 中 贡献 。 ）, （ 由 inada naoki 在 bpo <unk> 中 贡献 。 ）
this function creates a mutable unicode character buffer, 此 函数 创建 一个 一个 unicode 的 的 字符, 此 函数 会 创建 一个 可变 的 unicode 字符 缓冲区
the module can be run in the shell without <unk>, 模块 可以 可以 在 运行 运行 运行 运行 运行 运行, 该 模块 可以 在 命令行 <unk> 中 运行 ， 而 无需 重新启动
<unk> and <unk> structures, <unk> 和 <unk> <unk>, " <unk> " 和 " <unk> " 结构
or by calculating the timestamp directly:, 或者 由 <unk> _ <unk> ( ) ", 或者 通过 直接 计算 时间 戳 :
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
<unk> the garbage collection has <unk>, <unk> ， 垃圾 回收 的 垃圾 回收, " stop " : 垃圾 回收 已 结束
if the string passed in to "pack()" is too long <unk> than the count <unk> 1), only the leading <unk> 1" bytes of the string are stored, 如果 字符串 中 的 的 的 字符串 中 的 的 " ， " ， 则 会 只 在 " ' <unk> ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", 如果 传入 " pack ( ) " 的 字符串 过长 （ 超过 <unk> 数值 <unk> 1 ） ， 则 只有 字符串 前 " count 1 " 个 字节 会 被 存储
bpo <unk> updated openssl to <unk> in macos <unk>, bpo <unk> : 修复 openssl 1.1 . <unk> <unk> <unk> <unk>, bpo <unk> : 在 macos 安装程序 中将 openssl 更新 为 1.1 . <unk>
support for <unk> project <unk>, 支持 的 <unk> <unk> 的 <unk>, 对 声明 项目 依赖 的 支持
you should then see something like:, 你 应该 你 看到 ， 如下 所示, 然后 你 应当 <unk> 类似 类似 这样 的 东西 ：
changed in version 3.4: the utf 16 and utf 32 encoders no longer allow <unk> code points <unk> <unk> to be encoded, 在 3.4 版 更改 : the " and " 和 " utf 8 ， no <unk> 的 <unk> <unk>, 在 3.4 版 更改 : utf 16 和 utf 32 编码器 将 不再 允许 编码 代理 码位 ( " u + <unk> " " u + <unk> " )
pep <unk> <unk> repository directories, pep <unk> : 仓库 目录, pep 3147 : pyc 仓库 目录
extending python with c or c++, 在 python c c 编译 c 编译 c, 使用 c 或 c++ 扩展 python
functions which use this method to retrieve their parameters should be declared as <unk> in function or method tables, 此 函数 使用 此 方法 的 ， 它们 应当 应当 函数 " " " ( ) " 函数 的 函数, 使用 这种 方法 来 提取 参数 的 函数 应当 在 函数 或 方法 表中 被 声明 为 " <unk> _ <unk> "
this causes any active or future calls to "wait()" to fail with the <unk>, " ' 任何 任何 或 或 调用 " <unk> ( ) " 来 调用 " <unk> ", 这 将 导致 任何 现有 和 未来 对 " wait ( ) " 的 调用 失败 并 引发 " <unk> "
<unk> the <unk> class method creates a "datetime" object from a string representing a date and time and a corresponding format string., " <unk> . <unk> " 类 " 类 创建 一个 一个 一个 " 对象 " 对象 一个 一个 " 对象 " 的 一个 字符串 和 字符串, 相反 地 ， " datetime . strptime ( ) " 类会 根据 表示 日期 和 时间 的 字符串 和 相应 的 格式 字符串 来 创建 一个 " datetime " 对象
to estimate the distribution for a model than isn't easy to <unk> <unk> "normaldist" can generate input samples for a <unk> <unk> <unk>, 要 获取 一个 <unk> 的 的 ， ， ， <unk> <unk> ， ， ， ， ， ， ， <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 为了 <unk> 一个 <unk> 解析 的 模型 分布 ， " normaldist " 可以 生成 用于 <unk> 模拟 的 输入 样本 ：
legacy shell invocation functions, 旧式 shell shell 发起 函数, 旧式 的 shell 发起 函数
<unk> this <unk> and use <unk> instead, " <unk> " ， " 使用 " <unk> _ <unk> ( ) " 使用 " os . <unk> ( ) ", <unk> 这种 <unk> 并 使用 " re . <unk> ( ) " 代替
if <unk> is "true" (the default) zipfile will create zip files that use the <unk> extensions when the zipfile is larger than 4 <unk>, 如果 <unk> 为 " true " true " ， 则 将 创建 一个 文件 ， 则 会 使用 " <unk> " 时 ， 当 <unk> <unk> 时 ， 则 会 被 <unk>, 如果 <unk> 为 " true " ( 默认值 ) 则 当 zipfile 大于 4 <unk> 时 zipfile 将 创建 使用 <unk> 扩展 的 zip 文件
get the beginning or ending index of the completion scope, 获取 队列 的 或 或 索引 的 的, 获取 <unk> <unk> 的 开始 和 结束 序号
if you're ready for that, <unk> some of your <unk> <unk> and carry on., 如果 你 的 <unk> ， ， 你 <unk> <unk> <unk> 的 的 和 <unk> 的, 如果 你 准备 好 了 ， 可以 <unk> 一些 你 最 喜欢 的 <unk> 然后 继续
wrap lines so that they don't <unk> <unk> characters., 将 <unk> ， ， 它们 都 会 <unk> <unk>, 换行 ， 使 一行 不 超过 <unk> 个字符
as <unk> is deprecated, please do not use it use "warning" instead., 作为 " <unk> _ <unk> " ， ， ， 不 使用 使用 " 使用 " 使用 ", 由于 " <unk> " 已 被 弃用 ， 请 不要 使用 它 — — 而 要 改用 " warning "
a program doesn't run any faster when it is read from a ".pyc" file than when it is read from a ".py" file; the only thing that's faster about ".pyc" files is the speed with which they are <unk>, 在 运行 时 运行 时 ， 当 在 从 时 ， 当 从 时 ， 当 文件 时 ， 当 文件 时 ， 的 ， ， ， 的 的 文件 ， 因为 文件 的, 一个 从 " . pyc " 文件 <unk> 的 程序 并 不会 比 它 从 " . py " <unk> 时 运行 的 更 快 ， " . pyc " 文件 唯一 快 的 地方 在于 载入 速度
the tuple containing the actual parameters should be passed as args ; it must actually be a tuple, 元组 的 " 的 参数 参数 应当 被 用作 参数 作为 参数 必须 必须 必须 必须 为 一个, 包含 实际 参数 的 元组 应当 作为 args 传入 ； 它 必须 确实 是 一个 元组
see the generic attribute management section below for details., 请参阅 " ctypes " 属性 文档 细节 细节 细节, see the 泛型 属性 管理 section <unk> for details .
assignment of an object to a single target is recursively defined as <unk>, 赋值 一个 对象 的 一个 单个 被 被 为 为 为 " <unk> ", 对象 赋值 给 单个 目标 的 操作 按 以下 方式 递归 地 定义
for example, if the name of the module is <unk> the init function will be called <unk>, 例如 ， 如果 ， 模块 名称 名称 名称 ， 则 会 被 调用, 例如 ， 如果 模块 的 名称 是 <unk> ， 则 init 函数 将 被 称为 <unk> ( )
it may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms., 它 可能 是 通过 的 的 ， ， ， 因为 因为 这些 这些 函数 的 的 的, 因为 这些 函数 的 语义 因 平台 <unk> , 所以 使用 时 最好 查阅 平台 相关 文档
using objects other than dicts to pass contextual information <unk>, 使用 其他 其他 的 的 ， 则 会 被 信息, 使用 除 字典 之外 的 其它 对象 传递 上下文 信息 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
deprecated since version 3.5: use <unk> instead., 3.9 版后 已 移除 : " mkstemp _ <unk> _ <unk> ", 3.5 版后 已 移除 : use " bytecode _ <unk> " instead .
configuration files also let you provide default values for any command option, which the installer can then override either on the command line or by editing the config file., 配置 文件 还 在 你 你 提供 了 任何 任何 的 ， ， ， 的 ， 命令行 的 命令行 或 改变 的 的, 配置文件 还 允许 你 为 任何 命令 选项 提供 默认值 ， 而 安装 器 可以 通过 命令行 或 编辑 配置文件 来 覆盖 这些 默认值
buffering logging messages and <unk> them <unk>, 记录 日志 消息 和 有 什么 它们, 缓冲 日志 消息 并 有 条件 地 输出 它们
it can also be used when <unk> <unk> with similar <unk>, 它 也 可以 使用 " <unk> ( ) " 来 使用 " <unk> ", 这种 方式 也 可以 在 <unk> " from " 的 时候 使用 ， 并会 有 类似 的 效果 :
if <unk> is <unk> delete background <unk> if present, 如果 <unk> _ <unk> _ <unk> " ， 则 如果 则 则 会 <unk> 则 如果 <unk>, 如果 <unk> 为 " " <unk> " " ， 则 删除 当前 <unk>
the "pprint" module also provides several shortcut functions:, " logging " 模块 还 提供 了 几个 函数 ：, " pprint " 模块 还 提供 了 一些 <unk> 函数 ：
<unk> is not "none", " ' " " " " " none ", " t . tzinfo " 不 为 " none "
the parameters key , msg , and digest have the same meaning as in <unk>, 参数 key 的 ， ， ， 与 " 与 " 与 " 相同 " 相同 的 " 相同 ", 形参 key , msg 和 digest 具有 与 " new ( ) " 中 相同 的 含义
since python <unk> it has been ignored and <unk>, 由于 python 3.8 ， 它 被 移除 被 移除, 自 python 3.0 起 ， 它 已 被 忽略 并且 不再 使用
it is useful for code that must be executed if the try clause does not raise an exception, 它 适用 于 如果 没有 不 存在 时 ， 如果 没有 引发 异常 时 引发 异常, 对于 在 try 子句 不 引发 异常 时 必须 执行 的 代码 来说 很 有用
therefore it does not support text to text encoders such as <unk> although <unk> may be used <unk> with <unk>, 因此 它 并 不 文本 文本 文本 文本 文本 ， 例如 " " . <unk> ( ) " 可以 被 用作, 因此 它 不 支持 文本 到 文本 的 编码器 ， 例如 " <unk> _ 13 " ， 但是 " <unk> _ 13 " 可以 通过 同样 效果 的 " <unk> ( ) " 来 使用
see the discussion below., 参阅 地址 的 如下, 参见 下文 的 讨论
for the <unk> format character, the return value is either "true" or "false", 对于 " 格式 格式 格式 ， 返回值 返回值 " 返回 " false ", 对于 " ' ? ' " 格式 字符 ， 返回值 为 " true " 或 " false "
if your input data consists of mixed types, you may be able to use "map()" to ensure a consistent result, for example: <unk> <unk>, 如果 你 输入 数据 的 的 <unk> ， ， 你 可以 使用 使用 " <unk> " 的 " 的 ", 如果 你 输入 的 数据 由 混合 类型 组成 ， 你 应该 能够 使用 " map ( ) " 来 确保 一个 一致 的 结果 ， 比如 ： " map ( float , input _ data ) "
<unk> a start boundary was found, but no corresponding close boundary was ever found., " <unk> _ <unk> ( ) " 和 " ' ， 但 不会 在 " " " " " " " " " ", " <unk> " 找到 了 开始 边界 ， 但 相应 的 结束 边界 无法 被 找到
this defaults to <unk> but other possible values are <unk> and <unk> which correspond to the other two formatting <unk>, 这 默认 情况 下 ， 但 可能 可能 可能 值 是 " <unk> " ， " <unk> " 两个 两个 两个, 它 的 默认值 是 " ' % ' " ， 其他 的 值 " ' { ' " 和 " ' $ ' " 也 支持 ， 对应 了 其他 两种 格式化 样式
the <unk> new in <unk> series of <unk> takes <unk> through the most important changes between major python versions, 在 <unk> 中 中 的 " <unk> _ <unk> ( ) " 中 的 " <unk> ( ) " 的 的 python 版本 的 python 版本, 这个 “ python 有 什么 新 变化 ？ ” 系列 内容 <unk> 您 浏览 python 大 版本 之间 重要 的 变化
changed in version 3.4: <unk> "create_module()" and <unk> methods., 在 3.4 版 更改 : " <unk> " and and and " ., 在 3.4 版 更改 : <unk> " create _ module ( ) " and " exec _ module ( ) " <unk> .
acquire a lock, blocking or non blocking., 从 阻塞 阻塞 阻塞 或非 阻塞, 获得 锁 ， 阻塞 或非 阻塞 的
a "float" object's value is stored in binary floating point with a fixed precision <unk> 53 <unk> and python uses c operations, which in turn rely on the <unk> implementation in the <unk> to perform floating point operations, " decimal " 的 值 是 " " " " 的 " <unk> " , " <unk> " ， python c python c python c python c 的 c python c " 的 " " " " " " ", " float " 对象 的 值 是 以 固定 的 精度 （ 通常 为 53 位 ） 存储 的 二进制 浮点数 ， 由于 python 使用 c 操作 ， 而 后者 依赖于 处理器 中 的 <unk> 实现 来 执行 浮点运算
if used, these symbols indicate the kind of parameter by how the arguments may be passed to the function: positional <unk> positional or keyword, and keyword only, 如果 提供 了 这些 的 ， ， 参数 参数 参数 参数 参数 参数 参数 传给 位置 位置 位置 位置 位置 位置 位置 位置 位置 参数, 如果 使用 这些 符号 则 表明 可以 通过 <unk> 形参 将 参数值 传递 给 函数 ： 仅限 位置 、 位置 或 关键字 ， 以及 仅限 关键字
type object for iterator objects returned by <unk> and the two argument form of the <unk> built in function., 迭代 器 对象 对象 的 对象 返回 的 对象 ， 返回 " <unk> " ) " 函数 的 参数 （ 即 " 的 " 的 " 的 " 的 " 的 " 的 " 的 ", 由 函数 " <unk> _ new ( ) " 和 " iter ( ) " 内置 函数 的 双 参数 形式 返回 的 迭代 器 对象 类型 对象
this makes a "null" return code somewhat ambiguous; use "pycapsule_isvalid()" or "pyerr_occurred()" to disambiguate., 这个 使得 返回 " null " ， 请 使用 " pycapsule ( ) " 或 " pyerr _ occurred ( ) " 来 歧义, 这会 使得 " null " 返回 码 有些 歧义 ； 请 使用 " pycapsule _ isvalid ( ) " 或 " pyerr _ occurred ( ) " 来 消除 歧义
you can <unk> it as an example and see its effects when running the <unk> <unk> not from within the demo <unk>, 你 可以 通过 它 可以 一个 一个 ， ， ， 在 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 你 可以 将 其 作为 示例 进行 <unk> ， 并 在 运行 演示 时 查看 其 作用 效果 ( 但 最好 不要 在 演示 <unk> 中 运行 )
changed in version 3.8: the "write()" method now preserves the attribute order specified by the user., 在 3.8 版 更改 : the " __ " __ " now the the the the the the the the the, 在 3.8 版 更改 : the " write ( ) " method now <unk> the attribute order <unk> by the user .
to avoid this <unk> all possible components may be downloaded on <unk> to create a complete <unk> that will no longer require an internet connection regardless of the selected features, 为了 ， 这 这种 情况 下 ， 所有 可能 可能 会 在 " 一个 " ， " ， " 一个 " 的 " ， ， 的 的 的 的 的, 为了 避免 这种 需要 ， 可以 按 需 下载 所有 可能 的 组件 ， 以 创建 一个 完整 的 布局 ， 该 布局 将 不再 需要 internet 连接 ， 而 不管 所 选择 的 特性 是 什么
as a result, you probably don't want to use the module <unk> if you want to include such a loop in your program you probably want to use the "code" module instead., 作为 你 你 你 你 的 你 你 你 的 你 " <unk> " ， 你 你 在 你 的 你 的 你 的 你 的 使用 " 模块 ", 因此 ， 您 可能 不 希望 直接 使用 该 模块 ； 如果 你 想 在 程序 中 包含 这样 一个 循环 ， 你 可能 需要 使用 " code " 模块
sometimes you want to let a log file grow to a certain size, then open a new file and log to that, 有时候 你 想 一个 一个 文件 文件 ， ， 一个 一个 目录 的 将 一个 新 的 的 文件 并 将 将 添加 到 一个 文件, 有时 ， 你 希望 当 日志 文件 <unk> 记录 增长 至 一定 大 小时 ， 打开 一个 新 的 文件 <unk> 记录
show <unk> <unk> <unk> the <unk> <unk>, <unk> : <unk> <unk> <unk> <unk> <unk> <unk>, 显示 <unk> 括号 <unk> 显示 <unk> 的 括号
changed in version 3.1: <unk> was added., 在 3.5 版 更改 : <unk> _ <unk> was added ., 在 3.1 版 更改 : 添加 了 <unk>
the current implementation <unk> up exactly n threads, if at least n threads are waiting, 当前 当前 <unk> <unk> ， 如果 <unk> ， 如果 如果 <unk> ， 如果 ， 则 会 被 忽略, 当前 实现 中 ， 如果 至少 有 n 个 线程 正在 等待 ， 准确 唤醒 n 个 线程
with two exceptions described below, nothing in "dataclass()" <unk> the type specified in the variable <unk>, 两个 两个 在 的 " 子句 " 子句 " 子句 " " " " " " " " " " " " " " " " " " " " ", 除了 下面 描述 的 两个 例外 ， 在 " dataclass ( ) " 中 没有 任何 内容 检查 变量 标注 中 指定 的 类型
changed in version 3.3: changed from a factory function to a class., 在 3.3 版 更改 : 从 工厂 函数 变为, 在 3.3 版 更改 : 从 工厂 函数 变为 类
it is a very powerful way to test out new <unk> or inspect modules and packages <unk> <unk>, 它 是 一种 了 一种 <unk> 、 新 的 ， ， ， 、 、 模块 、 模块 、 模块 和 包, 在 测试 新 <unk> 或 检验 模块 和 包 的 时候 用 这种 方式 会 非常 方便 （ 请 <unk> 使用 " help ( x ) " ）
see section zipfile objects for constructor details., 请参阅 参见 <unk> 对象 的 对象 对象, <unk> 构造函数 的 描述 ， 参阅 段落 zipfile 对象
changed in version 3.7: added hash based ".pyc" files, 在 3.7 版 更改 : added " bytes " 类, 在 3.7 版 更改 : 增加 了 基于 哈希 的 " . pyc " 文件
changed in version 3.5: the <unk> argument was added., 在 3.5 版 更改 : the 了 _ argument _ was was added ., 在 3.5 版 更改 : 增加 了 " <unk> _ handler _ level " 参数
local times of the form <unk> are <unk>, " 的 " 的 " 的 是 是 是 的 的, 形式 为 1 : mm 的 本地 时间 就是 有 歧义 的
the equivalent to the built in "repr()" that uses the formatting <unk> by the instance., 相当于 " list " 的 " " " " " " 的 的, 内置 " repr ( ) " 的 等价 形式 ， 它 使用 实例 专属 的 格式化
the "shutil" module offers a number of high level operations on files and collections of files, " 模块 " 模块 提供 的 的 文件 操作 的 文件 操作, " shutil " 模块 提供 了 一系列 对 文件 和 文件 集合 的 高阶 操作
common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or <unk> or to create a subsequence of those elements that <unk> a certain condition., 常见 的 的 是 新 的 新 的 元素 ， 每个 每个 每个 的 的 的 ， ， ， ， 或 一个 " 或 " " " " " 的 一个 元素, 常见 的 用法 是 把 某种 操作 应用 于 序列 或 可 迭代 对象 的 每个 元素 上 ， 然后 使用 其 结果 来 创建 列表 ， 或者 通过 满足 某些 特定条件 元素 来 创建 子 序列
return the <unk> <unk> which, on some systems (like unix) is the time of the last metadata <unk> and, on others (like <unk> is the creation time for path, 返回 " 在 " 上 的 的 " <unk> " 的 的 的 （ 例如 " <unk> ( ) " 的 的 的 的 ， 而 在 的 上 的 时间 ）, 返回 path 在 系统 中 的 ctime ， 在 有些 系统 （ 比如 unix ） 上 ， 它 是 元 数据 的 最后 修改 时间 ， 其他 系统 （ 比如 windows ） 上 ， 它 是 path 的 创建 时间
it is the same object as "complex" in the python layer., 它 是 python 层面 的 " 层面 " 对象 的 相同, 和 python 层面 的 类 " complex " 是 同一个 对象
the <unk> function is added to help adding a type to a module, " <unk> . <unk> ( ) " 函数 将 添加 到 模块 模块 的 模块, 增加 了 " <unk> _ <unk> ( ) " 函数 以 协助 将 类型 加入 到 模块 中
see also the main policies section for more details., 另 请参阅 库 的 细节 细节, 更 多 细节 可以 查阅 策略 部分
the callable is called inside a <unk> that catches exceptions, <unk> the state of the terminal, and then re raises the exception, 调用 调用 调用 调用 " <unk> " ， ， ， " " " " " " 的 的 ， ， ， 该 异常, 该 可 调用 对象 会 在 " try " ... " except " 这样 的 结构 内 被 调用 ， 当 它 捕获 到 异常 时 ， 会先 还原 终端 再 重新 引发 这个 异常
raised for module specific errors., 模块 模块 模块 的 模块, 针对 模块 特定 错误 引发
access is an integer that specifies an access mask that describes the desired security access for the key, access 是 一个 整数 ， ， 一个 一个 的 的 ， <unk> 的 的 的 的, access 为 一个 整数 ， 用于 <unk> 的 预期 安全 访问 指定 访问 掩码
module "aifc" defines the following function:, 模块 " 定义 定义 了 以下 函数 :, " aifc " 模块 定义 了 以下 函数 ：
p may be a file object or any object with a "readline()" method, 可以 可以 是 一个 文件 对象 对象 的 任何 对象 对象, p 可以 是 文件 对象 或 具有 " readline ( ) " 方法 的 任何 对象
in the <unk> <unk> of use cases, one doesn't care what the actual value of an enumeration is, 在 这种 情况 下 ， 使用 " ， " ， " " " " " " " 的 值, 在 大部分 用例 中 ， 开发者 都 关心 枚举 的 实际 值 是 什么
the returned string will always be unquoted as per <unk>, 返回 字符串 将 被 被 作为 为 ", 返回 的 字符串 永远 按照 " email . utils . <unk> ( ) " 方法 去除 引号
changed in version 3.3: operations that used to raise <unk> now raise <unk> since <unk> is now an alias of "oserror"., 在 3.3 版 更改 : 当 了 用于 " " " " " " " " " " " " " 现在 " 现在 " " " " " " " " " ", 在 3.3 版 更改 : 由于 " ioerror " 现在 是 " oserror " 的 别名 ， 因此 用于 引发 " ioerror " 的 操作 现在 会 引发 " oserror "
the "str" type is described in the python library reference at text sequence type <unk>, " decimal " 类型 python 类型 类型 类型 类型 类型 类型 类型 类型 类型 类型, the " str " type is <unk> in the python library reference at 文本 序列 类型 str .
although they remain constant within an individual python process, they are not <unk> between repeated <unk> of python., 虽然 它们 在 python 中 ， ， ， python python 的 它们 不会 被 之间 之间 的, 虽然 它们 在 单个 python 进程 中 保持 不变 ， 但是 在 重复 调用 的 python 进程 之间 它们 是 不可 预测 的
clock that <unk> <unk> tracking the time since an arbitrary point, unaffected by <unk> or time <unk> and not incremented while the system is <unk>, <unk> <unk> <unk> ， ， 时间 的 的 的 ， 或 <unk> 的 时间 ， 并 不 不会 被 忽略 的 系统, <unk> 递增 的 时钟 ， 记录 从 一个 任意 <unk> 开始 的 时间 ， 不 受 <unk> 或 时间 调整 的 影响 ， 并且 当 系统 <unk> 时 将 不会 递增
this makes possible an idiom for <unk> a data series into n length groups using <unk> <unk> <unk>, 这 使得 使用 一个 一个 的 数据 的 数据 ， 的 的 的 " <unk> ( ) " , " ' " ) ", 使得 可以 通过 " zip ( [ iter ( s ) ] n ) " 这样 的 惯用 形式 将 一系列 数据 <unk> 为 长度 为 n 的 分组
if there is an error opening the terminal, the underlying curses library may cause the interpreter to <unk>, 如果 有 是 一个 ， 则 ， 的 的 ， ， 可能 会 导致 导致 将 导致 的, 如果 打开 终端 时 发生 错误 ， 则 下层 的 curses 库 可能 会 导致 解释器 退出
its representation shows the values of its attributes., 它 表示 包含 的 的 值, 直接 print 会 显示 所有 属性 的 值
there are also several <unk> <unk> python in <unk>, 有 也 有 什么 <unk> python 中 的 python ？, 另外 还有 <unk> 书籍 深入 讲解 python
see the built in function <unk>, 参见 内置 的 " ( ( ) " 函数, 请参阅 内置 函数 " pow ( ) "
you can also write relative imports, with the "from module import <unk> form of import statement, 你 可以 还 可以 使用 " import " 模块 的 导入 导入 导入 导入 导入, 你 还 可以 使用 import 语句 的 " from module import name " 形式 编写 相对 导入
generator iterator methods <unk>, 生成器 迭代 器 方法 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~, 生成器 迭代 器 的 方法 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
the type of socket opened depends on the <unk> argument, which defaults to <unk> and thus opens a udp socket, 基本 的 的 的 的 的 的 " <unk> " ， ， ， ， 默认 为 " <unk> " 和 " ' " 和 " ' ", 打开 的 套 接字 类型 取决于 <unk> 参数 ， 该 参数 的 默认值 为 " socket . sock _ <unk> " 即 打开 一个 udp 套 接字
using python on windows, 在 windows 上 python, 在 windows 上 使用 python
"random" generate pseudo random numbers, " random " 生成 伪 随机数, " random " 生成 伪 随机数
writes the concatenated list of strings to the stream <unk> by <unk> the "write()" method), 将 面板 到 到 到 到 的 的 列表 推导 式 ， <unk>, 将 拼接 后 的 字符串 列表 写入 <unk> （ 可能 通过 重用 " write ( ) " 方法 ）
as an <unk> <unk> has a tag and a dictionary of attributes:, 作为 一个 <unk> <unk> ， 具有 一个 一个 字典 和 字典 的 字典 的 字典, 作为 " element " ， " <unk> " 具有 标签 和 属性 字典 :
when you create an instance of <unk> you pass it a "logger" instance and a dict like object which contains your contextual information, 当 你 创建 一个 实例 实例 ， 它 它 一个 实例 ， 实例 ， 一个 实例 ， 一个 一个 一个 对象 ， 它 对象 它 它 的 信息, 当 你 创建 一个 " <unk> " 的 实例 时 ， 你 会 传入 一个 " logger " 的 实例 和 一个 包含 了 上下文 信息 的 字典 对象
changed in version 3.2: support for binary input was added., 在 3.2 版 更改 : 支持 了 对 支持 的 支持, 在 3.2 版 更改 : support for binary input was added .
there are no type <unk> but the value type needs to support addition, <unk> and <unk>, 有 没有 类型 类型 ， 但 类型 类型 类型 需要 需要 的 类型 支持 类型 支持, 没有 类型 限制 ， <unk> 类型 需要 支持 加 ， <unk> 和 比较 操作
<unk> c style parser for command line options, " c " c " " 解析器 解析器 的 命令行 选项, " getopt " c 风格 的 命令行 选项 解析器
if the given section exists, and contains the given option , return <unk> otherwise return "false", 如果 给定 节 节 节 和 并且 包含 给定 的 给定 ， 返回 " false " ， 否则 返回 " false ", 如果 给定 的 section 存在 并且 包含 给定 的 option 则 返回 " true " ； 否则 返回 " false "
all three arguments must be integral, 所有 三个 参数 都 必须 为 为, 三个 参数 必须 都 是 整数
changed in version 3.4: set <unk> "__loader__" <unk> unconditionally to support <unk>, 在 3.4 版 更改 : " " " " " " " " <unk> to <unk> 支持 支持 支持 支持 支持, 在 3.4 版 更改 : set " __ name __ " , " __ loader __ " " __ package __ " <unk> to support <unk> .
status lines in a text based application are commonly shown in reverse <unk> or a text <unk> may need to <unk> certain words, 在 行 中 的 文本 文本 文本 中 ， 在 <unk> 或 <unk> <unk> 或 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 基于 文本 的 应用程序 常常 以 <unk> 显示 状态 行 ， 一个 文本 <unk> 可能 需要 <unk> 显示 某些 单词
the <unk> class in the <unk> <unk> package has options to support writing to any mapping in the <unk>, " " " " " 类 " " <unk> " <unk> " 选项 到 支持 到 到 的 的 的 <unk>, <unk> class 在 <unk> <unk> package 有 支持 写 映射 的 选项
changed in version 3.2: query supports bytes and string objects., 在 3.2 版 更改 : 支持 " bytes " 和 " string ", 在 3.2 版 更改 : <unk> supports bytes and string objects .
<unk> does the work of <unk> up the format string into character data and replacement fields, " <unk> : <unk> <unk> <unk> 格式 字符串 字符串 的 字符 的 数据 数据 和 数据 的 数据, " vformat ( ) " 完成 将 格式 字符串 分解 为 字符 数据 和 替换 字段 的 工作
the <unk> method for ordered dictionaries returns and removes a <unk> value) pair, " " ( ) " 方法 的 的 的 的 的 ， ， 一个 新 的 的 的, 有序 字典 的 " <unk> ( ) " 方法 移除 并 返回 一个 ( key , value ) 键值 对
this class method constructs a "fraction" representing the exact value of <unk> , which must be a <unk> instance., 这个 类 方法 会 一个 " " " 的 的 值 的 值 ， 必须 必须 为 一个 " 实例, 此类 方法 可 构造 一个 " fraction " 来 表示 dec 的 精确 值 ， 该 参数 必须 是 一个 " decimal . decimal " 实例
"stat" <unk> <unk> results, " stat " stat " stat ( ) ", " stat " 解析 " stat ( ) " 结果
return "none" if <unk> is not a terminfo <unk> <unk> or is <unk> or <unk> from the terminal description., 如果 " none " ， 则 " " 或 " " 或 " " " 或 " <unk> " 或 " <unk> " 或 " <unk> ", 如果 <unk> 不是 一个 terminfo " 字符串 功能 " 或者 如果 其 被 取消 或 不 存在 于 终端 描述 中则 返回 " none "
if the number of backslashes is odd, the last backslash escapes the next double quotation mark as described in rule 3., 如果 <unk> 的 <unk> <unk> ， 则 <unk> ， 则 <unk> 为 单位 ， ， 在 在 中 的 的, 如果 反 斜杠 数量 为 <unk> ， 则 最后 一个 反 斜杠 会 如 规则 3 所 描述 的 那样 转义 下 一个 双引号
it is <unk> <unk> to modify the above example to run several commands <unk>, 它 是 " <unk> " 的 " 的 例子 ， ， 运行 运行 运行 命令 命令 命令 命令, 要 修改 上面 的 例子 来 同时 运行 多个 命令 确实 是 非常简单 的 :
see section the <unk> module for more about this module., 请参阅 functional the 模块 了解 详情 模块 的 更 多 细节, see section contextlib 模块 for more <unk> this module .
a slightly more advanced use of the reader catching and reporting <unk>, 对 的 的 的 的 的 ， 并 将 <unk> <unk>, reader 的 更 高级 用法 — — 捕获 并 报告 错误 :
how do i get a <unk> test version of python?, 如何 怎样 测试 套件 的 的 版本, <unk> 如何 获取 python 的 公开 测试 版本 ？
perhaps the most well known statement type is the "if" statement, 也许 最 " 的 " 语句 " 语句 是 " 语句 " 语句 " 语句, 可能 <unk> 人 所 <unk> 的 编程 语句 就是 " if " 语句 了
<unk> convenient web browser <unk>, " http . <unk> " : / / www . org ., " <unk> " 方便 的 web 浏览器 控制器
this calls <unk> in the underlying library., 此 此 调用 调用 底层 库中 " rl _ <unk> _ <unk> ( ) ", 此 函数 会 调用 底层 库中 的 " history _ get ( ) "
changes in the c api, c api 的 改变, c api 的 变化
the offset of the local <unk> <unk> <unk> in seconds west of utc <unk> in most of <unk> <unk> positive in the <unk> zero in the <unk>, " <unk> " <unk> <unk> <unk> <unk> <unk> <unk> <unk> 的 的 的 <unk> 中 的 的 <unk> <unk> 在 <unk> 中 中 的 <unk> 中 <unk> <unk>, 本地 （ 非 dst ） 时区 的 偏移量 ， utc <unk> 的 秒数 （ <unk> 大部分 <unk> 为 负 ， <unk> 为 正 ， <unk> 为 零 ）
in this example it is equivalent to <unk> result + <unk> but more <unk>, 在 这种 情况 下 ， 它 等价 于 " <unk> _ <unk> " ， ， 这 意味着 避免 <unk> <unk> 更 多 更, 在 这个 示例 中 它 相当于 " result result + [ a ] " ， 但 更 高效
the position is computed from adding offset to a reference <unk> the reference point is selected by the <unk> argument, 位置 是 从 " 的 " 的 引用 引用 引用 引用 引用 引用 引用 引用 的 引用 引用, 通过 向 一个 参考点 添加 offset 来 计算 位置 ； 参考点 由 whence 参数 指定
<unk> we recommend using 4 space blocks to indent python <unk>, " py _ <unk> ( ) " 将 使用 " < < python 到 python 到 python 到 python, （ 注意 ： 我们 建议 使用 4 个 空格 来 缩进 python 代码 。 ）
frame must not be "null"., 不 必须 为 " null ", frame 必须 不 为 " null "
see <unk> attribute for more information, 请参阅 " 了解 " 了解 了解 更 多 信息, 请参阅 " sys . <unk> " 属性 了解 详情
the above code print a series of "0 0" lines, because the array contents is initialized to zeros., 上面 代码 的 的 的 ， ， ， 因为 将 其 被 求值 的 被 被 被 被, 以上 代码 会 打印 几行 " 0 0 " ， 因为 数组 内容 被 初始化 为 0 .
changed in version 3.9: this dictionary is no longer filled with the default system <unk> but only contains <unk>, 在 3.9 版 更改 : 此 字典 字典 不再 默认 系统 系统 系统 ， 只有 " <unk> ", 在 3.9 版 更改 : this dictionary is no longer <unk> with the default system <unk> , <unk> only <unk> <unk> .
similarly, if <unk> returns "false" it doesn't guarantee that a subsequent call to get() will not block., 如果 如果 " " ( ) " 返回 " false " ， 则 调用 调用 的 " ， " 将 不会 阻塞 不 不会 阻塞, 类似 的 ， 如果 empty ( ) 返回 " false " ， 也 不 保证 后续 调用 的 get ( ) 不 被 阻塞
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
pep <unk> simpler customization of class creation, pep <unk> : 类 装饰 器, pep <unk> : 自定义 类 创建
new in version <unk>, 3.4 新版 功能 . 1 ., 3.2 . 3 新版 功能 .
the basic command line usage is:, 基本 的 的 用法 ：, 它 在 命令行 中 的 基本 用法 如下 ：
the associated value is a string giving details about the type <unk>, 关联 的 是 是 字符串 的 字符串 的 类型 的 类型, 关联 的 值 是 一个 字符串 ， 给出 有关 类型 不 匹配 的 详情
timeout can be an int or float, timeout 可以 是 一个 或 或 类型, timeout 可以 是 整数 或 浮点数
<unk> response classes used by urllib, " urllib . response " response response 的 response 类, " urllib . response " urllib 使用 的 response 类
note that the change also <unk> both in the error message as well as the help string., 请 注意 ， 的 的 改变 ， 将 在 " 与 " 帮助 的 的, 注意 这一 改变 同时 <unk> 在 错误信息 和 帮助 信息 里
returns a new instance of the <unk> class intended to communicate with a remote unix machine whose address is given by address in the form of a <unk> <unk> tuple, 返回 一个 新 的 " 实例 " 实例 ， 的 的 的 的 的 的 ， ， 的 的 的 的 ， ， 为 " <unk> " " " " " " 的 的 <unk>, 返回 一个 " <unk> " 类 的 新 实例 用来 与 通过 address 以 " ( host , port ) " 元组 形式 给出 地址 的 远程 unix 机器 进行 <unk>
if policy is set to "none", the default policy is <unk>, 如果 timeout 设置 为 " none " ， 默认值 为 默认值, 如果 policy 设 为 " none " 将 恢复 默认 策略
porting to python 3.9, 移植 到 python 3.9, 移植 到 python 3.9
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
students may be better <unk> by <unk> python as their first language, 可以 可以 通过 " <unk> " 来 python 的 的 第一个 的 的, 但 以 python 作为 <unk> 编程语言 进行 学习 对 学生 可能 更 <unk>
<unk> , if specified, will be called with the string of every json int to be decoded, " ， 如果 如果 ， 如果 将 被 将 为 字符串 的 的 " 将 被 视为 为 true ", parse _ int ， 如果 指定 ， 将 与 每个 要 解码 json 整数 的 字符串 <unk> 调用
these two statements are <unk>, 这些 两个 语句 语句 语句, 以下 两种 表达 是 等价 的 :
since it is available via <unk> it is the canonical place for documentation of the object., 由于 它 是 " __ ( __ ( ) " 的 它 是 它 是 它 的 的 的, 由于 它 可 用于 代码 <unk> ， 因此 是 对象 存放 文档 的 规范 位置
this probe point indicates that execution of a python function has <unk>, 这 意味着 python 一个 python 的 python 函数 的 函数, 这个 探针 点 表示 一个 python 函数 的 执行 已经 开始
enable <unk> semantics for <unk> floats and <unk>, <unk> : <unk> <unk> <unk> 的 <unk> <unk> 和 " <unk> ", 为 float 和 decimal 的 混合 启用 更 严格 的 语义
return or set the <unk> attributes <unk> <unk> and/or <unk>, 返回 或 设置 " 属性 " 属性 " " " " " " " " " " " ", 返回 或 设置 画笔 的 属性 x / y <unk> 因子 和 / 或 <unk>
handle <unk> exception raised by <unk>, <unk> <unk> " 异常 " 异常 " 异常 " 异常, 处理 由 " thread . run ( ) " 引发 的 未 捕获 异常
<unk> 256 bit secure hash algorithm., " email " <unk> " , " 哈希 哈希, " check _ <unk> " : 256 位 安全 哈希 算法
metaclass for defining abstract base classes <unk>, " 定义 " 定义 抽象 基类 基类, 用于 定义 抽象 基类 （ abc ） 的 元类
<unk> does not always build a tuple, " bufferedrwpair _ <unk> ( ) " 不 不 执行, " py _ buildvalue ( ) " 并 不 一直 创建 一个 元组
if <unk> is not "none", it prints a header <unk> <unk> recent call <unk>, 如果 " none " ， " none " ， 则 将 " " " " ( ) " " " " " ( ) " ) " 调用 ", 如果 <unk> 不 为 " none " ， 它 将 打印 <unk> " traceback ( <unk> <unk> call last ) : "
if size is specified, it is used as size, otherwise the string is assumed to be zero <unk>, 如果 size size ， 则 会 被 用作 ， 否则 将 被 视为 为 零, 如果 指定 了 size ， 则 将 其 用作 长度 ， 否则 将 假定 字符串 <unk> 结尾
when more than one pickle file are specified, print given preamble before each <unk>, 当 更 多 的 的 的 ， 则 会 在 在 <unk> 之前 之前, 当 指定 一个 以上 的 pickle 文件 时 ， 在 每次 反汇编 之前 打印 给定 的 <unk>
note that existing parameter values of headers may be accessed through the <unk> attribute of the header value (for example, <unk> <unk>, 请 注意 ， 不 存在 的 值 ， 可以 通过 " " " " " 属性 " 的 " " " " " " " " " " " " " ", 请 注意 ， <unk> 已有 的 参数值 可以 通过 头字 段 的 " <unk> " 属性 来 访问 （ <unk> ： " msg [ ' content type ' ] . <unk> [ ' charset ' ] " ）
pep <unk> flexible string representation, pep <unk> : string 字符串, pep <unk> : 灵活 的 字符串 表示
changed in version 3.7: when the "%z" directive is provided to the "strptime()" method, the utc offsets can have a colon as a separator between <unk> minutes and seconds, 在 3.7 版 更改 : 当 " " " " " " " " " " " " " ， 因此 提供 了 <unk> ， ， <unk> 一个 <unk> <unk> 的 <unk>, 在 3.7 版 更改 : 当 提供 " % z " 指令 给 " strptime ( ) " 方法 时 ， utc 差值 可以 在 时 、 分 和 秒 之间 使用 冒号 分隔符
the following function sets are wrappers to the system allocator, 以下 函数 将 被 用于 系统 的 的, 以下 函数 集 封装 了 系统 分配器
this class implements condition variable objects, 这个 类 实现 " 对象 " 对象, 实现 条件 变量 对象 的 类
changed in version 3.7: the attribute is now always ascii text, 在 3.7 版 更改 : the " 属性 现在 会 被 忽略, 在 3.7 版 更改 : the attribute is now always ascii text
if body is a string or a bytes like object that is not also a file , the content length header is set to its length, 如果 是 是 一个 字符串 或 bytes like object ， 但 不是 一个 文件 ， 则 会 被 忽略 的 的, 如果 body 是 字符串 或者 类似 字节 的 对象 ， 并且 也 不是 文件 ， content length <unk> 设为 正文 的 长度
raised when a future is cancelled., 当 在 future 时 被 引发, future 对象 被 取消 时会 触发
if error_callback is specified then it should be a callable which accepts a single argument, 如果 指定 了 指定 ， ， 它 应当 是 一个 接受 一个 参数 ， 它 接受 一个 参数, 如果 指定 了 error _ callback , 它 必须 是 一个 接受 单个 参数 的 可 调用 对象
<unk> the subscript expression is <unk>, " <unk> " 的 表达式 表达式, 接下来 ， 该 抽取 表达式 会 被 求值
the following example demonstrates the basic <unk> of a <unk>, 下面 的 例子 演示 了 基本 基本 的 的 <unk>, 下面 的 <unk> 展示 了 " <unk> " 的 基本 机制 :
<unk> a panel stack extension for curses, " <unk> . <unk> " 用于 的 的 扩展, " curses . panel " curses 的 面板 栈 扩展
allocates n bytes and returns a pointer of type "void " to the allocated memory, or "null" if the request fails., 以 n 字节 字节 返回 返回 " " " " " " " " " " " " null " ， 如果 如果 失败 ， 如果 " null ", 分配 n 个 字节 并 返回 一个 指向 分配 的 内存 的 " void " 类型 指针 ， 如果 请求 失败 则 返回 " null "
when not in interactive mode, <unk> has no special meaning and is not defined, 当 在 交互式 时 ， 没有 没有 没有 没有 ， ， ， 并且 没有 并且 没有 并 不, 当 不 处于 交互 模式 时 ， " _ " 无 特殊 含义 也 没有 预定 义
empty an existing dictionary of all key value <unk>, 空 字典 的 键 的 所有 键 的 键, 清空 现有 字典 的 所有 键值 对
the dialect can be specified either by passing a sub class of <unk> or by <unk> keyword arguments, or <unk> with keyword arguments overriding parameters of the dialect, " context 可以 通过 " " " " " " " " " " " " " " " " 或 " " " " " " 参数 " 参数 " 参数 " 参数 " 参数, 要 指定 变种 ( dialect ) ， 可以 给出 " dialect " 的 子类 ， 或 给出 <unk> 关键字 参数 ， 或 两者 都 给出 （ 此时 关键字 参数 会 覆盖 dialect 参数 ）
return posix timestamp corresponding to the "datetime" instance, 返回 对应 于 " " " " " " " " ", 返回 对应 于 " datetime " 实例 的 posix 时间 戳
if the wrapped coroutine is not done, this returns the stack where it is suspended, 如果 目标 被 设置 为 ， ， 则 返回 将 其 执行 的, 如果 所 封包 的 协程 未 完成 ， 这 将 返回 <unk> 起 所在 的 栈
<unk> if provided, this will be the default value for this field, 如果 如果 如果 如果 ， 则 此 此 将 被 默认 为 默认 的 默认值, " default " ： 如果 提供 ， 这 将 是 该 字 段 的 默认值
<unk> (default: <unk> class to use when adding options to the parser in <unk>, " <unk> . <unk> ( ) " : " " . <unk> ( ) " 来 使用 " <unk> . <unk> ( ) " 来 使用, " option _ class " ( 默认 : optparse . option ) class to use when <unk> <unk> to the parser in " add _ option ( ) " .
the latter cases return "false" or "true", respectively., 如果 ， 并 返回 " false " ， " " " " ", 在 后 两种 情况 下 将 分别 返回 " false " 或 " true "
the <unk> way of using magic methods is with the <unk> class, 使用 使用 " __ ( __ " 方法 是 方法 的 方法 是 " 方法, 使用 模式 方法 最 简单 的 方式 是 使用 " <unk> " class
<unk> is a tool for generating bindings for c++ libraries as python classes, and is specifically designed for python., " 是 一个 用于 的 c 的 python 的 python python 的 python ， 以及 是 python 的 的 的, <unk> 是 一个 用于 为 c++ 库 生成 python 类 绑定 的 库 ， 它 是 针对 python 特别 设计 的
see also: <unk> handles <unk> exceptions., 参见 : " <unk> _ <unk> " ， " " " ", 参见 : " sys . excepthook ( ) " 处理 未 捕获 的 异常
all command line arguments present are <unk> into a list, 所有 参数 参数 都 是 <unk> 列表 列表, 所有 当前 命令行 参数 被 <unk> 到 一个 列表 中
return true if o is of type <unk>, 如果 o 是 " pydatetime _ type " 类型 则 返回 " 类型 ", 如果 o 的 类型 为 " <unk> _ type " 则 返回 真值
its purpose is to allow <unk> <unk> such as for <unk> for the interpreter itself, or to allow a <unk> of python processes to share hash values., 其 与 为了 为了 为了 为了 为了 为了 <unk> 的 的 的 ， ， " <unk> " 的 " 的 " 的 " 的 python 的, 它 的 目的 是 允许 可 <unk> 的 哈希 运算 ， 例如 用于 解释器 本身 的 <unk> 检测 ， 或 允许 一组 python 进程 共享 哈希 值
default parameter values are evaluated from left to right when the function definition is executed, 默认 参数 被 从 在 函数 函数 会 被 执行 的 执行, 默认 <unk> 会 在 执行 函数 定义 时 按 从 左 至 右 的 顺序 被 求值
"close()" does nothing if the generator has already exited due to an exception or normal <unk>, 如果 生成器 对象 已 被 取消 已 被 取消 ， 则 将 引发 异常 或 异常, 如果 生成器 已经 由于 异常 或 正常 退出 则 " close ( ) " 不会 做 任何 事
abstract base class for <unk>, 抽象 基类 基类 的 基类, 数组 的 抽象 基类
changed in version 3.7: the function now uses the utf 8 encoding in the utf 8 mode., 在 3.7 版 更改 : the function now the utf 8 8 8 8 8 8 8 8 8 8 8, 在 3.7 版 更改 : the function now <unk> the utf 8 encoding in the utf 8 mode .
<unk> a number, x coordinate of upper right corner of canvas, " a . <unk> " , x x " 的 的 的 的, <unk> 一个 数值 , <unk> <unk> 的 x 坐标
for a nonzero number, return the <unk> exponent of its operand as a "decimal" instance, 对于 " 的 ( ) " 返回 返回 返回 " 的 " 的 的 的, 对于 一个 非 <unk> ， 返回 其 运算 数 的 调整 后 指数 作为 一个 " decimal " 实例
on failure, set an exception and return "null"., 在 失败 时 设置 一个 异常 并 返回 " null ", 在 失败 时 设置 一个 异常 并 返回 " null "
for the first <unk> <unk> only a "queuehandler" to those loggers which are accessed from performance critical threads, 对于 第一个 " <unk> ( ) " 只 只 一个 一个 进程 的 线程 的 的 线程 的 线程, 第一 部分 ， 针对 那些 对 性能 有 要求 的 关键 线程 的 日志 记录 附加 一个 " queuehandler "
if no elements are present, raises an <unk>, 如果 没有 不到 则 会 引发 引发 引发 引发 引发 ", 如果 没有 元素 的话 ， 就 引发 " indexerror "
window objects, as returned by <unk> and <unk> above, have the following methods and attributes:, " time " " " ( ) " 返回 的 " " ( ) " 返回 具有 以下 方法 和 方法 ：, window 对象 会 由 上面 的 " <unk> ( ) " 和 " <unk> ( ) " 返回 ， 它 具有 以下 方法 和 属性 :
pep 343: the 'with' statement, pep 343 : " with " 语句, pep 343 : " with " 语句
if callback is specified then it should be a callable which accepts a single argument, 如果 回调 为 true ， 则 它 应当 是 一个 接受 一个 参数 ， 则 返回 一个 参数, 如果 指定 了 callback , 它 必须 是 一个 接受 单个 参数 的 可 调用 对象
sets the field at index <unk> of the struct sequence p to value o, 设置 字段 的 值 ， ， 序列 ， 序列 序列 序列 序列 序列, 将 结构 序列 p 的 索引 <unk> 处 的 字 段 设置 为值 o
decimal numbers can be represented exactly, 十进制 整数 可以 是 字 段, decimal 数字 的 表示 是 完全 精确 的
<unk> http state management, " http . client " 状态, " http . cookies " http 状态 管理
to send the output of "help()" to a file on <unk> <unk> the output to a regular file:, 要 把 " help " help ( ) " 文件 到 文件 的 文件 文件 输出 到 输出 到 ", 如果 要 把 " help ( ) " 的 输出 写 到 磁盘 上 的 一个 文件 ， 重定向 该 输出 到 一个 常规 文件 ：
out of range <unk> result in an "indexerror", <unk> 的 <unk> 中 ， 结果 中 的 结果, <unk> 的 抽取 会 导致 " indexerror "
this is the same as <unk> but key is specified as a "const char ", rather than a "pyobject "., 这是 与 " <unk> " 相同 ， 但 作为 " " " " " " " " " " " " " " " " " " " " ", 这 与 " pydict _ getitem ( ) " 一样 ， 但是 key 被 指定 为 " const char " ， 而 不是 " pyobject "
let's say you want to log to console and file with different message formats and in <unk> <unk>, 让 你 希望 希望 到 以 和 <unk> 的 的 消息 和 消息 和 消息 进行 消息, 假设 有 这样 一种 情况 ， 你 需要 将 日志 按 不同 的 格式 和 不同 的 情况 存储 在 控制台 和 文件 中
if <unk> is a coroutine it is automatically scheduled as a task., 如果 <unk> 为 " <unk> " 一个 一个 ， 它 将 被 作为 一个 函数, 如果 <unk> 是 一个 协程 ， 它 将 自动 作为 任务 加入 <unk>
this is equivalent to <unk>, 这 相当于 " " " " ", 这 与 " parser ( ) . <unk> ( s ) " 等价
this way, you won't be <unk> into <unk> <unk> a list when you need a sorted copy but also need to keep the <unk> version <unk>, 这 意味着 你 可以 在 你 <unk> <unk> <unk> <unk> ， 你 的 的 ， ， 但 需要 需要 需要 的 版本 的, 这样 ， 当 您 需要 排序 的 副本 ， 但 也 需要 保留 未 排序 的 版本 时 ， 就 不会 意外 地 覆盖 列表
see the quick guide for some examples of how to use <unk> <unk> and <unk>, 请参阅 " for . <unk> " 的 如何 使用 " os . <unk> ( ) " 和 " <unk> " 和 " <unk> " 和 " <unk> ", 阅读 <unk> <unk> 中 的 <unk> 了解 如何 使用 " mock " ， " <unk> " 和 " <unk> ( ) "
the base class for those built in exceptions that are raised for various arithmetic <unk> <unk> <unk> <unk>, 内置 的 的 的 内置 的 " 异常 的 的 的 的 的 <unk> <unk> <unk> ( <unk> , <unk> ) ", 此 基类 用于 派生 针对 各种 算术 类 错误 而 引发 的 内置 异常 : " overflowerror " , " <unk> " , " <unk> "
flag meaning explanation r read read o old previously detected by <unk> d deleted marked for subsequent deletion f <unk> marked as important a <unk> replied to, 标记 意义 " 套 接字 接字 ， ， ， 通过 " <unk> " 的 ， ， ， <unk> <unk> <unk> <unk> 的 的 <unk>, 标记 意义 解释 r 读取 读取 o <unk> 以前 由 <unk> 检测 d 已 删除 标记 为 以后 删除 f 已 标记 标记 为 重要 a 已 回复 回复 给
when a module is first imported, python searches for the module and if found, it creates a module object <unk> initializing it, 当 一个 模块 时 ， python 模块 时 ， 如果 ， 它 它 在 它 它 它 它 它 它 在 模块 模块 层级 模块 的 模块, 当 一个 模块 首次 被 导入 时 ， python 会 搜索 该 模块 ， 如果 找到 就 创建 一个 module 对象 [ 1 ] 并 初始化 它
specifying custom filter chains, 指定 自定义 的 过滤器 链, 指定 自定义 的 过滤器 链
notes on socket timeouts, 可用性 性 套 接字, 关于 套 接字 超时 的 说明
formatting times using utc <unk> via configuration, 使用 " 使用 " 的 " 的 系统, 通过 配置 使用 utc ( <unk> ) 格式化 时间
changed in version 3.4: returning <unk> from the underlying comparison function for <unk> types is now supported., 在 3.4 版 更改 : 在 " <unk> ( ) " 函数 的 函数 的 支持 类型 支持 类型 支持, 在 3.4 版 更改 : 现在 已 支持 从未 识别 类型 的 下层 比较 函数 返回 notimplemented 异常
password and salt must be bytes like objects, " 和 salt salt 必须 字节 串 对象, password 和 salt 必须 为 字节 类 对象
pep python <unk> proposal, pep 587 : python, pep “ python 增强 提议 ” 的 <unk> 缩写
they are two examples of sequence data types (see sequence types list, tuple, <unk>, 它们 两个 序列 类型 序列 类型 类型 类型 类型 类型 类型 :, 他们 是 序列 数据类型 （ 参见 序列 类型 list , tuple , range ） 中 的 两种
<unk> <unk> creates mock objects that have the same attributes and methods as the objects they are <unk> and any functions and methods (including <unk> have the same call signature as the real object., " <unk> " <unk> " 对象 创建 对象 具有 相同 对象 的 对象 和 方法 和 方法 和 方法 和 方法 的 " 方法 ( ) " 方法 和 方法 的 方法 和 方法 的 " 对象 " 方法, 自动 <unk> 会 创建 一个 与 要 替换 对象 相同 的 <unk> 和 方法 的 模拟 对象 ， 并且 任何 函数 和 方法 （ 包括 构造函数 ） 都 具有 与 真实 对象 相同 的 调用 签名
this function always creates a new event loop and closes it at the end, 此 函数 总是 会 在 新 事件 循环 循环 ， 并且 它, 此 函数 总是 会 创建 一个 新 的 事件 循环 并 在 结束 时 关闭 之
this is called week number 1, and the iso year of that <unk> is the same as its gregorian <unk>, 这是 " 0.0 0 , " <unk> " 的 相同 的 相同 相同 的 相同, 这 被 称为 1 号 星期 ， 这个 <unk> 所在 的 iso 年 与其 所在 的 格列 高利 年 相同
pep 3101: advanced string formatting, pep 3101 : 高级 字符串 格式, pep 3101 : 高级 字符串 格式
a subclass of <unk> raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing, " sslerror " " 的 当 尝试 一个 当 其他 ， ， ， " 会 引发 " " " " " 被 引发 " " " ", " <unk> " 的 子类 ， 当 试图 写入 另一端 已 被 关闭 的 管道 ， 或是 试图 写入 已 关闭 写入 的 套 接字 时 将 被 引发
this response is a file like object, which means you can for example call <unk> on the <unk>, 这 是 一个 文件 对象 ， 但 它 你 你 你 你 你 可以 在 " 上 " " " " " " " ", <unk> 是 个 文件 类 对象 ， 所以 你 可以 调用 如 ` ` . read ( ) ` ` 等 命令
windows still uses legacy encodings for the system encoding (the ansi code <unk>, windows windows 的 " <unk> ( ) " ， 系统 编码 格式 的 的, windows 仍然 使用 传统 编码 格式 作为 系统 的 编码 格式 （ ansi 代码 页 ）
by default, every key is required to be present, 默认 情况 下 ， 将 被 视为 key 为 假值, 默认 情况 下 每个 键 都 要求 提供
"argparse" supports <unk> the help entry for certain options, by setting the <unk> value to <unk>, " <unk> " <unk> " 用于 与 " 的 " 的 " 的 " 的 " 的 " 的 " <unk> ", " argparse " 支持 静默 特定 选项 的 帮助 ， <unk> 是 将 " help " 的 值 设为 " argparse . <unk> " :
if this is the last call to <unk> final must be true (the default is <unk>, 如果 此 调用 调用 调用 " refresh _ size ( ) " ， 必须 是 默认值 为 默认值, 如果 这 是 对 " <unk> ( ) " 的 最终 调用 则 <unk> 必须 为 真值 （ 默认 为 假值 ）
changed in version 3.4: raise "importerror" when called instead of "notimplementederror", 在 3.4 版 更改 : " " " " " " " " " " " ", 在 3.4 版 更改 : 当 这个 方法 被 调用 的 时候 ， 触发 " importerror " 异常 而 不是 " notimplementederror "
if <unk> is provided, it must be a callable that accepts three parameters: function , path , and <unk> ., 如果 <unk> _ <unk> _ <unk> _ size ， 则 必须 是 一个 函数 ， 则 返回 " true " , " , " , " , ", 如果 提供 了 <unk> ， 它 必须 为 接受 三个 形参 的 可 调用 对象 : function , path 和 <unk>
raised when the interpreter finds an internal error, but the situation does not look so <unk> to cause it to <unk> all <unk>, 当 解释器 时 时 ， 时 ， 但 将 不会 被 ， ， ， 将 导致 为 " true ", 当 解释器 发现 内部 错误 ， 但 情况 看起来 尚未 严重 到 要 <unk> 所有 希望 时 将 被 引发
padding is only automatically added between successive structure members, 在 是 被 添加 了 被 添加 的 的 的, 填充 只会 在 连续 结构 成员 之间 自动 添加
raises a "valueerror" if called more times than there were items placed in the queue., 如果 在 调用 时 ， 则 会 引发 " valueerror " ， 则 会 引发 ", 如果 被 调用 的 次数 多于 放入 队列 中 的 项目 数量 ， 将 引发 " valueerror " 异常
handlers send the log records <unk> by <unk> to the appropriate <unk>, 处理程序 将 记录 由 <unk> <unk> 的 <unk> <unk> <unk>, 处理器 将 日志 记录 （ 由 记录器 创建 ） 发送到 适当 的 目标
these may not be available on all platforms when used with the "strftime()" method, 这些 可能 在 在 上 上 使用 " 时 ， " 使用 " 时 使用 ", 这些 代码 可能 不是 在 所有 平台 上 都 可 与 " strftime ( ) " 方法 配合 使用
free variables used in the nested function can access the local variables of the function containing the <unk>, 在 变量 中 的 函数 中 ， 通过 访问 函数 的 访问 函数 的 <unk> 的 的, 在 嵌套 函数 中 使用 的 自由 变量 可以 访问 包含 该 def 语句 的 函数 的 局部变量
the python standard library documents the existing object types, functions and modules <unk> built in and written in <unk> that give the language its wide application <unk>, python 标准 库 的 函数 对象 和 函数 和 内置 和 内置 模块 和 内置 模块 和 <unk> 的 ， ， 语言, python 标准 库 包含 现有 的 对象 类型 、 函数 和 模块 （ 内置 和 用 python 编写 ） 的 文档 ， 使 语言 具有 广泛 的 应用 范围
describes a field of a struct sequence, <unk> 的 一个 包含 的 的, 描述 结构 序列 的 一个 字 段
the "'x'" mode was added., " ' " 模式 模式 的, 增加 了 " ' x ' " 模式
module "doctest" another test support module with a very different <unk>, 模块 " tkinter " 模块 提供 了 对 模块 模块 的 模块 模块, " doctest " 文档 测试 模块 另 一个 风格 完全 不同 的 测试 模块
gnu tar <unk> basic tar format documentation for tar archive files, including gnu tar <unk>, gnu tar tar tar tar tar 格式 tar 格式 tar 格式 的 tar 格式 的 tar, gnu tar <unk> , <unk> tar format 针对 tar 归档文件 的 文档 ， 包含 gnu tar 扩展
new in version 3.5.4., 3.5 . 4 新版 功能 ., 3.5 . 4 新版 功能 .
optional <unk> and policy are interpreted as with the <unk> class constructor., 可选 的 " dict 和 和 与 " 与 " 与 " 与 " 类 的 " 类 的 " 类, 可选 的 _ class 和 policy 参数 与 " bytesparser " 类 的 构造函数 的 参数 含义 一致
if two items to be compared are themselves sequences of the same type, the <unk> comparison is carried out recursively, 如果 两个 为 为 两个 ， 则 ， ， 的 的 ， ， ， ， ， 则 会 被 为 为, 如果 要 比较 的 两个 元素 本身 又 是 相同 类型 的 序列 ， 则 会 递归 地 执行 字典 式 顺序 比较
string literals can span multiple lines, 字符串 字 面值 可以 跨越 多行, 字符串 字 面值 可以 <unk> 连续 输入
some <unk> also needs to be given to its logging configuration, 某些 " 还 还 需要 需要 重载 配置 日志 记录 配置, 还 需要 考虑 其 日志 记录 配置
a partial list of 3.1 features that were <unk> to <unk>, 对 的 的 列表 列表 ， <unk> 的 " <unk> ", 3.1 功能 的 部分 列表 ， 这些 功能 已 反向 移植 到 2.7 ：
all calls to this function with a given name return the same logger instance, 所有 调用 此 函数 的 函数 函数 会 返回 一个 的 的 实例, 附带 给定 name 的 所有 对此 函数 的 调用 都 将 返回 相同 的 日志 记录器 实例
this function returns the path to byte compiled file, i.e. whatever cfile value was used., 此 函数 返回 路径 路径 的 字节 字节 码 的 写入 ， <unk> <unk> <unk>, 此 函数 返回 编译 后 字节 码 文件 的 路径 ， 即 cfile 所 使用 的 值
function keys, keypad keys and other special keys return a <unk> string containing the key name, 函数 " queue " ) " 和 其他 所有 的 元组 ， 返回 一个 字符串 键 的 字符串, 功能键 、 <unk> 键 和 其他 特殊 <unk> 是 返回 一个 包含 <unk> 的 多 字节 字符串
with "mode <unk> a writable file handle is returned, which supports the "write()" method, 如果 <unk> 的 文件 ， 则 文件 描述符 ， ， 则 返回 " true " 方法, 如果 " mode ' w ' " 则 返回 一个 可 写入 的 文件 句柄 ， 它 将 支持 " write ( ) " 方法
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 上 贡献 。 ）
it supports <unk> of <unk> files in zip <unk> but it currently cannot create an <unk> file, 它 " zip " " " " " " " 的 文件 ， 但 它 将 创建 一个 一个 文件 描述符, 它 支持 <unk> zip 归档 中 的 加密 文件 ， 但是 目前 不能 创建 一个 加密 的 文件
<unk> programmers use <unk> see exception handling for details)., " ' : : 使用 使用 使用 " 使用 _ <unk> _ data _ data _ 异常 _ 异常 ( ) ", ( c <unk> use " pyerr _ <unk> ( ) " ; see 异常 处理 for details ) .
changed in version 3.2: the return type is now <unk>, 在 3.2 版 更改 : 返回 返回 类型 现在 now now now, 在 3.2 版 更改 : the return type is now py _ hash _ t
when using <unk> integers "1" through "9" are accepted (see "bz2" for more <unk>, 使用 " ' " ' " ， " 使用 的 " 是 <unk> （ 例如 ） ） 的 更 多 的, 当 使用 " zip _ bzip2 " 时 接受 整数 " 1 " 至 " 9 " ( 更 多 信息 参见 " bz2 " )
changed in version 3.7: the keyword only argument header ., 在 3.7 版 更改 : 关键字 参数 参数, 在 3.7 版 更改 : 仅 关键字 参数 header
invalid internal state of <unk> or <unk>, 无效 的 " " " " " " " " " " " " " " ", " task " 或 " future " 的 内部 状态 无效
this transformation is independent of the <unk> context in which the identifier is used, 此 方法 会 被 " 的 " 上下文 上下文 描述 的 上下文, 这种 转换 独立 于 标识符 所 使用 的 相关 句法
exception raised for errors that are related to the <unk> operation and not necessarily under the control of the <unk> e.g. an <unk> <unk> occurs, the data source name is not found, a transaction could not be <unk> etc, 异常 错误 的 的 的 <unk> 的 操作 ， 并 不 存在 的 " " " ， " ， 的 操作 ， 不 操作 的 操作 ， 不 不 不 操作 的 不 不 的 的, 与 数据库 操作 相关 而 不 一定 <unk> 程序员 <unk> 的 错误 引发 的 异常 ， 例如 发生 非 预期 的 连接 中断 ， 数据源 名称 未找到 ， 事务 无法 被 执行 等
compiling and linking under unix like systems, 在 unix 上 ， unix 和 unix, 在 类 unix 系统 中 编译 和 链接
changed in version 3.7.2: the invalidation_mode parameter's default value is updated to none., 在 3.5 版 更改 : the invalidation _ value default value is value is updated updated updated updated to, 在 3.7 . 2 版 更改 : the invalidation _ mode parameter ' s default value is updated to none .
on linux, you can <unk> if the systemtap static markers are present in the built binary by <unk> if it contains a <unk> section., 在 unix 上 ， 你 可以 在 当 执行 时 ， 如果 在 执行 时 ， 则 会 在 " " " " " " " " " " " " " ", 在 linux 上 ， 您 可以 通过 查看 是否 包含 “ . note . <unk> ” 部分 来 验证 构建 的 二进制 文件 中 是否 存在 systemtap 静态 标记
changed in version 3.6: as well as string values, "path" objects are also accepted for the filename argument., 在 3.6 版 更改 : " string " 字符串 " " " " " " " 作为 " 对象, 在 3.6 版 更改 : 除了 字符串 值 ， 也 接受 " path " 对象 作为 filename 参数
(contributed by yury selivanov in bpo <unk>, （ 由 yury selivanov 在 bpo <unk> 中 贡献 。 ）, （ 由 yury selivanov 在 bpo <unk> 中 贡献 。 ）
changed in version 3.5: added the " <unk> " <unk> and " <unk> options, 在 3.5 版 更改 : added " " " " " " " " 选项 " 选项, 在 3.5 版 更改 : added the " j " , " r " , and " <unk> " <unk>
if exception information is present, it is not sent to the <unk>, 如果 异常 信息 信息 信息 ， 则 会 被 设为 到, 如果 存在 异常 信息 ， 则 它 不会 被 发送到 服务器
first, here are a list of things to remember before <unk> <unk>, 在 ， 是 是 在 前 （ （ 由 ） ） ）, 首先 ， 下面 列出 了 深入 了解 前 需要 记住 的 事情 ：
in the <unk> example, this will return the string <unk> <unk>, 在 这种 情况 下 ， ， 将 将 返回 " ' ' ' ' " ' " ' " ' ", 在 " myclass " 示例 中 ， 这 将 返回 字符串 " ' <unk> <unk> ' "
if the name of this method starts with <unk> it will be available on all section <unk> in the dict compatible form (see the <unk> example <unk>, 如果 此 方法 的 方法 ， 此 方法 将 在 所有 中 所有 所有 中 的 所有 所有 （ 例如 " ） ） ） （ 例如 ） ） ）, 如果 该 方法 的 名称 是 以 " get " <unk> 的 ， 它 将 在 所有 节 代理 <unk> 兼容 字典 的 形式 提供 （ 参见 上面 的 " <unk> ( ) " 示例 ）
this works because regular dicts have guaranteed ordering since python 3.7, 这 是因为 的 正则表达式 ， 因为 自 python 3.7 起 python, 此项 更改 是 由于 普通 字典 自 python 3.7 起 已 保证 具有 确定 的 元素 顺序
to use a custom <unk> subclass, specify it with the <unk> <unk> otherwise <unk> is used, 要 使用 " <unk> _ <unk> " ， 它 使用 " " " " " " " " " " " " " " " " " " " " ", 要 使用 自定义 的 " <unk> " 子类 ， 用 " <unk> " 指定 他 ； 否则 使用 " <unk> "
the modules described in this chapter provide interfaces to operating system features that are available on <unk> all operating systems, such as files and a clock, 本章 模块 的 模块 的 提供 了 " 的 系统 ， ， 所有 所有 中 的 所有 的 的 文件, 本章 中 描述 的 各 模块 提供 了 在 （ 几乎 ） 所有 的 操作系统 上 可用 的 操作系统 特性 的 接口 ， 例如 文件 和 时钟
an abstract method that executes the module in its own namespace when a module is imported or <unk>, 一个 模块 在 模块 命名 空间 模块 中 的 模块 命名 空间 模块 命名 空间 模块 的 模块, 当 一个 模块 被 导入 或 重新 加载 时 ， 一个 抽象 方法 在 它 自己 的 命名 空间 中 执行 那个 模块
if the bytes cannot be <unk> "oserror" is raised., 如果 不能 字节 ， 则 将 " " " ", 如果 字节 数据 无法 被 锁定 ， 则 会 引发 " oserror "
(contributed by steve dower in bpo <unk>, （ 由 steve dower 在 bpo <unk> 中 贡献 。 ）, （ 由 steve dower 在 bpo <unk> 中 贡献 。 ）
methods are always bound to an instance of a user defined class, 方法 是 总是 被 绑定 类 的 实例 实例 实例, 方法 总是 会 被 绑定 到 一个 用户 自定义 类 的 实例
"x > y" and "not x < y" (for total <unk>, " x y " y 和 y x y " x y ", " x > y " 和 " not x < y " ( 对于 完全 排序 )
for example, <unk> and "5" are both positional arguments in the following <unk>, 例如 ， " <unk> ( ) " 和 " 是 " 参数 " 参数 " 参数 " 参数, 举例来说 ， " 3 " 和 " 5 " 在 以下 调用 <unk> 属于 位置 参数 :
when the lock is <unk> reset it to unlocked, and return, 当 锁 时 ， 则 会 被 阻塞 为 true ， 并 返回, <unk> 被 锁定 ， 将 它 重置 为 未 锁定 ， 并 返回
we can calculate the list of <unk> without any side effects <unk>, 我们 可以 通过 " <unk> ( ) " 的 任何 任何 任何 任何 <unk> 的 问题, 我们 可以 计算 平方 列表 的 值 而 不会 产生 任何 副作用
delete all occurrences of the field with name name from the message's headers, 删除 队列 所有 所有 字段名 的 所有 所有 名称 的 名称, 删除 信息 头 当中 字段名 匹配 name 的 所有 字 段
<unk> setting environment variables, " <unk> . <unk> . <unk> " 设置 环境变量 变量, 附录 ： 设置 环境变量
(default: "true") if true, then words longer than <unk> will be broken in order to ensure that no lines are longer than <unk>, 如果 给出 为 true ， 则 会 将 " " " " 将 将 导致 为 " true " ， 则 将 不会 被 忽略, ( 默认 : " true " ) 如果 为 真值 ， 则 长度 超过 " width " 的 单词 将 被 分开 以 保证 行 的 长度 不会 超过 " width "
this module defines a number of classes, which are detailed in the sections below., 此 模块 定义 了 一个 数值 的 的 的 的 的, 这个 模块 定义 了 许多 类 ， 详见 以下 部分
"dbm.dumb" portable <unk> implementation, " dbm . dumb " 便携式 " 实现, " dbm . dumb " 便携式 dbm 实现
this should only contain whitespace characters, and by default contains all whitespace characters in <unk>, 这 应当 仅 包含 " 默认 " 默认 默认 所有 " ' " ' " ' " ' ", 这 应当 只 包含 空白 字符 ， 并且 默认 包含 ascii 中 所有 的 空白 字符
i had <unk> <unk> with implementing an interpreted language in the abc group at <unk> and from working with this group i had <unk> a lot about language design, 我 <unk> <unk> <unk> ， ， ， ， ， <unk> ， ， <unk> 的 " <unk> " " 的 " ， " 和 " <unk> " 和 " 的 " ， ， 这 意味着 了 一个 的 的 的 的, 我 在 <unk> 的 abc <unk> 时 在 实现 解释 型 语言 方面 <unk> 了 <unk> <unk> ， 通过 与 这个 <unk> 成员 的 <unk> ， 我 <unk> 了 大量 有关 语言 设计 的 <unk>
using the python issue tracker, 使用 python 的, 使用 python 的 问题 追踪 系统
before, those were <unk>, " html " 的 的, 之前 ， 它们 被 <unk> 了
once <unk> (and the counter is greater than <unk> decrement the counter by 1 and return "true", 一旦 ， <unk> ， ， ， 会 被 为 " true " ， ， ， 并 返回 " true ", 一旦 被 唤醒 （ 并且 计数器 的 值 大于 0 ） ， 则 将 计数器 <unk> 1 并 返回 " true "
otherwise, enough words are dropped from the end so that the remaining words plus the <unk> fit within <unk>, 否则 ， ， ， 会 被 从 ， ， ， ， ， ， ， ， 的 <unk> <unk> <unk> （ <unk> ） ）, 否则 将 丢弃 足够 数量 的 末尾 单词 以 使得 剩余 单词 加 " <unk> " 能 适合 " width " :
class derived from "error", 该类 " sys . stdin ", 从 " error " 所 派生 的 类
to get <unk> <unk> control over the copied <unk> the second form of <unk> can be used, 要 <unk> <unk> ， ， 的 的 的 " " " " " " " " " " " 的 " " " " " " " " ", 为了 获得 对 被 复制 区域 的 <unk> 控制 ， 可以 使用 " <unk> ( ) " 的 第二种 形式
the <unk> command allows you to <unk> if your package meta data meet the minimum requirements to build a distribution., <unk> 命令 命令 的 允许 你 你 ， 你 ， 你 的 数据 将 被 写入 的 的, " check " 命令 允许 你 校验 你 的 包 的 元 数据 是否 满足 生成 分发 的 最低 要求
the standard format of the <unk> environment variable is <unk> added for <unk>, 标准 的 的 格式 格式 的 " 是 " <unk> <unk> <unk> <unk> 的, " tz " 环境变量 的 标准 格式 是 （ 为了 <unk> 起 见 ， 添加 了 空格 ） :
return the length of the bytes in bytes object o ., 返回 字节 字节 串 对象 的 字节 串 对象, 返回 字节 对象 o 中 字节 的 长度
changes in <unk> command behavior, 在 " 中 中 的 " 中 的 行为, ' python ' 命令 行为 的 变化
the <unk> flag indicates that it would be <unk> to only return the first line, if there are decoding errors on later lines., <unk> ， ， 了 在 在 <unk> 唯一 的 唯一 ， 如果 在 在 的 的 的 的 的, <unk> 旗标 指明 如果 在 后续 行 发生 解码 错误 ， 则 仅 返回 第一行 就 足够 了
for floating point numbers the result is <unk> a % <unk> where <unk> is usually <unk> / b)" but may be 1 less than that, 对于 浮点数 ， ， 结果 是 是 “ “ “ ” ” ” 是 “ ” ” 通常 通常 的 “ ” ， 但 通常 但 但 可能 可能 可能 可能 导致 可能 导致, 对于 浮点数 ， 结果 是 " ( q , a % b ) " ， q 通常 是 " math . <unk> ( a / b ) " 但 可能 会 比 1 小
the <unk> way to do it in c is to call <unk> (perhaps in a separate <unk> and let the python interpreter handle the input for you, <unk> 的 在 c 中 中 的 c " " ( ) " 在 在 python 解释器 的 python 解释器 解释器 的, 在 c 中 执行 此 操作 的 最 简单 方法 是 调用 " pyrun _ <unk> ( ) " （ 可能 在 单独 的 线程 中 ） 并 让 python 解释器 为 您 处理 输入
it is <unk> to add too many implementation details to a language reference document the implementation may <unk> and other implementations of the same language may work differently, 它 被 在 为了 <unk> 对 实现 的 实现 的 引用 的 实现 的 的 ， 其他 语言 的 其他 语言 的 的 的 的, 在 语言 参考 文档 里 加入 过多 的 实现 细节 是 很 <unk> 的 具体 实现 可能 发生 改变 ， 对 同一 语言 的 其他 实现 可能 使用 不同 的 方式
inheritance of file descriptors, 文件 描述符 的 继承, 文件 描述符 的 继承
"fnmatch" unix filename pattern matching, " fnmatch " unix 文件名 模式匹配, " fnmatch " unix 文件名 模式匹配
in addition, for "'g'" and "'g'" <unk> trailing <unk> are not removed from the result., 在 ， " 和 " <unk> ( ) " ， 而 不是 不 的 的 的, 此外 ， 对于 " ' g ' " 和 " ' g ' " 转换 ， 末尾 的 零 不会 从 结果 中 被 移除
hash objects with different digest sizes have completely different outputs <unk> hashes are not prefixes of longer <unk> blake2b and <unk> produce different outputs even if the output length is the <unk>, 不同 不同 不同 不同 不同 的 不同 的 不同 不同 的 不同 的 不同 的 的 ， ， ， ， ， ， 的 的 ， 如果 <unk> 的 的 的 的 的, 不同 摘要 大小 的 哈希 对象 具有 完全 不同 的 输出 （ 较 短 哈希 值 并非 <unk> 哈希 值 的 前缀 ） ； 即使 输出 长度 相同 ， blake2b 和 blake2s 也 会 产生 不同 的 输出 :
the two argument form specifies the arguments exactly and makes the appropriate references, 两个 参数 参数 参数 参数 参数 和 参数 和 的 的 的, 两个 参数 的 形式 明确 指定 参数 并 进行 相应 的 引用
this subtype of "pyobject" represents a python bytes object., 这个 " " " " 的 一个 字节 字节 字节 字节 字节 字节 字节, 这种 " pyobject " 的 子 类型 表示 一个 python 字节 对象
the signal corresponding to the <unk> <unk> event, " pwd " " " <unk> " <unk> " 事件 事件, 对应 于 " ctrl + c " <unk> 事件 的 信号
subclass of <unk> has the same interface but <unk> on a default <unk> object created automatically when needed for the first time., " " " 的 子类 ， 具有 与 " 的 " 相同 的 " 相同 的 " <unk> ( ) " 方法 的 的, <unk> 的 子类 ， 具有 相同 的 接口 ， 但 其 绘图 场所 为 默认 的 " screen " 类 对象 ， 在 首次 使用 时 自动 创建
like "map()" except that the elements of the iterable are expected to be iterables that are unpacked as arguments., 类似 于 " __ ( ) " ， 它 可 迭代 对象 的 的 的 是 被 被 视为 为 被 视为, 和 " map ( ) " 类似 ， 不过 iterable 中 的 <unk> 会 被 解包 再 作为 函数参数
see <unk> above for a description of the format , <unk> and filters arguments., 请参阅 " <unk> _ <unk> " ) " ， <unk> 格式 的 <unk> <unk> 和 和 <unk>, 参见 上文 的 " <unk> " 了解 有关 format , <unk> 和 filters 参数 的 说明
how can my code <unk> the name of an <unk>, 如何 可以 代码 代码 块 的 名称 名称, 我 的 代码 如何 才能 发现 对象 的 名称 ？
<unk> adding support for these would be <unk> see the python <unk> guide to learn more about <unk> <unk> to python., " 支持 . <unk> 支持 支持 的 python ， 请参阅 python python ， 请参阅 " <unk> " <unk> " 的 更 多 的 更 多 的, <unk> 提供 添加 这些 功能 的 补丁 ； 请参阅 python 开发者 指南 了解 有关 为 python 提交 补丁 的 详情
the constants are the same that with "poll()" object, 与 常量 对象 对象 的 相同, 这些 常量 与 " poll ( ) " 对象 所用 的 相同
if later portions of the pattern don't match, the matching engine will then back up and try again with fewer <unk>, 如果 给出 了 窗口 的 ， ， ， ， ， 将 将 使用 " 和 " " " " ", 如果 模式 的 后续 部分 不 匹配 ， 则 匹配 引擎 将 回退 并 以 较 少 的 重复 次数 再次 尝试
note that the output of <unk> always goes to standard output., 请 注意 ， 输出 的 输出 将 输出 " 标准 ", 请 注意 " <unk> ( ) " 的 输出 总是 <unk> 标准 输出
when the number of data points is odd, the middle data point is <unk>, 当 data 数据 的 数据 ， 数据 数据 数据 数据 数据 数据, 当 数据 点 的 总数 为 <unk> 时 ， 将 返回 中间 数据 点 ：
as with any other mechanism that completely <unk> exceptions, this context manager should be used only to <unk> very specific errors where silently <unk> with program execution is known to be the right thing to <unk>, 与 其他 其他 其他 情况 下 ， ， ， ， ， 上下文 管理器 上下文 被 用于 使用 " 的 " ， ， ， ， 使用 " " " " " " " " " " " " ", 与 完全 <unk> 异常 的 任何 其他 机制 一样 ， 该 上下文 管理器 应当 只 用来 <unk> 非常 具体 的 错误 ， 并 确保 该 场景 下 静默 地 继续 <unk> 是 通用 的 正确 做法
image specifies the item <unk> in case the <unk> image option is empty., 在 指定 了 指定 的 的 " ， " " " " " " 选项, 图片 specifies the item <unk> , in <unk> the item ' s <unk> option is empty .
new in version 3.6: the <unk> argument was added to allow users to control the "threading.thread" names for worker threads created by the pool for easier <unk>, 3.6 新版 功能 : the _ argument _ to _ to _ to _ to _ to " 来 确定 的 的 的 的 方法, 3.6 新版 功能 : 添加 thread _ name _ prefix 参数 允许 用户 控制 由 线程 池 创建 的 " threading . thread " 工作 线程 名称 以 方便 调试
if loading fails, the <unk> module and only the <unk> module gets removed from "sys.modules", 如果 " logging " ， 模块 模块 " 模块 " 模块 " 模块 " 模块 " 模块 " 模块, 如果 加载 失败 ， 则 该 模块 <unk> 加载 失败 的 模块 将 从 " sys . modules " 中 移除
the name <unk> is often used in conjunction with <unk> refer to the documentation for the "gettext" module for more information on this <unk>, name 名 的 " " " 模块 的 " 模块 的 " 模块 的 文档 ， 请参阅 " 模块 的 的 有关 的 更 多 信息, " _ " 作为 名称 常用 于 连接 国际化 文本 ； 请 <unk> " gettext " 模块 文档 了解 有关 此 约定 的 详情
running scripts with a gui, 运行 使用 使用 的 的, 运行 有 图形界面 的 脚本
this section shows recipes and best <unk> for using "secrets" to manage a basic level of <unk>, 这 一节 一节 与 " 和 " 和 " 的 " 的 的 的 级别 的, 本 节 展示 了 一些 使用 " secrets " 来 管理 基本 <unk> 的 应用 技巧 和 最佳 实践
changed in version 3.7: introduced the optional <unk> method., 在 3.7 版 更改 : 移 可选 选 参数, 在 3.7 版 更改 : 引入 了 可选 的 " get _ resource _ reader ( ) " 方法
this class <unk> with parsing and interpreter state (the user's <unk> it does not <unk> with input buffering or <unk> or input file naming (the filename is always passed in <unk>, 这个 类 与 解析 和 与 解释器 的 " " " " " ， " " " " " " " " " " " " " " " " " " " " " " ", 这个 类 处理 解析器 和 解释器 状态 （ 用户 命名 空间 的 ） ； 它 不 处理 <unk> 、 终端 提示 区 或 着 输入 文件名 （ 文件名 总是 显示 地 传递 ）
introduced by pep 492 ., 由 pep 492 引入, 由 pep 492 引入
we would still like to know about all <unk> use of python, of <unk>, 我们 我们 这样 的 的 所有 所有 所有 <unk> 的 的, 当然 ， 我们 仍然 希望 <unk> 所有 对 python 的 <unk> 使用
member may be a filename or a "tarinfo" object, member 可以 是 一个 文件名 或 " tarinfo " 对象, member 可以 是 一个 文件名 或 " tarinfo " 对象
while <unk> is part of the "enum" module, it would be very simple to implement <unk>, 虽然 " <unk> " 是 " " " ， 它 是 它 它 是 它 的 简单 的 " <unk> ( ) ", 虽然 " <unk> " 是 " enum " 模块 的 一部分 ， 但 要 独立 实现 也 应该 相当 容易 :
optional parameters w , l , and c are for date column width, lines per <unk> and number of spaces between month <unk> respectively, 可选 的 参数 ， , , , 和 <unk> , , <unk> , <unk> , <unk> 的 之间 的 之间 的 <unk>, 可 选 参数 w , l , 和 c 分别 表示 日期 <unk> ， 周 的 行数 ， 和 月 之间 的 间隔
within the limits of the types <unk> they compare <unk> <unk> correct without loss of <unk>, <unk> 的 类型 的 的 ， ， " " " " " " " " " " " " " ", 在 类型 相关 的 限制 <unk> ， 它们 会 按 数学 （ 算法 ） 规则 正确 进行 比较 且 不会 有 精度 <unk>
however, they still use the strict error handler by default so that attempting to open a binary file in text mode is likely to raise an exception rather than producing <unk> data., 但是 ， 它们 仍然 使用 " get _ args ( ) " 来 在 文本 模式 打开 的 的 文件 ， 在 打开 的 的 的 异常, 但是 ， 它们 默认 仍 将 使用 严格 错误处理 句柄 ， 因此 试图 在 文本 模式 下 打开 二进制 文件 将 可能 引发 异常 ， 而 不是 生成 无 意义 的 数据
(contributed by raymond hettinger.), （ 由 raymond hettinger 贡献 。 ）, （ 由 raymond hettinger 贡献 。 ）
macro form of <unk> without error checking., 宏 " " ( ) " " 错误 错误 错误, 宏 版本 的 c 函数 " pylist _ size ( ) " ， 没有 错误 检测
when the "pyarg_parse ()" functions fail due to conversion failure in one of the format <unk> the variables at the addresses corresponding to that and the following format units are left <unk>, 当 函数 函数 函数 函数 会 被 可 被 中 ， 的 " " " " ， 的 的 ， ， ， ， 还 格式 字符串 格式 的 格式 字符串, 当 " pyarg _ parse ( ) " 函数 因为 某 一个 格式 单元 转化 失败 而 失败 时 ， 对应 的 以及 后续 的 格式 单元 地址 内 的 变量 都 不会 被 使用
example of <unk> python's internal lookup <unk>, " tkinter . <unk> " 的 的 <unk> ：, 模拟 python 内部 <unk> 链 的 例子
the rfc does not <unk> the representation of infinite or nan number values, rfc 不 不 不 为 " 或 " 或 " 或 数值, rfc 不 允许 <unk> 或者 nan 数值 的 表达方式
method called when an empty line is entered in response to the prompt, 当 在 遇到 时 时 将 被 被 被 被 被 被, 在 响应 提示 输入 空行 时 调用 的 方法
this technique is fast because the key function is called exactly once for each input <unk>, 这 行为 是 一种 是 因为 的 的 函数 是 函数 是 " 每个 每个 输入 " " " ", 这种 机制 速度 <unk> ， 因为 对于 每个 输入 记录 只会 调用 一次 键 函数
name may be a path like object, name 可以 是 一个 path like object, name 可以 是 一个 path like object
if <unk> is not closed using this method (or via <unk> it is closed when the <unk> object is <unk> by python., 如果 <unk> 未指定 不 使用 " 方法 ( ) " 方法 方法 方法 方法 为 " none " ， 则 会 被 " <unk> " 对象, 如果 没有 使用 该 方法 关闭 hkey ( 或者 通过 " hkey . close ( ) " ) ， 在 对象 hkey 被 python 销毁 时会 将 其 关闭
please refer to the implementation specific documentation to determine what else you need to know about the specific implementation you're <unk>, 请 注意 实现 实现 实现 的 文档 的 文档 ， 你 你 需要 实现 的 的 的 实现, 请 参考 它们 各自 的 专门 文档 ， 以 确定 你 正在 使用 的 这个 实现 有 哪些 你 需要 了解 的 东西
function prototypes are similar to function prototypes in <unk> they describe a function <unk> type, argument types, calling <unk> without defining an implementation, 函数 原型 函数 与 函数 函数 函数 函数 ， 函数 函数 ， 函数 函数 " 函数 " " " " " " " " " " " ", 函数 原型 类似 于 c 中 的 函数 原型 ； 它们 在 不 定义 具体 实现 的 情况 下 描述 了 一个 函数 （ 返回 类型 、 参数 类型 、 调用 约定 ）
changed in version 3.5: added support for the <unk> format., 在 3.5 版 更改 : 添加 了 " " " " <unk> ", 在 3.5 版 更改 : 添加 了 对 " <unk> " 格式 的 支持
get information on the specified clock as a namespace object, 获取 的 的 的 <unk> 作为 对象 对象, 获取 有关 指定 时钟 的 信息 作为 命名 空间 对象
fd is the file descriptor to which any initialization sequences will be <unk> if not supplied or " 1", the file descriptor for "sys.stdout" will be used., fd 是 文件 描述符 的 任何 任何 任何 或 ， 或者 或 为 " null " ， 则 将 打开 文件 打开 文件 描述符 文件 描述符, fd 是 任何 初始化 序列 将 被 发送到 的 文件 描述符 ； 如 未指定 或 为 " 1 " ， 则 将 使用 " sys . stdout " 的 文件 描述符
building and <unk> the project, 构建 和 <unk>, 项目 的 构建 与 打包
regular expression patterns are compiled into a series of <unk> which are then executed by a matching engine written in c, 正则表达式 ， 表达式 将 被 执行 的 " " " " " " " " " c " c " c c c c c c c c c c c c c c c c c, 正则表达式 模式 被 <unk> 一系列 字节 码 ， 然后 <unk> c 编写 的 匹配 引擎 执行
"distutils" building and installing python modules, " distutils " 构建 和 python 模块, " distutils " 构建 和 安装 python 模块
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
to avoid this and get <unk> you can use <unk> 3) <unk>, 要 避免 此 ， 的 ， 你 你 可以 使用 " " " " " " " " " ", 为了 避免 这个 并且 得到 结果 " 9 " , 你 可以 用 这个 <unk> " ( 3 ) 2 " .
python lists have a built in <unk> method that <unk> the list in place, python 列表 有 一个 内置 " <unk> ( ) " 方法 ， 列表 中 的 列表, python 列表 有 一个 内置 的 " list . sort ( ) " 方法 可以 直接 修改 列表
an array that represents the abbreviated <unk> of the year in the current locale, 代表 代表 代表 的 的 的 的 的 的 的 的, 在 当前 语言 环境 下 表示 月份 简写 的 数组
if the target function fails, then the error_callback is called with the exception instance., 如果 函数 函数 函数 ， 则 会 将 会 调用 " 异常 " 异常, 当 目标 函数 执行 失败 时 ， 会 将 抛出 的 异常 对象 作为 参数传递 给 error _ callback 执行
read n items (as machine <unk> from the file object f and append them to the end of the array, 读取 元素 的 文件 （ 文件 描述符 文件 对象 的 文件 对象 ， 并 将 其 到 缓冲区 的 的, 从 file object f 中 读取 n 项 （ 解读 为 机器 值 ） 并 将 它们 添加 到 数组 末尾
a new class derived from "enum" is returned, 从 " __ " __ ( ) " 的 一个 新 的, 返回值 是 一个 派生 自 " enum " 的 <unk>
often this isn't because they're difficult to <unk> but because no one has needed them yet, 由于 这 意味着 这 意味着 它们 的 因为 因为 因为 因为 因为 因为 ， 因为 它们 将 导致 它们, 这 往往 不是 因为 它们 <unk> ， 而是 因为 还 没有 人 需要 它们
similarly, when a help message is requested from a <unk> only the help for that particular parser will be printed, 当 一个 消息 帮助 的 消息 消息 ， 消息 ， 从 一个 <unk> 的 的 的 处理程序, 类似 地 ， 当 从 一个 子 解析器 请求 帮助 消息 时 ， 只有 该 特定 解析器 的 帮助 消息 会 被 打印 出来
the <unk> method now returns "none" on success and raises an exception on error under all platforms, " select . set ( ) " 方法 现在 返回 " true " 时 返回 " 引发 " 异常 " 异常, 现在 所有 平台 下 的 " <unk> . flush ( ) " 方法 都 会 在 成功 时 返回 " none " 并 在 错误 时 引发 异常
it defines the following items:, 它 定义 了 以下 ：, 本 模块 定义 如下 内容 ：
functions may therefore consume all of the <unk> output, and if you need to do something different with the same stream, you'll have to create a new iterator., 函数 可以 通过 " 的 " ， " ， 你 需要 需要 需要 需要 需要 的 的 ， 则 使用 " <unk> " 的 " ， 则 该 方法 的 的 的, 函数 可能 因此 而 耗尽 迭代 器 的 输出 ， 如果 你 要 对 同样 的 数据流 做 不同 的 操作 ， 你 必须 重新 创建 一个 迭代 器
"concurrent.futures" launching parallel tasks, " concurrent . futures " 启动 并行任务, " concurrent . futures " — — 启动 并行任务
using this little language, you specify the rules for the set of possible strings that you want to <unk> this set might contain <unk> <unk> or <unk> <unk> addresses, or <unk> <unk> or anything you like, 使用 此 函数 ， 你 指定 的 的 的 的 ， 你 可能 设置 了 设置 或 设置 或 " " " 或 " " 或 " " 或 " " " " " " " " " 你 你 的, 使用 这种 小 语言 ， 你 可以 为 要 匹配 的 可能 字符串 集 指定 规则 ； <unk> 可能 包含 英语 <unk> ， 电子邮件 地址 ， <unk> 命令 或 你 喜欢 的 任何 内容
this allows you to type python to run the interpreter, and pip for the package installer, 这 允许 你 python python 到 python 解释器 的 包 的 包, 这 允许 你 输入 python 来 运行 解释器 ， 并且 pip 用于 包 安装程序
the lock is initially <unk>, 该 是 <unk> 的, 初始 情况 <unk> 处于 解锁 状态
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
the other advantage of weakref based finalizers is that they can be used to register finalizers for classes where the definition is controlled by a third <unk> such as running code when a module is <unk>, 其他 的 的 的 的 是 使用 它们 的 被 用来 为 " 的 " 的 " 类 是 在 的 的 的 时候 ， 当 代码 时 ， 当 代码, 基于 弱 引用 的 终结 器 还 具有 另 一项 <unk> ， 就是 它们 可 被 用来 为 定义 由 第三方 控制 的 类 注册 终结 器 ， 例如 当 一个 模块 被 <unk> 时 运行 特定 代码 :
write the output of the <unk> to the given <unk>, 将 <unk> 给定 的 给定 的 的 <unk>, 将 <unk> 输出 写入 到 给定 的 <unk>
return the local date and time corresponding to the posix timestamp, such as is returned by <unk>, 返回 日期 和 时间 的 时间 和 时间 的 时间 ， 返回 " time . localtime ( ) " 返回 返回 的 ", 返回 对应 于 posix 时间 戳 例如 " time . time ( ) " 的 返回值 的 本地 日期 和 时间
<unk> , if specified, will be called with the string of every json float to be decoded, " _ 如果 ， 如果 将 被 将 为 字符串 的 字符串 将 被 为 为 true ", parse _ float ， 如果 指定 ， 将 与 每个 要 解码 json 浮点数 的 字符串 <unk> 调用
the exponent of the result is zero, regardless of the <unk> of <unk> "y" and <unk>, 结果 结果 结果 是 <unk> <unk> 的 <unk> ， 和 " <unk> " 和 " <unk> ", 结果 的 指数 为 零 ， 无论 " x " , " y " 和 " modulo " 的 指数 是 多少
this setting <unk> the parameter of the same name in <unk>, 这 将 于 " <unk> " 的 " 的 " 的 " 的 " 的 ", 该 设置 对应 于 " <unk> ( ) " 中 的 同名 形参
the following additional characters may be appended to the flag to control how the database is <unk>, 以下 的 额外 的 可以 被 用来 为 为 " 如何 如何 如何 的, 下列 附加 字符 可 被 添加 至 旗标 以 控制 数据库 的 <unk> ：
display a vertical line starting at "(y, x)" with length n consisting of the character ch ., " a " " 行 的 行 ， 长度 为 n n 字符 的 字符, 显示 一条 起 <unk> " ( y , x ) " 长度 为 n 个字符 ch 的 <unk>
for <unk> the exception argument is a list of 3 tuples ( <unk> , <unk> , exception )., 对于 " 参数 参数 参数 是 是 一个 的 元组 ， ， 的 " <unk> " ， " " " " ", 对于 " copytree ( ) " ， 此 异常 参数 将 是 一个 由 <unk> ( <unk> , <unk> , exception ) 构成 的 列表
return the angle between the line from turtle position to position specified by <unk> the vector or the other turtle, 从 当前 位置 位置 到 位置 位置 位置 位置 指定 " <unk> ( ) " 所 指定 的 的 或者 或者 其他 或者, 从 海龟 位置 到 由 ( x , y ) ， 矢量 或 另 一 海龟 对应 位置 的 <unk> 的 <unk>
the python memory manager has different components which <unk> with various dynamic storage management <unk> like <unk> <unk> <unk> or <unk>, python 内存 内存 有 不同 的 的 ， ， ， 的 <unk> （ 例如 " <unk> " <unk> " <unk> " <unk> " <unk> " <unk> " <unk> " <unk> " <unk> ", python 内存 管理器 有 不同 的 组件 来 处理 各种 动态 <unk> 方面 的 问题 ， 如 共享 、 <unk> 、 <unk> 分配 或 缓存
to take care of <unk> an event loop should define a finalizer function which takes an asynchronous generator iterator and <unk> calls <unk> and executes the coroutine, 要 <unk> " 的 " 事件 " 事件 " ， " ， " 一个 一个 函数 生成器 生成器 生成器 生成器 的 生成器 器 ， 并 返回 一个 " time " " " " " " " " " ", 为了 能 处理 最终 化 ， 事件 循环 应该 定义 一个 终结 器 函数 ， 它 接受 一个 异步 生成器 迭代 <unk> 可能 调用 " <unk> ( ) " 并 执行 协程
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
release date: 2017 10 16, 发布 日期 : 2017 12 10, 发布 日期 : 2017 10 16
if the script name refers directly to a python file, the directory containing that file is added to the start of "sys.path", and the file is executed as the "__main__" module., 如果 导入 名称 名称 ， 则 python 模块 " 文件 " 文件 ， 文件 文件 被 添加 到 文件 文件 " " . modules " 模块, 如果 脚本 名称 直接 指向 一个 python 文件 ， 则 包含 该 文件 的 目录 将 被 加入 " sys . path " 的 开头 ， 并且 该 文件 会 被 作为 " __ main __ " 模块 来 执行
the function is equivalent to <unk> <unk> <unk> but uses an optimized c or <unk> implementation, which is faster for messages that fit into memory, 函数 " 等价 于 " " ( " ' " ' " ' " ) " ， 但 它 是 c c c 或 c " c _ <unk> ( ) " 函数 ， 它 将 它 处理 内存, 此 函数 等价 于 " hmac ( key , msg , digest ) . digest ( ) " ， 但 使用 了 优化 的 c 或 <unk> 实现 ， 对 放入 内存 的 消息 能 处理 得 更 快
this is always the dictionary of the current module <unk> a function or method, this is the module where it is defined, not the module from which it is <unk>, 这个 模块 当前 模块 模块 是 一个 函数 或 " 的 " 或 " __ " __ " 模块 ， 它 它 模块 模块 模块 模块 模块 模块 模块 模块 模块, 这 总是 当前 模块 的 字典 （ 在 函数 或 方法 中 ， 不是 调用 它 的 模块 ， 而是 定义 它 的 模块 ）
it is faster than <unk> but slower than <unk>, 它 也 会 <unk> <unk> ， 但 但是 ， 但 " ", 它 的 执行 速度 比 " <unk> ( <unk> ( n ) ) " 快 但是 比 " math . <unk> ( ) " 慢 :
previously, a "runtimeerror" was raised., 在 之前 版本 中则 中则 引发 " runtimeerror ", 在 之前 的 版本 中则 将 引发 " runtimeerror "
and <unk> that j has exactly 53 bits <unk> "> 2 <unk> but <unk> 2 <unk> the best value for n is <unk>, 和 <unk> ， ， <unk> 的 <unk> （ <unk> 年 的 的 （ 2 , 2 , 2 , 2 , 2 , 2 , 2 ， ， <unk> 为 1 的 值, 并且 由于 j 恰好 有 53 位 ( 即 " > 2 <unk> " 但 " < 2 53 " ) ， n 的 <unk> 为 <unk> :
format description filename specifies that a filehandler be created, using the specified filename, rather than a <unk>, 格式 ， 可以 指定 使用 " with " 语句 ， ， 使用 " " " " " " ", 格式 描述 filename 使用 指定 的 文件名 而 不是 <unk> 创建 filehandler
this means that if you start reading this manual from the <unk> and skip to the next chapter when you get <unk> you will get a reasonable overview of the available modules and application <unk> that are supported by the python library, 这 你 你 在 此 情况 下 ， ， ， 当 你 希望 你 的 你 的 你 的 你 的 ， ， ， 模块 的 模块 （ 由 " python 的 的, 这 意味着 如果 你 <unk> 阅读 本手册 ， 并 在 感到 <unk> 时 跳 到 下 一章 ， 你 仍 能 对 python 库 的 可用 模块 和 所 支持 的 <unk> <unk> 大致 了解
that is why when your application does not need values with empty lines, you should consider <unk> them, 也就是说 在 当 时 不 不 需要 时 ， 时 ， ， ， 应当 应当 应当 <unk>, 这 就是 为什么 当 你 的 应用 不 需要 带有 空行 的 值时 ， 你 应该 考虑 禁用 它们
trying these methods will soon <unk> their <unk>, " 这些 方法 将 将 " <unk> ( ) " 的 的 的, 尝试 这些 方法 <unk> 就 会 清楚 它们 的 含义 :
deprecated since version 3.4: due to lack of <unk> the formatter module has been deprecated., 3.4 版后 已 移除 : 添加 了 对 " <unk> " 模块 的 模块 已 移除, 3.4 版后 已 移除 : 因为 被 使用 的 次数 <unk> ， 此 格式化 模块 已经 被弃 用 了
we can see that in this case "x" and "y" are not equal anymore, 我们 ， 在 这种 情况 下 ， ， 和 和 和 不 不 不 不, 我们 可以 看到 在 此 情况 下 " x " 和 " y " 就 不再 相等 了
a large variance indicates that the data is spread <unk> a small variance indicates it is <unk> closely around the <unk>, 一个 " <unk> 数据 ， 是 一个 <unk> 的 一个 ， ， ， ， 是 一个 <unk> ， <unk> <unk> <unk> <unk> 的, 方 差值 较大 表明 数据 的 <unk> 范围 较大 ； 方 差值 较 小 表明 它 紧密 <unk> 于 均值 <unk>
it will be removed in <unk> or <unk>, 它 将 在 " 或 " 或 " 或 " " ", 它 将 在 3.10 或 <unk> 中 被 移除
it does this by <unk> if the type of a field is of type <unk>, 它 通过 了 类型 类型 类型 的 类型 类型 为 " 类型 " 类型 类型 类型 类型, 它 通过 查看 字段 的 类型 是否 为 " dataclasses . <unk> " 类型 来 实现
writing <unk> creates a single escaped <unk>, 编写 <unk> <unk> <unk> <unk> 一个 一个 单个 ？, " $ $ " 将 被 转义 成 单个 字符 " $ " :
<unk> an exit status of 0 indicates that it ran <unk>, <unk> 一个 数值 的 的 的 的 ， 但 它 的 的 的, 通常 来说 , 一个 为 0 的 退出 码 表示 进程 运行 正常 .
the implementation given here can still be called from subclasses, 实现 给定 的 可以 可以 通过 " 调用 " 来 调用, 这里 给出 的 实现 仍 可 在 子类 中 被 调用
this can be accomplished by passing a list of strings to "parse_args()", 这 可以 通过 " 字符串 " 的 列表 列表, 这 可以 通过 将 一个 字符串 列表 传给 " parse _ args ( ) " 来 实现
format strings are the mechanism used to specify the expected <unk> when packing and unpacking data, 格式 字符串 被 用于 用于 <unk> 和 数据 的 数据, 格式 字符串 是 用来 在 打包 和解 包 数据 时 指定 预期 布局 的 机制
an element will be discarded when no strong reference to it exists any <unk>, 当 元素 将 不会 被 执行 引用 引用 引用 将 其 被 任何, 当 不再 有 对 某个 元素 的 <unk> 引用 时 元素 将 被 丢弃
a negative timeout is equivalent to a zero <unk>, 负值 timeout 相当于 " <unk> ", timeout 为 负数 的 情况 下 和 为 0 的 情况 相同
one exception to the first line rule is when the source code starts with a unix <unk> line, 一个 异常 的 第一个 被 在 时 ， 程序 的 程序 程序 的 程序 的 程序, 关于 第一行 规则 的 一种 <unk> 是 ， 源码 以 unix " shebang " 行 开头
new in version 3.6: added the timespec argument., 3.6 新版 功能 : added 了 " 参数, 3.6 新版 功能 : 增加 了 timespec 参数
for example, the expression <unk> <unk> <unk> evaluates to "2" in contrast to the <unk> returned by float true division, 例如 ， " 表达式 " 表达式 " " " " " " " " " " " " " " " " " " " " ", 例如 ， 表达式 " 11 / / 4 " 的 <unk> 是 " 2 " ， 而 与 之 相反 的 是 浮点数 的 真正 除法 返回 " <unk> "
third party modules such as <unk> are also helpful in extending the <unk> <unk>, 第三方 第三方 模块 （ 例如 在 <unk> <unk> 在 <unk> <unk> 中 的 <unk> <unk>, 而 像 <unk> 这样 的 第三方 模块 同样 有助于 <unk> 学生 的 接触 <unk>
"argumentparser" objects do not allow two actions with the same option string, " 对象 " 对象 不 允许 两个 与 与 " 的 ", " argumentparser " 对象 不 允许 在 相同 选项 字符串 下 有 两种 行为
return <unk> from a function, properly <unk> its reference count., 从 一个 函数 ， 返回 " " " " ， 它 的 引用 计数 引用 计数, 从 函数 返回 " py _ true " 时 ， 需要 增加 它 的 引用 计数
most exceptions are defined with names that end in <unk> similar to the naming of the standard exceptions., 大多数 异常 异常 是 在 " 的 " 的 " 的 " 的 " 的 " 的 的, 大多数 异常 都 定义 为 名称 以 “ error ” 结尾 ， 类似 于 标准 异常 的 命名
new in version 3.6., 3.6 新版 功能 ., 3.6 新版 功能 .
changed in version 3.8: for "int" <unk> the three argument form of <unk> now allows the second argument to be <unk> <unk> computation of <unk> <unk>, 在 3.8 版 更改 : " " " " <unk> " 参数 " <unk> " " " " " <unk> 参数 参数 " 参数 " <unk> " " " " " " " " " " " " " ", 在 3.8 版 更改 : 对于 " int " 操作数 ， 三 参数 形式 的 " pow " 现在 允许 第二个 参数 为 负值 ， 即 可以 计算 倒数 的 余数
pep <unk> class decorators pep written by collin <unk>, pep <unk> : pep pep 由 eric <unk>, pep 3129 类 装饰 器 pep 由 collin winter 撰写
the special characters used in shell style <unk> are:, 使用 的 的 的 的 的 的 ： ：, shell 风格 通配符 所 使用 的 特殊字符 如下 ：
the <unk> module provides a simple command line interface to compress or decompress files., " http . 模块 " 模块 提供 了 简单 命令行 命令行 或 的 或 或 的, " gzip " 模块 提供 了 简单 的 命令行 界面 用于 压缩 和解 压缩文件
the definition of <unk> filename <unk> is platform <unk> on unix it is anything except <unk> on windows anything except backslash or <unk>, " 的 ( ) " 的 的 " 是 在 在 的 的 ； 在 在 windows 上 上 （ 在 windows 上 上 上 windows 上 ）, “ 常规 文件名 字符 ” 的 定义 取决于 具体 平台 ： 在 unix 上 是 <unk> 斜杠 以外 的 任何 字符 ； 在 windows 则 是 <unk> 斜杠 或 冒号 以外 的 任何 字符
note that <unk> generated <unk> make no <unk> to be minimal <unk>, 请 注意 " " " " " " [ 1 ] " 不 <unk> <unk>, 请 注意 " differ " 所 生成 的 增量 并 不 保证 是 最小 差异
"html.parser" simple html and xhtml parser, " html . parser " html 的 和 xhtml 解析器, " html . parser " 简单 的 html 和 xhtml 解析器
token value for <unk>, " " " " " 的 权 标值, " " ) " " 的 权 标值
with <unk> as argument, list 11 lines around the current line, 通过 " none " ， ， ， ， 列表 列表 ， 行 的 的, 如果 用 " . " 作为 参数 ， 则 列出 当前 行 <unk> 的 11 行
returns the normalized path created (a directory or new <unk>, 返回 " path " 的 的 的 或 或 新 的 新 的, 返回 所 创建 的 经 <unk> 的 路径 （ 对应 于 目录 或 新 文件 ）
getting started <unk> to python yourself, 将 " <unk> _ <unk> " 到 python, 开始 为 python 贡献 您 的 <unk>
"ctypes" provides some support for variable <unk> arrays and <unk>, " ctypes " 提供 了 一些 、 、 、 、 、 、 、 的 、 " 、 ", " ctypes " 对 <unk> 数组 和 结构 体 提供 了 一些 支持
calling <unk> now does nothing, " " _ <unk> ( ) " 现在 会 被 取消, 调用 " <unk> _ <unk> ( ) " 现在 没有 任何 效果
there is no <unk> function for the same <unk>, 没有 没有 <unk> 的 的 的 函数, 由于 同样 的 原因 ， 没有 " <unk> _ check ( ) " 函数
changed in version 3.3: "__loader__" and <unk> are automatically set (when <unk>, 在 3.3 版 更改 : " 和 " and _ <unk> " are " " " " " " " . set _ <unk> ", 在 3.3 版 更改 : " __ loader __ " and " __ package __ " are <unk> set ( when <unk> ) .
read and parse configuration data from f which must be an iterable <unk> unicode strings (for example files opened in text mode)., 读取 和 数据 从 数据 数据 必须 必须 是 一个 可 迭代 对象 中 的 的 ， ， ， 在 文件 中 的 文件 中, 从 f 读取 并 解析 配置 数据 ， 它 必须 是 一个 产生 unicode 字符串 的 可 迭代 对象 （ 例如 以 文本 模式 打开 的 文件 ）
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
return the time of last access of path, 返回 表示 的 的 的 的 的, 返回 path 的 最后 访问 时间
for an <unk> it can reduce the amount of <unk> data by three <unk> or <unk>, 对于 <unk> ， 它 可以 可以 通过 <unk> <unk> 的 <unk> ， ， <unk> <unk> <unk> <unk>, 对于 <unk> 来说 ， 它 可以 将 传输 的 数据量 减少 三个 <unk> 或 更 多
pep <unk> executing modules as scripts, pep 338 : 将 模块 作为 脚本, pep 338 : 将 模块 作为 脚本 执行
the constructor creates a <unk> for the given readable raw stream and <unk>, 构造 器 的 " 给定 " 、 " 、 " 流 " 、 " 流 " 和 " 流, 根据 给定 的 可读 raw 流 和 buffer _ size 创建 " bufferedreader " 的 构造 器
as it is not a true field, it is not returned by the module level <unk> function, 因此 它 不是 不是 一个 " __ " __ ( ) " 模块 的 的 函数, 因为 它 不是 一个 真正 的 字 段 ， 所以 它 不会 被 模块 级 的 " fields ( ) " 函数 返回
( pep <unk> explains the exact <unk> which are that a "yield" expression must always be parenthesized except when it occurs at the top level expression on the right hand side of an assignment, " pep <unk> <unk> <unk> <unk> <unk> <unk> 的 表达式 必须 在 必须 在 在 在 在 在 上 的 的 时 ， 在 在 上 的 的 的, （ pep <unk> 解释 了 具体 的 规则 ， 也 就是 " yield " 表达式 必须 括 起来 ， 除非 是 出现 在 最 <unk> 的 赋值 表达式 的 右边
when fileobj is not "none", the filename argument is only used to be included in the gzip file header, which may include the original filename of the uncompressed file, 当 " none " ， " none " ， 则 将 被 用作 文件 中 的 文件 ， ， 文件 ， 包含 文件 的 文件 的 文件名, 当 fileobj 为 " none " 时 ， filename 参数 只 用于 gzip 文件 头 中 ， 这个 文件 有 可能 包含 未 压缩文件 的 源 文件名
the <unk> function and <unk> class provide details of bytecode instructions as <unk> <unk>, " 函数 . open ( ) " 函数 " 类 " " " " " " " " " " " " " " " " ", " get _ <unk> ( ) " 函数 和 " bytecode " 类 提供 字节 码 指令 的 详细信息 的 " <unk> " 实例 ：
the following example demonstrates the use of a <unk>, 下面 的 例子 演示 了 使用 了 :, 下面 的 例子 演示 了 进程 池 的 用法 :
the integer length , if given, is the buffer size, 如果 给出 为 <unk> 的 缓冲区 缓冲区, 整数 值 length 如果 给出 则 为 缓冲区 大小
this is also known as passing parameters by reference ., 这 也 会 作为 " pybuf _ name _ args ( ) ", 这 和 传递 参数 引用 类似
with pickle protocol version 4 it is possible to easily pickle enums nested in other classes., 协议 协议 协议 版本 ， 它 是 在 其他 其他 情况 下 ， 其他 语言 的, 使用 pickle 协议 版本 4 可以 方便 地 封存 嵌套 在 其他 类中 的 枚举
if you have "tkinter" available, you may also want to look at <unk> a <unk> program included with the python distribution, 如果 你 的 你 ， 你 可以 可能 希望 可以 在 python python 程序 的 python 程序, 如果 你 有 " tkinter " ， 你 可能 还 想 查看 tools / demo / <unk> . py ， 这是 python 发行 附带 的 演示 程序
if no path is available, "importerror" is raised., 如果 没有 路径 路径 ， 则 会 引发 ", 如果 无 路径 可用 ， 则 引发 " importerror "
the file must already exist, 文件 必须 必须, 文件 必须 已 存在
(contributed by dong hee na in bpo <unk>, （ 由 dong hee na 在 bpo <unk> 中 贡献 。 ）, （ 由 dong hee na 在 bpo <unk> 中 贡献 。 ）
select the <unk> <unk> link in the <unk> to open the bug reporting form., <unk> " <unk> " <unk> " " " " <unk> " ， 打开 打开 的 的, 请 点击 <unk> <unk> 的 “ 新建 （ create new ） ” 链接 ， 打开 报告 表单
bpo <unk> update <unk> <unk> library version to <unk> which <unk> <unk> 2019 <unk>, bpo <unk> : 更新 更新 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> 的 的, bpo <unk> : 将 厂商 化 的 expat 库 版本 更新 至 2.2 . 8 ， 这 解决 了 <unk> 2019 <unk>
using a specialized executable as a launcher requires some <unk> but provides the most transparent <unk> for users, 使用 一个 可 被 直接 一些 一些 一些 一些 ， ， 但 ， 提供 了 一些 最 最 的 的, 使用 专门 的 可执行文件 作为 启动 程序 需要 一些 编码 ， 但 为 用户 提供 了 最 透明 的 <unk>
the <unk> option may be passed to immediately begin removing python no prompt will be <unk>, <unk> 选项 选项 选项 可以 在 python 的 python ， 它们 将 被 执行, 可以 通过 " / <unk> " 选项 立即 开始 删除 python 不会 显示 任何 提示
replace history item specified by its position with line, 将 指定 指定 指定 指定 位置 位置 位置 位置 位置, 将 指定 位置 上 的 历史 条目 替换 为 line
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
this is the entry point you will normally use, 这 的 定义 ， 使用 使用 使用 ", 这 是 你 通常 将 使用 的 入口 点
these return the native integral thread id of the current thread assigned by the kernel, 这些 返回 当前 线程 的 线程 线程 线程 线程 线程 线程 的 线程, 它们 会 返回 内核 所 分配 给 当前 线程 的 原生 整数 线程 id
can not access a needed shared library, 可以 访问 访问 库 的 库, <unk> 所 需 的 共享 库
assignments to <unk> are illegal, 将 " " " " 是 是 非法, 赋值 给 " __ debug __ " 是 非法 的
for example, the decimal fraction, 例如 ， 十进制 的 ：, <unk> 而言 ， 十进制 的 小数
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
changed in version 3.8: added errors parameter., 在 3.8 版 更改 : 增加 了 errors 参数, 在 3.8 版 更改 : 添加 了 errors 参数
debugging information will be written to "sys.stderr", 调试 信息 将 被 添加 到, <unk> 会 被 写入 " sys . stderr "
name description default <unk> perform a system wide installation, name 描述 的 默认值 为 " x ( ) " 的 的, 名称 描述 默认值 <unk> 为 所有 用户 安装
results are always correctly rounded in the python <unk>, 将 是 python python 中 的 python ？, 结果 在 python <unk> 总是 会 被 正确 地 舍入
<unk> < day < number of days in the given month and <unk>, " < < < " , " 0 " 和 " <unk> 的 的 的, " 1 < 日期 < 给定 年 月 对应 的 天数 "
set the <unk> of the turtle to <unk>, 将 海龟 海龟 海龟 " 海龟 " 的 " eval " 的 ", 设置 海龟 的 朝向 为 to _ <unk>
they can be used to control the execution of a generator function., 它们 可 被 用来 执行 生成器 函数 执行, 它们 可 被 用于 控制 生成器 函数 的 执行
as such, their digest methods require a length, 作为 ， 的 的 的 " int " 的 的 的 :, 为此 ， 它们 的 摘要 需 指定 一个 长度
the standard names include:, 标准 的, 标准 名称 包括 :
this is explained in the document extending and embedding the python interpreter., 这 在 python 应用程序 中 的 python 和 嵌入 python, 在 文档 扩展 和 嵌入 python 解释器 中有 说明
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
deprecated since version 3.9, will be removed in version 3.10: the " x <unk> option., 3.8 版后 已 移除 : in version 3.10 version " " " " x ", deprecated since version 3.9 , will be removed in version 3.10 : the " x oldparser " 选项
<unk> a header was found that was missing a <unk> or was otherwise <unk>, " <unk> " <unk> " <unk> 被 被 被 <unk> 的 或 或 " <unk> " , " ' ", " <unk> " 找到 一个 缺失 了 冒号 或 格式 错误 的 标头
<unk> second, third and forth stack items one position up, <unk> top down to position <unk>, " " " " " " 和 " logger " <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 将 第二个 ， 第三个 和 <unk> 堆栈 项 向上 提升 一个 位置 ， 将 <unk> 移动 到 <unk> 位置
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
<unk> all <unk> data, " 所有 所有 所有 数据, 丢失 所有 未 处理 的 数据
when set, all unreachable objects found will be appended to garbage rather than being freed, 如果 " 所有 " 对象 ， 将 将 被 将 被 被 到 " true " ， 则 将 引发 " true ", 设置 后 ， 所有 回收 器 找到 的 不可 <unk> 对象 会 被 添加 进 garbage 而 不是 直接 被 释放
if you don't explicitly close a file, python's garbage collector will <unk> <unk> the object and close the open file for you, but the file may <unk> open for a while, 如果 你 显式 一个 一个 " ， " ， " ， " 将 " " " " ， " 将 打开 文件 的 文件 ， ， 文件 打开 文件 打开 文件 ， ， 打开 一个 打开, 如果 你 没有 显式 地 关闭 文件 ， python 的 垃圾 回收 器 最终 将 销毁 该 对象 并 为 你 关闭 打开 的 文件 ， 但 这个 文件 可能 会 保持 打开 状态 <unk>
first steps towards programming, <unk> 的 <unk> <unk>, <unk> 编程 的 <unk>
(contributed by serhiy storchaka in bpo <unk>, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）
this function has to be called explicitly (it is not used by the turtle graphics classes), 此 函数 被 调用 调用 调用 " __ ( ) " 来 调用, 此 函数 必须 显示 地 调用 ( 海龟 绘图 类 并 不 使用 此 函数 )
you can instantiate a <unk> object as follows:, 你 可以 可以 这样 一个 " 对象 " 对象 对象 :, 你 可以 通过 如下 方式 实例 化 一个 " <unk> " :
it provides an object oriented interface that is slightly higher level than the c one, 它 提供 一个 对象 （ 例如 " " 的 " 的 的 的 的 的, 它 使用 面向对象 接口 ， 比 c 库 的 抽象 层级 略 高
the following example uses the <unk> parameter of the <unk> function to open a file relative to a given <unk>, 下面 的 例子 使用 " <unk> " " " 的 " 函数 ， 用于 打开 文件 的 文件, 下面 的 示例 使用 " os . open ( ) " 函数 的 dir _ fd 的 形参 ， 从 给定 的 目录 中 用 相对路径 打开 文件 :
this library does not interpret or write the value type prefixes used in the windows registry extended version of ini syntax., 此 函数 不会 在 或 或 在 windows 中 的 的 的 的 的 的 版本 中 的, 这个 库 并 不 能够 解析 或 写入 在 windows registry 扩展 版本 ini 语法 中 所 使用 的 值 类型 前缀
bpo <unk> fixed <unk> backward on an <unk> <unk>, bpo <unk> : 修复 <unk> 在 bpo <unk> 中 的 一个 <unk>, bpo <unk> : 修复 了 在 加密 的 " zipfile . <unk> " 上 向 后 搜索 的 问题
the operation is done in place when o1 supports it, 当 o1 支持 时 ， 在 这个 支持 时 储存 储存, 当 o1 支持 时 ， 这个 运算 直接 使用 它 储存 结果
if <unk> 3" and <unk> <unk> the commands "python" and <unk> will both use specifically 3.1, 如果 <unk> <unk> " <unk> " ， " ， " 和 " <unk> " 和 " <unk> " 和 " <unk> ", 如果 " py _ python 3 " 且 " py _ python3 3.1 " ， 命令 " python " 和 " python3 " 都 将 特别 使用 3.1
set or return background color of the <unk>, 设置 或 返回 的 的 的 颜色, 设置 或 返回 turtlescreen 的 背景 颜色
list source code for the current file, 列表 的 源 的 源代码, 列出 当前 文件 的 源代码
other than the ensure_ascii parameter, this module is defined strictly in terms of conversion between python objects and <unk> <unk> and thus does not otherwise directly address the issue of character encodings., 如果 的 的 模块 是 是 python <unk> 和 python 的 python 对象 的 python 对象 的 " 和 " <unk> " ， 但 不会 被 不 为 字符, ensure _ ascii 参数 以外 ， 此 模块 是 严格 的 按照 在 python 对象 和 " unicode strings " 间 的 转换 定义 的 ， 并且 因此 不能 直接 解决 字符 编码 的 问题
return "true" if the current context references a directory., 如果 当前 上下文 上下文 返回 一个 " true " 返回 ", 如果 当前 上下文 引用 了 一个 目录 则 返回 " true "
changed in version 3.8: added the mtime parameter for <unk> output., 在 3.8 版 更改 : 添加 了 " 形参 形参 形参, 在 3.8 版 更改 : 添加 了 mtime 形参 用于 可 重复 的 输出
aiff c is a newer version of the format that includes the ability to compress the audio data., 用于 c 是 一个 版本 版本 ， ， " <unk> " 的 的 的, aiff c 是 该 格式 的 更新 版本 ， 其中 包括 压缩 音频 数据 的 功能
changes in the python api, python api 的 变化, python api 的 更改
return the value " 1" if <unk> is not a boolean <unk> or "0" if it is <unk> or <unk> from the terminal description., 如果 " 1 " 1 " " " " " " " " " " " " " " 或 " <unk> " 或 " <unk> " 或 " <unk> ", 如果 <unk> 不是 一个 布尔 功能 则 返回 " 1 " ， 如果 其 被 取消 或 不 存在 于 终端 描述 中则 返回 " 0 "
(only supported on <unk> and <unk> returns a <unk> polling object; see section <unk> polling objects below for the methods supported by <unk> objects., 在 windows 上 （ 在 <unk> 、 <unk> <unk> ( ) " 返回 返回 一个 ， ， ， ， 的 支持 （ 由 " time " 对象 ）, （ 仅 支持 <unk> 及其 <unk> 版本 ） 返回 一个 " / dev / poll " 轮询 对象 ， 请参阅 下方 / dev / poll 轮询 对象 获取 <unk> 对象 所 支持 的 方法
the default is taken from <unk>, 默认值 为 " <unk> . <unk> " 的 ", 默认值 是从 " sys . argv " 获取
apply this logger's filters to the record and return "true" if the record is to be processed, 将 此 进程 的 进程 ， 记录 为 true " ， " true ", 将 此 记录器 的 过滤器 应用 于 记录 ， 如果 记录 能 被 处理 则 返回 " true "
write all elements in rows (an iterable of row objects as described <unk> to the <unk> file object, formatted according to the current <unk>, 将 在 中 中 中 所有 元素 的 所有 的 的 文件 对象 ， 文件 文件 对象 ， 文件 到 当前 到 当前 的 的, 将 <unk> （ <unk> 迭代 出 多个 上述 row 对象 的 迭代 器 ） 中 的 所有 元素 写入 writer 的 文件 对象 ， 并 根据 当前 设置 的 变种 进行 格式化
all following arguments are optional and can be accessed as instance attributes as well., 所有 以下 定义 都 可 选 参数 和 可 作为 属性 作为 实例, 下列 所有 参数 都 是 可选项 并且 也 可 作为 实例 属性 来 访问
this call <unk> <unk> file <unk> <unk> the result on file out_file, 此 调用 " " . h _ <unk> ( ) " " " " 文件 _ <unk> ( ) " 文件 的 文件 描述符, 调用 此 函数 会 解码 <unk> 编码 的 in _ file 文件 并 将 结果 放入 out _ file 文件
also, <unk> and <unk> are both quite <unk> due to the <unk> algorithm used., " " " " " 和 " " " " " " " " " " " <unk> " <unk> " " " " " " ", 此外 ， 由于 使用 的 <unk> 算法 " textiowrapper . tell ( ) " 和 " textiowrapper . seek ( ) " 都 相当 慢
see pep 302 for the exact definition for a <unk>, 请参阅 pep 了解 了解 详情 了解 详情, 关于 一个 加载 器 的 实际 定义 请 查看 pep 302
suitable authentication keys can also be generated by using "os.urandom()"., 通过 动态 可 通过 可以 通过 使用 " 来 使用 来 使用, " os . urandom ( ) " 也 可以 用来 生成 合适 的 认证 密钥
if callback is given and is not "none", it will be called after each <unk> with two arguments: <unk> <unk>, 如果 回调 为 " true " ， " ， " ， " " ( ) " 调用 调用 " <unk> ( ) " ， 两个 两个 两个 参数, 如果 给出 callback 并且 不是 " none " ， 则 在 每次 试验 后 将 使用 两个 参数 调用 它 ： " callback ( number , time _ <unk> ) "
many uses of urllib will be that simple (note that instead of an <unk> url we could have used a url starting with <unk> <unk> etc.), 许多 " processpoolexecutor " 的 的 ， 请 注意 " " " " " " " " " " ) " 方法 的 的 的 的 " <unk> ( ) " 方法 的 的, urllib 很 易于 使用 （ 注意 url 不仅仅 可以 以 ' http : ' 开头 ， 也 可以 是 ' ftp : ' ， ' file : ' 等 ）
recipes and best <unk>, 和 和 " sys ., 应用 技巧 与 最佳 实践
this example uses console and file handlers, but you can use any number and combination of handlers you <unk>, 此 示例 示例 和 示例 文件 ， ， ， 你 可以 使用 任何 任何 的 的 的 的, 这个 示例 只 演示 了 在 控制台 和 文件 中 去 记录 日志 ， 但 你 也 可以 <unk> 任意 数量 的 日志 处理器
the return value is a floating point number giving the number of seconds since the epoch (see the "time" module), 返回值 是 一个 浮点数 ， 表示 的 的 " " " " " " ", 返回值 是 一个 浮点数 ， 为 <unk> 秒数 （ 参见 " time " 模块 ）
regular expressions are often used to <unk> strings by writing a re divided into several <unk> which match different components of interest, 正则表达式 表达式 用于 用于 由 " 字符串 来 来 由 " 的 的 ， 但 的 的 的, 正则表达式 通常 用于 通过 将 正则 分成 几个 子 <unk> 解析 字符串 ， 这些 子组 匹配 不同 的 感兴趣 组件
raise an "fileexistserror" exception if it already exists, 如果 存在 ， 则 抛出 " fileexistserror " fileexistserror " fileexistserror " fileexistserror, 如果 文件 已经 存在 ， 则 <unk> 出 " fileexistserror " 异常
data should be a bytes like object containing one or more lines, data 应当 为 字节 like object 一个 或 的 的 的 的, data 应当 是 一个 包含 一行 或 多行 内容 的 bytes like object
0 <unk> means to select automatically based on other filter <unk>, 在 " <unk> " ， " 基于 " 的 的 的 的 的 的, 0 ( 默认值 ) 表示 基于 其他 过滤器 选项 自动 选择
<unk> testing for python keywords, " keyword " 检验 python 关键字, " keyword " 检验 python 关键字
return digest of msg for given <unk> key and digest, 给定 给定 给定 的 给定 的 的 键 的 键 的 的 和, 基于 给定 密钥 key 和 digest 返回 msg 的 摘要
<unk> a "decimal" instance is always <unk> so this operation always returns "true"., " " " " " " 实例 总是 总是 总是 ， 因此 ， ， ， 返回 " false ", 目前 ， " decimal " 实例 总是 规范 的 ， 所以 这个 操作 总是 返回 " true "
(contributed by raymond hettinger and steven <unk> in bpo <unk>, （ 由 raymond hettinger 在 bpo <unk> 中 贡献 。 ）, （ 由 raymond hettinger 和 steven d ' aprano 在 bpo <unk> 中 贡献 。 ）
if count is omitted, the ignore count is set to 0, 如果 指定 了 ， 则 将 被 设为 为 为 0, 如果 省略 count ， 则 忽略 次数 将 设置 为 0
keyword only arguments <unk>, 关键字 位置 参数, 仅限 关键字 参数 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
(see 2to3 <unk> python 2 to 3 code translation for more on this <unk> run the result of the translation under python 3.0, （ python python <unk> python python 3 的 更 多 的 更 多 的 ， python 代码 的 结果, ( see 2to3 自动 将 python 2 代码 转为 python 3 代码 for more on this <unk> . ) run the result of the <unk> under python 3.0
if the file <unk> it is closed and <unk> using the file name., 如果 文件 文件 ， 则 会 被 使用 ， 则 将 使用 " 文件 ., 如果 文件 <unk> ， 它会 被 关闭 并 使用 文件名 重新 打开
align one of the strings <unk> <unk> or <unk>, 为 一个 字符串 字符串 " " " 或 " <unk> " 或 " <unk> ", align 字符串 " left " , " <unk> " 或 " <unk> "
they are instances of a private class:, 它们 是 一个 的 的, 它们 是 一个 私有 类 的 实例 :
the algorithm is not cryptographically <unk> and should not be used for authentication or digital signatures, " time " 不 不 需要 使用 的 或 或 使用 的 的, 此 算法 没有 加密 强度 ， 不 应用 于 身份验证 和 数字签名
sharing state between processes, 进程 间 共享 状态, 进程 间 共享 状态
<unk> been tested with <unk> , <unk> and <unk> <unk>, " <unk> " <unk> " 和 " <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk>, ( 在 py2exe , <unk> 和 <unk> _ freeze 上 <unk> )
the compiled versions of the most recent format strings passed to "struct" and the module level functions are cached, so programs that use only a few format strings <unk> worry about <unk> a single "struct" instance., 该 的 的 的 的 格式 字符串 与 " 模块 " 和 " 模块 的 函数 ， ， 可以 在 字符串 格式 字符串 ， 例如 " 字符串 " " " " " " " " ", 传递 给 " struct " 和 模块 层级 函数 的 已 编译 版 最新 格式 字符串 会 被 缓存 ， 因此 只 使用 少量 格式 字符串 的 程序 无需 担心 重用 单独 的 " struct " 实例
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
logs a message with level "warning" on this logger, 在 根 记录器 上 记录 " 级别 " 级别 的 消息, 在 此 记录器 上 记录 " warning " 级别 的 消息
bpo <unk> the garbage collector now <unk> all user defined classes, bpo <unk> : " " " " 现在 会 所有 用户 用户 的 定义, bpo <unk> : 垃圾 回收 器 现在 会 跟踪 所有 用户 定义 类
changed in version 3.7: this module used to be optional, it is now always available., 在 3.7 版 更改 : 此 模块 模块 被 移除 现在 现在 会 被 弃用, 在 3.7 版 更改 : 这个 模块 <unk> 为 可选项 ， 但 现在 总是 可用
"statistics" mathematical statistics functions, " statistics " 数学 统计 函数, " statistics " 数学 统计 函数
<unk> if the problem changes and you want to exclude both <unk> and <unk> as <unk> the pattern would get even more complicated and <unk>, 如果 如果 如果 ， ， 你 希望 希望 ， ， <unk> 和 " <unk> ， ， ， ， ， ， 更 多 的 更 更 多 的 更 多 的 更, 更 <unk> 的 是 ， 如果 问题 <unk> 并且 你 想要 将 " bat " 和 " exe " 排除 为 扩展 ， 那么 该 模式 将 变得 更加 复杂 和 <unk>
this will always return a new reference, but is not guaranteed to create a new object; an existing proxy object may be returned, 这 将 总是 一个 新 的 " ， " ， " 一个 新 的 一个 新 的 一个 新 的 " 对象 " 对象, 该 函数 将 总是 返回 一个 新 的 引用 ， 但 不 保证 创建 一个 新 的 对象 ； 它 有 可能 返回 一个 现有 的 代理 对象
you can register your own converters and customize the provided ones, 你 可以 你 你 你 的 和 和 和 参数, 你 可以 注册 你 自己 的 转换器 并 或是 定制 已 提供 的 转换器
compute the stack effect of opcode with argument <unk> ., 与 给定 的 的 的 的 的, 使用 参数 <unk> 计算 <unk> 的 堆栈 效果
this is the default type for strings and may be omitted, 这是 默认 为 类型 的 字符串 字符串 可能 可能 被, 这是 字符串 的 默认 类型 ， 可以 省略
this function can also be used to execute arbitrary code objects (such as those created by <unk>, 此 函数 可以 可以 用来 用来 任意 的 " 对象 ( ) " 创建 的 创建 的 创建 的 " 创建 ( ) " 创建, 这个 函数 也 可以 用来 执行 任何 代码 对象 （ 如 " compile ( ) " 创建 的 ）
timeouts and the <unk> method, 超时 和 方法 方法, 超时 与 " <unk> " 方法
patch by <unk> <unk>, 由 作者 <unk> <unk>, 由 <unk> <unk> 修复
identical to "copy()" except that "copy2()" also attempts to preserve file <unk>, 将 " " " " " ， 还 还 会 被 到 文件 的 文件, 类似 于 " copy ( ) " ， 区别 在于 " copy2 ( ) " 还会 尝试 保留 文件 的 元 数据
the type of a destructor callback for a capsule, 用于 一个 的 的 的 的, capsule 的 <unk> 构器 回调 的 类型
using the "subprocess" module, 使用 " subprocess " 模块, 使用 " subprocess " 模块
different terminals use widely <unk> <unk> and often have their own minor <unk>, 不同 的 用例 用例 ( ) " , " ) " 和 " <unk> ( ) " 和 " 的 比较 比较 的 的 工具, 不同 的 终端 使用 <unk> 很大 的 代码 ， 并且 往往 有 自己 的 小 <unk>
if a is an int, it is used directly., 如果 一个 一个 ， 则 它 它 是 它 的, 如果 a 是 int 类型 ， 则 直接 使用
incremental encoding and decoding, 增量 编码 的 编码 和 解码, 增量 式 的 编码 和 解码
if the iterable returns no values at all, a "typeerror" exception is raised, 如果 可 迭代 对象 则 返回 " true " 异常 引发 " 异常 " 异常, 如果 输入 的 可 迭代 对象 完全 不 返回 任何 值 ， " typeerror " 异常 就 会 抛出
for floating point numbers, this <unk> towards zero., 对于 浮点数 ， ， 这个 <unk> 的 <unk>, 对于 浮点数 ， 它 将 向 零 舍入
one must call "close()" or "terminate()" before using <unk>, 一个 必须 调用 " 或 " 或 " 在 " " ( ) " 或 " ) " ) ", 调用 " join ( ) " 前 必须 先 调用 " close ( ) " 或者 " terminate ( ) "
this is equivalent to the python expression "key in o", 这 等价 于 python 表达式 " 表达式 " 表达式, 这 相当于 python 表达式 " key in o "
this module provides access to the unicode character database <unk> which defines character properties for all unicode characters, 此 模块 提供 了 访问 数据库 的 数据库 的 " " " " " " ， <unk> " 字符 的 所有 字符, 此 模块 提供 了 对 unicode character database ( <unk> ) 的 访问 ， 其中 定义 了 所有 unicode 字符 的 字符 属性
if encoding is not "none", it is used to open the file with that encoding, 如果 encoding 为 " none " ， 则 将 使用 打开 打开 打开 打开 文件 打开 文件 打开, 如果 encoding 不 为 " none " ， 则 会 将 其 用作 打开 文件 的 编码 格式
signals the division of a non infinite number by zero., 信号 由 " 的 " 的 的, 非 无限 数 被 <unk> 的 信号
the constructor for "partial()" takes the arguments <unk> <unk> <unk> ..., <unk> <unk> <unk> <unk>, " " " " " " " " " " , " , " , " , " , " , " , " , " , " , " , " , " ) ", " partial ( ) " 接受 参数 " ( function , arg1 , arg2 , ... , <unk> <unk> , <unk> <unk> ) "
"|" indicates that the remaining arguments in the python argument list are optional, 在 参数 ， 参数 参数 参数 参数 参数 列表 参数 列表, " | " 表明 在 python 参数 列表 中 剩下 的 参数 都 是 可选 的
when looping through a sequence, the position index and corresponding value can be retrieved at the same time using the "enumerate()" function., 当 时 ， 时 ， 并且 序列 和 索引 ， 并且 可 通过 " ， " " " " " " ", 当 在 序列 中 循环 时 ， 用 " enumerate ( ) " 函数 可以 将 索引 位置 和 其 对应 的 值 同时 取出
(contributed by tim <unk> and <unk> <unk> <unk> in bpo <unk>, （ 由 pablo <unk> 和 <unk> <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 tim <unk> 和 <unk> <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
(contributed by victor stinner in bpo <unk>, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）
underscores are ignored for <unk> the numeric value of the literal, <unk> 为 为 <unk> 的 的 值, 在 确定 数字 大 小时 字 面值 中 的 下划线 会 被 忽略
this means that the following code will print <unk>, 这 意味着 以下 代码 代码 打印 ：, 这 意味着 以下 代码 将 打印 出 42 :
then executing the following <unk> a name binding to <unk> and "bar" in the <unk> module:, 然后 ， 以下 以下 以下 名称 名称 名称 名称 的 模块 和 " 模块 " 模块 的, 则 执行 如下 代码 将 在 " spam " 模块 中 添加 对 " foo " 和 " bar " 的 名称 绑定 :
getting and installing <unk>, 编辑 和 安装, 获取 和 安装 macpython
when using only <unk> the function should expect the python level parameters to be passed in as a tuple acceptable for parsing via <unk> more information on this function is provided below., 当 使用 " os . <unk> ( ) " 函数 ， 将 其 python 将 被 作为 一个 " 的 " 的 " 的 " ， 例如 " 更 多 的 更 多 的 更 多 信息, 如果 单独 使用 " <unk> _ <unk> " ， 函数 会 等待 python <unk> tuple 格式 的 参数 ， 并 最终 使用 " pyarg _ parsetuple ( ) " 进行 解析
a "tarinfo" object has the following public data attributes:, " " " 对象 具有 以下 数据 属性 ：, " tarinfo " 对象 具有 以下 公有 数据 属性 :
handles an exception raised when <unk> a next item, 当 异常 发生 <unk> 时 ， 一个 异常 的 一个, 处理 等待 下 一个 项目 时 引发 的 异常
the buffered data can then be returned directly on subsequent <unk>, 缓冲 数据 可以 可以 在 " 上 " 中 的 的, 接下来 可以 在 后续 读取 时 直接 返回 缓冲 数据
the lock is part of the condition object: you don't have to track it <unk>, 这个 是 的 的 ， ， 你 必须 为 " <unk> ( ) " 的 它, 锁 是 条件 对象 的 一部分 ， 你 不必 单独 地 跟踪 它
for example, <unk> y)" is equivalent to the expression <unk>, 例如 ， " ' [ 1 ] " " " " " " " " ", 例如 ， " operator . add ( x , y ) " 与 表达式 " x + y " 相同
the path based finder iterates over every entry in the search <unk> and for each of these, looks for an appropriate path entry finder <unk> for the path entry, 路径 路径 的 查找 器 （ 迭代 器 的 的 的 的 的 的 的 ， ， ， 的 的 的 路径 的 路径 条目 路径 路径 条目 路径 的 路径 条目 路径 的 路径, 基于 路径 的 查找 器会 迭代 搜索 路径 中 的 每个 条目 ， 并且 每次 都 查找 与 路径 条目 对应 的 path entry finder ( " <unk> " )
"gc" garbage collector interface, " gc " 垃圾 回收 回收 接口, " gc " 垃圾 回收 器 接口
returns a new instance of the <unk> class intended to communicate with a remote machine whose address is given by host and port ., 返回 一个 新 的 " 实例 " 实例 ， 的 的 的 的 的 的 的 的 的 ， 给定 的 的 的 结果, 返回 一个 " <unk> " 类 的 新 实例 ， 该 实例 旨在 与 使用 host 与 port 给定 地址 的 远程 主机 进行 通信
for <unk> statements, the number of modifications are <unk> up into <unk>, 对于 ， ， ， ， 的 的 的 的 的 <unk> 为 单位, 对于 " <unk> ( ) " 语句 ， 修改 <unk> 被 <unk> 至 " <unk> "
pep <unk> ordered dictionaries, pep 372 : 有序 字典, pep 372 : 有序 字典
when using this method, a fallback value can be provided via the <unk> keyword only argument:, 当 使用 此 方法 的 使用 " 值 " " " " " " 来 使用 " ' " ' " 仅 的 的, 当 使用 此 方法 时 ， 回退 值 可以 通过 " fallback " 仅限 关键字 参数 来 提供 :
u law is an audio encoding format <unk> you get a dynamic range of about <unk> bits using only 8 bit samples, law law law 是 是 一种 格式 ， 格式 ， 使用 " 8 8 的 采样 仅 仅 的 采样, u law 是 一种 音频 编码 格式 ， 仅 使用 8 位 采样 即可 获得 大约 <unk> 位 的 动态 范围
if this parameter is omitted or "none", the mapping is created without a name, 如果 此 形参 为 " none " ， 则 " none " ， 则 会 被 调用, 如果 省略 此参数 或 设置 为 " none " ， 则 创建 的 映射 不带 名称
(contributed by serhiy storchaka in bpo <unk>, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）
<unk> number of the mouse <unk> defaults to 1 <unk> mouse <unk>, <unk> <unk> <unk> <unk> 的 的 默认值 为 " <unk> " , " <unk> ", <unk> 鼠标 按钮 编号 ， 默认值 为 1 ( 鼠标 <unk> )
the following table <unk> the operator precedence in python, from lowest precedence <unk> <unk> to highest precedence <unk> <unk>, 下表 下表 的 <unk> 中 的 的 " <unk> " 的 的 的 " <unk> " " " " " " " " " " " ", 下表 对 python 中 运算符 的 优先 顺序 进行 了 总结 ， 从 最 <unk> （ 最后 绑定 ） 到 最高 优先级 （ <unk> 绑定 ）
<unk> must be an integer which specifies the size of the array, or a string which will be used to initialize the array items., " _ 必须 必须 为 为 整数 ， 或者 ， 或者 的 字符串 或者 的 字符串 将 被 用来 为 字符串 的 的, init _ or _ size 必须 是 一个 指明 数组 大小 的 整数 ， 或者 是 一个 将 被 用来 初始化 数组 条 目的 字符串
note that if the message object has no <unk> the preamble attribute will be "none"., 请 注意 如果 消息 对象 没有 任何 没有 " 属性 " 属性 " " " " " none ", 请 注意 如果 消息 对象 没有 前导 文本 ， 则 preamble 属性 将 为 " none "
"return" without an expression argument returns "none", 如果 没有 参数 的 参数 返回 " none ", 不带 表达式 参数 的 " return " 会 返回 " none "
it makes it clear that the <unk> applies to the whole function, rather than just a <unk> of it (and saving an indentation level is <unk> <unk>, 它 它 将 注意 ， <unk> <unk> 的 的 ， ， ， 它 在 一个 一个 特定 的 一个 特定 的 一个 层级 层级 的 层级 的, <unk> 清楚 地 表明 ， " <unk> " 作用 于 整个 函数 ， 而 不仅仅 是 函数 的 一部分 （ 同时 也 能 保持 <unk> 的 缩进 层级 ）
there are a number of alternatives to writing your own c <unk> depending on what you're trying to <unk>, 有 要 编写 的 的 的 的 的 的 ， ， 可以 使用 " <unk> " 的 的, 编写 自己 的 c 扩展 有 很多 选择 ， 具体 取决于 您 要 做 的 事情
these names are defined by the interpreter and its implementation (including the standard <unk>, 这些 解释器 解释器 解释器 和 实现 实现 实现 实现 的 标准 的, 这些 名称 是 由 解释器 及其 实现 （ 包括 标准 库 ） 定义 的
there is no noticeable overhead when handling a big number of children ( o(1) each time a child <unk>, 当 没有 方法 时 ， 而 不是 一个 的 的 ， ， ， 时间 时间 时间 时间, 在 处理 大量 子 监视器 时 没有 明显 的 开销 ( o ( 1 ) 每次 子 监视器 结束 )
this means that the value of "n" will be "0" in the first <unk> "1" in the second, "2" in the <unk> and so on, 这 意味着 " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 这 意味着 " n " 的 值 在 第一个 lambda 中为 " 0 " ， 在 第二个 lambda 中为 " 1 " ， 在 第三个 中为 " 2 " ， 依此类推
<unk> the authors of the <unk> hash function:, " <unk> " 的 <unk> 的 的 的 函数, 正如 <unk> 哈希 函数 的 作者 所 <unk> :
the following lines should be one or more <unk> describing the object's calling <unk> its side <unk> etc., 这样 的 应当 是 一个 或 或 多个 " <unk> ( ) " 函数 的 的 的 :, 后面 几行 应该 是 一个 或 多个 段落 ， 描述 对象 的 调用 约定 ， 它 的 副作用 等
for the <unk> <unk> of cases, there should be no side effect, 对于 <unk> 的 的 ， ， 应该 应该 不 有 什么, 在 大部分 情况 下 ， 这 应该 都 不会 有 附带 影响
this can be used to decode a json document from a string that may have <unk> data at the end., 这 可以 用来 从 一个 从 字符串 从 一个 字符串 的 数据 的 数据, 这 可以 用于 从 一个 字符串 解码 json 文档 ， 该 字符串 的 末尾 可能 有 <unk> 的 数据
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
there is no good reason to instantiate "cmd" <unk> <unk> it's useful as a <unk> of an interpreter class you define yourself in order to inherit <unk> methods and encapsulate action methods., 对于 没有 的 的 的 的 " <unk> " 的 ， ， 你 可以 定义 的 你 的 定义 的 定义 的 定义 ， ， 方法 和 方法 和 方法, 实例 化 " cmd " 本身 是 没有 充分 理由 的 ， 它 作为 自定义 解释器 类 的 超类 是 非常 有用 的 为了 继承 " cmd " 的 方法 并且 封装 动作 方法
several additional directives not required by the <unk> standard are included for convenience, 几个 额外 的 库 的 库 标准 标准 的 的, 为了 方便 起 见 ， 还 包括 了 <unk> 标准 不 需要 的 其他 一些 指令
multiple handlers and formatters, 多个 多个 处理器 处理器 和 多种 格式化, 使用 多个 日志 处理器 和 多种 格式化
send data to stdin (if input is not <unk>, 将 数据 输入 <unk> ， 输入 输入 输入 输入, <unk> 到 stdin ( 如果 input 不 为 " none " ) ；
if values in <unk> do not specify fields, raises "typeerror"., 如果 未指定 中 的 值 ， 则 引发 引发 引发 ", 如果 " <unk> " 中 的 值 没有 指定 字 段 ， 则 引发 " typeerror "
release date: 2018 03 <unk>, 发布 日期 : 2018 03 29, 发布 日期 : 2018 03 <unk>
to prevent <unk> with field names, the method and attribute names start with an <unk>, 要 <unk> <unk> ， ， ， ， 方法 方法 和 属性 属性 为 " none ", 为了 防止 字段名 冲突 ， 方法 和 属性 以 下划线 开始
define how a single command line argument should be parsed, 定义 如何 参数 参数 参数 参数 应当, 定义 单个 的 命令行 参数 应当 如何 解析
corresponds to "errno" <unk>, 对应 于 " errno " " " ", 对应 于 " errno " " <unk> "
the arguments for this method are the same as those for the <unk> method., 参数 的 方法 方法 是 与 " " " " " " " " " ", 此 方法 的 参数 与 " <unk> _ file ( ) " 方法 的 相同
changed in version 3.5: return a <unk> object instead of a <unk>, 在 3.5 版 更改 : 返回 " object " " " " " " " " ", 在 3.5 版 更改 : return a <unk> object instead of a dict .
arrays are returned as <unk>, 将 返回 的 <unk> ( ) ", 数组 以 " <unk> " 形式 返回
the unicode version is exported with an <unk> appended to the name, while the ansi version is exported with an "a" appended to the name, unicode unicode 版本 版本 是 与 " <unk> " 的 " ， ， ， ， 的 的 ， 是 一个 的 的 的 名称, unicode 版本 通常 会 在 名字 最后 以 " w " 结尾 ， 而 ansi 版本 的 则 以 " a " 结尾
the optional parameter length sets the initial size of the output buffer., 可选 的 形参 长度 包含 的 的 的 的 大小, 可选 的 形参 length 设置 输出 缓冲区 的 初始 大小
a convenience method which <unk> the option in the specified section to a boolean value, 将 一个 " option " 中 的 的 的 的 的 的 值, 将 在 指定 section 中 的 option 强制 转换 为 布尔值 的 便捷 方法
<unk> tools for pickle developers, " email . pickle " 的 的, " <unk> " pickle 开发者 工具集
return the hash value of the object (if it has one), 返回 对象 的 的 对象 ， 返回 <unk> 对象, 返回 该 对象 的 哈希 值 （ 如果 它 有 的话 ）
return the object at position <unk> in the struct sequence pointed to by p, 返回 对象 的 <unk> <unk> <unk> <unk> <unk> 的 的 的 的 的 的 名称, 返回 p 所 指向 的 结构 序列 中 ， 位于 <unk> 处 的 对象
the member variables to use in these generated methods are defined using pep 526 type annotations, 这个 变量 的 用例 ， 这些 方法 使用 " __ __ __ __ __ __ __ __ 类型, 在 这些 生成 的 方法 中 使用 的 成员 变量 使用 pep 526 类型 注释 定义
file objects have some additional methods, such as <unk> and "truncate()" which are less frequently <unk> consult the library reference for a complete guide to file objects., 文件 对象 某些 一些 额外 的 例如 ， 例如 " <unk> ( ) " 和 " 的 " 的 的 的 的 的 的 的 的 的 的 的 的 的 的, 文件 对象 有 一些 额外 的 方法 ， 例如 " <unk> ( ) " 和 " truncate ( ) " ， 它们 使用 <unk> 较 低 ； 有关 文件 对象 的 完整 指南 请参阅 库 参考
return a new function object associated with the code object code, 返回 一个 新 的 新 的 对象 的 对象 的 对象, 返回 与 代码 对象 code 关联 的 新 函数 对象
see error handlers for possible values., 请参阅 错误处理 方案 错误处理 方案, 可用 的 值 请参阅 错误处理 方案
new in version 3.8: the <unk> parameter., 3.8 新版 功能 : the <unk> _ 形参, 3.8 新版 功能 : <unk> _ exist _ ok 形参
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
when "return" passes control out of a "try" statement with a "finally" clause, that "finally" clause is executed before really leaving the function., 当 执行 时 时 ， 执行 时 ， 执行 " 语句 " 语句 时 ， 执行 执行 时 ， 否则 执行 执行, 当 " return " 将 控制 <unk> 出 一个 带有 " finally " 子句 的 " try " 语句 时 ， 该 " finally " 子句 会先 被 执行 然后 再 真正 <unk> 该 函数
once you've created a virtual environment, you may <unk> it., 一旦 ， 的 一个 一个 一个 ， ， 它 你 你 可能 可能 可能, 创建 虚拟环境 后 ， 您 可以 激活 它
for example, <unk> + <unk> first looks up <unk> then it evaluates <unk> and performs the addition, and <unk> it writes the result back to <unk>, 例如 ， " ' + ' ' ' " ' ， ， ， ， ， ， ， ， ， 将 其 将 其 将 其 将 其 将 其 将 其 结果, 例如 ， " a [ i ] + f ( x ) " 首先 查找 " a [ i ] " ， 然后 对 " f ( x ) " 求值 并 执行 加法 操作 ， 最后 将 结果 写 回到 " a [ i ] "
for other non posix platforms, currently just returns <unk>, 其他 其他 非 的 " " " ， " 将 返回 " " ( ) ", 对于 其他 非 posix 平台 ， 目前 只是 返回 " sys . platform "
additional utility classes and functions, 附加 类 类 类 和 函数, 附加 工具 类 和 函数
<unk> be defined as a class <unk>, " 为 " " " 类 作为 一个 类 类 类, （ 必须 定义 <unk> 方法 。 ）
the following constants are available:, 以下 的 以下 常量 ：, 可以 使用 以下 的 常量 :
so, if the input iterable is sorted, the combination tuples will be produced in sorted order., 如果 如果 输入 输入 的 的 ， 则 会 在 " 条目 " 中 的 顺序 顺序, 因此 ， 如果 所 输入 iterable 是 已 排序 的 ， 组合 元组 也 将 按 已 排序 的 顺序 生成
the "functools" module defines the following functions:, " 模块 " 模块 定义 了 以下 函数 ：, " functools " 模块 定义 了 以下 函数 :
<unk> or later it would probably crash with an access <unk> or <unk> so it's better to break out of the loop when we hit the "null" <unk>, " ' 或 或 ' <unk> ' <unk> ' " 的 的 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> 在 <unk> <unk> <unk> <unk> <unk> <unk> 的 的 <unk>, 它 <unk> 会 因为 访问 到 <unk> 指针 或者 什么 的 把 自己 <unk> 崩溃 ， 所以 我们 最好 在 遇到 " null " 后 <unk> 它 退出 循环 :
alternatively, delete the package directory manually and install it again, " filecmp " 目录 目录 和 目录 和 它, 或者 ， 手动 <unk> 包 目录 并 再次 安装
<unk> close the transport immediately, " <unk> " 关闭 " <unk>, " transport . <unk> ( ) " 立即 关闭 传输
ms windows specific services, " 特定 服务, windows 系统 相关 模块
deprecated since version 3.9: <unk> now supports "[]", 3.9 版后 已 移除 : " collections . abc . abc " now supports " [ ] ", 3.9 版后 已 移除 : " collections . abc . <unk> " now supports " [ ] "
to <unk> arguments it is preferred to use an abstract collection type such as <unk>, 要 <unk> _ <unk> 参数 ， 它 是 使用 " none " 类型 ， 类型 类型, 如果 要 标注 参数 的话 ， 使用 如 " mapping " 的 抽象 容器 类型 是 更好 的 选择
python related paths and files, python 3.5 的 相关 和 文件, 与 python 相关 的 路径 和 文件
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
if indent is a string (such as <unk> that string is used to indent each <unk>, 如果 为 为 字符串 （ 例如 " 字符串 字符串 ） 的 字符串 ）, 如果 indent 是 一个 字符串 （ 比如 ` ` " \ t " " ） ， 那个 字符串 会 被 用于 缩进 每 一层
pep <unk> a dedicated <unk> operator for matrix multiplication, pep <unk> : vectorcall 用于 矩阵 乘法 的 乘法, pep 465 用于 矩阵 乘法 的 专用 中缀 运算符
individual <unk> are set using the dictionary in the <unk> field of a <unk>, 通过 " <unk> _ <unk> ( ) " 将 被 使用 " <unk> " 的 " <unk> ", 使用 上下文 的 " <unk> " 字段 中 的 字典 设置 单个 陷阱 ：
<unk> drag and drop support, " 拖放 . dnd " 拖放 支持 支持, " tkinter . dnd " 拖放 操作 支持
the <unk> attribute can be used to set the minimum execution <unk> in seconds that is considered <unk>, " <unk> " 属性 _ <unk> " 属性 可 被 设置 为 " 的 " 将 被 执行 的 的, 属性 " loop . <unk> _ callback _ <unk> " 可 用于 设置 以 秒 为 单位 的 最小 执行 <unk> ， 这 被 视为 “ <unk> ”
changed in version 3.9: this function is now also available in the limited api., 在 3.9 版 更改 : this function is now <unk> <unk> <unk> <unk>, 在 3.9 版 更改 : this function is now <unk> <unk> in the limited api .
unlike other modules such as <unk> no external library is required, 与 其他 模块 的 ， ， ， 没有 库 的, 不同于 " dbm . gnu " 等 其他 模块 ， 它 不 需要 外部 库
deprecated since version 3.6: <unk> and <unk> are deprecated in favor of context, 3.6 版后 已 移除 : " " " " " and " and " and " and " in " in " favor " in ", 3.6 版后 已 移除 : <unk> and <unk> are deprecated in favor of context
for <unk> constructed from file without specifying a "key" parameter, this will be set to "none"., 对于 " 文件 文件 描述符 文件 描述符 文件 ， ， 的 的 将 将 将 被 设置 为 " none ", 对于 不 指定 " key " 形参 而是 基于 文件 构造 时 区 ， 该 属性 将 设为 " none "
with a <unk> argument, set a break there in the current file, 通过 " <unk> . <unk> " ， 则 设置 一个 文件 的, 如果 带有 <unk> 参数 ， 则 在 当前 文件 相应 <unk> 设置 一个 断点
the <unk> method of "threading.thread" has been removed, " py _ compile ( ) " 方法 " 方法 ( ) " 方法 的 方法 方法, " threading . thread " 的 " <unk> ( ) " 方法 已 被 移除
the characters are ignored, but the resulting decoded bytes may be invalid., 字符 字符 的 字符 ， 但 字节 串 字节 串, 这些 字符 会 被 忽略 ， 但 作为 结果 的 已 解码 字节 串 可能 无效
looking at this in a bit more detail, it is possible to mark certain parameters as positional only, 在 ， 中 中 ， 一个 更 多 的 ， ， 它 将 其 作为 位置 参数, 在 这里 还 可以 发现 更 多 细节 ， 特定 形参 可以 被 标记 为 仅限 位置
for most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as depth first, left to right, not <unk> <unk> in the same class where there is an <unk> in the hierarchy, 对于 大多数 的 ， ， ， ， 你 可以 通过 " " " " 的 " ， 例如 " " " 的 " ， 而 不是 " 的 " 类 的 " 类 ， 在 类 的 类, 对于 多数 应用 来说 ， 在 最 简单 的 情况 下 ， 你 可以 认为 搜索 从 <unk> 所 继承 属性 的 操作 是 深度 优先 、 从 左 至 右 的 ， 当 层次结构 中 存在 重叠 时 不会 在 同一个 类中 搜索 两次
if size is an integer an empty <unk> of given size is installed, 如果 size 为 一个 空 ， 则 则 返回 " size ", 如果 size 为 一个 整型 <unk> 将 <unk> 一个 指定 大小 的 空 缓冲区
the interpreter may also be invoked in interactive <unk> in this case, it does not read and execute a complete program but reads and executes one statement <unk> <unk> at a time, 解释器 解释器 也 可以 在 在 " <unk> " ， 但 它 并 在 你 的 的 ， ， ， 并 在 一个 程序 的 一个 一个 一个 一个 一个 一个 一个 一个 一个 一个 一个 一个 一个 一个 一个, 解释器 也 可以 通过 交互 模式 被 发起 调用 ； 在 此 情况 下 ， 它 并 不 读取 和 执行 一个 完整 程序 ， 而是 每次 读取 和 执行 一条 语句 （ 可能 为 复合 语句 ）
the inverse of <unk> this takes a 2 tuple of the form <unk> <unk> and returns the string value suitable for a to or <unk> header, " " ( ) " " " " 接受 一个 元组 " " " " " " " 元组 ( ) " 的 元组 ， 并 返回 一个 字符串 的 字符串 的 值, 是 " <unk> ( ) " 的 逆 操作 ， 接受 一个 " ( 真实 名字 , 电子邮件 地址 ) " 的 二元 组 ， 并 返回 适合 于 to or <unk> 标头 的 字符串
return "0" on success, " 1" on failure, 成功 时 返回 " 1 " ， 失败 时 返回 " 1 ", 成功 时 返回 " 0 " ， 失败 时 返回 " 1 "
in addition to, or instead <unk> the dialect parameter, the programmer can also specify individual formatting parameters, which have the same names as the attributes defined below for the "dialect" class., 在 ， 或 或 或 " notimplemented ( ) " 方法 ， 属性 还 属性 还 可以 通过 " 的 " 属性 " 属性 的 属性 的 属性, 要 想 补充 或 覆盖 dialect 参数 ， 程序员 还 可以 单独 指定 某些 格式 参数 ， 这些 参数 的 名称 与 下面 " dialect " 类 定义 的 属性 相同
this <unk> property lets you build complex sorts in a series of sorting steps, 这 <unk> <unk> <unk> 你 你 在 代码 中 的 的 的 代码, 这个 <unk> 的 属性 允许 你 在 一系列 排序 步骤 中 构建 复杂 的 排序
mapping operators to functions, 将 运算符 映射 到 函数, 将 运算符 映射 到 函数
it is derived from <unk>, 它 是 " <unk> . <unk> " 的 的, 它 派生 自 " <unk> "
returns an awaitable that when run will <unk> a "generatorexit" into the asynchronous generator function at the point where it was <unk>, 返回 当 在 当 时 的 时 ， 的 的 时 ， 返回 一个 函数 函数 执行 执行 执行, 返回 一个 可 等待 对象 ， 它会 在 运行 <unk> 异步 生成器 函数 暂停 的 位置 <unk> 一个 " generatorexit "
if mode is not specified, "'a'" is used, 如果 mode 不 为 " 则 " " ", 如果 未指定 mode ， 则 会 使用 " ' a ' "
for non number types the field indicates the maximum field size in other words, how many characters will be used from the field content, 对于 非 类型 类型 字段 的 的 表示 的 的 的 的 的 的 的 的 ， ， 因此 被 忽略 的 的, 对于 非 数字 类型 ， 该字段 表示 最大 字 段 大小 — — 换句话说 就是 要 使用 多少 个 来自 字 段 内容 的 字符
<unk> all <unk> rows of a query result, returning a list, " 所有 : 所有 一个 一个 包含 一个 列表 ， 一个 列表 列表, 获取 一个 查询 结果 的 所有 （ 剩余 ） 行 ， 返回 一个 列表
xml data for the <unk> format is parsed using the <unk> parser from <unk> see its documentation for possible exceptions on <unk> <unk> xml, xml 数据 格式 格式 格式 格式 的 " <unk> <unk> <unk> <unk> <unk> <unk> <unk> ， 请参阅 " <unk> " <unk> 的 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, " fmt _ xml " 格式 的 xml 数据 会 使用 来自 " xml . <unk> . expat " 的 expat 解析器 请参阅 其 文档 了解 错误 格式 xml 可能 引发 的 异常
windows only: creates <unk> instances., windows windows 的 <unk> ：, 仅限 windows ： 创建 " <unk> " 实例
lines that are indented less should not occur, but if they occur all their leading whitespace should be stripped, 当 需要 不 不 不 存在 ， ， ， 它们 ， 它们 都 将 它们 的 的 则 将 返回, 缩进 <unk> 的 行 不 应该 出现 ， 但是 如果 它们 出现 ， 则 应该 <unk> 它们 的 所有 前导 空格
otherwise, if either argument is a floating point number, the other is converted to floating <unk>, 否则 ， 如果 参数 参数 是 一个 ， 则 会 其他 其他 其他 被 被 为 ", 否则 ， 如果 任一 参数 为 浮点数 ， 另 一 参数 会 被 转换 为 浮点数 ；
dtrace and systemtap are monitoring tools, each providing a way to inspect what the processes on a computer system are doing, dtrace 和 是 是 在 ， 它们 将 在 一个 特定 的 的 的 的 的 的, dtrace 和 systemtap 是 监控 工具 ， 它们 都 提供 了 一种 检查 <unk> 上 的 进程 的 方法
the <unk> setting of the logger., " 的 " 设置 设置 设置, 日志 记录器 的 传播 设置
it is now possible for a statically linked python to load a c extension built using a shared library python, 它 现在 一个 python python 的 python python c 扩展 c python 扩展 的 python 扩展, 现在 静态 链接 的 python 将 可以 加载 使用 共享 库 python 构建 的 c 扩展
future calls to the "poll()" method will then check whether the file descriptor has any pending i/o events, future 调用 " __ ( ) " 方法 方法 将 将 指定 的 文件 描述符 ， 则 会 引发 i / o, 这样 ， 将来 调用 " poll ( ) " 方法 时 将 检查 文件 描述符 是否 有 未 处理 的 i / o 事件
(contributed by serhiy storchaka in bpo <unk>, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）
raised on thread specific errors., 在 特定 线程 中 线程 的 线程, 发生 线程 相关 错误 时 抛出
remove and return an item from the queue, 从 队列 中 并 返回 一个 项目, 从 队列 中 取出 并 返回 对象
pointer types are cached and <unk> internally, so calling this function repeatedly is <unk>, 指针 类型 " " " " " ， 因此 ， 因此 ， 此 函数 会 被 调用, 指针 类型 会 被 缓存 并 在 内部 重用 ， 因此 重复 调用 此 函数 耗费 不 大
only strings and bytes should be present on <unk> all other data types are ignored, 只有 字符串 和 字节 字节 串 ， 所有 其他 所有 其他 所有 的 所有, 在 " sys . path " 中 只能 出现 字符串 和 字节 串 ； 所有 其他 数据类型 都 会 被 忽略
it is also contained in the python source <unk> as <unk>, 它 也 python python 中 的 python 也 可以 是 python <unk>, 它 同样 包含 在 python 源码 发布 包中 ， 文件名 为 " tools / scripts / diff . py "
using dlls in practice, 使用 实际 的 实际, dll 的 实际 使用
this feature is not supported by the <unk> <unk> encoding., 此 特性 的 " " " " " " ", 此 特性 不 被 " 标准 " <unk> 编码 格式 所 支持
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
the order in which the various tests will be run is determined by sorting the test method names with <unk> to the built in ordering for strings., 在 <unk> 测试 被 测试 被 由 <unk> 的 的 的 的 的 的 方法 来 使用 的 的 的, 多个 <unk> 的 顺序 由 内置 字符串 排序 方法 对 测试 名 进行 排序 的 结果 决定
the <unk> result should be consistent with equality, " 结果 结果 结果 ， 应 使用 " <unk> ", " hash ( ) " 的 结果 应该 与 是否 相等 一致
contains the string representation of the http request line, 包含 字符串 的 的 的 位置 的 位置, 包含 http 请求 行 的 字符串 表示
raises an auditing event <unk> with arguments "key", <unk>, 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " key " , " key ", 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " key " , " index "
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
note that the class names referenced in config files need to be either relative to the logging module, or absolute values which can be <unk> using normal import <unk>, 请 注意 的 类 的 的 的 的 的 的 的 的 的 的 ， ， 模块 记录 模块 的 模块 ， 或者 可以 使用 " <unk> " 来 使用 " <unk> ", 请 注意 ， 配置文件 中 引用 的 类 名称 需要 相对 于 日志 记录 模块 ， 或者 可以 使用 常规 导入 机制 解析 的 绝对值
if the whole bytestring turned out to contain compressed data, this is <unk> an empty bytes object., 如果 未 包含 的 的 的 的 ， ， ， 这个 方法 将 被 一个 空 对象, 如果 整个 结果 字节 串 都 包含 压缩 数据 ， 它 将 为 一个 空 的 bytes 对象 " b " " "
in general in python (and in all cases in the standard <unk> a method that <unk> an object will return "none" to help avoid getting the two types of operations <unk>, 在 python 中 中 的 " " " " " " " " " " " " " 对象 ， 返回 " none " ， " " " " " 的 " 对象 的 的, 通常 在 python 中 ( 以及 在 标准 库 的 所有 代码 中 ) 会 改变 原 对象 的 方法 将 返回 " none " 以 帮助 避免 混淆 这 两种 不同 类型 的 操作
changed in version 3.7: database can now also be a path like object , not only a string., 在 3.7 版 更改 : 现在 现在 可以 一个 path like object ", 在 3.7 版 更改 : database 现在 可以 是 一个 path like object 对象 了 ， 不仅仅 是 字符串
raises "statisticserror" if n is not least 1., 如果 未 被 取消 则 则 引发 " valueerror ", 如果 n 小于 1 则 将 引发 " statisticserror "
unions of unions are <unk> e.g.:, （ 的 的 的 ：, 联合 类型 的 联合 类型 会 被 展开 <unk> ， 比如 :
(contributed by serhiy storchaka in bpo <unk>, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）
to get <unk> stand <unk> applications, the tcl scripts that form the library have to be integrated into the application as well, 要 <unk> " <unk> " ， " " " " 的 " 的 的 的 的 的 的, 为了 获得 真正 能 独立 运行 的 应用程序 ， 来自 <unk> 的 tcl 脚本 也 需要 被 <unk> 进 应用程序
it can be passed only as positional argument., 它 可以 被 作为 参数 参数, 它 只能 作为 位置 参数 传入
previously, these commands had no effect., 在 之前 的 ， 没有 没有 任何 没有, 文件 中 的 这些 命令 以前 是 无效 的
if the argument is a string, no leading or trailing whitespace or underscores are <unk>, 如果 参数 是 一个 不 或 或 或 或 或 或 或 的, 如果 参数 为 字符串 ， 则 不 允许 有 开头 或 末尾 的 空格 或 下划线
this module defines functions and classes which implement a flexible event logging system for applications and <unk>, 此 模块 定义 了 类 和 实现 了 实现 的 日志 记录 的 系统 的 实现, 这个 模块 为 应用 与 库 实现 了 灵活 的 事件 日志 系统 的 函数 与 类
some modules only work for two processes that are on the same <unk> e.g. "signal" and <unk>, 有些 模块 仅 用于 两个 两个 与 相同 的 ， 例如 ， 和 " 和 ", 某些 模块 仅 适用 于 同一 <unk> 机器 上 的 两个 进程 ， 例如 " signal " 和 " <unk> "
callback may also be "none" or "null", 回调 可以 也 " none " 或 " null ", callback 也 可以 为 " none " 或 " null "
the "isinstance()" built in function is recommended for testing the type of an object, because it takes subclasses into <unk>, 内置 内置 的 函数 是 是 类型 的 类型 的 类型 ， 它 将 它 它 它 的 " " " ", 推荐 使用 " isinstance ( ) " 内置 函数 来 检测 对象 的 类型 ， 因为 它会 考虑 子类 的 情况
converts the old not equal syntax, <unk> to "! "., 将 不 为 " <unk> ( ) " " 为 " <unk> ( ) ", 转换 老 的 不 等 语法 ， 将 " < > " 转为 " ! "
return a list with the n smallest elements from the dataset defined by iterable, 返回 一个 列表 中 的 元素 ， 元素 元素 的 元素, 从 iterable 所 定义 的 数据 集中 返回 前 n 个 最小 元素 组成 的 列表
changed in version 3.8: use "__index__()" if available., 在 3.8 版 更改 : 如果 使用 " __ index __ " __ " __ ", 在 3.8 版 更改 : 如果 可用 将 使用 " __ index __ ( ) "
set blocking or non blocking read behavior for the window, 设置 阻塞 或 阻塞 的 读取 的 的, 为 窗口 设置 阻塞 或非 阻塞 读取 行为
<unk> of replacing "sys.stdin" with a "file like object", " email . <unk> " , " os . <unk> " 的 的 的 的, <unk> 将 " sys . stdin " 数据 替换 为 “ 类似 文件 的 对象 ”
note that it's already possible to iterate on file objects using "for line in file: <unk> without calling <unk>, 请 注意 在 不同 的 的 " " " ( ) " 的 文件 的 使用 " <unk> ( ) " ) " 不 存在 ", 请 注意 使用 " for line in file : ... " 就 足够 对 文件 对象 进行 迭代 了 ， 可以 不必 调用 " file . <unk> ( ) "
the <unk> output of calls to the <unk> method is the same as if all the single inputs were <unk> into one, and this input was <unk> with the stateless <unk>, " <unk> ( ) " 方法 会 被 调用 ， 如果 所有 的 所有 的 ， 如果 所有 的 ， ， ， ， ， ， 将 其 为 " true ", 调用 " encode ( ) " / " <unk> ( ) " 方法 后 的 全部 输出 相当于 将 所有 通过 无 状态 编码器 / 解码器 进行 编码 / 解码 的 单个 输入 连接 在 一起 所 得到 的 输出
a short usage example:, 一个 简短 的 用法 示例 :, 一个 简短 的 用法 示例 :
pep 420 also introduced the <unk> protocol as an alternative to <unk>, pep 420 : 由 " <unk> . <unk> " 作为 的 的 作为 一个 的 的, pep 420 还 引入 了 " find _ loader ( ) " 协议 作为 " find _ module ( ) " 的 替代
how do i check for a keypress without <unk>, 如何 一个 不 的 的 的, 如何 在 不 阻塞 的 情况 下 检查 按键 ？
output not more than size bytes to str according to the format string format and the extra arguments, 输出 不 更 多 的 字符串 ， 字符串 将 字符串 字符串 的 字符串 格式 字符串 的 字符串, 根据 格式 字符串 format 和 额外 参数 ， 输出 不 超过 size 字节 到 str
author: guido van rossum, 作者 : <unk> van rossum, 作者 : guido van rossum
in certain <unk> cases, though, modules are built right in their installation directory, so this is <unk> a useful ability, 在 ， " <unk> " 中 的 " 模块 中 的 的 的 ， ， ， 因此 ， 因此 ， 因此 是 一个 一个 有用, 不过 在 某些 特殊 情况 下 ， 模块 是 在 其 安装 目录 中 被 构建 的 ， 因此 这 可能 会 是 个 有用 的 功能
it is the <unk> responsibility to ensure that all whitespace and special characters are quoted appropriately to avoid shell <unk> <unk>, 它 的 的 所有 所有 所有 所有 的 特殊 字符 ， 因此 可能 会 <unk> 地 地 地 地 地 地 地 地 地 ）, 应用程序 要 负责 确保 正确 地 转义 所有 空白 字符 和 特殊字符 以 防止 shell 注入 漏洞
another use is to pass a small function as an argument:, 另 使用 使用 " 作为 _ t ( ) " 函数 作为 一个 函数, 另 一个 用法 是 传递 一个 小 函数 作为 参数 :
on windows illegal characters <unk> <unk> <unk> <unk> <unk> <unk> and " ") replaced by underscore <unk>, 在 windows 上 上 ， " ' " ' " , " , " , " , " , " , " , " ' " , " ' " , " ' " ' " " " " " " " " " " " ", 在 windows 上 非法 字符 ( " : " , " < " , " > " , " | " , " " " , " ? " , and " " ) 会 被 替换 为 下划线 ( " _ " )
what's new in python 3.1, python 3.5 有 什么 新 变化, python 3.1 有 什么 新 变化
changes to the development process, 开发 流程 的, 开发 过程 的 变化
the sole value of the type <unk>, " 类型 " 类型 " 类型, " <unk> " 类型 的 唯一 值
what is python good <unk>, 什么 是 python <unk> 的 ？, python 适合 做 什么 ？
functions such as <unk> and built in "__import__()" can also be used to invoke the import <unk>, 例如 ， " " " " " " " " " " " " 也 可以 使用 " <unk> ", " importlib . import _ module ( ) " 以及 内置 的 " __ import __ ( ) " 等 函数 也 可以 被 用来 发起 调用 导入 机制
some typical values include: <unk> or <unk>, 有些 有 一些 <unk> 的 或 或 " 或 " 或 ", 一些 典型 的 值 包括 : " " <unk> " " 或 " " common " "
header is a flag which controls if spaces are encoded as underscores as per rfc <unk> ., 这是 是 被 视为 ， ， ， 的 被 被 作为 <unk> ， 即 <unk> <unk>, header 旗标 控制 空格符 是否 要 编码 为 下划线 ， 具体 描述 见 rfc <unk>
cpython supports two different calling <unk> <unk> and <unk>, cpython " 两个 " 两个 不同 的 " " " " " " " " " " " " " " " " ", cpython 支持 两种 不同 的 调用 协议 ： tp _ call 和 矢量 调用
function and method decorators were introduced in pep <unk> ., 函数 和 方法 和 <unk> <unk> 中 的 的, 函数 和 方法 装饰 器 是 在 pep <unk> 中 被 引入 的
out of <unk> <unk> are <unk> in a manner consistent with the handling of normal <unk>, <unk> 的 <unk> 是 <unk> 的 <unk> 是 <unk> 的 的 的 的 的, <unk> 的 索引 <unk> 以 与 普通 切片 一致 的 方式 进行 剪切
the system will save old log files by appending extensions to the filename, 将 记录 系统 的 写入 由 文件 写入, 系统 将 通过 为 文件名 添加 扩展名 来 保存 旧 日志 文件
if the previous name stored in the capsule was not "null", no attempt is made to free it., 如果 指定 的 的 的 名称 ， 则 在 " null " ， 则 不会 被 取消, 如果 之前 保存 在 capsule 中 的 name 不 为 " null " ， 则 不会 尝试 释放 它
analogous to <unk> but for container objects with the <unk> flag set., 相当于 " " _ <unk> " ) " ， 对于 为 " 对象 " 的 " 旗标 " 旗标, 类似 于 " pyobject _ new ( ) " ， 适用 于 设置 了 " py _ <unk> _ <unk> _ gc " 标签 的 容器 对象
after starting the <unk> one of two options may be <unk>, 之后 ， <unk> ， 两个 的 的 的 选项 ， 被 被, 启动 安装程序 后 ， 可以 选择 以下 两个 选项 之一 ：
if the environment variable "pythonpath" exists, as described in environment variables, its entries are added next, 如果 环境变量 环境变量 环境变量 ， 则 在 的 的 的 的 的 ， 则 会 被 忽略 的, 如果 环境变量 " pythonpath " 存在 ， 如 环境变量 中 所述 ， 则 接下来 添加 其 条目
the return value is a "float" similar to that returned by <unk>, 返回值 是 一个 " " . get _ time ( ) " 返回 的 " " " " ", 此 返回值 是 与 " time . time ( ) " 返回值 类似 的 " float " 对象
raised when there is an authentication error., 当 在 遇到 时 被 引发 错误, 出现 身份验证 错误 时 引发
some examples of <unk>, 一些 示例 的 示例 用法 示例, 一些 用法 示例 ：
changes in python behavior, python 的 的 的 变化, python 行为 的 改变
changed in version 3.6: out of range port numbers now raise "valueerror", instead of returning "none"., 在 3.6 版 更改 : 现在 " bytes " is now " " " " " " " " ", 在 3.6 版 更改 : out of range port numbers now raise " valueerror " , instead of <unk> " none " .
when <unk> returns "false", the payload should be a string object (which might be a <unk> encoded binary <unk>, 当 " 时 ( ) " 返回 时 ， 时 将 被 一个 字符串 ， 则 将 被 为 一个 二进制 二进制, 在 " is _ multipart ( ) " 返回 " true " 的 场合 下 ， <unk> 应当 是 一个 字符串 对象 （ 有 可能 是 一个 使用 了 内容 传输 编码 进行 编码 的 二进制 <unk> ）
parameters: name a string which is a valid <unk>, 参数 : name 一个 字符串 是 一个 " 的 ", 参数 : name 一个 有效 的 形状 名 字符串
supported ini file structure, 支持 的 的 文件 文件 结构, 受 支持 的 ini 文件 结构
<unk> and antoine pitrou, bpo <unk>, <unk> 和 antoine pitrou 在 bpo <unk> 中 贡献 。 ）, <unk> 和 antoine pitrou 在 bpo <unk> 中 贡献 。 ）
when a header parameter is encoded in rfc 2231 format, <unk> may return a 3 tuple containing the character set, language, and value, 当 一个 参数 的 的 参数 ， 在 任何 <unk> 的 ， ， ， 可以 可以 返回 " " " " " " " " " " " " ", <unk> rfc 2231 格式 来 编码 <unk> <unk> ， " message . get _ <unk> " 可能 返回 一个 包含 字符集 、 语言 和 值 的 3 元组
the following table gives an overview of the known <unk> and whether the various modules are <unk> to them., 以下 函数 定义 了 " 的 " 的 " 的 " ， " ， " 模块 的 目标 的 的 的 模块, 下表 概述 了 已知 的 攻击 以及 各种 模块 是否 容易 受到 攻击
to see how <unk> is implemented in terms of the descriptor <unk> here is a pure python <unk>, 要 请参阅 " <unk> ( ) " 在 在 " 中 的 " <unk> " ) " 是 是 python python python 是 python python, 要 了解 " property ( ) " 如何 根据 描述 器 协议 实现 ， 这里 是 一个 纯 python 的 等价 实现 如下 :
on failure, set an exception and return "null"., 在 失败 时 设置 一个 异常 并 返回 " null ", 在 失败 时 设置 一个 异常 并 返回 " null "
applications can use the <unk> function attribute to determine which case applies., 通过 使用 " 使用 " " _ <unk> ( ) " 函数 来 使用 " 来 处理, 应用程序 可以 使用 " rmtree . <unk> _ <unk> _ <unk> " 函数 属性 来 确定 <unk> 具体 是 哪 一些
pickles the record's attribute dictionary and writes it to the socket in binary format, 将 字典 中 属性 字典 并 将 其 将 二进制 格式 的 二进制 格式, 对 记录 的 属性 字典 执行 封存 并 以 二进制 格式 将 其 写入 套 接字
this variety of "nan" is quiet and, once created, will flow through other computations always resulting in another "nan", 这 <unk> 的 " <unk> " ， ， ， ， 在 其他 情况 下 其他 情况 下 其他 情况 下 的, 这样 的 " nan " 是 静默 产生 的 ， 并且 在 产生 之后 参与 其它 计算 时 总是 会 得到 " nan " 的 结果
return a string describing the class of the operand, 返回 一个 包含 的 类, 返回 一个 字符串 描述 运算 数 的 class
changed in version 3.5: added the <unk> parameter., 在 3.5 版 更改 : added the <unk> _ 形参 形参, 在 3.5 版 更改 : 添加 了 <unk> _ <unk> 形参
if there are positional arguments, there must be as many as there are items in <unk> they will be assigned as attributes of these names., 如果 有 参数 参数 必须 ， 则 必须 是 它们 的 的 的 它们 它们 被 作为 它们 的 的, 如果 有 位置 参数 ， 它们 必须 和 " t ._ fields " 中 的 元素 一样 多 ； 他们 会 像 这些 名字 的 属性 一样 被 赋值
resulting state <unk> state r flag r flag o flag o flag d flag d flag f flag f flag a flag a flag, 结果 状态 " " " 状态 " " " " , " 标记 标记 标记 旗标 旗标 旗标 旗标 旗标 旗标 旗标 旗标, 结果 状态 " <unk> " 状态 r 标记 r 标记 o 标记 o 标记 d 标记 d 标记 f 标记 f 标记 a 标记 a 标记
changed in version 3.2: added context manager support., 在 3.2 版 更改 : added 上下文 管理器 上下文 管理器, 在 3.2 版 更改 : 添加 了 上下文 管理器 支持
<unk> allows you to add or remove features by modifying the <unk> unchanged <unk> will not install or remove anything, " ' backslashreplace 允许 你 或 或 或 移除 的 的 ， ， " <unk> " " " " 不会 被 或 或 或, “ 修改 ” 允许 您 通过 修改 <unk> 来 添加 或 删除 功能 未 更改 的 <unk> 将 不会 安装 或 删除 任何 内容
leading whitespace is significant in python <unk>, <unk> 是 python 3.7 . 2 中 的 重要 ？, 请 注意 前导 空格 在 python 语句 中是 有 重要 作用 的 ！
<unk> is the event name as c string, <unk> is a "pyobject" pointer to a tuple object., " name " name " name c " " " " " 是 一个 " 一个 " " " " ", " <unk> " 是 事件 名称 的 c 字符串 ， " arg1 " 是 一个 指向 元组 对象 的 " pyobject " 指针
<unk> is a subclass of the built in "dict" class, " 内置 " 内置 " 的 " 子类 " 的 一个 子类, " defaultdict " 是 内置 " dict " 类 的 子类
changed in version 3.9: classes may be decorated with any valid <unk>, 在 3.9 版 更改 : 现在 可以 被 " 任意 " " " ", 在 3.9 版 更改 : 类 可 使用 任何 有效 的 " <unk> _ expression " 来 装饰
"html" hypertext markup language support, " 超文本 " 超文本 支持 语言 支持, " html " 超文本 标记 语言 支持
changed in version 3.4: <unk> parameter was added., 在 3.4 版 更改 : 增加 了 _ parameter _ was added ., 在 3.4 版 更改 : 添加 了 <unk> 形参
it is an error to call this function if the <unk> on the input bytes object is not one, 它 在 在 <unk> 上 ， 如果 没有 对象 ， 则 返回 " null " 对象, 如果 输入 字节 串 对象 的 引用 计数 不 为 <unk> 调用 此 函数 将 报错
<unk> is a list of names to <unk> and defaults to <unk> <unk>, <unk> 是 是 " 名称 的 名称 列表 的 默认值 为 " 为 " ' ", <unk> 是 需要 隐藏 的 文件名 列表 ， 且 默认 为 " [ os . <unk> , os . <unk> ] "
as <unk> to the <unk> <unk> method:, 作为 " <unk> ( ) " " " " <unk> " ) " 方法, 而 相应 的 更 简洁 更 <unk> 的 方法 是 这样 的 :
if seed is given, creates a new instance of the underlying random number generator, 如果 给出 是 一个 ， 则 " " " 实例 的 实例 实例, 当 给定 <unk> 时 ， 创建 一个 新 的 底层 随机数 生成器 实例
"argumentparser" objects allow the help formatting to be customized by specifying an alternate formatting class, " partial " 对象 ， 帮助 消息 的 消息 来 一个 类, " argumentparser " 对象 允许 通过 指定 备用 格式化 类 来自 定义 帮助 格式
a string <unk> <unk> the reason this error occurred, for example <unk>, 字符串 ' ' ' ' ' ' ' ' ' ' ' " ' " ' 的 的, 一个 字符串 形式 的 <unk> ， 用来 指明 发生 错误 的 原因 ， 例如 " <unk> _ verify _ <unk> "
when both mapping and <unk> are given and there are duplicates, the placeholders from <unk> take <unk>, 当 参数 和 非 <unk> 和 并且 从 ， 从 " <unk> " <unk> " <unk> " <unk> ", 当 同时 给出 mapping 和 <unk> 并且 存在 重复 时 ， 则 以 <unk> 中 的 占位 <unk> 优先
new in version 3.8: " <unk> argument enhanced to support ipv6, 3.8 新版 功能 : " <unk> " 参数 " 参数 " 支持, 3.8 新版 功能 : " <unk> " argument <unk> to support ipv6
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
replacing "os.popen()", "os.popen2()", "os.popen3()", 替代 " os . popen ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ) " , " os . popen3 ( ), 替代 " os . popen ( ) " , " os . popen2 ( ) " , " os . popen3 ( ) "
"ctypes" will create descriptor s which allow reading and writing the fields by direct attribute accesses, " 创建 创建 创建 创建 一个 可 创建 一个 的 的 ， 并 并 在 由 " 属性 " 属性 的 属性, " ctypes " 将 创建 <unk> ， 它 允许 通过 直接 属性 访问 来 读取 和 写入 字 段
if you want to parse python code into its ast representation, see <unk>, 如果 你 想 python 代码 代码 代码 代码 ， 它 " " " ' " ' ", 如果 您 想 分析 python 代码 的 ast 表示 ， 请参阅 " ast . parse ( ) "
the <unk> structure got a new <unk> field, " <unk> " 结构 体 了 一个 新 的 的 新 的 ", " <unk> " 结构 体 添加 了 一个 新 的 cf _ feature _ version 字 段
when you have done this, you can <unk> your application without requiring your users to install python., 当 你 你 你 你 你 你 你 你 你 你 的 你 的 你 的 你 的 安装, 完成 此 操作 后 ， 您 可以 分发 应用程序 ， 而 无需 用户 安装 python
so, if that data is needed later, it should be stored as a <unk>, 如果 如果 data 的 ， ， 则 它 将 被 当作 为 为, 因此 如果 稍后 还 需要 返回 结果 ， 可 保存 为 列表 ：
changed in version 3.3: in version 3.2, "strftime()" method was restricted to years > <unk>, 在 3.3 版 更改 : 在 " " ( ) " 方法 之前 to 为 " 0 ", 在 3.3 版 更改 : 在 版本 3.2 中 ， " strftime ( ) " 方法 只 限于 <unk> > 1000
subclasses of this class are documented in section <unk> subclasses and <unk> operation with web <unk>, 此 方法 的 行为 是 在 " " " " " " " " " 和 " " " " " " " " " " ", 子类 的 文档 位于 段落 <unk> <unk> and co <unk> with web <unk>
allows opening for read or <unk> text or binary through supported <unk> <unk> <unk> <unk> <unk>, 允许 读取 读取 读取 或 或 或 二进制 二进制 （ 二进制 ） ） 的 ） ）, 允许 通过 支持 的 模式 打开 用于 读取 或 写入 文本 或 二进制 数据 : ' r ' , ' w ' , ' rb ' , ' <unk> '
for example, the code, "if key in mapping: return <unk> can fail if another thread removes key from mapping after the <unk> but before the lookup, 例如 ， " 的 " 的 " ， " 返回 " " " ， 如果 在 在 " 中 ， " " " " " " " " " " " " " ", 例如 ， 以下 代码 " if key in mapping : return mapping [ key ] " 可能 由于 在 检查 操作 之后 其他 线程 从 mapping <unk> 除了 key 而 出错
"abc" abstract base classes, " abc " 抽象 基类, " abc " 抽象 基类
a generator expression is a compact generator notation in <unk>, 一个 表达式 表达式 表达式 是 一个 一个 " datetime " 对象 的 一个, 生成器 表达式 是 用 圆括号 括 起来 的 紧凑 形式 生成器 标注
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
(contributed by <unk> j, （ 由 <unk> <unk> 贡献 。 ）, （ 由 <unk> j
class that <unk> a string object, 该类 " <unk> . string " 对象, 模拟 一个 字符串 对象
instances of this exception provide three interesting attributes: "msg" is a textual explanation of the error, "filename" is the name of the source file, and <unk> gives the line number on which the error was found., 这个 方法 的 行为 提供 了 两个 ， ， " " " " 是 一个 的 的 ， ， ， 是 由 <unk> 的 的 的, 此 异常 的 实例 提供 了 三个 有用 属性 : " msg " 为 错误 的 文本 说明 ， " filename " 为 源文件 的 名称 ， 而 " <unk> " 给出 了 错误 所在 的 行号
implicitly continued lines can carry comments, 隐式 的 行 都 可以 被, 隐式 的 行 拼接 可以 带有 注释
the <unk> is the type used for dictionaries that are read from the plist file., <unk> 是 从 从 从 的 的 的 的 的 的, dict _ type 为 字典 用来 从 plist 文件 读取 的 类型
creating a struct object once and calling its methods is more efficient than calling the "struct" functions with the same format since the format string only needs to be compiled once., 创建 一个 对象 对象 " __ ( ) " 方法 与 方法 方法 方法 方法 与 " 的 " 方法 的 的 方法 ， 其 方法 将 被 用来 的 的, 一次性 地 创建 struct 对象 并 调用 其 方法 相比 使用 同样 的 格式 调用 " struct " 函数 更为 高效 ， 因为 这样 格式 字符串 只 需 被 编译 一次
changes in the c api, c api 的 改变, c api 中 的 改变
for example: <unk> y for x in <unk> for y in <unk> <unk>, 例如 : x x x x x 的 " <unk> " in " 中 的 " <unk> " 中 的 ", 例如 : " ( x y for x in range ( 10 ) for y in range ( x , x + 10 ) ) " .
receive a message, calculate the digest of the message using <unk> as the key, and then send the digest <unk>, <unk> 使用 " 使用 " " " 的 的 的 ， 然后 ， 然后 然后 将 <unk> <unk>, 接收 一条 信息 ， 使用 authkey 作为 键 计算 信息 摘要 ， 然后 将 摘要 发送 <unk>
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
key is an already open key, or one of the predefined hkey_ constants., key 为 某个 已经 打开 的 键 ， 或者 预定 义 的 hkey _ 常量 之一, key 为 某个 已经 打开 的 键 ， 或者 预定 义 的 hkey _ 常量 之一
this <unk> that most <unk> of a long sequence can never be generated, 这 意味着 最 大多数 最 的 的 序列 ， 可以 可以 被, 这 意味着 长 序列 的 大多数 排列 永远 不会 产生
this function does not check whether the data points are at least interval <unk>, 此 函数 不 不 数据 数据 的 数据 的 被 执行, 此 函数 不会 <unk> 点 之间 是否 至少 <unk> <unk> 的 距离
to change it for all <unk> for example if you want all logging times to be shown in <unk> set the <unk> attribute in the "formatter" class., 要 所有 所有 所有 你 ， 如果 你 希望 在 你 中 所有 你 的 所有 中 的 所有 中 中 的 " " " " " " ", 要 为 所有 格式化 程序 更改 此项 ， 例如 当 你 希望 所有 日志 时间 都 显示 为 <unk> ， 请 在 " formatter " 类中 设置 " converter " 属性
using python on unix platforms, 在 unix 上 使用 python 使用, 在 unix 平台 中 使用 python
returns "false" for broken symbolic links, 返回 " 返回 " 的 的 的, 对于 失效 的 符号 链接 ， 返回 " false "
determine whether code is in <unk> <unk> ascii control <unk>, 确定 是否 是否 是否 是否 是否 会 被 控制 控制, 确定 code 是否 属于 <unk> . 2 ( 非 ascii 控制字符 )
errors is an optional string that specifies how encoding and decoding errors are to be <unk> cannot be used in binary mode, errors 是 可选 的 可选 的 字符串 ， 编码 格式 编码 格式 编码 格式 二进制 模式, errors 是 一个 可选 的 字符串 参数 ， 用于 指定 如何 处理 编码 和 解码 错误 这 不能 在 二进制 模式 下 使用
end of lines are automatically included in the string, but it's possible to prevent this by adding a "\" at the end of the line, 行 的 在 在 <unk> 中 ， 但 ， 但 在 <unk> 的 的 ， ， ， ， 在 在 的 的, 字符串 中 的 回车 换行 会 自动 包含 到 字符串 中 ， 如果 <unk> 包含 ， 在 行尾 添加 一个 " \ " 即可
the first four lines correspond to the arguments of the <unk> method., 第一个 参数 的 参数 参数 参数 参数 的 参数, 开头 的 <unk> 对应 " screen . setup ( ) " 方法 的 参数
the object must not be "null"; if you aren't sure that it isn't "null", use <unk>, 如果 必须 是 如果 你 ， 则 它 ， 它 使用 " " " " " " " ", 对象 必须 不 为 " null " ； 如果 你 不 确定 它 不 为 " null " ， 可 使用 " py _ <unk> ( ) "
the flags parameter should be a bitwise or of <unk> <unk> and <unk>, 形参 形参 是 一个 " " " " " " " " " " " " " " ", flags 形参 应当 " os . o _ append " , " os . o _ <unk> " 和 " os . o _ text " 按位 or 的 结果
when maxsplit is nonzero, at most maxsplit <unk> will be made, and the remainder of the string is returned as the final element of the list, 当 执行 时 ， ， 时 ， 将 被 被 为 字符串 ， 并 将 返回 字符串 返回 的 元素, 当 maxsplit 非 零时 ， 将 最 多 进行 maxsplit 次 拆分 ， 并且 字符串 的 其余部分 将 作为 列表 的 最后 一个 元素 返回
in order to correctly <unk> with the abstract base class <unk> the descriptor must identify itself as abstract using <unk>, 为了 为了 <unk> ， 抽象 基类 的 类 ， ， 必须 必须 必须 必须 为 " " " " ", 为了 能 正确 地 与 抽象 基类 机制 实现 <unk> ， 描述符 必须 使用 " __ <unk> __ " 将 自身 标识 为 抽象 的
if, after 10 <unk> the bytes cannot be <unk> "oserror" is raised., （ 之后 ， 之后 ， ， 字节 字节 ， 不能 的 " oserror ", 如果 在 10 次 尝试 后 字节 数据 仍 无法 被 锁定 ， 则 会 引发 " oserror "
using lists as queues, 使用 作为 栈 的, 列表 作为 队列 使用
the "fractions" and "decimal" modules make these calculations <unk>, " 的 " 和 " 模块 导入 模块 导入 导入 :, " fractions " 和 " decimal " 模块 <unk> 进行 此类 计算 更加 容易 :
to allow users to easily install a <unk> copy of python without the test <unk> you could provide a shortcut with the following command, 要 允许 安装 安装 安装 安装 ， python python 程序 的 的 ， ， 你 可以 你 提供 了 以下 代码 的, 要 允许 用户 在 没有 测试 套件 的 情况 下 轻松 安装 python 的 <unk> 副本 ， 可以 使用 以下 命令 提供 快捷方式
changed in version 3.7: default value of repeat changed from 3 to <unk>, 在 3.7 版 更改 : repeat of 从 from " from . <unk> ( ) ", 在 3.7 版 更改 : repeat 的 默认值 由 3 更 改为 5
most functions that return a reference to an object pass on ownership with the reference, 大多数 函数 返回 返回 一个 引用 的 引用 引用 的 引用 对象 的 引用 对象, 大多数 函数 返回 一个 对象 的 引用 ， 并 传递 引用 拥有 关系
"\w" matches any non alphanumeric <unk> this is equivalent to the class <unk> <unk> <unk> <unk>, 如果 " 任何 非 非 的 （ 例如 " <unk> " " " " " " " " " " " " " ", " \ w " 匹配 任何 非 字母 与 数字 字符 ； 这 相当于 类 " [ ^ a <unk> <unk> 9 _ ] "
reserved classes of identifiers, 保留 的 标识符 类, 保留 的 标识符 类
the frame argument must not be "null"., 参数 参数 必须 为 " null ", frame 参数 必须 不 为 " null "
the class which implements the sequence behavior provided by the module is available for subclassing as <unk>, 该类 " 实现 " 模块 的 的 的 的 的 " <unk> " " " " " ", 此 模块 所 提供 的 实现 了 序列 行为 的 类 同样 也 可 用于 子 类化 ：
"shutil" high level file operations, " shutil " 高阶 文件 操作, " shutil " 高阶 文件 操作
the line number, for the first instruction of each line, 第一行 的 第一个 第一个 的 的 第一个, 行号 ， 用于 <unk> 的 <unk> 指令
changed in version 3.8: previously, zip archives with an archive comment were not supported., 在 3.8 版 更改 : 添加 了 " ' " ， " 支持 " 支持, 在 3.8 版 更改 : 以前 ， 不 支持 带有 档案 注释 的 zip 档案
returns the o converted to an integer object on success, or "null" on failure, 返回 o 的 一个 返回 一个 对象 ， 返回 返回 " null " null " null ", 成功 时 返回 o 转换 为 整数 对象 后 的 结果 ， 失败 时 返回 " null "
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
the following functions are available for instances of "set" or its <unk> but not for instances of "frozenset" or its <unk>, 以下 函数 是 " " " ( ) " 或 " 实例 或 " 类型 或 " 或 " 类型 的 " 类型, 下列 函数 适用 于 " set " 或 其子 类型 的 实例 ， 但 不可 用于 " frozenset " 或 其子 类型 的 实例
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
also, a strict reading of the original <unk> rfc <unk> standard calls for a two digit year <unk> rather than <unk> but practice moved to 4 digit years long before the year <unk>, 此外 " <unk> " 的 " 的 " 的 " ， ， ， 的 的 " ， ， ， 的 " ， ， ， ， ， ， 但 ， 但 " ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， ， <unk>, 此外 ， 严格 的 <unk> 年 原始 rfc <unk> 标准 要求 <unk> 的 年份 （ % y 而 不是 % y ） ， 但是 实际 在 2000 年 之前 <unk> 就 <unk> 到 了 4 位数 年
the memory could be a <unk> constant array in a c <unk> it could be a raw block of memory for manipulation before passing to an operating system library, or it could be used to pass around structured data in its <unk> in memory format., 内存 可以 是 一个 c c 一个 c c 一个 c ， ， 它 可以 在 一个 " ， " ， 它 可以 在 内存 的 内存 中 ， 它 可以 在 在 内存 中 使用 的 内存 中, 内存 可以 是 c 扩展 中 的 一个 大 的 常量 数组 ， 也 可以 是 在 传递 到 操作系统 库 之前 用于 操作 的 原始 内存 块 ， 或者 可以 用来 传递 本 机 内存 格式 的 结构化 数据
if an instance's dictionary has an entry with the same name as a non data descriptor, the dictionary entry takes <unk>, 如果 一个 字典 字典 具有 与 字典 的 的 字典 ， 字典 字典 的 字典 字典 字典 字典 字典, 如果 实例 的 字典 具有 与非 数据 描述 器 同名 的 条目 ， 则 该 字典 条目 优先
in that case, <unk> will add "__setattr__()" and "__delattr__()" methods to the class, 在 " " " " " " " " " " " 的 类 的 方法 将 其 方法, 在 这种 情况 下 ， 数据 类 将 向 类 添加 " __ setattr __ ( ) " 和 " __ delattr __ ( ) " 方法
if you choose to use these attributes in logged <unk> you need to <unk> some care, 如果 你 想要 使用 " 属性 " 来 使用 " 来 你 你 的 一些 一些, 如果 在 已 记录 的 消息 中 使用 这些 属性 ， 则 需要 <unk> 小心
changed in version 3.2: the creation of a "logrecord" has been made more <unk> by providing a factory which is used to create the record, 在 3.2 版 更改 : the 一个 " <unk> " __ " __ ( ) " 方法 ， 它 提供 了 一个 类 的, 在 3.2 版 更改 : 通过 提供 用于 创建 记录 的 工厂 方法 已 使得 " logrecord " 的 创建 更 易于 配置
port specific changes: freebsd, 特定 于 的 的 函数 ：, 特定 于 freebsd 的 更改 ：
<unk> general calendar related functions, " <unk> " " " 的 " pickle 函数, " calendar " 日历 相关 函数
<unk> http protocol client, " http . client " http 协议 客户端, " http . client " http 协议 客户端
the normal form <unk> <unk> will apply the compatibility <unk> i.e. replace all compatibility characters with their equivalents, " " " " " " " " 将 将 将 将 被 移除 的 所有 <unk> 所有 的 的, 正规 形式 <unk> （ <unk> ） 将 应用 兼容性 分解 ， <unk> 其 等价 项 替换 所有 兼容性 字符
it should yield a mutable sequence object (such as a list), 它 应当 一个 序列 对象 序列 对象 的 对象, 它 应当 产生 一个 可变 序列 对象 （ 例如 列表 ）
return a bytes object which is a printable representation of the character ch, 返回 一个 字节 串 对象 ， 返回 一个 对应 的 的 bytes " bytes ", 返回 一个 字节 串 对象 作为 字符 ch 的 可 打印 表示 形式
these strings may contain replacement fields, which are expressions delimited by <unk> braces <unk>, 这些 字符串 可能 包含 包含 的 的 的 字 段 由 <unk> <unk> 的 的, 这种 字符串 可 包含 替换 字 段 ， <unk> " { } " 标示 的 表达式
raise an exception and return " 1" on <unk> return "0" on success, 引发 异常 并 并 返回 " null " 并 返回 " null ", 失败 时会 引发 异常 并 返回 " 1 " ； 成功 时 返回 " 0 "
create a shared <unk> object and return a proxy for it., 创建 一个 共享 " 对象 " 对象 " 对象 并 返回 一个 代理 代理, 创建 一个 共享 的 " threading . semaphore " 对象 并 返回 它 的 代理
what's new in python 2.0, python 有 什么 新 变化, python 2.0 有 什么 新 变化
tk widget <unk> support a document introducing <unk> support for tk, " tkinter . <unk> _ <unk> ( ) " 支持 支持 的 支持 <unk> 支持, tk <unk> <unk> support 一份 文档 介绍 tk 支持 的 主题
note that the global side effect on "sys.stdout" means that this context manager is not suitable for use in library code and most threaded applications, 请 注意 的 的 的 " " " 意味着 ， 上下文 上下文 管理器 在 库 代码 代码 中 的 代码, 需要 注意 的 点 在于 ， " sys . stdout " 的 全局 副作用 意味着 此 上下文 管理器 不 适合 在 库 代码 和 大多数 多线程 应用程序 中 使用
it is simple to write a function that returns a list of the numbers of the fibonacci <unk> instead of printing it:, 它 简单 是 一个 简单 的 函数 ， 返回 返回 列表 的 列表 列表, 写 一个 返回 斐波 那契 数列 的 列表 （ 而 不是 把 它 打印 出来 ） 的 函数 ， 非常简单 :
the argument may be a floating point number to indicate a more precise sleep time, 参数 可以 是 浮点数 浮点数 表示 的 时间 的 时间, 参数 可以 是 浮点数 ， 以 指示 更 精确 的 <unk> 时间
make "\w", "\w", "\b", "\b" and case insensitive matching dependent on the current locale instead of the unicode <unk>, 与 " " " " " " " 和 " " " ， " " " " " " " " " " " " " " " ", 使 " \ w " 、 " \ w " 、 " \ b " 、 " \ b " 和 大小写 敏感 匹配 依赖于 当前 区域 而 不是 unicode 数据库
<unk> is <unk> to 0, <unk> 为 " <unk> . <unk> " <unk> 为 0, " <unk> _ <unk> " 会 强制 设 为 0
<unk> style bytes formatting, " curses . <unk> " 的 字节, " printf " 风格 的 字节 串 格式化
an <unk> literal yields a complex number with a real part of <unk>, " ' f ' " ' " ' 表示 的 的 的 的 的 的, 一个 <unk> 数字 面值 将 生成 一个 <unk> 为 0.0 的 复数
the non date components of the datetime are populated with their normal default values, 非 的 的 的 的 的 的 的 的 默认值, 该 datetime 对象 的 非 日期 部分 将 使用 其 标准 默认值 来 填充
resize the stream to the given size in bytes (or the current position if size is not <unk>, 根据 给定 的 字节 大小 的 大小 ， 如果 当前 位置 ， 则 如果 <unk>, 将流 的 大小 调整 为 给定 的 size 个 字节 （ 如果 未指定 size 则 调整 至 当前 位置 ）
useful when the object is created by a call to an object constructor in the argument list., 当 调用 对象 对象 被 调用 对象 创建 一个 对象 的 对象 对象 对象 传入 对象 对象, 当 通过 调用 参数 列表 中 的 对象 构造 器 <unk> 时 很 实用
to support <unk> the python api <unk> programmers <unk> defines a set of functions, macros and variables that provide access to most aspects of the python run time system, 为了 支持 支持 python python api " python " " " " " " 定义 了 一些 ， ， 的 的 接口 ， ， python 的 的 的 的, 为了 支持 扩展 ， python api （ 应用程序 编程 接口 ） 定义 了 一系列 函数 、 宏 和 变量 ， 可以 访问 python 运行 时 系统 的 大部分 内容
(contributed by dong hee na in bpo <unk>, （ 由 dong hee na 在 bpo <unk> 中 贡献 。 ）, （ 由 dong hee na 在 bpo <unk> 中 贡献 。 ）
this is the equivalent of the python statement "o1 <unk> o2"., 这 相当于 python 语句 " o1 " o2 ", 等价 于 python 语句 " o1 / / o2 "
the default is the mode of fileobj if <unk> otherwise, the default is "'rb'", 默认 是 " default _ default _ default _ default _ default _ default _ default _ default _ default _ default _ default ", 如果 可 识别 则 默认 为 fileobj 的 模式 ； 否则 默认 为 " ' rb ' "
the file may not be <unk> or <unk>, 文件格式 可能 被 或 或 或 或, 文件 不能 重命名 或 删除
parameters: size an integer or "none", 参数 : fun 一个 整型 数 或 " none ", 参数 : size 一个 整型 数值 或 " none "
to get <unk> style linked lists, you can emulate <unk> <unk> using <unk>, 要 <unk> <unk> 的 ， ， ， 你 可以 可以 使用 " <unk> _ <unk> ( ) " 可以 使用 " <unk> _ <unk> ( ) ", 要 获取 <unk> 样式 的 列表 ， 可以 使用 元组 模拟 <unk> 单元 ：
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
(contributed by kyle <unk> in bpo <unk>, （ 由 kyle stanley 在 bpo <unk> 中 贡献 。 ）, （ 由 kyle stanley 在 bpo <unk> 中 贡献 。 ）
make an iterator that filters elements from iterable returning only those for which the predicate is "false", 创建 一个 迭代 器 ， 返回 一个 迭代 器 ， 返回 一个 返回 的 的 的 的, 创建 一个 迭代 器 ， 只 返回 iterable 中 predicate 为 " false " 的 元素
examples of working with "datetime" objects:, 使用 " asyncio " 的 示例 :, 使用 " datetime " 对象 的 例子 ：
one can also suppress the normal shell main module restart, 可以 还 还 模块 模块 级 模块 的 模块, 用户 也 可以 禁用 通常 的 shell 主 模块 重启
the initial expression in a list comprehension can be any arbitrary expression, including another list comprehension., 在 表达式 中 的 表达式 列表 可以 可以 任意 任意 任何 列表 ， 因此 列表 列表, 列表 推导 式 中 的 初始 表达式 可以 是 任何 表达式 ， 包括 另 一个 列表 推导 式
python defines two types of packages, regular packages and namespace packages, python 定义 了 两个 类型 和 和 、 、 和 命名 空间, python 定义 了 两种 类型 的 包 ， 常规 包 和 命名 空间 包
the install command ensures that the build commands have been run and then runs the <unk> <unk> , <unk> and <unk> ., 安装 命令 命令 命令 构建 命令 命令 命令 运行 运行 ， 然后 ， 然后 <unk> <unk> <unk> <unk> <unk>, install 命令 会 确保 build 命令 已经 运行 ， 然后 运行 子 命令 install _ lib , install _ data 和 install _ scripts
allocates n bytes and returns a pointer of type "void " to the allocated memory, or "null" if the request fails., 以 n 字节 字节 返回 返回 " " " " " " " " " " " " null " ， 如果 如果 失败 ， 如果 " null ", 分配 n 个 字节 并 返回 一个 指向 分配 的 内存 的 " void " 类型 指针 ， 如果 请求 失败 则 返回 " null "
returns the current value of the <unk>, 返回 当前 的 值 的 值, 返回 <unk> 当前 值
<unk> bytecode counter by delta ., " <unk> " <unk> ( ) " 的 的 的, 将 字节 码 计数器 的 值 增加 <unk>
when an event <unk> other events for execution, they are scheduled into the future, so they can easily go into the heap, 当 事件 事件 的 事件 ， ， 事件 的 事件 ， ， ， ， ， ， 它们 将 导致 会 被 一次, 当 一个 事件 将 其他 事件 排入 执行 计划 时 ， 它们 的 调试 时间 向 未来 方向 <unk> ， 这样 它们 可 方便 <unk> 堆
this method is called when an unrecognized declaration is read by the parser., 当 方法 调用 调用 时 ， 调用 时 被 调用, 当 解析器 读 到 无法 识别 的 声明 时 ， 此 方法 被 调用
they are deprecated in python 3.2 or older, 它们 python python python 的 ， ， 或者, 这些 函数 自 python 3.2 或 更 <unk> 已 被 弃用
changed in version 3.7: start and end are now <unk> to behave like <unk>, 在 3.7 版 更改 : this <unk> are now now <unk> to <unk> <unk> <unk> ., 在 3.7 版 更改 : start and end are now <unk> to <unk> like " str [ start : end ] " .
the bottom 8 bits are the character <unk> and upper bits are the attributes., 最 的 两个 <unk> 字符 字符 字符 的 的 ， 并且 不 是, 下面 的 8 个 比特 <unk> 字符 本身 ， 上面 的 比特 <unk> 为 属性
return the current <unk> object, corresponding to the <unk> thread of control, 返回 当前 当前 对象 的 的 的 的 的 线程 的 线程, 返回 当前 对应 调用者 的 控制线 程 的 " thread " 对象
if empty, the package <unk> something which is almost equivalent to specifying the date format string <unk> <unk> <unk> <unk>, 如果 ， <unk> 的 的 ， ， 则 会 相当于 会 被 指定 格式 字符串 格式 字符串 " " " " " ", 如果 为空 ， <unk> 将 替换 任何 接近 于 日期 格式 字符串 " ' % y % m % d % h : % m : % s ' " 的 内容
avoiding side effects means not using data structures that get updated as a program <unk> every function's output must only depend on its input., 另 一个 不 使用 不 数据 的 ， ， ， <unk> 的 <unk> 的 的 的 ， ， 仅 在 必须 仅 在 仅 仅 仅 仅 仅, 消除 副作用 意味着 不能 使用 随 <unk> 而 更新 的 数据结构 ； 每个 函数 的 输出 必须 只 依赖于 输入
the "string" module includes a <unk> <unk> class with a simplified syntax suitable for editing by end users, " 模块 " 模块 提供 了 一个 模块 的 类 类 的 类 的 的 的 的 语法 的 的, " string " 模块 包含 一个 通用 的 " <unk> " 类 ， 具有 适用 于 <unk> 的 简化 语法
used to <unk> <unk> times during a repeated interval, 用于 <unk> <unk> <unk> 的 <unk> <unk> <unk>, 用于 在 重复 的 <unk> 中 消除 边界 时间 歧义
a dictionary display is a possibly empty series of <unk> pairs enclosed in <unk> <unk>, 字典 字典 是 一个 字典 ， " " " " " " " " " " " " " " " " " ", 字典 显示 是 一个 <unk> 括号 括 起来 的 可能 为空 的 键 / 数据 对 系列 :
return successive r length <unk> of elements in the iterable ., 返回 长度 的 长度 长度 的 元素 元素, 连续 返回 由 iterable 元素 生成 长度 为 r 的 排列
create a <unk> object from v , or "null" on failure., 创建 对象 在 从 对象 中 ， 如果 对象 ， 失败 时 返回 " null ", 根据 v 创建 一个 " <unk> " 对象 ， 失败 时 返回 " null "
look up the codec for the given encoding and return its "streamreader" class or factory function., 查找 给定 的 编码 并 返回 其 类 或 类 或 工厂 函数, 查找 给定 编码 的 编解码器 并 返回 其 " streamreader " 类 或 工厂 函数
the default implementation <unk> to <unk> and <unk>, 默认 实现 " <unk> " " " " " " " " " " " ", 默认 实现 会 <unk> " <unk> ( ) " 和 " <unk> ( ) "
these documents are generated from <unk> sources by <unk> a document processor specifically written for the python documentation., 这些 这些 从 从 从 python 的 的 <unk> python python python python 的, 这些 文档 生成 自 <unk> 原 文档 ， 由 <unk> （ 一个 专门 为 python 文档 写 的 文档 生成器 ） 创建
note that the default <unk> method can be overridden in a "tzinfo" subclass to affect the result returned by <unk>, 请 注意 ， 默认 情况 下 " " " " " " " " " " " " 的 " ， " 返回 " " ( ) " 返回 的 结果, 请 注意 默认 的 " tzinfo . <unk> ( ) " 方法 在 " tzinfo " 的 子类 中 可以 被 重载 ， 从而 影响 " <unk> ( ) " 的 返回 结果
<unk> is an optional sequence of file descriptors to keep open between the parent and child, " 是 可选 的 可选 的 的 的 的 ， ， ， 并 将 被 和 和 之间, pass _ fds 是 一个 可选 的 在 <unk> 进程 间 保持 打开 的 文件 描述符 序列
this is a measure of the power in an audio <unk>, 这是 一个 帧 中 的 的 的 的, 测量 音频 信号 的 <unk>
the coroutine then has a chance to clean up or even <unk> the request by <unk> the exception with a "try" ... ... "except <unk> ... "finally" block, 协程 将 被 用于 到 或 或 或 的 的 ， ， " " " " " " " " " " " " " " " " " " " ", 协程 在 之后 有 <unk> 进行 清理 甚至 使用 " try " ... ... " except cancellederror " ... " finally " 代码 块 <unk> 异常 来 <unk>
replacing /bin/sh shell command substitution, 替代 / bin / sh shell 命令, 替代 / bin / sh shell 命令 替换
after all exit handlers have had a chance to run the last exception to be raised is re raised., 在 所有 所有 退出 都 都 会 被 引发 的 异常 ， 将 被 引发 的 异常, 在 所有 exit 处理程序 获得 运行 <unk> 之后 ， 所 引发 的 最后 一个 异常 会 被 重新 引发
set class that keeps weak references to its elements, 设置 指定 的 弱 的 弱 引用 的 元素, 保持 对 其 元素 弱 引用 的 集合 类
a future is done if it was cancelled or if it has a result or an exception set with <unk> or <unk> calls., 如果 future 已经 被 或 或 或 或 或 或 或 异常 ， 则 抛出 " " " " " 异常 设置 " 异常, 如果 future 为 取消 或 调用 " set _ result ( ) " 设置 了 结果 或 调用 " set _ exception ( ) " 设置 了 异常 ， 那么 它 就是 完成
where t is the total number of elements in both sequences, and m is the number of matches, this is 2.0 m / t, 其中 为 为 整数 的 元素 ， 元素 为 元素 ， 为 <unk> 的 的 的, 其中 t 是 两个 序列 中 元素 的 总 数量 ， m 是 匹配 的 数量 ， 即 2.0 m / t
disable the import of the module "site" and the site dependent <unk> of "sys.path" that it <unk>, " 模块 " 模块 " 模块 和 " " " " 的 " 的 " 的 " 的 ", 禁用 " site " 的 导入 及其 所 附带 的 基于 <unk> 对 " sys . path " 的 操作
font font specifier tuple <unk> size, <unk> name unique font name exists self points to existing named font if true, 修改 ， " ( ( ) , " ) , " ) " ， ， 将 返回 " 的 " 的 的 的 ， 如果 如果 的 的 参数, <unk> 字体 指示 符 元组 ( family , size , <unk> ) name 唯一 的 字体 名 <unk> 指向 现有 命名 字体 （ 如果 有 ）
once the file is closed, any operation on the file (e.g. reading or <unk> will raise a "valueerror"., 一旦 文件 被 任何 任何 文件 的 文件 文件 或 文件 或 文件 或 " <unk> . <unk> ( ) " 将 引发 " valueerror ", 文件 关闭 后 ， 对 文件 的 任何 操作 （ 例如 读取 或 写入 ） 都 会 引发 " valueerror "
it returns the filename of the library file., 它 返回 的 的 的 名称, 返回 库 文件 的 文件名
compute the inverse cumulative distribution function, also known as the <unk> function or the <unk> point function, 与 <unk> 的 的 ， ， 还 ， <unk> 函数 " 函数 " 函数 " 函数 " 函数 " 函数 " 函数, 计算 反向 累积 分布 函数 ， 也 称为 分 位数 函数 或 <unk> 函数
using it with arguments for changing the selection was deprecated in python 3.6, 使用 使用 参数 参数 ， 在 参数 中 使用 的 python 的 python, 带 参数 调用 该 方法 来 改变 选择 在 python 3.6 中 已弃 用
if the destination is an existing directory, then src is moved inside that directory, 如果 目标 为 一个 ， 则 ， 则 会 被 取消 ， 则 将 被 取消, 如果 目标 是 已 存在 的 目录 ， 则 src 会 被 移至 该 目录 下
return "0" on success or " 1" on failure, 成功 时 返回 " 0 " ， 失败 时 返回 " 1 ", 成功 时 返回 " 0 " ， 失败 时 返回 " 1 "
most of the examples in this section refer to a turtlescreen instance called <unk>, 在 本节 中 的 例子 中 的 的 例子 :, 本节 中 的 大部分 示例 都 使用 turtlescreen 类 的 一个 实例 ， 命名 为 " screen "
it is not possible to change the encoding or newline if some data has already been read from the stream, 它 不 被 改变 ， 或 编码 的 数据 ， 从 读取 读取 读取 读取, 如果 已经 有 数据 从流 中 被 读取 则 将 无法 再 改变 编码 格式 <unk> 结束符
<unk> <unk> is a <unk> wrapped binding to the qt toolkit, " <unk> . <unk> _ <unk> 是 是 <unk> <unk> <unk> <unk> <unk>, <unk> <unk> 是 一个 针对 qt 工具集 通过 <unk> 包装 的 绑定
changed in version 3.5: added support for passing file descriptor to this function., 在 3.5 版 更改 : 添加 了 对 " 文件 的 的 函数 将 添加 此 函数, 在 3.5 版 更改 : added support for <unk> file <unk> to this function .
instead of nested entities it repeats one large entity with a couple of <unk> <unk> over and over again, 嵌套 ， 嵌套 ， 它 它 可以 是 一个 <unk> 的 的 的 的 的 的 的, 它 不是 嵌套 实体 ， 而是 <unk> 又 <unk> 地 重复 一个 具有 <unk> 字符 的 大型 实体
returns non zero if the object implements the garbage collector <unk> otherwise returns 0., 如果 对象 对象 的 对象 （ 如果 垃圾 回收 ， 返回 " true " ， 否则 返回 " true ", 如果 对象 实现 了 垃圾 回收 器 协议 则 返回 非零值 ， 否则 返回 0
use <unk> when using pipes to avoid that., 使用 " 使用 " 使用 " 使用 " 来 避免 避免, 当 使用 管道 <unk> " popen . communicate ( ) " 来 <unk> 它
others of a more general utility are defined here, 将 一个 定义 的 定义 的 定义 定义 定义 定义, 其他 更为 通用 的 则 定义 在 这里
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
exchanging objects between processes, 在 进程 之间 交换 对象, 在 进程 之间 交换 对象
indicates the exponent is larger than <unk> after rounding has occurred, 如果 指数 被 舍入 后 后 后 后 舍入 被 舍入, 表明 在 发生 舍入 之后 的 指数 大于 " <unk> "
if denominator is "0", it raises a <unk>, 如果 为 为 " 则 引发 " 引发 " 引发 ", 如果 denominator 为 " 0 " 将会 引发 " <unk> "
either 0 or 1 in the native or standard <unk> representation will be <unk> and any non zero value will be "true" when unpacking., 或者 在 标准 或 或 或 或 或 标准 的 标准 的 ， 被 被 被 为 零 ， 并且 在 非 零 的 被 被, <unk> 或 标准 bool 类型 表示 的 0 或 1 将 被 打包 ， 任何 非零值 在 解包 时 将 为 " true "
this can be useful for comparison to json inputs during <unk>, 这 可以 对 对 比较 的 的 的 的, 这 在 调试 期间 与 json 输入 进行 比较 时会 很 有用
"pprint" data pretty printer, " pprint " 数据 美化 输出, " pprint " 数据 美化 输出
"str" is the built in string class, " frozenset " 内置 内置 内置 的 内置, " str " 是 内置 字符串 class
<unk> <unk> file handle, " <unk> _ <unk> 文件 文件, <unk> 的 <unk> 文件 句柄
all unary arithmetic and bitwise operations have the same <unk>, 所有 运算 和 和 运算 运算 操作 相同 的 相同, 所有 算术 和 位 运算 具有 相同 的 优先级 :
the func will be passed to <unk> for each <unk> before its "run()" method is called., 将 被 传递 给 " <unk> ( ) " 的 每个 调用 " 调用 " ) " 方法 会 被 调用, 在 每个 线程 的 " run ( ) " 方法 被 调用 前 ， func 会 被 传递 给 " sys . <unk> ( ) "
see <unk> for more information., 请参阅 " email . 更 多 信息, 查看 " <unk> . < protocol > _ response ( ) " 以 获取 更 多 信息
the "try" ... "except" statement has an optional else clause , which, when present, must follow all except clauses, " try " " " 语句 包含 一个 可选 的 可选 的 " " " " " " " " 时 ， " 必须 " " " ", " try " ... " except " 语句 有 一个 可选 的 else 子句 ， 在 使用 时 必须 放在 所有 的 except 子句 后面
optimized <unk> for the case when the other set is much larger than the base set, 如果 当前 其他 的 的 的 的 的 的 的 ， 则 将 被 设置 为, 当 另 一 集合 <unk> 基础 集合 的 情况 下 优化 了 " <unk> _ update ( ) " 的 性能
wrap the <unk> coroutine into a <unk> and <unk> its execution, 将 " coroutine _ <unk> ( ) " 和 一个 <unk> <unk> 的 其 其 执行, 将 <unk> 协程 打包 为 一个 " task " 排入 <unk> 准备 执行
add a section named section to the instance, 添加 到 的 的 的 名称, 向 实例 添加 一个 名为 section 的 节
this is useful if you want to match an arbitrary literal string that may have special characters in it, 如果 你 想要 希望 的 任何 字符串 ， 字符串 可能 字符串 可能 可能 字符串, 这 适用 于 当 你 想要 匹配 可能 带有 特殊字符 的 任意 字符串 字 面值 的 情况
if you need more control over the formatting of the <unk> provide a <unk> argument to <unk> as in this example:, 如果 你 想要 更 多 的 的 ， ， ， <unk> 参数 " <unk> " <unk> " 的 <unk>, 如果 你 需要 更多地 控制 日期 / 时间 的 格式 ， 请 为 " basicconfig " 提供 <unk> 参数 ， 如下 <unk> 所示 :
for example, given the function definition:, 例如 ， 给定 给定 的 函数, 例如 ， 对于 以下 函数 定义 :
that is determined <unk> by the number of digits in value, 也就是说 是 由 value 的 的 数量, 这 完全 由 value 中 的 位数 决定
outputs the record to the file., 将 记录 到 到, 将 记录 输出 到 文件
new in version 3.1: the <unk> class., 3.5 新版 功能 . <unk> _ <unk> _ <unk> _, 3.1 新版 功能 : " nullhandler " 类
objects can contain arbitrary <unk> and <unk> of data, 对象 可以 包含 任意 的 " 和 " 和 " bytes ", 对象 可以 包含 任意 数量 和 类型 的 数据
execute the init line provided in the string argument, 在 参数 中 中 的 参数 中, 执行 在 string 参数 中 提供 的 初始化 行
<unk> function has been removed, it was deprecated since python <unk> <unk> <unk> use <unk> instead, " 函数 . <unk> ( ) " 函数 已 python 自 起 已 移除 起 已 被 弃用 的 python 弃用 ， 请 改用 " " " " " ", " fractions . <unk> ( ) " 函数 已 被 移除 ， 它 自 python 3.5 起 被 弃用 ( bpo <unk> ) ： 请 改用 " math . <unk> ( ) "
this copy is <unk> which means that the current background character overwrites the old contents of <unk> ., 这 复制 是 意味着 意味着 的 的 的 的 的 的 " " " " 的 的 内容, 此 复制 是 <unk> 的 ， 这 意味着 当前 背景 字符 会 覆盖 掉 <unk> 的 旧 内容
note that leading <unk> in a non zero decimal number are not allowed, 请 注意 ， 在 <unk> 非 非 浮点数 的 整数 不 不 整数, 注意 非零 的 十进制 数 开头 不 允许 有 额外 的 零
read and return one line from the stream, 读取 并 返回 一个 一个 元素, 从流 中 读取 并 返回 一行
the current namespace is not <unk> for a proper import statement, a subsequent <unk> instruction <unk> the namespace., 当前 的 的 的 的 是 一个 模块 的 ， ， <unk> <unk> <unk> <unk> 的 的, 当前 命名 空间 不 受 影响 ： 对于 一条 标准 import 语句 ， 会 执行 后续 的 " store _ fast " 指令 来 修改 命名 空间
python also includes a data type for sets, python 3.6 . <unk> " 数据类型, python 也 包含 有 集合 类型
a enumeration of possible methods the interpreter can use to determine whether a bytecode file is up to date with a source file, " __ " __ " __ 方法 方法 使用 使用 " 文件 . file " 文件 文件 文件 文件 文件 文件 文件 文件 文件 文件, 一个 由 可用 方法 组成 的 枚举 ， 解释器 可以 用来 确定 字节 码 文件 是否 与 源文件 保持一致
if the class already defines any of <unk> <unk> <unk> or <unk> then "typeerror" is raised., 如果 类 已 定义 了 " " " " , " , " , " , " ， 则 " " " " " " ", 如果 类 已经 定义 了 " __ lt __ ( ) " 、 " __ <unk> __ ( ) " 、 " __ gt __ ( ) " 或者 " __ <unk> __ ( ) " 中 的 任意 一个 ， 将 引发 " typeerror "
round away from zero., 从 队列 的 项, 舍入 到 零 的 反 方向
if the bytes cannot be <unk> the program immediately tries again after 1 second, 如果 size 字节 ， 则 将 " " " " " 则 " " ", 如果 字节 数据 无法 被 锁定 ， 程序 会 在 1 秒 之后 立即 <unk>
though there is one python implementation which is by far the most <unk> there are some alternate implementations which are of particular interest to different <unk>, 虽然 有 一个 python python ， ， 大多数 大多数 ， ， 还有 还有 的 一些 一些 的 的 的 的 的 的 不同 的, 虽然 <unk> python 实现 <unk> 得到 最 广泛 的 <unk> ， 但 也 有 一些 其他 实现 对 特定 <unk> 的 用户 来说 <unk> <unk>
<unk> locale's full weekday name, " % _ unicode _ unicode _ unicode _ unicode _ <unk> ( ) ", " % a " 本地化 的 星期 中 <unk> 的 完整 名称
in <unk> before <unk> to the "re" module, consider whether your problem can be <unk> with a faster and simpler string method., 在 " 情况 下 ， " " " " " " " ， 请 " " " ， " " " " " " 和 " 字符串, <unk> ， 在 <unk> " re " 模块 之前 ， 请 考虑 是否 可以 使用 <unk> 更 简单 的 字符串 方法 <unk>
changed in version 3.3: if <unk> is "none", then "notimplementederror" is raised., 在 3.3 版 更改 : 如果 " _ _ none " ， " " " " ", 在 3.3 版 更改 : if " sys . implementation . cache _ tag " is " none " , <unk> " notimplementederror " is raised .
changed in version 3.7: the size argument is now <unk>, 在 3.7 版 更改 : the 参数 参数 现在 now now now, 在 3.7 版 更改 : size 参数 现在 是 可选 的
it's suggested that you use a prefix for the method names, such as <unk> in this example, 在 你 你 你 使用 方法 方法 的 方法 ， 这个 方法 中 的 的 这个, 建议 对 方法 名 使用 前缀 ， 例如 <unk> 中 的 " visit _ "
use 4 space <unk> and no <unk>, 使用 " sys . 0 " , " sys . <unk> ", 使用 4 个 空格 缩进 ， 不要 使用 制表符
for applications that embed python:, 对于 代码 的 的 的, 对于 嵌入 python 的 应用程序 ：
when most <unk> in "optparse" had either been copy <unk> over or <unk> <unk> it no longer <unk> practical to try to maintain the backwards <unk>, 在 大多数 中 的 的 " 中 的 " ， " " " " " " " " " " " " " <unk> " 将 被 尝试 到 尝试 的 <unk>, 当 when <unk> <unk> in " optparse " 中 几乎 所有 内容 都 已 被 <unk> 或 <unk> 上 补丁 时 ， 维持 向下兼容 <unk> 已 是 <unk> 的
"strftime()" and "strptime()" format codes, " strftime ( ) " 和 " strptime ( ) ", " strftime ( ) " 和 " strptime ( ) " format <unk>
type hint an annotation that specifies the expected type for a variable, a class attribute, or a function parameter or return value., type 对象 的 类型 ， 它 的 的 的 的 类型 ， ， 函数 的 函数 或 或 或 的 值, type <unk> 类型 提示 annotation 为 变量 、 类 属性 、 函数 的 形参 或 返回值 指定 预期 的 类型
the preamble attribute contains this leading extra <unk> text for mime documents, 这个 属性 属性 " 属性 " 这个 包含 包含 于 文本 的 文本 文本 文本 文本, preamble 属性 包含 mime 文档 开头 部分 的 这些 处于 保护 范围 之外 的 文本
return the smallest item in an iterable or the smallest of two or more arguments., 返回 一个 以 或 迭代 对象 或 迭代 对象 或 的 的 的 的 的 的, 返回 可 迭代 对象 中 最小 的 元素 ， 或者 返回 两个 及 以上 实参 中 最小 的
implements in place "tos tos1 <unk> tos"., 实现 " tos tos1 tos tos1 tos " tos ", 就 地 实现 " tos tos1 / / tos "
in the augmented version, "x" is only evaluated once, 在 ， ， ， 的 ， 只有 只 包含 的, 在 增强 赋值 的 版本 中 ， " x " 仅会 被 求值 一次
formats the specified stack information (a string as returned by <unk> but with the last newline <unk> as a string, 当 所 的 的 的 字符串 的 " " ( ) " 返回 的 的 字符串 ， 字符串 为 字符串 的 字符串, 将 指定 的 堆栈 信息 （ 由 " traceback . print _ stack ( ) " 返回 的 字符串 ， 但 移除 末尾 的 换行符 ） 格式化 为 字符串
if it is missing or "none" (the default), the arithmetic mean is automatically <unk>, 如果 它 为 " none " ， 则 " none " ， 则 会 会 被 忽略, 如果 该 参数 省略 或 为 " none " ( 默认值 ) ， 则 会 自动 进行 算术 均值 的 计算
changed in version 3.3: argument can be omitted or "none"., 在 3.3 版 更改 : 可以 为 " none " 或 " none ", 在 3.3 版 更改 : argument can be <unk> or " none " .
changed in version 3.2: <unk> is now "false" by default., 在 3.2 版 更改 : " is now now now " false ", 在 3.2 版 更改 : <unk> is now " false " by default .
<unk> license <unk> for python 2.0, <unk> <unk> <unk> <unk> python <unk> 的 python, 用于 python 2.0 的 beopen . com 许可 协议
"dbm" is a generic interface to variants of the <unk> database <unk> or <unk>, " 是 " 是 接口 接口 接口 ， <unk> <unk> 数据库 的 数据库 的 <unk>, " dbm " 是 一种 <unk> 接口 ， 针对 各种 dbm 数据库 包括 " dbm . gnu " 或 " dbm . ndbm "
<unk> this returns the real url of the page fetched, " ' <unk> ' 这个 结果 返回 的 的 的 的, <unk> 返回 所 获取 页面 的 真实 url
generator expressions are more compact but less <unk> than full generator definitions and tend to be more memory <unk> than equivalent list comprehensions., 生成器 表达式 更 多 的 但 但 ， ， ， 的 更 多 ， 更 更 多 的 更 多 ， 更 多 信息 ， 更 多, 生成器 表达式 相比 完整 的 生成器 更 紧凑 但 较 不 灵活 ， 相比 等效 的 列表 推导 式 则 更为 节省 内存
instead, <unk> will raise a "typeerror" if it detects a default parameter of type "list", "dict", or "set", 相反 ， 如果 在 将 被 指定 的 类型 的 类型 或 " 类型 " 或 " " ", 相反 ， 如果 数据 类 检测 到 类型 为 " list " 、 " dict " 或 " set " 的 默认 参数 ， 则 会 引发 " typeerror "
<unk> <unk> base class, " ccompiler " ccompiler " ccompiler 基类, " distutils . ccompiler " ccompiler 基类
this is <unk> by this example:, 这是 由 <unk> <unk> ：, 这个 例子 说明 了 这 一点 ：
cpython implementation detail: other <unk> command line schemes may differ, cpython implementation detail : 其他 cpython " 命令行 命令行 命令行, cpython implementation detail : 其他 实现 的 命令行 方案 可能 有所不同
these structures may have been returned by <unk> <unk> or "os.stat()", 这些 的 可能 会 被 由 " <unk> ( ) " 来 返回 的 的 值 :, 这些 stat 元组 可能 是 由 " os . <unk> ( ) " 、 " os . <unk> ( ) " 或 " os . stat ( ) " 返回 的
methods of different types may have the same name without <unk> <unk>, 不同 的 的 类型 都 有 具有 相同 的 的 " " ( ) " 方法, 不同 类型 的 方法 可以 有 相同 的 名称 而 不会 引起 歧义
return true if the object obj is a memoryview object, 如果 对象 对象 为 " 对象 " 对象 是 一个 对象, 如果 对象 obj 是 memoryview 对象 ， 则 返回 true
some <unk> were even able to read <unk> and this was also used to avoid the <unk> time, 某些 ， <unk> ， 即使 了 <unk> 的 " <unk> " ， 此 此 方法 也 会 被 用于, 有些 <unk> 甚至 能够 反向 读取 ， 这 也 被 用来 避免 <unk> 带 的 耗时
a replacement field ends with a closing <unk> <unk> <unk>, <unk> 斜杠 斜杠 会 被 " <unk> " " ", 替换 字段 以 一个 <unk> 括号 " ' } ' " 作为 结束
changed in version 3.5: writable bytes like object is now accepted., 在 3.5 版 更改 : 现在 可写 可写 的 字节 类 对象, 在 3.5 版 更改 : 现在 支持 可写 的 字节 类 对象
return the value (in fractional <unk> of the sum of the system and user <unk> time of the current process, 返回 值 的 值 的 的 的 的 的 的 <unk> 的 时间 的 时间, 返回 当前 进程 的 系统 和 用户 cpu 时间 总和 的 值 （ <unk> <unk> 为 单位 ）
this means that no subdirectory paths should be included in the resource argument, 这 意味着 没有 没有 的 的 ， 在 " <unk> ", 这 意味着 任何 子目录 的 路径 都 <unk> 出现 在 <unk> 参数值 内
instead, use the db <unk> parameter substitution, 相反 使用 使用 " <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _ <unk> _, 推荐 另外 一种 方法 ： 使用 db api 的 参数 替换
build and c api changes, 构建 和 c api 的 改变, 构建 和 c api 的 改变
this must be set to a positive integer and specifies the maximum alignment for the fields, 这 必须 为 一个 整数 为 一个 整数 ， 并 将 其 为 一个 字符串, 它 必须 设置 为 一个 正整数 ， 表示 字段 的 最大 对齐 字节
"join()" raises a "runtimeerror" if an attempt is made to <unk> the current thread as that would cause a deadlock, 如果 在 一个 一个 为 " <unk> " ， 则 将 被 设为 为 一个 则 会 引发 ", 如果 尝试 加入 当前 线程 会 导致 死锁 ， " join ( ) " 会 引起 " runtimeerror " 异常
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
the details of this operation are equivalent to:, 这个 的 的 的 等价 于 :, 此 操作 在 细节 上 相当于 :
in the example above you can access the outer scope variable by <unk> it <unk>, 在 示例 例子 的 你 你 可以 通过 访问 " 的 " 来 访问 的 的 的 名称 :, 在 上面 的 示例 中 ， 你 可以 通过 将 其 声明 为 全局 来 访问 外部 作用域 变量 ：
the <unk> function no longer raises an exception when given <unk> data, " <unk> . <unk> ( ) " 函数 会 引发 异常 异常 异常 异常, 当 传入 <unk> 数据 时 " statistics . mode ( ) " 函数 不会 再 引发 异常
context precision and rounding only come into <unk> during arithmetic operations., 上下文 和 的 将 仅 将 只 在 <unk> <unk> <unk> <unk> <unk>, 上下文 精度 和 舍入 仅 在 算术 运算 期间 <unk>
changed in version 3.9: no longer called before the module state is <unk>, 在 3.9 版 更改 : 不再 不再 之前 ， 此 模块 会 被 ", 在 3.9 版 更改 : no longer called <unk> the module state is <unk> .
pep 328: absolute and relative imports, pep 328 : 绝对 导入 和 相对 导入, pep 328 : 绝对 导入 和 相对 导入
hash based <unk> a bytecode cache file that uses the hash rather than the last modified time of the corresponding source file to determine its <unk>, 基于 基于 的 的 的 缓存 的 " 文件 " 的 文件 的 的 的 的 的 的 的 的 的 的 的 的 的, hash based pyc 基于 哈希 的 pyc 使用 对应 源文件 的 哈希 值 而 非 最后 修改 时间 来 确定 其 有效性 的 字节 码 缓存 文件
this means that the subsequent inputs are not tested for <unk>, 这 意味着 的 的 的 ， 是 不 不 为 ", 这 意味着 不会 测试 后续 输入 的 有效性
get a wide character, 获取 一个 的 字符 字符, 获取 一个 宽 字符
it needs two functions to actually <unk> with the <unk> <unk> <unk> should be callable without arguments, and return a number (the <unk> in any units <unk>, 它 需要 两个 函数 函数 " <unk> _ <unk> ( ) " ， ， ， 是 调用 的 的 ， 并且 返回 一个 一个 " 的 " 的 值, 它 需要 两个 函数 来 实际 处理 “ 外部 <unk> ” — — <unk> 应当 不带 参数 地 调用 ， 并 返回 一个 数字 （ “ 时间 ” ， 可以 为 任意 单位 ）
the term <unk> to the <unk> means that if a logger has a level of <unk> its chain of <unk> loggers is traversed until either an <unk> with a level other than <unk> is found, or the root is reached., " " <unk> " 记录器 记录器 记录器 记录器 记录器 的 级别 的 级别 的 级别 ， 则 会 被 一个 一个 " notset " 的 " ， " " " " " " " " " " " " " " " ", <unk> 给 <unk> 的 意思 是 如果 一个 记录器 的 级别 设置 为 notset ， 将 遍历 其 <unk> 记录器 ， 直到 找到 级别 不是 notset 的 记录器 ， 或者 到 根 记录器 为止
<unk> a breakpoint means it cannot cause the program to stop execution, but unlike <unk> a breakpoint, it remains in the list of <unk> and can be <unk> <unk>, " <unk> " <unk> ， 它 可以 在 程序 的 <unk> ， 但 ， 但 ， ， 它 将 其 <unk> 的 列表 ， ， 但 它 是 " <unk> ", 禁用 断点 表示 它 不会 导致 程序 停止 执行 ， 但是 与 清除 断点 不同 ， 禁用 的 断点 将 保留 在 断点 列表 中 并且 可以 （ 重新 ） 启用
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 c é <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
wraps the single paragraph in text , and returns a single string containing the wrapped <unk>, 将 <unk> 的 的 行 ， 并 返回 返回 一个 字符串 " " " " " ", 对 text 中 的 单独 段落 自动 换行 并 返回 包含 被 自动 换行 段落 的 单独 字符串
most programs go into a <unk> of <unk> and then pause waiting for a keypress or some other action on the part of the user, 大多数 " <unk> <unk> <unk> <unk> <unk> ， ， 然后 ， 一个 包含 了 一个 或 的 的 的 ， ， ， 在 其他 上 的, 大部分 程序 会 显示 一堆 内容 然后 等待 按键 或者 其他 某些 用户 <unk> 动作
for example, in a dictionary there are no duplicate keys, but here there may be duplicate message headers, 例如 ， 字典 字典 的 没有 ， ， 但 ， 但 可能 可能 可能 可能 可能 可能 可能 可能, 举个 例子 ， 在 一个 字典 当中 ， 键 之间 不可 重复 ， 但是 信息 头字 段 是 可以 重复 的
the context manager's "__exit__()" is loaded for later <unk>, 上下文 上下文 的 是 是 适用 于 " <unk> " 的, 载入 上下文 管理器 的 " __ exit __ ( ) " 以便 后续 使用
when decompressing a stream, the window size must not be smaller than the size originally used to compress the <unk> using a too small value may result in an "error" exception, 当 执行 时 ， 如果 长度 必须 为 零 ， 则 将 被 用来 ， 的 值 ， ， 的 值 ， 可能 会 导致 可能 会 引发 " 异常, 当 解压缩 一个 数据流 时 ， 窗口 大小 必须 不 小于 用于 压缩 数据流 的 原始 窗口 大小 ； 使用 太小 的 值 可能 导致 " error " 异常
to iterate over the <unk> of a sequence, you can combine "range()" and "len()" as follows:, 要 注意 的 的 ， ， 你 可以 通过 " 和 " 和 " 的 ", 要 以 序列 的 索引 来 迭代 ， 您 可以 将 " range ( ) " 和 " len ( ) " 组合 如下 :
future statements how the compiler <unk> future <unk>, future 语句 " 如何 <unk> 的 " <unk> " future " future " future, future 语句 编译器 怎样 处理 future import
if you want to convert an integer number to octal string either with prefix <unk> or not, you can use either of the following ways., 如果 要 想 为 一个 整数 整数 为 字符串 ， 字符串 ， 字符串 ， 则 使用 " ' " ， 可以 使用 以下 以下 使用, 如果 要 将 整数 转换 为 八进制 字符串 ， 并 可 选择 <unk> “ 0o ” 前缀 ， 则 可以 使用 如下 方法 ：
for each line of code, you then show that if invariants x and y are true before the line is executed, the slightly different invariants <unk> and <unk> are true after the line is executed, 对于 ， <unk> 的 的 ， 如果 x 了 <unk> ， ， ， ， ， <unk> <unk> 的 的 ， ， ， <unk> <unk> <unk> 的 <unk>, 然后 对 <unk> 代码 ， 你 说明 这 行 代码执行 前 的 不 变量 x 和 y 以及 执行 后 <unk> 有 不同 的 不 变量 x ' 和 y ' 为 真
a shared object gets deleted from the manager process when there are no longer any proxies referring to it., 共享 共享 进程 进程 时 ， 当 进程 时 ， 任何 任何 将 被 引发 的 ", 当 共享 对象 没有 被 任何 代理 器 引用 时 ， 会 被 管理器 进程 删除
pep <unk> , fast access to module state from methods of c extension <unk>, pep <unk> : 从 模块 的 的 " __ " __ " __ 方法 的 方法, pep <unk> ， 从 c 扩展 类型 的 方法 <unk> 模块 状态 ；
in non interactive mode, an expression statement is terminated with <unk>, 在 " 交互 " 模式 " 语句 表达式 " 表达式 " 语句 " 语句 " 语句 ", 在 非 交互 模式 下 ， 表达式 语句 以 " pop _ <unk> " 终止
pep <unk> csv file api the python <unk> proposal which proposed this addition to python., pep <unk> python 文件 api python api 的 了 <unk> 的 的 的 的, 该 实现 在 “ python 增强 提议 ” pep 305 ( csv 文件 api ) 中 被 提出 <unk> python 增强 提议 <unk> 提出 了 对 python 的 这 一 补充
on platforms without <unk> the <unk> class defined by this module can still be used for custom <unk>, 在 unix 上 上 ， " " 类 " 类 的 模块 定义 的 " 模块 可以 可以 使用 " <unk> ", 在 没有 " readline " 的 平台 , 此 模块 定义 的 " <unk> " 类 仍然 可以 用于 自定义 行为 .
their disadvantage is that if e.g. you use "utf 32 <unk> on a little endian machine you will always have to <unk> bytes on encoding and decoding, 如果 是 如果 你 ， ， ， ， 则 如果 你 的 的 ， ， ， ， ， ， ， ， 将 在 编码 格式 的 编码 格式, 它们 的 缺点 可以 <unk> ： 如果 你 在 <unk> 小端序 的 机器 上 使用 " utf 32 be " 则 你 将 必须 在 编码 和 解码 时 <unk> 字节
this <unk> the thread to <unk> and then <unk> for it to do so, 这 将 线程 线程 线程 安全 的 ， 然后 将 其 为 " true ", 此 方法 要求 线程 终止 ， 然后 等待 它 完成 终止 操作
remove the mapping for the object key from the object o, 从 对象 对象 中 对象 对象 对象 对象 对象 对象, 从 对象 o 中 移除 对象 key 的 映射
see also <unk> and <unk> for details., 另 请参阅 " <unk> " 和 " <unk> ", 另 请参阅 " __ aiter __ ( ) " 和 " __ <unk> __ ( ) " 了解 详情
bpo <unk> fix a possible reference leak in <unk>, bpo <unk> : 修复 了 一个 c 中 的 的 引用 的, bpo <unk> : 修复 了 函数 " itertools . count ( ) " 中 的 潜在 引用 对象 <unk>
this method <unk> the current transaction, 此 方法 会 当前 当前 的 的, 这个 方法 提交 当前 事务
append the object item at the end of list list, 将 对象 列表 ， 末尾 末尾 末尾 列表, 将 对象 item 添加 到 列表 list 的 末尾
the <unk> and <unk> functions are now always available, <unk> 和 " <unk> ( ) " 函数 会 被 移除 是 被 被, 现在 " os . <unk> ( ) " 和 " os . <unk> ( ) " 函数 将 总是 可用
this is a non negative integer, 这是 一个 整数 整数, 这是 一个 <unk> 整数
return the number input, 返回 输入 输入, 返回 输入 的 数值
if the call hasn't yet completed then this method will wait up to timeout seconds, 如果 调用 调用 此 方法 ， 此 方法 将 此 方法 将 不会 被 阻塞, 如果 调用 还 没 完成 那么 这个 方法 将 等待 timeout 秒
this class is used to declare a new context variable, e.g.:, 这个 类 用于 用于 上下文 上下文 上下文 的 函数, 此类 用于 声明 一个 新 的 上下文 变量 ， 如 :
python combines <unk> power with very clear syntax, python <unk> <unk> <unk> <unk> <unk> <unk> <unk>, python 结合 了 <unk> 的 功能 和 <unk> <unk> 的 语法
this function should be used when the intent is to treat the contents as executable code., 此 函数 应当 被 用来 使用 被 用来 作为 作为 作为 作为 键, 如果 目的 是 将 文件 内容 做 为 可 执行 代码 ， 则 应 使用 此 函数
set the name inside capsule to name, 设置 名称 的 名称 名称, 将 capsule 内部 的 名称 设 为 name
raises an auditing event <unk> with arguments <unk> <unk> <unk> <unk>, 引发 一个 审计 事件 " winreg . <unk> " ， 附带 参数 " , " , " , " , " , " , " , " , " , " , ", 引发 一个 审计 事件 " shutil . <unk> _ archive " 并 附带 参数 " base _ name " , " format " , " <unk> _ dir " , " base _ dir "
assign object v to the i th element of o, 将 对象 具有 到 的 的 的 的, 将 对象 v 赋值 给 o 的 第 i 号 元素
and, in many applications, data is converted to "decimal" with a single cast inside a loop, 在 " 中 中 的 数据 数据 被 转换 为 " 的 " 的 一个, 并且 ， 在 许多 应用程序 中 ， 数据 在 循环 内 单个 强制 转换 为 " decimal "
json is a subset of yaml <unk>, json 是 " <unk> " 的 " 的 ", json 是 yaml 1.2 的 一个 子集
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
"await" <unk> start a unix socket server, " await " " loop . create _ unix ( ) " unix 一个 套 接字, " await " " start _ unix _ server ( ) " 启动 一个 unix socket 服务
if " <unk> or " help" is supplied at the command line, the argumentparser help will be <unk>, 如果 " " " 或 " 则 " " 则 会 将 被 忽略 的 消息, 如果 " h " or " help " 在 命令行 中 被 提供 , 参数 解析器 帮助 信息 会 打印 :
all gzip compressed streams are required to contain this timestamp field, 所有 所有 都 都 都 是 被 视为 的 的 段, 所有 gzip <unk> 压缩 流中 必须 包含 时间 戳 这个 字 段
for example, the following file system <unk> defines a top level <unk> package with three <unk>, 例如 ， 以下 定义 了 " 定义 定义 了 " <unk> " 级别 的 级别 ， 其中 的 的 的, 例如 ， 以下 文件系统 布局 定义 了 一个 最高 层级 的 " parent " 包 和 三个 子包 :
the number of items returned is <unk> / <unk> / <unk> <unk> when "0 < r < n" or zero when <unk> > <unk>, 返回 o1 的 的 " 0 " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , ", 当 " 0 < r < n " 时 ， 返回 项 的 个数 是 " n ! / r ! / ( n r ) ! " ； 当 " r > n " 时 ， 返回 项 个数 为 0
return a c "double" representation of the contents of pyfloat , but without error checking., 返回 一个 c " double " 的 ， 表示 ， 但 返回 " true ", 返回 一个 pyfloat 内容 的 c " double " 表示 ， 但 没有 错误 检查
complete the parsing of all previously fed data and return the root message object, 将 所有 所有 的 数据 数据 数据 并 返回 并 消息 消息, 完成 之前 输入 的 所有 数据 的 解析 并 返回 根 消息 对象
packages can be installed via the standard python distutils mode <unk> <unk> <unk>, 包 可以 是 python 安装 安装 安装 安装 安装 安装 安装 " <unk> ", 可以 通过 标准 的 python distutils 模式 （ " python setup . py install " ） 安装 软件包
(there is also another sub module, <unk> for configuration <unk>, 在 也 也 会 另 一个 模块 的 " <unk> " 模块 的 时候, （ 还有 另 一个 子 模块 " logging . config " ， 用于 配置 功能 ）
a comment starts with a hash character <unk> that is not part of a string literal, and ends at the end of the physical line, " ' " " 的 字符 字符 的 字符 的 不是 字符串 ， ， 并 将 结束 末尾 的 末尾, 一条 注释 以 不 包含 在 字符串 字 面值 内 的 <unk> 号 ( " # " ) 开头 ， 并 在 物理 行 的 末尾 结束
"pickle" python object serialization, " python " python python 对象, " pickle " python 对象 序列化
the two following opening hooks are provided by this module:, 两个 两个 以下 的 模块 提供 了 以下 的 模块, 此 模块 提供 了 以下 两种 打开 文件 钩子 ：
update os x installer to use sqlite <unk> and <unk> <unk>, 更新 x x x 安装程序 以 使用 " sqlite " 和 " sqlite . 0 " 和 " <unk> ", 更新 os x 安装包 ， 使用 sqlite 3.14 . 1 和 xz <unk> . 2 版本
<unk> parsing email messages, " 解析 " 解析 解析, " email . parser " : 解析 电子邮件 信息
the generated "__init__()" method for "c" will look like:, " " " " ( ) " 方法 的 的 的 如下 :, 为 " c " 生成 的 " __ init __ ( ) " 方法 看起来 像 :
you can use the following <unk>, 你 可以 使用 以下 以下 :, 你 可以 使用 以下 模式 :
changed in version 3.4: the <unk> error handlers now works with utf 16 and utf 32 <unk>, 在 3.4 版 更改 : the " <unk> _ <unk> " 现在 现在 支持 <unk> 和 <unk> <unk>, 在 3.4 版 更改 : " ' <unk> ' " 错误处理 方案 现在 适用 于 utf 16 和 utf 32 编解码器
<unk> objects, as returned by "open()", have the following methods:, " " " ( ) " 所 返回 的 " " ( ) " 所 的 的 方法 :, 由 " open ( ) " 返回 的 wave _ read 对象 ， 有 以下 几种 方法 :
the argument is a tuple consisting of the various parameters, 参数 是 一个 的 的 的, 该 参数 是 由 多个 形参 组成 的 元组
return "0" on success, 成功 时 返回 " 0 ", 成功 时 返回 " 0 "
"object" does not have a <unk> so you can't assign arbitrary attributes to an instance of the "object" class., " 不 " 不会 被 ， ， 因此 ， 你 必须 为 " 的 " 实例 实例 实例, 由于 " object " 没有 " __ dict __ " ， 因此 无法 将 任意 属性 赋给 " object " 的 实例
however, if you do this, you will not be able to see the events as you intended in the event log <unk> it needs to be able to access the registry to get the <unk> name, 但是 ， 如果 你 希望 将 在 尝试 的 的 ， ， ， ， ， ， 就 需要 需要 需要 的 的 的 " <unk> " 来 获取 到 的 的, 但是 ， 如果 你 这样 做 ， 你 将 无法 如 你 所 预期 的 那样 在 事件 日志 <unk> 中 看到 这些 事件 — — 它 必须 能 访问 注册表 来 获取 . dll 名称
<unk> <unk> <unk> of <unk>, " <unk> " <unk> " <unk> " <unk> " 的 <unk>, " dbm . gnu " gnu 对 dbm 的 重 解析
the arguments must either both be numbers or both be sequences of the same type, 参数 必须 必须 为 两个 的 的 元素 为 整数 的 的, 两个 参数 或者 必须 都 为 数字 ， 或者 都 为 相同 类型 的 序列
release date: 2017 06 17, 发布 日期 : 2017 06 06, 发布 日期 : 2017 06 17
the routine takes time <unk> to <unk>, 将 " time ( ) " 方法 的 为 ", 本 例程 所 需 的 时间 与 " len ( <unk> ) " <unk>
see <unk> in the editing and <unk> section below., 请参阅 " <unk> . <unk> " 和 and and _ <unk> _ posn _ setitem _ setitem _ setitem _ setitem _ setitem _, 请参阅 下面 的 “ 编辑 和 导航 ” 部分 中 的 <unk>
mock for method calls on an object, " 方法 " 方法 ( ) " 方法 的 一个 调用, 对象 上 的 方法 调用 的 mock
another solution to the problem of non comparable tasks is to create a wrapper class that ignores the task item and only compares the priority <unk>, 另 要 <unk> 的 的 的 的 是 由 创建 一个 类 ， 类 ， " 类 " 的 " ， 只有 仅 只 的 的, 不可 比较 任务 问题 的 另 一种 解决方案 是 创建 一个 忽略 任务 条目 并且 只 比较 优先级 字段 的 包装 <unk> :
in many use cases one doesn't care what the actual value of an enumeration is, 如果 ， 使用 ， ， ， 一个 一个 ， 则 会 将 一个 的 的 值, 在 许多 应用 场景 中 <unk> 都 不 关心 枚举 的 实际 值 是 什么
return true if ob 's type is <unk> ob must not be "null"., 如果 ob 为 类型 类型 为 真值 则 返回 " 1 " ， 则 返回 " null ", 如果 ob 的 类型 为 " pygen _ type " 则 返回 真值 ； ob 必须 不 为 " null "
this code is actually automatically run when python is run in interactive mode (see readline <unk>, 这 代码 在 在 在 在 在 解释器 时 ， 在 交互式 模式 时 模式 时 模式 时 执行, 此 代码 实际上 会 在 python 运行 于 交互 模式 时 自动 运行 ( 参见 readline <unk> )
if typed is set to true, function arguments of different types will be cached separately, 如果 为 为 " set _ size ( ) " 函数 的 不同 的 的 函数, 如果 <unk> 设置 为 true ， 不同 类型 的 函数参数 将 被 分别 缓存
<unk> or second <unk> about the mean, is a measure of the <unk> <unk> or <unk> of data, " ' or ' ' ' ' <unk> ' " 是 是 是 <unk> 的 <unk> 的 <unk> 的 <unk>, 方差 <unk> 相对 于 均值 的 <unk> <unk> ， 是 对 数据 变化 <unk> （ <unk> <unk> 或 <unk> ） 的 度量
here is the <unk>, 这是 是 ：, 以下 是 解决方案 ：
an invalid logger name., 一个 " 的 " 的, 无效 的 日志 记录器 名称
other graphical user interface packages, 其他 的 gui 接口, 其他 图形用户界面 （ gui ） 包
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
<unk> array <unk> algorithm, " bisect " 数组 " 算法 算法, " bisect " 数组 <unk> 查找 算法
the mtime argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing, 实参 参数 是 可选 的 可选 的 ， ， 必须 是 在 内部 的 的 的 的 的, mtime 参数 是 一个 可选 的 数字 时间 戳 用于 写入 流 的 最后 修改 字 段 ，
types that modify instance <unk> or deallocation may need to be <unk>, 类型 ， " 实例 实例 实例 或 " ， " 可能 可能 导致 为 ", 修改 实例 分配 或 中止 分配 的 类型 可能 需要 进行 调整
in this case, <unk> will return a match object, so you should store the result in a variable for later <unk>, 在 这种 情况 下 ， 将 返回 " " " " ， 因此 ， 你 应该 你 的 的 的, 在 这个 例子 中 " match ( ) " 将 返回 一个 匹配 对象 ， 因此 你 应该 将 结果 储存 到 一个 变量 <unk> 供 稍后 使用
return an "ipv4address" or <unk> object depending on the ip address passed as argument, 返回 一个 " 或 " 或 " 对象 对象 对象 对象 ， 返回 " none ", 返回 一个 " ipv4address " 或 " ipv6address " 对象 ， 取决于 作为 参数传递 的 ip 地址
changed in version 3.9: no longer called before the module state is <unk>, 在 3.9 版 更改 : 不再 不再 之前 ， 此 模块 会 被 ", 在 3.9 版 更改 : no longer called <unk> the module state is <unk> .
not all python object types are <unk> in general, only objects whose value is independent from a particular invocation of python can be written and read by this module, 不是 所有 对象 类型 类型 的 " " " " " 的 " 是 由 " 的 " 的 " 的 " 的 " 的 " 的 " 模块 的 模块, 不是 所有 python 对象 类型 都 受 支持 ； 一般来说 ， 此 模块 只能 写入 和 读取 不 依赖于 特定 python 调用 的 对象
<unk> <unk> <unk> <unk> can be used to type hint a callable taking any number of arguments and returning <unk>, " <unk> _ <unk> ( ) " , 可 可 可 被 用来 一个 任意 的 的 参数 ， 以及 " bytes ", " callable [ ... , returntype ] " （ 使用 字面 省略号 ） 能 被 用于 提示 一个 可 调用 对象 ， 接受 任意 数量 的 参数 并且 返回 " returntype "
it has <unk> been <unk> by rfc <unk> ., 它 具有 " <unk> rfc rfc rfc rfc rfc rfc, 显然 它 已 被 rfc <unk> 所 <unk>
this example calls both functions with a "null" pointer <unk> should be used as the "null" <unk>, 此 例子 了 " null " ， " " " " " " 应当 应当 " null " <unk> " " " " ", 此 函数 中 调用 的 两个 函数 都 使用 了 空 指针 （ 用 " none " 作为 空 指针 ） :
"x in <unk> evaluates to "true" if x is a member of s , and "false" otherwise, 在 " x " " x x " ， 则 " " " , " true " ， 否则 返回 " false ", 如果 x 是 s 的 成员 则 " x in s " 求值 为 " true " ， 否则 为 " false "
<unk> forces the field to be right aligned within the available space (this is the default for <unk>, " ' ' ' ' ' " ' <unk> ' <unk> ' ' ' ' ' ' ' ' ' ' ", " ' > ' " 强制 字段 在 可用 空间 <unk> 对齐 （ 这是 数字 的 默认值 ）
this <unk> <unk> is <unk> to run on a virtual machine that executes the machine code corresponding to each bytecode, 这 <unk> 在 在 windows 上 上 ， 在 <unk> 上 的 的 的 代码 的 的, 这种 " 中间 语言 " 运行 在 根据 字节 码 执行 相应 <unk> 的 virtual <unk> 之上
by default, or when pages is either "0" or a negative integer, the entire database is copied in a single <unk> otherwise the method performs a loop copying up to pages pages at a time., 默认 情况 下 ， 当 被 为 " 或 " " " " " " " " " " " " " " " ) " 方法 会 被 一个 一个 " 方法 ( ) " 方法, 默认 情况 下 ， 或者 当 <unk> 为 " 0 " <unk> 整数 时 ， 整个 数据库 将 在 一个 步骤 中 复制 ； 否则 该 方法 一次 循环 复制 <unk> 规定 数量 的 页面
the maximum depth for recursive interpolation for "get()" when the raw parameter is false, " x " 的 时 ， 当 " 时 ， " 时 将 被 ", 当 raw 形参为 假值 时 " get ( ) " 所 采用 的 递归 插值 的 最大 深度
this behaviour is to disable any existing non root loggers unless they or their <unk> are explicitly named in the logging configuration., 这 行为 被 任何 任何 任何 的 的 的 ， ， 它们 它们 在 它们 在 在 中 中 中, 此 行为 是 禁用 任何 现有 的 <unk> 日志 记录器 除非 它们 或 它们 的 上级 在 日志 记录 配置 中 被 显式 地 命名
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
the default is <unk>, 默认值 为 " " rb " ", 默认值 为 " 9 "
new in version 3.2: the <unk> argument., 3.2 新版 功能 : the <unk>, 3.2 新版 功能 : <unk> 参数
collect the arguments using the " " and " " specifiers in the function's parameter list; this gives you the positional arguments as a tuple and the keyword arguments as a dictionary, 将 使用 " " " " " " " " " " " " " " " " " 参数 " 参数 参数 参数 作为 参数 作为 参数 作为 参数 作为 参数 作为 参数, 使用 函数参数 列表 中 的 " " 和 " " 说明符 收集 参数 ; 这会 将 位置 参数 作为 元组 ， 将 关键字 参数 作为 字典
read parsing arguments and building values for detail, 读取 解析 参数 和 和 构建 的 值, 请参阅 语句 解释 及 变量 编译 了解 详情
the "ipaddress" module provides factory functions to <unk> create ip addresses, networks and <unk>, " 模块 " 模块 提供 了 提供 了 函数 创建 类 创建 和 <unk> 的, " ipaddress " 模块 提供 来 工厂 函数 来 方便 地 创建 ip 地址 ， 网络 和 接口 ：
this feature can be used to the module's advantage if it maintains a global table or cache of objects with a "try" statement it can test for the <unk> presence and skip its initialization if <unk>, 这 特性 特性 用于 用来 它 它 在 一个 全局 ， ， 它 的 全局 ， 或 " 对象 " 对象 ， 或者 它 可以 在 你 的 的 的 ， 如果 你 的 的 的, 这一 特性 可 用于 作为 那个 模块 的 优点 ， 如果 它 维护 一个 全局 表 或者 对象 的 缓存 — — 使用 " try " 语句 ， 就 可以 测试 表 的 存在 并且 跳过 它 的 初始化 ， 如果 有 需要的话 :
pep <unk> <unk> class attribute definition order pep written and implemented by eric <unk>, pep <unk> : 类 属性 pep 由 pep 由 撰写 并 实现, pep <unk> 保留 类 属性 定义 顺序 pep 由 eric <unk> 撰写 并 实现
when either is present, the <unk> commands will appear in their own group in the help output, 当 时候 时 ， 会 在 将 输出 将 将 输出 将 输出 到 输出 中 的 输出, 当 两者 都 存在 时 ， 子 解析器 的 命令 将 出现 在 输出 帮助 消息 中 它们 自己 的 分组 内
although asyncio queues are not thread safe, they are designed to be used specifically in <unk> code., 如果 asyncio 线程 安全 的 线程 安全 线程 ， 它们 它们 它们 被 用作 用作 它们 的 的, 尽管 asyncio 队列 不是 线程 安全 的 ， 但是 他们 是 被 设计 专用 于 async / await 代码
some python users <unk> a deep interest in <unk> the relative performance of different <unk> to the same problem, 一些 python python <unk> ， <unk> 在 大多数 <unk> 的 的 的 的 的 <unk> 的 的, 一些 python 用户 对 了解 同一 问题 的 不同 方法 的 相对 性能 产生 了 <unk> 的 兴趣
4 input parameter which defaults to the integer zero., " control " ， 参数 ， 默认 为 整数, 4 默认 为 整数 <unk> 的 输入 形参
previously, the <unk> statement would not work correctly if the "assertionerror" exception was being <unk>, 在 之前 之前 ， " try " 语句 时 ， 如果 没有 引发 " 异常 " 异常, 在 之前 的 版本 中 ， 如果 " assertionerror " 异常 被 屏蔽 则 assert 语句 将 不能 正常 运作
(contributed by giampaolo <unk> in bpo <unk>, （ 由 giampaolo rodol à 在 bpo <unk> 中 贡献 。 ）, （ 由 giampaolo rodol à 在 bpo <unk> 中 贡献 。 ）
<unk> is used by <unk> so you get this functionality <unk>, （ 由 <unk> <unk> ， 因此 你 你 的 的 的, " <unk> " 被 用 在 " <unk> ( ) " 中 ， 因此 你 自然 获得 了 <unk> 功能
use the built in "super()" function:, 使用 内置 " 内置 " ) " 函数, 使用 内置 的 " super ( ) " 函数 ：
the final <unk> <unk> a static type checker to restrict <unk> <unk> or <unk>, " <unk> " <unk> " 的 类型 类型 的 类型 的 <unk> <unk> <unk> <unk> <unk> " 或 " <unk> ", <unk> 限定符 会 指示 静态 类型 检查 器 限制 进行 子 类化 、 重载 或 重新 赋值 :
<unk> if "microsecond" is not 0, " hh : mm : ss : ss : ss : ss ss : ss " microsecond " microsecond " microsecond ", " hh : mm : ss . ffffff " ， 如果 " microsecond " 不 为 0
<unk> the order in which object's "__del__()" methods are executed is arbitrary, <unk> 的 的 的 方法 是 " 方法 " 方法 是 被 被 被 被, 更 <unk> 的 是 ， 对象 " __ del __ ( ) " 的 方法 执行 顺序 是 任意 的
also " e" can be used to make "exec()" a function., " " " " 可以 可 被 用来 创建 函数, 也 可以 使用 " e " 将 " exec ( ) " 解读 为 函数
returns "1" if the object o provides numeric <unk> and false otherwise, 如果 对象 o 了 两个 为 true ， 则 返回 " true " ， 否则 返回 " true ", 如果 对象 o 提供 数字 的 协议 ， 返回 真 " 1 " ， 否则 返回 假
thread safety of proxies, 线程 安全 的, 代理 的 线程 <unk>
library and extension faq, 库 和 扩展, 代码 库 和 插件 faq
the following example <unk> how coroutines can <unk> the cancellation <unk>, 以下 示例 示例 了 如何 如何 如何 如何 <unk> ：, 以下 示例 演示 了 协程 是 如何 <unk> 取消 请求 的 :
"marshal" internal python object serialization, " 内部 " 内部 python 对象, " marshal " 内部 python 对象 序列化
reverse the order of the items in the array., 从 队列 中 的 顺序 顺序, 反转 数组 中 <unk> 的 顺序
this is the inverse of <unk>, 这是 " <unk> " 的 逆 操作, 这是 " chr ( ) " 的 <unk>
i can't get key bindings to work in <unk> <unk>, 我 比较 比较 的 " " ( ) " " " " " " " ", 在 tkinter <unk> 绑定 不 工作 ： 为什么 ？
the attribute part of the background is combined <unk> with all non blank characters that are written into the window, 属性 的 的 的 是 与 所有 所有 的 所有 的 字符 的 字符 的 字符 的 的, 背景 的 属性 部分 会 与 写入 窗口 的 所有 非 空白 字符 合并 （ 即 or 运算 ）
like <unk> but adds counts instead of replacing them, 类似 于 " <unk> ( ) " 但 但 但 " 但 " 而 不是 " <unk> ", 像 " dict . update ( ) " 但是 是 加上 ， 而 不是 替换
a <unk> <unk> object that runs a python coroutine, <unk> <unk> <unk> 对象 对象 的 python 对象, 一个 与 " future 类似 " 的 对象 ， 可 运行 python 协程
unlike a unix <unk> python does not do any automatic path <unk>, 与 " <unk> . <unk> " python python python ， ， 任何 任何 操作, 与 unix shell 不同 ， python 不 执行 任何 自动 路径 扩展
<unk> is the password used for <unk> files., " 是 用于 用于 用于 用于 用于 " 的 用于 用于, pwd 是 用于 <unk> 文件 的 密码
return the exception raised by the call, 返回 由 异常 的 异常, 返回 由 调用 引发 的 异常
<unk> indicates the current file format (currently <unk>, " ' ' ' ' 当前 当前 文件 的 格式 格式, " py _ marshal _ version " 指明 了 当前 文件 的 格式 （ 当前 取值 为 2 ）
without the use of this decorator <unk> the name of the example function would have been <unk> and the docstring of the original <unk> would have been lost., 在 ， 这个 函数 的 了 这个 函数 函数 函数 函数 函数 函数 的 函数 ， <unk> <unk> <unk> 的 的 的 的 的 的, 如果 不 使用 这个 装饰 器 工厂 函数 ， 则 example 函数 的 名称 将 变为 " ' wrapper ' " ， 并且 " example ( ) " 原本 的 文档 字符串 将会 丢失
this is normally called from the <unk> handler specified in the object's type, 此 方法 会 从 " <unk> " 中 的 的 的 " 中 的 ", 这 通常 由 对象 的 type 字段 定义 的 " tp _ dealloc " <unk> 来 调用
it accepts the following optional parameters: " n" opens the url in a new browser window, if <unk> " t" opens the url in a new browser page <unk>, 它 接受 的 可选 的 参数 : " " " " " " " " " " " " " " " " " " " 中 的 的 的, 还 接受 以下 可 选 参数 ： " n " 如果 可能 ， 在 新 的 浏览器 窗口 中 打开 url ； " t " 在 新 的 浏览器 页面 （ “ 标签 ” ） 中 打开 url
the function definition does not execute the function <unk> this gets executed only when the function is called, 函数 函数 不 函数 函数 函数 函数 函数 函数 ， 此 函数 会 被 函数 时 函数, 函数 定义 并 不会 执行 函数 体 ； 只有 当 函数 被 调用 时才 会 执行 此 操作
arguments in shebang lines, shebang lines 的 参数, shebang lines 的 参数
at most one single read on the compressed stream is done to <unk> the call, 在 大多数 一个 一个 ， ， 会 被 读取 到 被 <unk> 到 被 <unk>, 最 多 只有 一个 单独 的 读取 流 来 服务 这个 方法 调用
writes to the database will not be synchronized, 将 数据库 的 数据库 ， 将 被, 写入 数据库 将 不会 同步
while a positional argument could be created like:, 虽然 参数 参数 参数 可以 是 参数 :, 而 位置 参数 可以 这么 创建 :
corresponds to "errno" <unk> <unk> <unk> and <unk>, 对应 于 " errno " " " " " " " " " " " " " " " " " ", 对应 于 " errno " " <unk> " , " <unk> " , " <unk> " 和 " <unk> "
it is always <unk> instead of <unk> <unk> <unk>, 它 总是 " " ( ( ) " 而 不是 " " ( ) " ) ", 它 将 总是 " ' <unk> ' " 而 不再 是 " ' <unk> ' " .. " ' <unk> ' "
remove the event from the queue, 从 队列 中 删除, 从 队列 中 删除 事件
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
<unk> one or more keyword arguments with the below listed keys as keywords, " ' . create _ or ( 或 或 或 参数 的 的 参数, <unk> 一个 或 多个 以 下列 <unk> 关键字 的 关键字 参数
this numeric value corresponds to a value found in the dictionary of codes as found in <unk>, 此 值 值 转换 为 " " " " 的 值 的 值, 这个 数字 的 值 对应 于 存放 在 " http . server . <unk> . <unk> " 代码 字典 中 的 某个 值
this is what <unk> <unk> also does in <unk>, 这 也 “ 在 “ 在 “ 在 在 中 中 的, 这 和 msvc 中 的 " # <unk> pack ( n ) " 功能 一样
if you <unk> code like:, 如果 你 <unk> 代码 代码 代码 ：, 如果 你 编写 的 代码 就 像 下面 一样 ：
various structures for implementing <unk> have been extensively <unk> and heaps are good for this, as they are <unk> <unk> the speed is almost <unk> and the worst case is not much different than the average case, <unk> 的 结构 的 " <unk> " ， ， 被 " 为 " ， 对于 ， 并且 被 <unk> ， ， ， 因为 不 被 不 为 <unk>, 用于 实现 调度 器 的 各种 结构 都 得到 了 充分 的 <unk> ， 堆 是 非常 <unk> 的 一种 ， 因为 它们 的 速度 相当 快 ， 并且 几乎 是 <unk> 的 ， 最坏 的 情况 与 平均 情况 没有 太 大 差别
<unk> by giampaolo <unk>, 由 <unk> <unk> <unk> <unk> " <unk> ", ( 补丁 由 giampaolo <unk> 提供 )
<unk> and <unk> a <unk> <unk> external padding on each side of the <unk> <unk>, <unk> 和 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> 的 的 <unk> <unk> <unk> 的 的 <unk>, <unk> 和 <unk> a <unk> <unk> <unk> <unk> on each <unk> of the <unk> <unk> .
supports the following objects and types by <unk>, 支持 支持 下列 对象 和 类型 类型, 默认 支持 以下 对象 和 类型 ：
changed in version 3.4: added file parameter., 在 3.4 版 更改 : 添加 file ., 在 3.4 版 更改 : 添加 file 形参
(contributed by <unk> <unk> <unk> and antoine pitrou.), （ 由 <unk> <unk> 和 antoine pitrou 贡献 。 ）, （ 由 <unk> <unk> d ' <unk> 和 antoine pitrou 贡献 。 ）
it can be used when a statement is required syntactically but the program requires no action, 它 在 一个 语句 语句 被 语句 时 被 被 调用 ， 但 不 不 不 不 不, 当 语法 上 需要 一个 语句 ， 但 程序 需要 什么 动作 也 不 做 时 ， 可以 使用 它
return true if the type of op is <unk>, 如果 <unk> 为 " true " 则 返回 " true ", 如果 op 的 类型 为 " <unk> _ type " 则 返回 true
for example, expressing <unk> as <unk> keeps the value constant but cannot show the <unk> two place <unk>, 例如 ， " ' " ' " ， ， ， ， 值 ， 值 ， 但 " " " " ， 两个 两个 两个 的 两个, 例如 ， 将 " <unk> e + 3 " 表示 为 " <unk> " 可以 让 值 保持 <unk> ， 但是 无法 显示 原本 的 <unk> 有效数字
for objects with custom "__hash__()" methods, note that <unk> <unk> the return value based on the bit width of the host machine, 对于 对象 的 对象 ， ， 使用 " <unk> " ， 请 " " " 的 的 值 的 的 值 的 值, 如果 对象 实现 了 自己 的 " __ hash __ ( ) " 方法 ， 请 注意 ， " hash ( ) " 根据 机器 的 <unk> 来 截断 返回值
there are two interfaces provided by this module, 有 模块 模块 提供 模块, 此 模块 提供 了 两个 接口
<unk> <unk> of <unk> indentation, <unk> _ <unk> _ <unk> ( ) " 的 <unk>, " <unk> " 模糊 缩进 检测
changed in version 3.2: result is a structured object rather than a simple 2 tuple., 在 3.2 版 更改 : 当 是 一个 对象 对象 ， 一个 " 对象 " ， 其中 的 对象, 在 3.2 版 更改 : result is a <unk> object <unk> <unk> a <unk> 2 tuple .
logging options of subsequent <unk> calls can be set by calling <unk>, 日志 的 的 的 调用 " __ ( ) " 调用 " 调用 . set ( ) " 调用 调用, 后续 " syslog ( ) " 调用 的 日志 选项 可以 通过 调用 " <unk> ( ) " 来 设置
therefore, the same rules apply as with <unk> the lock must be held when called and is re acquired on return, 与 相同 相同 相同 与 相同 的 相同 相同 ， 必须 必须 为 " true " 时 被 调用 时 返回 " true ", 因此 ， 规则 同样 适用 于 " wait ( ) " ： 锁 必须 在 被 调用 时 保持 获取 ， 并 在 返回 时 重新 获取
not all <unk> have to come from <unk> you can use a post to <unk> arbitrary data to your own application, 不 所有 " 的 " 的 " 的 " ， 你 可以 使用 " 你 的 的 数据 的 数据, 但 并 不是 所有 的 post 都 来自 表单 ： 你 能 使用 一个 post 来 传输 任何 数据 到 你 自己 的 应用 上
call "pyarg_parsetuple()" (or one of its <unk> with one of the "y ", <unk> " or <unk> " format <unk>, 调用 " ( ( ) " ) " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 调用 " pyarg _ parsetuple ( ) " ( 或 其 <unk> 对象 之一 ) 并 传入 " y " , " w " or " s " 格式 代码 中 的 一个
if the expansion fails or if the path does not begin with a <unk> the path is returned unchanged., 如果 给出 了 如果 未 不 为 则 则 则 则 则 则 则 则 则 返回 " true " 返回 返回 的, 如果 展开 路径 失败 ， 或者 路径 不是 以 <unk> 号 开头 ， 则 路径 将 保持 不变
is there a newsgroup or mailing list <unk> to python?, 有 一个 c 的 或 ？ 的 列表 列表 列表, 是否 有 专门 针对 python 的 新闻组 或 邮件 列表 ？
you can, however, subclass the "connection" class and make "connect()" use your class instead by providing your class for the factory parameter., 你 ， " " " 类 ， 类 ， ， ， 使用 的 类 ， 你 你 你 你 的 类, 当然 ， 你 也 可以 创建 " connection " 类 的 子类 ， 然后 创建 提供 了 factory 参数 的 " connect ( ) " 方法
exception classes can be defined which do anything any other class can <unk> but are usually kept <unk> often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception, 可以 类 可以 定义 的 任何 任何 任何 任何 其他 任何 其他 ， ， 可以 通过 任何 <unk> 的 ， 但 通常 ， 在 只 在 的 的 的 的 的 的 的 的, 可以 定义 异常 类 ， 它 可以 执行 任何 其他 类 可以 执行 的 任何 操作 ， 但 通常 保持 简单 ， 只 提供 一些 属性 ， 这些 属性 允许 处理程序 为 异常 提取 有关 错误 的 信息
operation method name <unk> "__lt__()" <unk> " <unk> ">" <unk> "> " <unk> " " <unk> "! " <unk>, 操作 方法 的 " " ( " , " ) " , " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 运算 方法 名称 " < " " __ lt __ ( ) " " < " " __ <unk> __ ( ) " " > " " __ gt __ ( ) " " > " " __ <unk> __ ( ) " " " " __ eq __ ( ) " " ! " " __ <unk> __ ( ) "
for example, given the following package <unk>, 例如 ， 给定 以下 包 包 :, 例如 ， 给定 以下 的 包 布局 结构 :
a tuple consists of a number of values separated by <unk> for instance:, 元组 元组 的 的 的 值 的 值 的 值, 一个 元组 由 几个 被 逗号 隔开 的 值 组成 ， 例如
if the calling thread has not acquired the lock when this method is called, a "runtimeerror" is raised., 如果 该 调用 线程 不 存在 锁 ， 此 方法 会 引发 " runtimeerror ", 如果 调用 线程 在 没有 获得 锁 的 情况 下 调用 这个 方法 ， 会 引发 " runtimeerror " 异常
asyncio also supports legacy generator based coroutines., asyncio 对象 支持 基于 生成器 生成器 的 生成器, asyncio 也 支持 旧式 的 基于 生成器 的 协程
the whitespace characters replaced are as follows: <unk> <unk> vertical <unk> <unk> and carriage return <unk>, 可以 字符 字符 的 （ 例如 " ' <unk> ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", 会 被 替换 的 空白 字符 如下 ： 制表 ， 换行 ， 垂直 制表 ， 进纸 和 回车 ( " ' \ t \ n \ v \ f \ r ' " )
docstrings are now shown for all special forms and special generic aliases (like <unk> and <unk>, 以下 是 支持 所有 的 特殊 的 特殊 ， 例如 ， " " " " " " " " " " " " " " " " " " " " ", 现在 将 为 所有 特殊 形式 和 特殊 通用 别名 ( 例如 " <unk> " 和 " list " ) 显示 文档 字符串
if timeout is a float then the call blocks for at most that many seconds, 如果 timeout 是 一个 " ， 则 ， 则 该 的 的 ， 则 该 调用, 如果 timeout 是 一个 浮点 型 ， 该 方法 会 最 多 阻塞 这么 多 秒
<unk> lists are really variable length <unk> not <unk> style linked lists, " 列表 : : 是 不 的 的 的 不 <unk> 的 列表, cpython 的 列表 实际上 是 可变 长度 的 数组 ， 而 不是 <unk> 风格 的 <unk>
if no display is specified then the main application window is <unk>, 如果 没有 为 指定 ， 则 则 则 会 引发 " 窗口, 如果 未指定 显示 ， 则 假定 <unk> 应用程序 窗口
the <unk> project <unk> has many other modules for numerical <unk>, " <unk> " 的 " <unk> 有 许多 其他 许多 其他 模块 的 模块, <unk> 项目 < https : / / <unk> . org > 有 许多 其他 模块 用于 数值 计算
applies the logical operation or between each <unk> <unk>, <unk> <unk> 的 或 或 之间 的 之间 之间 为 " <unk> ", 在 操作数 的 每个 数位 间 应用 <unk> or
this example shows how a subclass of <unk> can be used to store additional information about an object and affect the value that's returned when the referent is <unk>, 这个 例子 演示 了 如何 了 一个 " " " " 的 " 来 创建 一个 特定 的 的 的 的 的 值, 这个 例子 演示 了 如何 将 " <unk> " 的 一个 子类 用于 存储 有关 对象 的 附加 信息 并 在 引用 被 访问 时 影响 其所 返回 的 值 :
close the control file descriptor of the kqueue object., 关闭 已 文件 描述符 的 文件 描述符, 关闭 用于 控制 kqueue 对象 的 文件 描述符
<unk> is a subclass of <unk> and as such also functions as an example of creating custom threads., " 是 " " " 的 子类 子类 子类 的 子类 子类 ， 作为 作为 作为 函数 创建 一个 一个 一个 一个 一个 一个 一个, " <unk> " 类 是 " thread " 类 的 子类 ， 因此 可以 像 一个 自定义 线程 一样 工作
in <unk> numbers like <unk> and <unk> do not have exact representations in binary floating point, 在 " <unk> " 和 " <unk> ( ) " 和 " <unk> 不 不 不 不 二进制 的 的, <unk> ， " 1.1 " 和 " 2.2 " 这样 的 数字 在 二进制 浮点 中 没有 精确 的 表示
the parameter v must not be "null"; it will not be <unk>, 形参 必须 不 为 " null " ， 它 将 被 为, 形参 v 不可 为 " null " ； 它 不会 被 检查
same as <unk> but the return value is in bytes., 与 " gettempprefix ( ) " 相同 ， 返回 返回值 为 ", 与 " <unk> ( ) " 相同 ， 但 返回值 为 字节 类型
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
the second function <unk> is restricted to only use positional parameters as there is a "/" in the function definition:, 第二个 函数 " <unk> ( ) " 方法 在 在 函数 定义 的 函数 定义 是 在 函数 中 的 函数, 第二个 函数 " <unk> _ only _ arg " 在 函数 定义 中 带有 " / " ， 限制 仅 使用 位置 形参
the specific date of the epoch and the handling of leap seconds is platform dependent, 该 的 的 的 的 日期 ， 是 " 的 的 的, <unk> 的 具体 日期 和 <unk> seconds 的 处理 取决于 平台
it supports mapping access by column name and index, <unk> representation, equality testing and <unk>, 它 支持 通过 " 名称 和 和 " <unk> ( ) " 和 " <unk> " 和 " <unk> ", 它 支持 使用 列 名称 的 映射 访问 以及 索引 、 迭代 、 文本 表示 、 相等 检测 和 " len ( ) " 等 操作
the number of threads currently waiting in the <unk>, 线程 <unk> 的 的 的 的, 当前 时刻 正在 栅栏 中 阻塞 的 线程 数量
closes the socket to the remote <unk>, 将 套 接字 到 远程 远程 <unk>, 关闭 连接 远程 主机 的 套 接字
a dictionary representing the string environment at the time the interpreter was started, 一个 字典 字符串 包含 <unk> 的 的, 一个 表示 解释器 启动 时间 点 的 字符串 环境 的 字典
the solution for this problem is to create a virtual environment , a self contained directory tree that contains a python installation for a particular version of python, plus a number of additional <unk>, 对于 这个 是 一个 创建 一个 一个 ， ， ， ， 一个 包含 一个 python 一个 一个 python 的 一个 python 的 一个 python 版本 的 版本 的 版本 的 版本 的 版本, 这个 问题 的 解决方案 是 创建 一个 virtual <unk> ， 一个 目录 树 ， 其中 安装 有 特定 python 版本 ， 以及 许多 其他 包
(contributed by serhiy storchaka in bpo <unk>, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）, （ 由 serhiy storchaka 在 bpo <unk> 中 贡献 。 ）
aiff is audio <unk> file format, a format for storing digital audio samples in a file, 对于 " " " file 文件 文件 的 文件 的 的 文件 的 文件 的 文件, aiff 是 音频 交换 文件格式 ( <unk> <unk> file format ) ， 一种 用于 在 文件 中 存储 <unk> 采样 的 格式
on error, the debug hooks use the "tracemalloc" module to get the traceback where a memory block was allocated, 在 ， ， ， 使用 " 使用 " 模块 " 模块 ， 请 使用 " 内存 内存 块, 在 出错 时 ， 调试 钩子 使用 " tracemalloc " 模块 来 回溯 内存 块 被 分配 的 位置
the random parameter of <unk> has been deprecated, 随机 的 已 被 移除 已 被 弃用, " random . <unk> ( ) " 的 random 形参 已 被 弃用
pep <unk> <unk> long integers and integers, pep <unk> : <unk> <unk> 的 的 和, pep <unk> : 统一 长 整数 和 整数
return "1" if found and removed, "0" if not found <unk> action <unk> and " 1" if an error is encountered, 如果 o o 和 nan 则 返回 " 0 " ， 则 " 1 " ， 则 " 1 " ， 则 " 1 " ， 则 " " ", 如果 找到 并 移除 返回 " 1 " ， 如果 未找到 （ 无 操作 ） 返回 " 0 " ， 如果 遇到 错误 则 返回 " 1 "
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
the help message is a bit <unk>, 帮助 消息 的 是 一个 <unk> 的, 帮助 信息 <unk> 不同
this makes the <unk> between the index for a node and the <unk> for its children slightly less <unk> but is more suitable since python uses zero based indexing, 这 使得 对 " <unk> " 的 " ， ， 的 的 的 的 的 ， 但 但 从 python python 的 python ， 而 不是 从 python 的, 这 使得 节点 和 其 <unk> 节点 索引 之间 的 关系 <unk> 直观 但 更加 适合 ， 因为 python 使用 <unk> 的 索引
some ways to invoke foreign function calls may raise an auditing event <unk> with arguments <unk> <unk> and <unk>, 某些 某些 的 函数 函数 ， 调用 " asyncio . <unk> " ， " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 引发 一个 审计 事件 " ctypes . call _ function " ， 附带 参数 " func _ pointer " , " arguments "
changed in version 3.6: accepts a path like object ., 在 3.6 版 更改 : 接受 一个 类 路径 对象, 在 3.6 版 更改 : 接受 一个 类 路径 对象
changed in version 3.5: added the context argument., 在 3.5 版 更改 : 添加 上下文 上下文, 在 3.5 版 更改 : added the context argument .
if l is given, it specifies the number of lines that each week will use, 如果 存在 ， 则 ， 则 返回 每个 的 的 的 的 次数, l 指定 了 <unk> 占用 的 行数
(contributed by kyle <unk> in bpo <unk>, （ 由 kyle stanley 在 bpo <unk> 中 贡献 。 ）, （ 由 kyle stanley 在 bpo <unk> 中 贡献 。 ）
now add the shape to the <unk> <unk> and use it:, 现在 " 添加 " " " " " " 和 " io " 和 ", 接下来 将 shape 对象 添加 到 screen 对象 的 形状 列表 并 使用 它 :
the "dialect" class is a container class <unk> on primarily for its attributes, which are used to define the parameters for a specific <unk> or <unk> instance., " 类 " 类 是 一个 类 类 用于 类 用于 类 的 的 类 ， 用于 用于 用于 用于 特定 的 的 的 " <unk> " 或 " <unk> ", " dialect " 类 是 主要 依赖于 其 属性 的 容器 类 ， 用于 将 定义 好 的 参数传递 给 特定 的 " reader " 或 " writer " 实例
common patterns for working with "counter" objects:, 用于 " " " " 的 " 的 ", " counter " 对象 的 常用 <unk>
the former is called to implement the shallow copy <unk> no additional arguments are passed, 这个 是 被 实现 " ( ) " ) " 参数 的 参数 参数 参数 参数, 调用 <unk> 以 实现 浅层 拷贝 操作 ， 该 方法 <unk> 传入 额外 参数
it returns a sorted list of strings:, 它 返回 一个 列表 的 列表 列表, 它 返回 一个 排序 过 的 字符串 列表 :
positional or keyword arguments, 位置 或 关键字 参数, 位置 或 关键字 参数
the "inspect" module provides several useful functions to help get information about live objects such as modules, classes, methods, functions, <unk> frame objects, and code objects, " logging " 模块 提供 了 一些 函数 的 帮助 的 函数 对象 ， ， ， 、 对象 、 对象 、 对象 的 对象 的 对象, " inspect " 模块 提供 了 一些 有用 的 函数 帮助 获取 对象 的 信息 ， 例如 模块 、 类 、 方法 、 函数 、 回溯 、 帧 对象 以及 代码 对象
this is simpler to use than setting up a callback function on a raw weak reference, since the module automatically ensures that the finalizer remains alive until the object is collected., 这 使得 使用 " <unk> " 对象 ， 的 函数 对象 ， 它 的 函数 ， ， 该 模块 ， 该 对象 ， 该 对象 对象 ， 该 对象, 这比 在 原始 弱 引用 上 设置 回调 函数 更 简单 ， 因为 模块 会 自动 确保 对象 被 回收 前 终结 器 一直 保持 存活
1 <unk> <unk> python launcher for windows 1 for all users, " <unk> . <unk> " python python python windows 的 python 启动器 适用 于 windows 的, include _ lib 安装 标准 库 和 扩展 模块 1 include _ pip 安装 捆绑 的 pip 和 <unk> 1 include _ <unk> 安装 调试 符号 ( . pdb ) 0 include _ <unk> 安装 tcl / tk 支持 和 idle 1 include _ test 安装 标准 库 测试 套件 1 include _ tools 安装 实用程序 脚本 1 <unk> 仅 安装 启动器
a <unk> exception is now raised instead of "oserror" for certain types of invalid or <unk> gzip files, " " " " 异常 " 现在 是 " " " " 的 " 的 " 或 " " " 或 " " " " ", 对于 特定 类型 的 无效 或 已损坏 gzip 文件 现在 将 引发 " <unk> " 而 不是 " oserror "
file object an object <unk> a file oriented api (with methods such as "read()" or <unk> to an underlying resource, 文件 对象 一个 一个 文件 对象 （ 例如 c api 的 " ） ， 方法 或 <unk> <unk> 或 <unk> 的 <unk>, file object 文件 对象 <unk> 提供 面向 文件 api 以 使用 下层 资源 的 对象 （ 带有 " read ( ) " 或 " write ( ) " 这样 的 方法 ）
please see <unk> for more information about platform support for modifying symbolic link <unk>, 请参阅 请参阅 请参阅 了解 了解 更 多 的 更 多 细节 ， 支持 的 支持 的 支持, 请参阅 " <unk> ( ) " 了解 有关 修改 符号 链接 元 数据 的 平台 支持 的 更 多 信息
how stable is python?, 如何 稳定 的 稳定, python 有 多 稳定 ？
for the reference documentation on the last two options, see configuration functions, 对于 函数 的 的 的 ， 两个 ， 请参阅 函数 函数, 有关 最后 两个 选项 的 参考 文档 ， 请参阅 配置 函数
<unk> <unk> a formatter object for this handler to <unk>, " <unk> . <unk> _ <unk> ( ) " 的 对象 对象 对象 的 对象 对象, " <unk> ( ) " 选择 一个 该 处理程序 使用 的 formatter 对象
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
"hashlib" secure hashes and message digests, " hashlib " hashlib " 与 " 消息 消息, " hashlib " 安全 哈希 与 消息 摘要
the <unk> form of shebang line has one further special property, <unk> 的 的 参数 的 有 一个 特殊 的 特殊 的, shebang line 的 " / <unk> / bin / <unk> " 形式 还有 一个 特殊 属性
compared to the built in "float" implementation of binary floating point, the class is especially helpful for, 将 内置 " " " " " " 实现 " 实现 " 类 实现 ， 类 是 是 用于 的 的, 相比 内置 的 " float " 二进制 浮点 实现 ， 该类 特别 适用 于
this module provides utilities for common tasks <unk> the "with" statement, 此 模块 提供 了 常见 的 常见 的 " with " 语句 语句, 此 模块 为 涉及 " with " 语句 的 常见 任务 提供 了 实用 的 工具
options you shouldn't use, 不 应当 使用 的 选项, 不 应当 使用 的 选项
this includes the characters space, <unk> <unk> return, <unk> and vertical tab., 这 包括 字符 字符 " " " " " " " 和 " <unk> " 和 " <unk> " 和 ", 其中 包括 空格 、 制表 、 换行 、 回车 、 进纸 和 <unk> 制表符
this simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in json requires a bit of extra <unk>, 这 简单 的 例子 : 可以 是 列表 和 ， 但 ， 但 " 类型 " 类 的 实例 的 实例, 这种 简单 的 序列化 技术 可以 处理 列表 和 字典 ， 但是 在 json 中 序列化 任意 类 的 实例 需要 额外 的 <unk>
changed in version 3.5: added the members parameter., 在 3.5 版 更改 : 添加 了 形参, 在 3.5 版 更改 : 添加 了 <unk> 形参
a tutorial on basic authentication , with examples in python., 在 posix 上 ， 请 用 的 的, 关于 基本 的 验证 的 入门 指南 ， 带有 一些 python 的 示例
the value may be <unk> in the case of floating point and <unk> <unk> literals, 值 可能 是 <unk> 浮点数 浮点数 , <unk> , <unk> , <unk> , ' " ' " ' " ' " ' " ' ", 对于 浮点数 和 <unk> （ 复数 ） 的 情况 ， 该值 可能 为 近似值
in the <unk> all execution is performed by calling the <unk> function, 在 " <unk> " 所有 " 执行 " " " " " " " " ", 在 文件 " setup . py " 里 ， 所有 动作 的 入口 通过 " setup " 函数
use the <unk> <unk> <unk> and <unk> functions, 请 " " <unk> " , " <unk> " 和 " <unk> _ <unk> ( ) " 函数, 请 使用 " load ( ) " , " <unk> ( ) " , " dump ( ) " 和 " <unk> ( ) " 等 函数
changed in version 3.3: the locking scheme has changed to per module locks for the most part, 在 3.3 版 更改 : the 除了 " 的 " to " 模块 的 模块 的 " 模块, 在 3.3 版 更改 : the <unk> <unk> has <unk> to per module <unk> for the <unk> part
pep <unk> abi version <unk> <unk> files pep written by barry <unk>, pep <unk> : : <unk> files files files pep pep 由 <unk> 撰写, pep <unk> abi version <unk> . so files pep 由 barry warsaw 撰写
extensible json encoder for python data <unk>, " parser " 的 python 的 的 的, 用于 python 数据结构 的 可 扩展 json 编码器
the <unk> attribute contains a list of all the problems found when parsing this message, " <unk> " 属性 属性 包含 包含 了 所有 的 的 的 列表, <unk> 属性 包含 在 解析 消息 时 发现 的 所有 问题 的 列表
each logger can have zero, one or more handlers associated with it <unk> the <unk> method of <unk>, 每个 记录器 有 可以 有 一个 或 多个 或 多个 的 的 的 的 方法, 每个 记录器 可以 有 零个 、 一个 或 多个 与 之 关联 的 处理程序 （ 通过 " logger " 的 " <unk> ( ) " 方法 ）
other module level changes, 其他 模块 级 更改, 其他 模块 级 更改
if a conversion is specified, the result of <unk> the expression is converted before formatting, 如果 <unk> 是 <unk> ， ， <unk> 的 表达式 ， 则 会 在 在, 如果 指定 了 转换 符 ， 表达式 的 求值 结果 会先 转换 再 格式化
return the single most common data point from <unk> or <unk> data, 返回 最 数据 的 数据 数据 数据 数据 数据 数据 数据 数据 数据 数据, 从 <unk> 或 <unk> 的 data 返回 单个 出现 最多 的 数据 点
some examples of <unk> literals:, 一些 示例 的 示例 用法 示例 :, 一些 <unk> 数字 面值 的 示例 如下 :
extract a member from the archive as a file object, 从 一个 中 的 的 的 对象 的 一个 文件 对象, 将 归档 中 的 一个 成员 提取 为 文件 对象
in either form the input string may also have leading and/or trailing whitespace, 在 ， 中 的 字符串 字符串 字符串 字符串 可能 可能 导致 不 包含 的 的, <unk> 哪 <unk> 形式 的 输入 字符串 也 都 可以 带有 前缀 和 / 或 后缀 的 空格符
<unk> specifies a name whose value will be used in place of the text option resource, " _ <unk> _ <unk> _ <unk> _ <unk> " 名称 的 值 将 被 用作 <unk>, 文本 变量 specifies a name <unk> value will be used in <unk> of the text option resource
using python on windows, 在 windows 上 python, 在 windows 上 使用 python
normally, multiple threads in the python interpreter can't get in each <unk> way, because there is a global lock <unk> python's entire object space, 在 解释器 中 的 python 解释器 中 的 的 每个 每个 ， ， ， ， ， ， 的 全局 全局 ， 的 对象 的 对象, 通常 ， python 解释器 里 多个 线程 无法 进入 <unk> 的 路径 ， 因为 <unk> 全局 锁 保护 着 python 整个 对象 空间
one may also define an abstract base class by passing the metaclass keyword and using <unk> directly, for example:, 一个 可以 还 定义 了 " 类 " " " " " " 使用 的 " 和 " 使用 的 的, 当然 你 也 可以 直接 使用 " abcmeta " 作为 元类 来 定义 抽象 基类 ， 例如 ：
parameters: canvas a <unk> a <unk> or a "turtlescreen", 参数 : : 一个 一个 一个 " socket . canvas " 或 " socket ., 参数 : canvas 一个 " tkinter . canvas " , " scrolledcanvas " 或 " turtlescreen " 类 对象
"ctypes" checks for "null" when <unk> pointers (but <unk> invalid non "null" pointers would crash <unk>, " ctypes " " " " " " " <unk> " 时 ， 如果 失败 时 ， " null " ， " " " " " " " " ", <unk> 引用 指针 的 时候 ， " ctypes " 会 <unk> 你 检测 是否 指针 为 " null " ( 但是 <unk> 引用 无效 的 非 " null " 指针 <unk> 导致 python 崩溃 ) :
changed in version 3.6: added support for the "'e'" format., 在 3.6 版 更改 : 添加 了 " " ' " ' ", 在 3.6 版 更改 : 添加 了 对 " ' e ' " 格式 的 支持
let's take an example with a simple script:, 让 我们 一个 一个 一个 例子 的 例子 :, 我们 来 用 单个 脚本 <unk> ：
<unk> return the current <unk> as color specification string, possibly in tuple format (see example), " <unk> ( ) " 返回 返回 当前 的 字符串 的 值 ， 返回 " " " " ", " fillcolor ( ) " 返回 以 颜色 描述 字符串 或 元组 ( 见 示例 ) 表示 的 当前 填充 颜色
another minor reason is that the colon makes it easier for editors with syntax <unk> they can look for <unk> to decide when indentation needs to be increased instead of having to do a more <unk> parsing of the program text., 另 一个 " 的 " ， ， 它 允许 为了 为了 为了 ， ， ， ， 的 的 时候 ， 以便 需要 的 的 的 的 的 时候 ， 以便 <unk> <unk> 的 的 的, 另 一个 次要 原因 是 冒号 使 带有 语法 <unk> 显示 的 编辑器 更 容易 工作 ； 他们 可以 寻找 冒号 来 决定 何时 需要 增加 缩进 ， 而 不必 对 程序 文本 进行 更 <unk> 的 解析
pop and return the smallest item from the heap , <unk> the heap invariant, 弹 并 返回 返回 当前 窗口 的 <unk> <unk>, 弹出 并 返回 heap 的 最小 的 元素 ， 保持 堆 的 <unk>
"'r'" read only mode., 将 只读 仅 仅, " ' r ' " 只读 模式
if there is no such parameter or the "robots.txt" entry for this parameter has invalid syntax, return "none"., 如果 没有 没有 参 ， 则 或 或 的 的 " 则 " ， 则 返回 " none ", 如果 此形 参 不 存在 或者 此形 参 的 " robots . txt " 条目 存在 语法错误 ， 则 返回 " none "
<unk> a labels such as <unk> <unk> <unk> <unk> are still supported, but "x <unk> no longer matches <unk> <unk>, <unk> 一个 <unk> 的 " <unk> " " " " " " <unk> " " 是 <unk> 是 " <unk> " ， 但 不会 被 " <unk> ", <unk> a 标签 例如 " www . <unk> <unk> <unk> . org " 仍然 受 支持 ， 但 " x . python . org " 不再 能 匹配 " <unk> <unk> . python . org "
(contributed by <unk> <unk> in bpo <unk>, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> <unk> 在 bpo <unk> 中 贡献 。 ）
for an explanation of why the "if __name__ <unk> part is <unk> see programming <unk>, 对于 ， 的 的 的 的 （ 例如 " <unk> ” ） ， 请参阅 参见 <unk> ”, 关于 为什么 " if __ name __ ' __ main __ ' " 部分 是 必需 的 解释 ， 请 参见 编程 指导
for compound field names, these functions are only called for the first component of the field name; subsequent components are handled through normal attribute and indexing operations., 对于 " 字段 " 的 ， 这些 函数 都 是 在 的 的 的 的 的 的 是 是 由 和 的 的 的 的, 对于 复合 字段名 称 ， 仅会 为 字段名 称 的 第一个 组件 调用 这些 函数 ； 后续 组件 会 通过 普通 属性 和 索引 操作 来 进行 处理
<unk> create a tarfile with gzip compression, " 创建 . <unk> " 创建 一个 gzip 压缩 的 压缩, " ' x : gz ' " 使用 gzip 压缩 创建 tarfile
forkserver when the program starts and <unk> the forkserver start method, a server process is started, 在 当 程序 程序 时 ， ， ， 启动 调用 ， 启动 ， 返回 一个, forkserver 程序 启动 并 选择 forkserver 启动 方法 时 ， 将 启动 服务器 进程
<unk> the python interface hides all these details, python python 接口 的 了 所有 这些 这些, <unk> 的 是 ， python 接口 隐藏 了 所有 这些 细节
the <unk> class has deprecated the <unk> attribute in favor of the <unk> attribute which has the same information, " 类 " 类 具有 " __ " __ " 属性 " 属性 的 属性 属性 " 属性 " 的 的 的, " typing . namedtuple " 类 已弃 用 了 " _ field _ types " 属性 而 改用 具有 同样 信息 的 " __ annotations __ " 属性
the arguments used to <unk> the process, 用于 用于 的 <unk> 的, 被 用作 启动 进程 的 参数
<unk> <unk> b)" set pencolor to the rgb color represented by r , <unk> , and b, " <unk> _ <unk> " , " ' " 将 将 <unk> <unk> <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk>, " pencolor ( r , g , b ) " 设置 画笔 颜色 为 以 r , g , b 表示 的 rgb 颜色
others are not supposed to have <unk> digits and need to be <unk>, 将 不会 被 转换 为 为 小端序 ， 并 将 导致 为 为, 另 一些 <unk> 不 应 具有 多余 位 ， 需要 验证 有效性
the encode and decode arguments must adhere to the "codec" interface, " quopri 和 与 参数 必须 必须 到 的 接口, encode 和 <unk> 参数 必须 遵循 " codec " 接口
(contributed by victor stinner in bpo <unk>, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 上 贡献 。 ）
when the main thread exits, it is system defined whether the other threads <unk>, 当 线程 线程 线程 线程 时 ， 线程 会 被 线程 线程 线程 线程, 当 主线 程 退出 时 ， 由 系统 决定 其他 线程 是否 存活
i had a number of <unk> about the abc language, but also <unk> many of its features, 我 <unk> <unk> <unk> <unk> 的 ， ， ， 但是 ， 但 也 会 <unk> <unk> 的 的, 我 对 abc 语言 <unk> 许多 <unk> ， 但 同时 也 很 喜欢 它 的 许多 特性
the module's method table and initialization function, 函数 和 函数 和 函数 函数, 模块 方法 表 和 初始化 函数
"partial" objects are callable objects created by "partial()", " 对象 " 对象 对象 对象 对象 的 " 对象 " 对象, " partial " 对象 是 由 " partial ( ) " 创建 的 可 调用 对象
changed in version 3.8: new generation parameter., 在 3.8 版 更改 : 新 的 形参, 在 3.8 版 更改 : 新 的 <unk> 形参
changed in version 3.6: this opcode is used only for calls with positional arguments., 在 3.6 版 更改 : 此 方法 被 用作 参数 参数, 在 3.6 版 更改 : 此 操作码 仅 用于 附带 位置 参数 的 调用
the canonical name of this <unk> always lowercase and always suitable as a parameter to <unk> to create another hash of this type., 这个 的 的 名称 名 ， 总是 总是 被 作为 为 为 一个 " 的 " 对象 的 的, 此 哈希 对象 的 规范 名称 ， 总是 为 小写 形式 并且 总是 可以 作为 " new ( ) " 的 形参 用来 创建 另 一个 此 类型 的 哈希 对象
in this <unk> we explore the various <unk> for sorting data using python., 在 这种 情况 下 ， 我们 <unk> 使用 使用 的 的 数据, 在 本 文档 中 ， 我们 将 探索 使用 python 对 数据 进行 排序 的 各种 技术
the "textwrapper" instance attributes (and keyword arguments to the <unk> are as follows:, " 实例 " 实例 属性 " " " " 关键字 参数 的 方式 ：, " textwrapper " 的 实例 属性 （ 以及 构造 器 的 关键字 参数 ） 如下 所示 ：
new in version 3.6., 3.6 新版 功能 ., 3.6 新版 功能 .
using lists as stacks, 使用 作为 栈, 列表 作为 栈 使用
make an iterator that filters elements from data returning only those that have a corresponding element in <unk> that evaluates to "true", 创建 一个 迭代 器 ， 返回 一个 一个 的 的 的 ， ， 该 " 的 " " " " " " " " ", 创建 一个 迭代 器 ， 它 返回 data 中 经 selectors 真值 测试 为 " true " 的 元素
to do this, set the <unk> environment variable to the path of the required timezone <unk> relative to the root of the systems <unk> timezone database, usually located at <unk>, 要 指定 ， 设置 设置 <unk> <unk> " <unk> " <unk> " 的 <unk> 的 的 的 的 的 的 的 ， <unk> 在 <unk> ” 在 在 <unk> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /, 为此 ， 将 " tz " 环境变量 设置 为 所 <unk> <unk> 的 路径 ， 相对 于 系统 ' zoneinfo ' 时 区 数据库 的 根目录 ， 通常 位于 " / <unk> / <unk> / zoneinfo "
the <unk> conversion code corresponds to the <unk> type defined by <unk>, " <unk> " <unk> " 代码 " <unk> " <unk> " 的 " 定义 的 " 定义 _ <unk> " 的 ", " ' ? ' " 转换 码 对应 于 <unk> 定义 的 " _ bool " 类型
deprecated since version 3.3., 3.3 版后 已 移除 ., 3.3 版后 已 移除 .
"getpass" portable password input, " getpass " 便携式 密码 输入 输入, " getpass " 便携式 密码 输入 工具
the preferred way to use a semaphore is an "async with" statement:, 下面 的 用例 是 使用 是 一个 " async " " " ", 使用 semaphore 的 推荐 方式 是 通过 " async with " 语句
dictionary view the objects returned from <unk> <unk> and <unk> are called dictionary <unk>, 字典 从 " " " ( ) " 和 " time ( ) " 和 " <unk> " 字典 ( ) " 字典 的 字典 字典, dictionary <unk> 字典 视图 从 " dict . keys ( ) " , " dict . values ( ) " 和 " dict . items ( ) " 返回 的 对象 被 称为 字典 视图
if the form "" <unk> is present, it is initialized to a new ordered mapping receiving any <unk> keyword arguments, defaulting to a new empty mapping of the same type, 如果 " " " " " " " " ， 则 会 被 认为 一个 新 的 映射 ， 则 会 被 一个 新 的 " 实例 ， 则 一个 新 的 的 一个 新 的 的 元素, 如果 存在 " " identifier " " 这样 的 形式 ， 它会 被 初始化 为 一个 新 的 有序 映射 来 接收 任何 额外 的 关键字 参数 ， 默认 为 一个 相同 类型 的 空 映射
why isn't there a switch or case statement in python?, 为什么 在 在 或 中 的 或 多个 ？, 为什么 python 中 没有 <unk> 或 <unk> 语句 ？
creating a source <unk> the <unk> command, 创建 一个 / <unk> / <unk> / <unk> ., 创建 源码 发行 包 : <unk> 命令
a list of ids of the filters for this handler., 此 模块 的 的 列表 的, 由 处理程序 所 对应 过滤器 的 id 组成 的 列表
shape values are restricted to <unk> > 0", 比较 值 为 " 为 " 0 " " ", shape 形状 数组 中 的 值 被 限定 在 " shape [ n ] > 0 "
look up character by name, 将 字符 字符 的 字符, 按 名称 查找 字符
if c is <unk> this string is the character itself, 如果 c 为 " ' 则 此 字符串 字符串, 如果 c 是 可 打印 字符 ， 则 字符串 为 字符 本身
the record is <unk> and then sent to the syslog server, 随后 " " _ <unk> ( ) " ， 然后 将 被 移除, 记录 会 被 格式化 ， 然后 发送到 syslog 服务器
<unk> always <unk> the current task, allowing other tasks to <unk>, <unk> <unk> <unk> <unk> ， 当前 的 的 <unk> ， 其他 其他 其他 <unk> 的 其他 <unk>, " sleep ( ) " 总是 会 挂 起 <unk> ， 以 允许 其他 任务 运行
there's also a method to retrieve an entire string, <unk>, 当 还 方法 一个 一个 方法 ， 一个 一个 字符串, 还有 一个 可以 提取 整个 字符串 的 方法 " <unk> ( ) "
you can also use pydoc to start an http server on the local machine that will serve documentation to <unk> web browsers, 你 可以 通过 使用 " 来 使用 " 来 使用 " 的 " 来 获取 的 的 的 文档, 你 还 可以 使用 pydoc 在 本 <unk> 启动 一个 http 服务 ， 这 将 向 <unk> 的 web 浏览器 提供 文档 服务
otherwise you cannot be sure that processes which have put items on the queue will terminate, 否则 ， 不能 不能 ， 进程 将 被 阻塞 的 的 元素, 否则 不能 保证 这个 <unk> 队列 的 进程 可以 正常 终止
(contributed by victor stinner in bpo <unk>, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）
the <unk> module provides functions for implementing heaps based on regular lists, " 模块 " 模块 提供 了 有关 的 的 的 函数, " <unk> " 模块 提供 了 基于 常规 列表 来 实现 堆 的 函数
<unk> 1: unfortunately, the interpreter pushes at least one c stack frame for each python stack frame, <unk> 在 调用 中 的 解释器 解释器 的 的 一个 在 python 解释器 的 帧, <unk> 1 ： 不幸 的 是 ， 解释器 为 每个 python 堆栈 帧 推送 至少 一个 c 堆栈 帧
note, <unk> does not have access to the nested scopes <unk> <unk> in the enclosing environment., 注意 " 不 不 不 不 访问 " 的 <unk> ， 请 在 “ <unk> ” 中 的 的, 请 注意 ， eval ( ) 并 没有 对 <unk> 环境 下 的 ( 非 局部 ) 嵌套 作用域 的 访问 权限
<unk> accepts an optional "msg" argument, but <unk> does not., " <unk> 接受 接受 一个 可选 的 可 接受 ， 但 " ， 但 但 " <unk> ", " asyncio . future . cancel ( ) " 接受 一个 可选 的 " msg " 参数 ， 但 " concurrent . futures . cancel ( ) " 无 此参数
"control l" <unk> screen, " " " ( ) " , " ), " control l " 刷新 屏幕
module "base64" encode and decode mime base64 data, 模块 " " " 和 和 解码 和 解码 编码, 模块 " base64 " 编码 与 解码 mime base64 数据
added a new function <unk> for computing <unk> integer square <unk> without conversion to floating point, 添加 了 新 的 " math . <unk> ( ) " 函数 的 " <unk> ( ) " ， ， <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 添加 了 一个 新 函数 " math . <unk> ( ) " 用于 计算 精确 整数 <unk> 而 无需 转换 为 浮点数
new in version <unk>, 3.4 新版 功能 . 1 ., 3.5 . 3 新版 功能 .
if no file matching "key" is found, the constructor will raise <unk>, 如果 找 文件 ， 则 " " " ， 则 将 将 引发 " typeerror ", 如果 没有 找到 匹配 " key " 的 文件 ， 构造 器 将 引发 " <unk> "
additional information about using distutils can be found in the distutils <unk>, 有关 的 的 可以 使用 可以 在 <unk> 中 找到 找到 :, 关于 使用 distutils 的 额外 信息 可以 参考 distutils <unk>
"ipaddress" now supports ipv6 <unk> addresses <unk> address with suffix <unk>, " 现在 现在 支持 现在 支持 <unk> <unk> <unk> <unk> <unk> 的 的 的, " ipaddress " 现在 支持 ipv6 作用域 地址 （ 即 带有 " % < <unk> _ id > " 前缀 的 ipv6 地址 ）
a "tarfile" object can be used as a context manager in a "with" statement, " context 对象 可以 被 " with " 语句 上下文 管理器, " tarfile " 对象 可 在 " with " 语句 中 作为 上下文 管理器 使用
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
if replace is "false" (the default) the header is moved to the end of the list of headers, 如果 未 为 为 " false " ， 则 会 将 被 为 最后 末尾 末尾, 如果 replace 为 " false " （ 默认值 ） ， <unk> 字 段 会 被 移动 到 所有 <unk> 列表 的 末尾
although its standard documentation is <unk> good <unk> is available, which <unk> references, <unk> a book and others, <unk> 的 标准 的 文档 ， " " " " " " " " <unk> " ， ， ， ， ， ， <unk> <unk> 的 的, 尽管 <unk> 文档 <unk> 完整 ， 但 有 其他 资源 可以 参考 ， 比如 tk 手册 ， 教程 等
connection reset by <unk>, 通过 由 <unk> <unk>, 连接 被 <unk> 重置
one way to write small functions is to use the "lambda" expression, 一个 使用 的 的 的 函数 函数 使用 使用 的 表达式, 一个 编写 小 函数 的 方式 是 使用 " lambda " 表达式
a list of <unk> classes used for each weekday, 用于 的 的 的 的 的 的 类 的, 一个 对应 星期一 到 星期天 的 <unk> class 列表
this guide only <unk> the basic tools for building and distributing extensions that are provided as part of this version of python, 此 变量 仅 用于 构建 和 的 的 的 的 的 的 的 的 的 的 的 的, 本 指南 仅 介绍 构建 和 分发 扩展 的 基本 工具 ， 这些 扩展 是 作为 此 python 版本 的 一部分 提供 的
<unk> will be used to sort an array of <unk>, " 将 将 将 将 被 用来 为 一个 的 的 的, " <unk> ( ) " 将 用来 给 整数 数组 排序 :
if a keyword is already present (as an explicit keyword argument, or from another <unk> a "typeerror" exception is raised., 如果 一个 关键字 一个 关键字 参数 一个 一个 或 关键字 参数 或 ， 或 异常 ， 异常 异常 异常 异常 异常, 如果 一个 关键字 已 存在 （ 作为 显式 关键字 参数 ， 或 来自 另 一个 拆包 ） ， 则 将 引发 " typeerror " 异常
for unix, the epoch is <unk> 1, <unk> <unk> <unk>, 对于 ， " ' ' ' ' ' ' ' ' ' " , ' , ' , ' , ' " , " ' " , " ' " , " ' " ' ", 对于 unix ， <unk> 是 1970 年 1 月 1 日 00 : 00 : 00 （ utc ）
the "except" <unk> specify one or more exception handlers, 将 <unk> 的 一个 一个 或 异常 异常 异常 异常 异常, " except " 子句 指定 一个 或 多个 异常 处理器
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
changed in version 3.4: <unk> extensions are enabled by default., 在 3.4 版 更改 : <unk> _ <unk> " __ " __ " __ " __ " __ ", 在 3.4 版 更改 : 默认 启用 <unk> 扩展
set the message's envelope header to <unk> , which should be a string, 设置 栅栏 的 的 的 ， ， 应当 应当 为 一个 字符串, 将 信息 的 信封 头 设置 为 <unk> ， 这 应当 是 一个 字符串
deprecated python modules, functions and methods, 已弃 用 的 python 模块 、 函数 和 方法, 已弃 用 的 python 模块 、 函数 和 方法
return "time" object with same hour, minute, second, microsecond and <unk>, 返回 " o " 与 " 、 " 、 " , " 0 " 和 " microsecond ", 返回 具有 同样 hour , minute , second , microsecond 和 fold 值 的 " time " 对象
the factory has the following signature:, 以下 具有 下列 以下 如下 :, 可 调用 对象 factory 具有 如下 签名 :
<unk> the default exception handler implementation., " nis " 默认 异常 异常, " loop . default _ exception _ handler ( ) " 默认 异常 处理器 实现
<unk> returns a 3 tuple consisting of the exception class, the exception instance and a traceback object (see section the standard type <unk> identifying the point in the program where the exception occurred, " 返回 ( ) " 返回 一个 包含 " 的 " 对象 的 " 实例 的 实例 ， 并且 一个 一个 " 对象 " 对象 ， 并 在 在 的 的 中 的 的 参数, " sys . exc _ info ( ) " 返回 一个 3 元组 ， 由 异常 类 、 异常 实例 和 回溯 对象 组成 （ 参见 标准 类型 层级 结构 一节 ） ， 用于 在 程序 中 标识 异常 发生 点
op must not be tracked by the collector <unk>, 不 必须 由 " " ( ) ", op 必须 尚未 被 垃圾 回收 器 追踪
here <unk> is the form of a python floating point literal, described in floating point literals, 这里 是 是 是 python 的 的 是 是 python 浮点数 的 的 的, 这里 ， " <unk> " 是 python 浮点数 的 字符串 形式 ， 详见 浮点 数字 面值
incremental encoding and decoding, 增量 编码 的 编码 和 解码, 增量 式 的 编码 和 解码
weak reference objects have no methods and no attributes besides <unk>, 弱 对象 引用 对象 没有 没有 方法 没有 任何 属性, 弱 引用 对象 没有 " <unk> .__ callback __ " 以外 的 方法 和 属性
return the minimum normalized positive float <unk> as c <unk>, 返回 o1 的 的 " " " " c " c c " c " c " c " " c " ", 返回 最小 可 表示 <unk> 正 浮点数 <unk> _ min 为 c " double "
generate reports on the data, 在 窗口 的 数据, 生成 有关 数据 的 报告
group should be <unk> reserved for future extension when a <unk> class is implemented., 组 应当 是 在 " <unk> " 时 ， 当 你 的 的 时候 ， 当 你 的 的, group 应该 为 " none " ； 为了 <unk> 扩展 " <unk> " 类 实现 而 保留
a "runtimeerror" is now raised when the custom metaclass doesn't provide the <unk> entry in the namespace passed to <unk>, 当 " 当 " 时 ， 时 将 被 时 ， " 将 " " " " " " " " " 条目, 现在 当 自定义 元类 未 在 传给 " type .__ new __ " 的 命名 空间 中 提供 " __ <unk> __ " 入口 时 将 引发 " runtimeerror "
the arguments shown above are merely some common ones, 上面 的 的 是 一些 一些 的, 上面 显示 的 参数 只是 常见 的 一些
version 3 adds support for object <unk> and recursion, " decimal " 支持 支持 支持 的 对象 支持, 第 3 版 添加 了 对于 对象 实例 化 和 递归 的 支持
<unk> float, <unk> is a tuple of an int, a float and a string., " <unk> " : " " 是 一个 一个 一个 一个 一个 一个 一个 字符串 和 一个 字符串, " tuple [ int , float , str ] " 是 一个 由 整数 、 浮点数 和 字符串 组成 的 <unk>
it will raise an exception if the output stream is not seekable and nframes does not match the number of frames actually written., 如果 达到 输出 的 输出 ， 则 会 被 取消 ， 则 不 不 不 存在 则 不 不 存在 的, 如果 输出 流 不可 查找 且 nframes 与 实际 写入 的 帧 数 不 匹配 时 引发 异常
format units for sequences may be <unk>, 格式 的 格式 的 序列 可能 可能 是, 序列 中 的 格式 单元 可能 有 嵌套
the default filename is the last filename used, 默认 文件名 为 文件名 文件名, 默认 文件名 为 最近 所 使用 的 文件名
by value lookup of the value of a and b will return a, 由 value value value 的 的 " a " b " 将 返回 " a ", <unk> 查找 a 和 b 的 值 将 返回 a
return a k length list of unique elements chosen from the population sequence or set, 返回 一个 元素 元素 ， 返回 一个 元素 的 元素 ， 返回 一个 元素, 返回 从 总体 序列 或 集合 中 选择 的 唯一 元素 的 k 长度 列表
it does so by implementing its own <unk> method for <unk> classes in a <unk> order that supports <unk> multiple inheritance, 它 通过 实现 由 " 的 " 方法 的 " " " " " " " " 的 " 的 " 的 " 的 " 的 ", 它 做到 这 一点 是 通过 实现 自己 的 " __ <unk> __ ( ) " 方法 ， 这样 就 能 以 可 预测 的 <unk> 类 ， 并且 支持 协作 多重 继承
this bytes object will be the same length as the <unk> of the digest given to the constructor, 这 字节 对象 对象 与 相同 的 的 相同 的 相同 的 相同, 这个 字节 串 数据 的 长度 将 与 传给 构造 器 的 摘要 的 长度 digest _ size 相同
the remaining methods will raise "oserror" if called after the "close()" method has been called, 如果 调用 调用 " close ( ) " 方法 调用 " close ( ) " 方法 调用 调用 " close ( ) " 方法, 在 " close ( ) " 方法 已 被 调用 后 其余 方法 将会 引发 " oserror "
"0" (the default) means only perform absolute imports, " " " " " " 仅 仅 为 " 的, " 0 " ( 默认值 ) 意味着 仅 执行 绝对 导入
changed in version 3.6: the dir parameter now accepts a path like object ., 在 3.6 版 更改 : the 形参 现在 接受 一个 类 路径 对象, 在 3.6 版 更改 : dir 参数 现在 可 接受 一个 路径 类 对象 ( path like object )
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
return the data for the specified year ready for formatting <unk> to <unk>, 返回 指定 的 的 的 的 的 的 的 的 的 " 为 ", 返回 可以 用来 <unk> 的 指定 年 月 的 数据 ( 与 " <unk> ( ) " 类似 )
read data from stdout and stderr , until eof is <unk>, 从 stdout 和 和 <unk> ， 则 会 被 ", 从 stdout 和 stderr 读取数据 ， 直至 到达 eof ；
provides a dictionary, based on <unk> which is to be url encoded and sent to the web server, 提供 基于 基于 的 的 ， ， 被 设计 ， 并且 将 被 转换 为, 基于 " <unk> " 提供 一个 字典 ， 它 将 被 执行 url 编码 并 发送至 web 服务器
this is a bytes object of size <unk> which may contain bytes in the whole range from 0 to <unk>, 这是 一个 字节 字节 大小 字节 字节 ， 字节 字节 字节 的 字节 的 的 ， ， 从 " 0 ", 这是 一个 大小 为 " digest _ size " 的 字节 串 对象 ， 字节 <unk> 可 包含 0 至 255 的 完整 取值 范围
changed in version 3.8: on windows, "proactoreventloop" is now the default event loop., 在 3.8 版 更改 : 在 windows 上 ， 现在 会 被 默认 事件 事件 循环, 在 3.8 版 更改 : 在 windows 上 ， " proactoreventloop " 现在 是 默认 的 事件 循环
however, this interface is <unk> it's better for the caller to open the file itself, and be sure that, when required, the mode is "'rb'" or <unk> on windows., 但是 ， 此 方法 ， 在 在 打开 打开 打开 打开 打开 打开 文件 打开 文件 时 ， 在 在 时 的 时 ， 在 在 时 时 被 执行, 但是 ， 此 接口 已 被 弃用 ； 在 windows 中 调用者 最好 是 自行 打开 文件 ， 并 在 需要 时 确保 模式 为 " ' rb ' " or " ' <unk> ' "
"audioop" manipulate raw audio data, " audioop " audioop 原始 音频 数据, " audioop " 处理 原始 音频 数据
option description state either <unk> "disabled" or <unk>, 选项 描述 状况 " " " " " " " " 或 " <unk> " 或 ", 选项 描述 状况 <unk> " normal " , " disabled " or " <unk> "
please note that in the event of an exception an archive opened for writing will not be <unk> only the internally used file object will be closed, 请 注意 在 在 " 中 " 异常 中 的 异常 的 的 的 的 的 ， 将 被 引发 的 文件 对象, 请 注意 在 发生 异常 事件 时 被 打开 用于 写入 的 归档 将 不会 被 终结 ； 只有 内部 使用 的 文件 对象 将 被 关闭
<unk> would be interpreted as a reference to group <unk> not a reference to group 2 followed by the literal character <unk> the following substitutions are all equivalent, but use all three variations of the replacement string., " _ <unk> ( ) " 被 用于 引用 的 的 的 的 ， 但 " 的 " ， 但 " 的 的 所有 所有 ， 但 它们 在 所有 字符串 的, ( " \ 20 " 将 被 解释 为 对 组 20 的 引用 ， 而 不是 <unk> 2 的 引用 ， 后 跟 字面 字符 " ' 0 ' " 。 ) 以下 替换 都 是 等效 的 ， 但 使用 所有 三种 变体 替换 字符串
this method acts like <unk> but <unk> up all waiting tasks., 这个 方法 类似 于 " <unk> ( ) " 但 但 所有 所有 所有, 此 方法 的 行为 类似 于 " notify ( ) " ， 但会 唤醒 所有 正在 等待 的 任务
"__path__" a list of strings specifying the search path within a package, " 字符串 " 字符串 包含 包含 字符串 字符串 搜索 路径 字符串, " __ path __ " 指定 在 一个包 中 搜索 路径 的 一个 字符串 列表
for example, for a "context" instance "c" and "decimal" instance <unk> <unk> is equivalent to <unk> <unk>, 例如 ， " " " " 实例 的 " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 例如 ， 对于 一个 " context " 的 实例 " c " 和 " decimal " 的 实例 " x " ， " c . exp ( x ) " 就 等价 于 " x . exp ( context c ) "
the pointer argument may not be "null"., 参数 参数 可能 不 为 " null ", pointer 参考 可以 不 为 " null "
see also the examples <unk>, 另 请参阅 示例 示例, 另 请参阅 examples 小节
when omitted, the default is to use the flags that result in the most secure dll load to avoiding issues such as dll <unk>, 当 ， 当 默认 默认 情况 下 ， ， ， 最 最 最 的 的 的 的 的 的 的 的, 省略 时 ， 默认设置 使用 最 安全 的 dll 加载 的 标志 ， 以 避免 dll <unk> 等 问题
sometimes it's useful to access members in enumerations <unk> (i.e. situations where <unk> won't do because the exact color is not known at program writing <unk>, 有时 ， 我们 " 的 " 的 " 的 " 的 " ( ) " 的 的 ， 但是 不会 影响 不会 在 不 在 在 的 的 的, 有时 对 枚举 中 的 成员 进行 程序化 访问 是 很 有用 的 （ 例如 在 某些 场合 不能 使用 " color . red " 因为 在 编程 时 <unk> 要 指定 的 <unk> 颜色 ）
positive and negative <unk> positive and negative zero, and <unk> are formatted as <unk> " <unk> "0", " 0" and "nan" respectively, regardless of the precision, 正 和 负数 和 和 和 和 和 和 和 <unk> 和 " <unk> " " " " " " " " " " " " " " " " " " " " " " " ", 正负 <unk> ， 正负 零 和 nan 会 分别 被 格式化 为 " <unk> " , " <unk> " , " 0 " , " 0 " 和 " nan " ， 无论 精度 如何 设定
if this attribute is accessed before the end of the stream has been reached, its value will be <unk>, 如果 此 属性 为 " true " ， 则 会 被 末尾 为 " 值 将 被 忽略, 如果 在 达到 数据流 末尾 之前 访问 此 属性 ， 其值 将 为 " b ' ' "
changed in version 3.3: added the policy keyword., 在 3.3 版 更改 : added policy 关键字, 在 3.3 版 更改 : 添加 了 policy 关键字
similar to the "parse()" method, except it takes a bytes like object instead of a file like object, 与 " " " ( ) " 方法 接受 它 它 它 的 一个 like object 对象 的 " 对象 " 对象, 与 " parse ( ) " 方法 类似 ， <unk> 它 要求 输入 为 一个 bytes like object 而 不是 类 文件 对象
the verbose argument is <unk> and deprecated., 参数 参数 是 是 <unk> 的 的, verbose 参数 已 不再 使用 并 进入 弃用 状态
previously, a "runtimeerror" was raised., 在 之前 版本 中则 中则 引发 " runtimeerror ", 在 之前 的 版本 中则 将 引发 " runtimeerror "
converts a number to a string using scientific <unk>, 将 一个 转换 为 字符串 字符串 ' " ' ' ' ", 使用 科学 计数法 将 一个 数字 转换 为 字符串
in order to ensure proper cleanup of <unk> <unk> should be called once (and only <unk> across all processes which have need for the shared memory block, 为了 为了 <unk> 的 的 的 ， ， 应该 应该 应该 在 " " " " 的 的 的 的 的 的 的 共享内存 块 的 的, 为了 执行 必要 的 资源 清理 ， 在 所有 使用 这个 共享内存 块 的 进程 中 ， " unlink ( ) " 应该 调用 一次 ( 且 只能 调用 一次 )
filters provide a <unk> <unk> facility for <unk> which log records to output., <unk> 提供 提供 一个 <unk> <unk> ， 用于 <unk> 的 的 的 的 的, 过滤器 提供 了 更 <unk> 的 <unk> ， 用于 确定 要 输出 的 日志 记录
when it is not handled, the python interpreter <unk> no stack traceback is printed, 当 执行 时 ， 时 将 执行 时 将 被 执行 时 将 引发 ", 如果 它 未 被 处理 ， 则 python 解释器 就 将 退出 ； 不会 打印 任何 栈 回溯 信息
<unk> for parsing "robots.txt" files, " urllib " 解析 解析 文件 解析 文件, " urllib . <unk> " 用于 解析 " robots . txt " 文件
refer to the file <unk> in the python distribution for the definitions of the names in the context of the language grammar, 将 到 文件 文件 中 的 文件 中 ， 上下文 管理器 上下文 管理器 的 上下文 管理器 的 上下文, 请参阅 python 发行版 中 的 文件 " <unk> / <unk> " ， 以 获取 语言 语法 上下文 中 名称 的 定义
along with the "queuehandler" class, <unk> can be used to let handlers do their work on a separate thread from the one which does the logging, " " " " " 的 " 可 可 调用 " 被 用来 处理程序 的 处理程序 的 的 处理程序 ， 线程 处理程序 的 线程, 配合 " queuehandler " 类 使用 ， " queuelistener " 可用 来 使 处理程序 在 与 执行 日志 记录 的 线程 不同 的 线程 上 完成 工作
for more information see configuration functions., 更 多 信息 ， 请参阅 配置 函数, for more information see 配置 函数 .
combining members of "flag", " flag " 成员 的 成员, 组合 " flag " 的 成员
b is the minor version number, incremented for less <unk> <unk> changes, <unk> 是 <unk> 的 第 第 4 " 的 " <unk> " " " <unk> ", b 称为 小 版本号 ， 它会 在 语言 特性 发生 较 小 改变 时 递增
if you want to debug them, you can call this function with flag set to "true", 如果 你 想要 你 的 你 可以 通过 " __ ( ) " 方法 设置 设置 " " ", 如果 要 调试 它们 ， 可以 设置 flag 参数 为 " true " 并 调用 此 函数
note that any python object references which are provided to the caller are borrowed <unk> do not decrement their reference <unk>, 请 注意 任何 对象 python python 对象 ， 是 是 是 的 的 引用 不会 引用 的 引用 引用 引用 引用 引用 引用 引用, 注意 任何 由 调用者 提供 的 python 对象 引用 是 <unk> 的 引用 ； 不要 递减 它们 的 引用 计数 ！
the following <unk> are supported where <unk>, 以下 是 是 是 <unk> 的 " " ", 在 可能 的 情况 下 ， 支持 以下 同义词 ：
compresslevel , if given, must be an integer between "1" and "9", compresslevel ， 如果 size 必须 为 为 一个 整数 ， 则 " " " ", 如果 给定 compresslevel ， 它 必须 为 " 1 " 至 " 9 " 之间 的 整数
on unix child watchers are used for subprocess <unk> <unk> see process watchers for more <unk>, 在 unix 系统 上 ， 使用 <unk> <unk> <unk> ， 请参阅 请参阅 进程 进程 进程, 在 unix 上 会 使用 child <unk> 来 让 子 进程 结束 等待 ， 详情 请参阅 进程 监视器
unfortunately, what is considered <unk> will necessarily <unk> as <unk> get more powerful and able to make more <unk> in a shorter period, 不幸 的 " " " " " " " <unk> " 的 <unk> ， ， ， 更 更 更 更 更 多 的 更 多 的 更 多 的 更 多, 不幸 的 是 ， 对 <unk> 是否 足够 的 标准 会 随着 计算机 <unk> 强大 并 能够 在 更 <unk> 内 进行 更 多 猜测 而 <unk> 提高
pep <unk> new subprocess module, pep 324 : 新 的 模块, pep 324 : 新 的 子 进程 模块
for example, <unk> is converted to <unk>, 例如 ， " ' " ' " 为 " 为 " ' " ' ", 例如 " <unk> . <unk> _ func " 会 被 转换 为 " <unk> .__ func __ "
used for implementing formatted literal strings <unk> strings), 用于 字符串 的 字符串 字 面值 字符串, 用于 实现 格式化 字 面值 字符串 （ f 字符串 ）
returns a pointer to a read only memory location usable as character based input, 返回 一个 指向 的 只读 的 只读 的 ， ， 以 以 字节 的 的 的, 返回 一个 指向 可 用作 基于 字符 的 输入 的 只读 内存地址 的 指针
if the error flag is set, a python exception is raised., 如果 错误 错误 则 将 引发 " 异常 " 异常, 如果 错误码 被 设置 ， 会 抛出 一个 python 异常
args should be a sequence of program arguments or else a single string or path like object, args 应当 参数 或 序列 或 或 字符串 或 或 字符串 对象, args 应当 是 一个 程序 参数 的 序列 或者 是 一个 单独 的 字符串 或 path like object
<unk> the set free list has been removed in python 3.4., " <unk> . set _ <unk> ( ) " 中 的 列表 列表 中 移除, " <unk> _ <unk> ( ) " : 集合 自由 列表 已 在 python 3.4 中 被 移除
updated module: <unk> <unk>, 更新 的 模块 ： " <unk> _ <unk> ", 更新 的 模块 ： elementtree <unk>
among other <unk> this makes it possible to upgrade from default basic authentication to faster session authentication, 在 其他 情况 下 ， ， 这 使得 被 用来 默认 的 的 的 以 以 以 处理 的 的, 此 特征 的 作用 之一 是 使得 从 默认 的 基础 认证 升级 到 更 快速 的 会 <unk> 认证 成为 可能
changed in version 3.6: added <unk> parameter., 在 3.6 版 更改 : added _ <unk> parameter ., 在 3.6 版 更改 : 加入 <unk> 参数
the logging functions are named after the level or severity of the events they are used to track, 记录 函数 或 改变 或 或 或 的 的 被 被 被 被, 日志 功能 <unk> 所 追踪 事件 级别 或 严重性 <unk>
in general, when a format sets a pointer to a buffer, the buffer is managed by the corresponding python object, and the buffer <unk> the lifetime of this object, 在 当 一个 一个 一个 一个 指向 一个 指向 ， ， ， 的 " " " " ， ， 并 将 其 对象 的 的 对象, 一般 的 ， 当 一个 表达式 设置 一个 指针 指向 一个 缓冲区 ， 这个 缓冲区 可以 被 相应 的 python 对象 管理 ， 并且 这个 缓冲区 共享 这个 对象 的 <unk> 周期
unless the <unk> flag has been set, this will only match at the beginning of the string, " <unk> " " " " 标志 设置 将 只 匹配 匹配 的 字符串, 除非 设置 了 " <unk> " 标志 ， 否则 只会 在 字符串 的 开头 匹配
excluded time components are <unk> not <unk>, 不 时间 的 的 不 不 不 不 不, 排除 掉 的 时间 部分 将 被 截断 ， 而 不是 被 舍入
the universal_newlines argument is equivalent to text and is provided for backwards compatibility, universal 参数 参数 等同于 等同于 为 " text _ <unk> " 的 的, universal _ newlines 参数 等同于 text 并且 提供 向 后 兼容性
<unk> create a tarfile with bzip2 compression, " 创建 . <unk> " 创建 一个 归档 的 的, " ' x : bz2 ' " 使用 bzip2 压缩 创建 tarfile
if this is set to a non empty string it is equivalent to specifying the " i" option., 如果 此 设为 为 一个 空 字符串 ， 它 将 " " " " ", 此 变量 如果 被 设为 一个 非空 字符串 ， 它 就 相当于 指定 " i " 选项
when subclassing <unk> mix in types must appear before "enum" itself in the sequence of <unk> as in the <unk> example above., 当 " <unk> " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", <unk> 类化 " enum " 时 ， 在 基类 序列 中 的 混合 类型 必须 出现 于 " enum " 本身 之前 ， 如 以上 " <unk> " 的 例子 所示
this section shows various <unk> to working with <unk> <unk>, 这 一节 工具 <unk> <unk> <unk> 使用 " <unk> " " " ", 这 一节 提供 了 多个 使用 链 映射 的 <unk>
meta hooks are registered by adding new finder objects to "sys.meta_path", as described below., " finalize " 的 通过 通过 新 的 的 新 的 的 对象 的 的, 元 钩子 的 注册 是 通过 向 " sys . meta _ path " 添加 新 的 查找 器 对象 ， 具体 如下 所述
the locked region of the file extends from the current file position for nbytes bytes, and may continue beyond the end of the file, 文件 文件 文件 文件 文件 位置 文件 位置 ， 并且 可能 可能 会 被 文件 的 文件 的 文件, 锁定 的 文件 区域 从 当前 文件 位置 开始 扩展 nbytes 个 字节 ， 并 可能 持续 到 超出 文件 末尾
"print()" can also be used, but is not a debugger command this executes the python "print()" function., 可以 也 可以 是 " 但 但 但 不是 " python " ， python python 将 被 python, " print ( ) " 也 可以 使用 ， 但 它 不是 一个 调试器 命令 它 执行 python " print ( ) " 函数
changes in the python api, python api 的 变化, 更改 的 python api
changed in version 3.4: the file is now non inheritable., 在 3.4 版 更改 : 文件 文件 现在 现在 不可 继承, 在 3.4 版 更改 : 文件 现在 禁止 继承
"__enter__()" starts the server process (if it has not already <unk> and then returns the manager object, 在 ， 进程 进程 进程 ， 但 它 不会 被 " ， " 并 返回 " null ", " __ enter __ ( ) " 启动 服务 进程 （ 如果 它 还 没有 启动 ） 并且 返回 管理器 对象 ， " __ exit __ ( ) " 会 调用 " shutdown ( ) "
the use of decimal floating point <unk> decimal representation error <unk> it possible to represent <unk> <unk> however, some operations can still <unk> round off error when non zero digits <unk> the fixed <unk>, 使用 十进制 浮点数 的 十进制 十进制 <unk> 的 的 ， 但 为了 <unk> <unk> <unk> ， 但 ， 但 在 <unk> 的 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> 时 ）, 使用 十进制 浮点数 可以 消除 十进制 表示 错误 （ 即 能够 完全 精确 地 表示 " 0.1 " 这样 的 数 ） ； 然而 ， 某些 运算 在 非 零 数位 超出 给定 的 精度 时 仍然 可能 导致 舍入 错误
the "csv" module implements classes to read and write <unk> data in csv format, " " " 模块 实现 了 读写 读写 读写 和 " <unk> " 数据, " csv " 模块 实现 了 csv 格式 表单 数据 的 读写
if the utc argument is true, times in utc will be <unk> otherwise local time is used., 如果 给出 了 参数 ， 则 为 " 0 " ， 否则 为 " 1 ", 如果 utc 参数 为 真值 ， 将 使用 utc 时间 ； 否则 会 使用 本地 时间
<unk> create a new event loop., " loop . create _ <unk> ( ) " 事件 事件 事件, " asyncio . new _ event _ loop ( ) " 创建 一个 新 的 事件 循环
a tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named <unk> as the first item the latter is used when <unk> is raised., 元组 包含 的 的 的 异常 ， " " " " 的 " 的 " " " " " " " " " " " " " " " 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被 被, 一个 元组 ， 其中 包含 每个 受 支持 的 模块 可 引发 的 异常 ， 另外 还有 一个 名为 " dbm . error " 的 特殊 异常 作为 第一项 后者 最 在 引发 " dbm . error " 时 被 使用
when "none" is passed, it's up to the class <unk> to decide the best response, 当 " none " ， ， ， 将 导致 为 " <unk> " <unk> 的, 当 传入 " none " 时 ， 应当 <unk> 的 <unk> 来 决定 最佳 <unk> 方式
changed in version 3.3: added <unk> call to the <unk> method., 在 3.3 版 更改 : 添加 " " _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _ argument _, 在 3.3 版 更改 : added " <unk> _ <unk> " call to the " <unk> _ <unk> " method .
some types accept other objects as well., 有些 类型 的 其他 其他 对象 对象, 某些 类型 也 能 接受 其他 对象
"hashlib" secure hashes and message digests, " hashlib " hashlib " 与 " 消息 消息, " hashlib " 安全 哈希 与 消息 摘要
python's support for <unk> and <unk> garbage which involves <unk> references requires support from object types which are <unk> for other objects which may also be containers, python 支持 支持 " <unk> " 和 " <unk> " ， " 支持 从 支持 的 支持 支持 的 支持 的 对象 ， 但 其他 对象 的 对象, python 对 循环 引用 的 垃圾 检测 与 回收 需要 “ 容器 ” 对象 类型 的 支持 ， 此 类型 的 容器 对象 中 可能 包含 其它 容器 对象
allocates <unk> elements each whose size in bytes is <unk> and returns a pointer of type "void " to the allocated memory, or "null" if the request fails, 如果 <unk> 的 元素 ， 每个 字节 长度 的 字节 大小 ， 返回 返回 " " " " " " " " " " " " " " null " ， 如果 如果 失败 时 返回 " null ", 分配 <unk> 个 元素 ， 每个 元素 的 大小 为 <unk> 字节 ， 并 返回 指向 分配 的 内存 的 " void " 类型 指针 ， 如果 请求 失败 则 返回 " null "
<unk> install standard library and extension 1 modules <unk> install bundled pip and <unk> 1 <unk> install debugging symbols ( <unk> 0 <unk> install <unk> support and idle 1 <unk> install standard library test suite 1 <unk> install utility scripts 1 <unk> only <unk> the launcher, " xml . 标准 标准 库 库 和 扩展 模块 和 模块 的 安装 ， ， <unk> <unk> <unk> <unk> <unk> <unk> <unk> 的 <unk>, 这 将 覆盖 大多数 其他 选项
none of the types defined in this module can be <unk>, 将 模块 中 的 的 模块 中 的 模块 是 " <unk> _ <unk> _ <unk> ", 此 模块 中 所 定义 的 类型 都 不可 被 实例 化
<unk> <unk> you are <unk> about how to get a list from a range, <unk> ， 你 你 从 从 从 一个 从 列表 列表, 最后 ， 也许 你 会 很 <unk> 如何 从 一个 指定 范围 内 获取 一个 列表
if you need to interface to some c or c++ library for which no python extension currently exists, you can try wrapping the library's data types and functions with a tool such as swig, 如果 你 需要 提供 了 一些 c python ， ， 的 python ， ， 的 python ， ， ， 你 可以 使用 的 的 数据 ， 使用 和 函数 和 函数, 如果 需要 连接 到 某些 当前 不 存在 python 扩展 的 c 或 c ++ 库 ， 可以 尝试 使用 swig 等 工具 包装 库 的 数据类型 和 函数
programs written in python are typically much shorter than equivalent c, c++, or java programs, for several <unk>, （ 在 python <unk> 的 python 是 " python " ， " " " " " " 或 " ' " 或 " ' " ' ", python 代码 通常 比 同样 功能 的 c ， c++ ， java 代码 要 短 很多 ， 原因 <unk> ：
panel objects, as returned by <unk> above, are windows with a <unk> order, 迭代 器 ( ) " 返回 的 " ( ( ) " ) " ) " 会 被 " " " " " ", panel 对象 ， 如 上面 " new _ panel ( ) " 所 返回 的 对象 ， 是 带有 栈 顺序 的 多个 窗口
for simple byte <unk> <unk> is the preferred function., 对于 简单 的 " " " " ， " 是 " ' " ' ", 对于 简单 的 字节 缓冲区 ， " <unk> _ <unk> ( ) " 是 首选 函数
deprecated since version 3.2: the <unk> aliases listed in the third column have been deprecated., 3.2 版后 已 移除 : the <unk> in in in in in in in in in in in in, 3.2 版后 已 移除 : the assert <unk> <unk> in the <unk> <unk> <unk> <unk> deprecated .
the data will be strings if streams were opened in text <unk> otherwise, bytes., data 将 在 在 在 在 将 被 在 文本 模式 将 被 文本, 如果 文件 以 文本 模式 打开 则 为 字符串 ； 否则 字节
the numeric constant for an uncompressed archive member., " numbers " 用于 一个 的 的 的, 未 被 压缩 的 归档 成员 的 数字 常数
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
see pep <unk> for more details., 请参阅 pep <unk> 了解 详情, 请参阅 pep <unk> 查看 更 多 细节
don't add the <unk> site packages <unk> to <unk>, 在 " sys . <unk> " ， " " . <unk> ( ) " 的 " <unk> ( ) ", 不要 将 " 用户 site packages 目录 " 添加 到 " sys . path "
alternatives to the interactive interpreter, 将 交互式 解释器 的 解释器, 默认 交互式 解释器 的 <unk>
similarly, to get anything other than "none" in the result tuple, you need to give "stdout pipe" and/or "stderr pipe" too., 要 要 获取 的 的 ， ， ， " " " " " " " " " " " " " ", 类似 的 ， 要 从 结果 元组 获取 任何 非 " none " 值 ， 你 同样 需要 设置 " stdout pipe " 或者 " stderr pipe "
perform <unk> <unk> between a and b, <unk> <unk> 和 b 和 和 和 b, 在 a 和 b 之间 进行 全 比较
what is a <unk>, 什么 是 一个 ？, 什么 是 方法 ？
the spawn and forkserver start methods, spawn 和 forkserver 启动 方法, spawn 和 forkserver 启动 方式
<unk> supports simple test discovery, " http . <unk> " , 简单 测试 测试, unittest 支持 简单 的 测试 搜索
set the contents of the cell object cell to value, 设置 cell 的 的 对象 的 的 值, 将 cell 对象 cell 的 内容 设 为 value
it demonstrates many of the other functions provided by this module., 它 它 的 模块 定义 了 " 模块 " 函数 的 函数, 它 还 展示 了 此 模块 所 提供 的 许多 其他 函数
(note that most users are not explicitly listed as members of the group they are in according to the password database, 请 注意 大多数 大多数 不 不 在 ， 但 也 可以 在 " " " 中 的 的 的, （ 注意 ， 大多数 用户 未 根据 密码 数据库 显式 <unk> 所属 组 的 成员
this means that the string must be formatted exactly as it would be when typed at the shell prompt, 这 意味着 字符串 字符串 必须 在 在 时 时 ， 在 执行 时 时 被 执行, 这 意味着 字符串 的 格式 必须 和 在 命令提示符 中 所 输入 的 完全相同
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
if <unk> is false (the default), an error string is written to <unk> but no exception is raised, 如果 <unk> 为 " 为 假值 ， 则 会 被 设为 " ' ' ' " ' " ' " ' " 异常, 如果 <unk> 为 假值 （ 默认 ） ， 则 将 写入 错误信息 到 " sys . stderr " ， 但 不会 引发 异常
additional keyword arguments will be passed to the constructor of the class., 额外 关键字 参数 将 传递 给 传递 的 的 的, 额外 的 关键词 参数 会 通过 类 的 构造函数 传递
return the value (in fractional <unk> of the sum of the system and user <unk> time of the current thread, 返回 值 的 值 的 的 的 的 的 时间 ， 时间 时间 时间 时间 时间 时间 时间, 返回 当前 线程 的 系统 和 用户 cpu 时间 之 和 的 值 （ <unk> <unk> 为 单位 ）
<unk> is not available on all <unk>, <unk> 并非 在 windows 上 上 ， 并非, ( " os . chflags " 不是 在 所有 平台 <unk> 可用 。 )
returns "true" if x is <unk> otherwise returns "false"., 如果 x x 次 则 返回 " true " ； 否则 返回 " false ", 如果 x 是 规范 的 则 返回 " true " ； 否则 返回 " false "
the code is executed by calling the <unk> (which also handles run time exceptions, except for <unk>, 代码 的 由 " 调用 " ) " 来 确定 也 会 被 在 运行 时 的 运行 时 （ 例如 " ）, 将 通过 调用 " <unk> ( ) " 执行 代码 （ 该 方法 也 会 处理 运行 时 异常 ， " systemexit " 除外 ）
to request that the additional bits instead be <unk> to zero, the flag <unk> false" can be passed to the <unk>, 要 注意 的 的 的 <unk> 为 " <unk> " ， " " " " 可以 传递 给 传递 给 传递, 要 请求 将 附加 位 强制 为 零 ， 可以 将 标志 ` ` strict false ` ` 传递 给 构造函数 :
pep <unk> the logging package, pep <unk> : 日志 记录 包, pep <unk> : logging 包
the "numbers" module ( pep <unk> ) defines a hierarchy of numeric abstract base classes which <unk> define more operations, " 模块 " 模块 " pep <unk> 定义 了 一些 抽象 基类 的 基类 ， 的 定义 的 定义, " numbers " 模块 ( pep <unk> ) 定义 了 数字 抽象 基类 的 层次结构 ， 其中 <unk> 定义 了 更 多 操作
changed in version 3.3: <unk> has been made a subclass of "oserror" instead of <unk>, 在 3.3 版 更改 : " _ <unk> _ <unk> " " " " " " " " " " " " " " ", 在 3.3 版 更改 : " <unk> " 已 被 设为 " oserror " 而 不是 " ioerror " 的 子类
<unk> instances have the following methods:, " httpconnection 实例 实例 以下 方法 :, " prettyprinter " 的 实例 具有 下列 方法 ：
takes the logging configuration from a dictionary, 从 字典 中 删除 的 日志 记录, 从 一个 字典 获取 日志 记录 配置
for unix like operating systems python is normally provided as a collection of packages, so it may be necessary to use the <unk> tools provided with the operating system to obtain some or all of the optional <unk>, 例如 ， " python " 的 python python python ， ， ， ， ， 因此 可以 ， 因此 可以 使用 " " " " " " " " " " " " ", 对于 类 unix 操作系统 ， python 通常 会 分成 一系列 的 软件包 ， 因此 可能 需要 使用 操作系统 所 提供 的 包 <unk> 来 获取 部分 或 全部 可 选 组件
"configparser" configuration file parser, " 配置 . 配置 解析器, " configparser " 配置文件 解析器
in order to decide when to <unk> the collector keeps track of the number object allocations and <unk> since the last collection, 为了 当 尝试 尝试 的 ， ， ， 的 的 对象 的 <unk> ， 而 不是 <unk> 的 的 的 的, 为了 确定 何时 要 运行 ， 垃圾 回收 器会 跟踪 <unk> 一次 回收 后 对象 分配 和 释放 的 数量
return nonzero and set an exception on failure., 成功 时 返回 " 并 设置 一个 异常, 失败 时 返回 非零值 并 设置 一个 异常
the <unk> can be manually configured to use <unk> or <unk> to support character devices on these older versions of macos, " 可以 可以 通过 " ' 使用 " 使用 " 使用 " ' w ' " ' " ' " ' " ' " 的 支持 的 的 支持, 可以 手工 配置 " <unk> " 来 使用 " <unk> " 或 " <unk> " 以 在 这些 较 老 版本 的 macos 上 支持 字符 设备
the new class instance is based on fileobj , which can be a regular file, an <unk> object, or any other object which <unk> a file, 新 类 类 的 " 基于 " 的 ， ， 可以 是 一个 " 对象 " ， " 对象 " 或 " 对象 " 对象 ， 或者 其他 对象 对象, 新 的 实例 基于 fileobj ， 它 可以 是 一个 普通 文件 ， 一个 " io . bytesio " 对象 ， 或者 任何 一个 与 文件 相似 的 对象
debugger <unk> when <unk> code entered in the shell or run from an editor will run under the debugger, 在 <unk> 在 <unk> 在 运行 时 将 在 运行 时 中 运行 时 将 被 添加 到 命令行 运行, 调试器 （ 切换 ） 激活 后 ， 在 shell 中 输入 的 代码 或 从 编辑器 中 运行 的 代码 将 在 调试器 下 运行
before, only <unk> "> <unk> had an argument., " 只 " " x " " ， " x ( ) ", 之前 仅限 操作码 " > <unk> _ argument " 带有 参数
python 3.9 was released on <unk> <unk> <unk>, python 3.6 <unk> 年 月 <unk> <unk> <unk> <unk> <unk>, python 3.9 发布 于 2020 年 10 月 5 日
if <unk> is not "none", it indicates the line number that should be reported for the first source line in the <unk> code, 如果 " none " ， 则 " ， 则 在 第一行 在 第一行 中 的 的 行 中 的 的, 如果 first _ line 不是 " none " ， 则 表示 应该 为 反汇编 代码 中 的 第一个 源代码 行 报告 的 行号
the returned data should be concatenated with the output of any previous calls to <unk>, 返回 data 的 的 的 （ 即 " 的 " 的 的 的 的, 返回 的 数据 应当 与 之前 任何 " compress ( ) " 调用 的 输出 进行 拼接
dst and src must be integers or ctypes instances that can be converted to <unk>, dst 和 dst 必须 必须 为 " 或 " 实例 的 " <unk> ", dst 和 src 必须 为 整数 或 可 被 转换 为 指针 的 ctypes 实例
changed in version 3.5: quiet parameter was changed to a <unk> value., 在 3.5 版 更改 : 增加 了 " to _ to _ <unk> ", 在 3.5 版 更改 : <unk> parameter was <unk> to a <unk> value .
the compression settings can be specified either as a <unk> compression level (with the <unk> <unk> or in detail as a custom filter chain (with the filters <unk>, " 的 " 可以 被 作为 " " " " 的 " （ 例如 " " " ） 的 的 ） ， 例如 " <unk> " 的 一个, 压缩 设置 可 被 指定 为 一个 预设 的 压缩 等级 （ 通过 <unk> 参数 ） 或 以 自定义 过滤器 <unk> 详细 设置 （ 通过 filters 参数 ）
storing thread using a custom hook can <unk> it if it is set to an object which is being <unk>, 当 使用 线程 的 的 ， ， 可以 ， 它 将 被 设为 为 一个 空 ， 则 将 被 设为 一个 空, 使用 定制 钩子 存放 thread 可能 会 在 它 设为 被 终结 对象 时 将 其 <unk>
changed in version 3.6.2: the path parameter accepts a path like object ., 在 3.6 版 更改 : path 接受 接受 一个 类 路径 对象, 在 3.6 . 2 版 更改 : path 形参 接受 一个 path like object
converts <unk> to <unk>, 将 " intern ( prompt ) " 转换 为 " sys . intern ( ) ", 将 " <unk> " 转换 为 " str "
for a complete overview of string formatting with <unk> see format string syntax., 对于 字符串 的 的 字符串 格式化 字符串 格式化 字符串 格式化 字符串 格式化 字符串, 关于 使用 " str . format ( ) " 进行 字符串 格式化 的 完整 概述 ， 请参阅 格式 字符串 语法
for "time" objects, the format codes for year, <unk> and day should not be used, as "time" objects have no such values, 对于 " " " " " " 的 " 的 " ， " ， " 应当 不 为 " null " 对象, 对于 " time " 对象 ， 年 、 月 、 日 的 格式 代码 不应 被 使用 ， 因为 " time " 对象 没有 这些 值
<unk> the start boundary <unk> in the content type header was never found., <unk> <unk> <unk> 的 <unk> <unk> " <unk> " " " " " " " " " " ", " <unk> " 在 content type 标头 中 宣称 的 开始 边界 无法 被 找到
the format of the sent byte string is as described in the documentation for <unk>, 对于 的 的 字符串 是 由 " <unk> " 的 文档 的 文档, 所 发送 字节 串 的 格式 与 " <unk> ( ) " 文档 中 的 描述 一致
the <unk> is available in "argparse" and adds support for boolean actions such as " <unk> and " no <unk>, <unk> 是 在 <unk> 和 " <unk> " 和 " <unk> " 和 " 的 " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", " <unk> " 在 " argparse " 中 可用 并会 添加 对 布尔 型 操作 例如 " foo " 和 " no foo " 的 支持 :
the parameter must not be "null"., 形参 必须 为 " null ", 形参 必须 不 为 " null "
if your data structures contain <unk> links (e.g. a tree where each child has a parent reference and each parent has a list of <unk> the reference counts will never go back to zero, 如果 你 的 <unk> （ 包含 ） ， 则 （ 如果 一个 一个 ， ， ， ， 一个 一个 一个 ， ， ， ， ， 并且 一个 新 的 ， ， 并且 将 被 一个 " 的 " 对象, 如果 数据结构 包含 循环 链接 （ 例如 ， 每个 子级 都 有 一个 <unk> 引用 ， 每个 <unk> 都 有 一个 子级 列表 的 树 ） ， 则 引用 计数 将 永远 不会 返回 零
by <unk> <unk> will reuse the same module object, and simply <unk> the module contents by <unk> the module's code., 由 " <unk> ( ) " 将 将 " logger " 模块 " 模块 的 " " " " 模块 ， " 模块 " 模块 " 模块 的 模块 的 " 模块 " 模块 的 模块, 相反 地 ， " importlib . reload ( ) " 将 重用 同一个 模块 对象 ， 并 简单 地 通过 重新 运行 模块 的 代码 来 重新 初始化 模块 内容
however, quite often the command line string should instead be interpreted as another type, like a "float" or "int", 但是 ， " ， " 将 字符串 字符串 ， 例如 " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", 然而 ， 命令行 字符串 经常 需要 被 当作 其它 的 类型 ， 比如 " float " 或者 " int "
additional utility classes and functions, 附加 类 类 类 和 函数, 附加 工具 类 和 函数
returns the "bitwise <unk> of o1 and o2 on success and "null" on failure, 返回 o1 、 o2 按位 的 按位 ， ， 返回 " null " ， 如果 失败, 成功 时 返回 o1 和 o2 " 按位 与 " 的 结果 ， 失败 时 返回 " null "
ensure that the arguments to the methods of proxies are <unk>, 这 确保 参数 的 的 方法 的 方法, 保证 所 代理 的 方法 的 参数 是 可以 序列化 的
if when is omitted, it defaults to <unk> and is passed to <unk>, 如果 当 为 为 " false " ， 则 " sys . <unk> ", 如果 when 被 省略 ， 则 默认 为 " termios . <unk> " ， 并 传递 给 " termios . <unk> ( ) "
positional argument : an argument that is not a keyword argument, 位置 参数 参数 参数 参数 参数 参数 关键字 参数 参数, 位置 参数 : 不 属于 关键字 参数 的 参数
in blake2 the salt is processed as a one time input to the hash function during <unk> rather than as an input to each compression function., 在 这种 情况 下 ， 被 作为 " <unk> ( ) " 函数 的 " 函数 ( ) " 函数 的 一个 函数 ， ， 一个 为 函数, 在 blake2 中 ， <unk> 会 在 初始化 期间 作为 对 哈希 函数 的 一次性 输入 而 不是 对 每个 压缩 函数 的 输入 来 处理
maximum size of a deque or "none" if <unk>, 最大 或 或 或 或 " none " ， 如果 " " ", deque 的 最大 尺寸 ， 如果 没有 限定 的话 就是 " none "
while python uses the traditional reference counting implementation, it also offers a cycle detector that works to detect reference cycles, 虽然 python 使用 python 引用 引用 引用 引用 引用 引用 引用 引用 引用 ， 它 也 可以 在 解释器 引用 的 引用 的 引用 引用, python 使用 传统 的 引用 计数 实现 ， 也 提供 了 循环 <unk> ， <unk> 检测 引用 循环
you can also automatically compile all files in a directory or directories using the <unk> module, 你 可以 通过 " " " " " " " " " " " " " " " " " " ", 你 还 可以 使用 " <unk> " 模块 自动 编译 一个 目录 或 多个 目录 下 的 所有 文件
error output redirection and program termination, 错误处理 输出 和 和 程序 程序, 错误 输出 重定向 和 程序 终止
<unk> ("int") [unsigned long] convert a c "unsigned long" to a python integer object., " " " " " " " int " int " unsigned long long long long long long long long 整型 转化成 python 整型 转化成 整形 整形 " 长长 整形 " 长长 整形 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形 " 长长 整形, " k " ( " int " ) [ unsigned long ] 将 一个 c " unsigned long " 无 <unk> 整型 转化成 python 整型 对象
to <unk> the record at the receiving end into a <unk> use the <unk> function., 要 <unk> " <unk> " ， ， ， ， ， 请 使用 " " ( ) " 函数, 要 在 <unk> 将 记录 解封 并 输出 到 " logrecord " ， 请 使用 " <unk> ( ) " 函数
this is the equivalent of the python expression "o1 + o2"., 这 等价 于 python 表达式 " o1 o2 o2 ", 等价 于 python 表达式 " o1 + o2 "
other cpython implementation changes, 其他 cpython 实现 的 改变, 其他 cpython 实现 的 改变
design and history faq, 设计 和 历史 常见问题, 设计 和 历史 常见问题
<unk> is false by default., " _ " _ clear ( ) " 会 被, " <unk> _ <unk> _ <unk> " 默认 为 假值
immutable objects do not have to define this method since they can never directly create reference cycles, " 对象 " 不 不 需要 方法 ， 此 方法 ， 因为 ， 它们 将 创建 引用 引用 的 引用, 不可 变 对象 不 需要 声明 此 方法 ， 因为 他们 不 可能 直接 产生 循环 引用
see command line interface for detailed documentation., 参见 命令行 界面 命令行, 详细 文档 请 参见 命令行 界面
unpacks and returns a list of homogeneous items, 解包 并 返回 一个 同质 列表 列表, 解包 并 返回 同质 条 目的 列表
changes <unk> to "key in <unk>, 将 " <unk> _ <unk> ( ) " 中 的 的, 将 " dict . has _ key ( key ) " 转换 为 " key in dict "
the canonical way to share information across modules within a single program is to create a special module <unk> called config or <unk>, 与 的 的 信息 ， <unk> <unk> 的 的 的 是 一种 一个 模块 的 " 模块 " ， " " " " " " " ", 在 单个 程序 中 跨 模块 共享 信息 的 规范 方法 是 创建 一个 特殊 模块 （ 通常 称为 config 或 cfg ）
if not found, it then searches for a file named <unk> in a list of directories given by the variable "sys.path", 如果 未 ， ， 它 它 将 一个 名为 " 文件 " ， 则 文件 的 一个 名为 " 的 " 的 " 的 列表, 如果 没有 找到 ， 然后 解释器 从 " sys . path " 变量 给出 的 目录 列表 里 寻找 名为 " spam . py " 的 文件
let's say we want to remove all <unk> with a <unk> higher than <unk>, 让 我们 我们 我们 <unk> 所有 <unk> 的 所有 <unk> ， <unk> <unk> <unk>, 假设 我们 要 删除 排名 高于 50 的 所有 <unk> / <unk> :
there are several possible reasons for this., 有 几个 几个 的 的 ？, <unk> 几个 可能 的 原因
prompt the user for a password without <unk>, 将 用户 的 的 的 <unk>, 提示 用户 输入 一个 密码 且 不会 回显
to convert to a key function, just wrap the old comparison function:, 要 转换 为 一个 函数 ， ， 函数 将 其 函数 的 函数 :, 要 转换 <unk> 函数 ， 只 需 包装 旧 的 比较 函数 ：
raises an auditing event <unk> with no arguments., 引发 一个 审计 事件 " ctypes . get _ last _ last _ error " 不 附带 参数, 没有 参数 会 引发 审计 事件 " cpython . run _ stdin "
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
note that any python object references which are provided to the caller are borrowed <unk> do not decrement their reference <unk>, 请 注意 任何 对象 python python 对象 ， 是 是 是 的 的 引用 不会 引用 的 引用 引用 引用 引用 引用 引用 引用, 注意 任何 由 调用者 提供 的 python 对象 引用 是 <unk> 的 引用 ； 不要 递减 它们 的 引用 计数 ！
this also <unk> <unk> and s, 此 也 " <unk> _ <unk> ( ) " 和 ", 这 将 同时 应用 e 和 s
the module <unk> the following functions, <unk> on those in the standard c <unk>, 模块 模块 " 下列 " 模块 中 的 " c " 模块 中 的 c api, 此 模块 提供 了 下列 函数 ， 对应 于 标准 c 库中 的 函数 :
module <unk> utilities to compile all python source files in a directory tree., 模块 " <unk> " <unk> " python python 文件 中 的 python 文件 中, 模块 " <unk> " 编译 一个 目录 <unk> 所有 python 源文件 的 工具
there is a simple way to call the base class method directly: just call <unk> <unk>, 有 一个 简单 的 " __ ( __ ( ) " 方法 的 方法 ， 调用 " " ( ( ) " ) " 方法, 有 一种 方式 可以 简单 地 直接 调用 基类 方法 ： 即 调用 " <unk> . <unk> ( self , arguments ) "
changed in version 3.5: suffix , prefix , and dir may now be supplied in bytes in order to obtain a bytes return value, 在 3.5 版 更改 : <unk> , and and and and be be be be be be be be be be be 的 值, 在 3.5 版 更改 : 现在 ， suffix 、 prefix 和 dir 可以 以 bytes 类型 按 顺序 提供 ， 以 获得 bytes 类型 的 返回值
bpo <unk> update windows builds and os x <unk> installer to use openssl <unk>, bpo <unk> : 更新 windows 构建 和 os x 安装程序 以 使用 openssl 1.0 ., bpo <unk> : 更新 windows 构建 和 os x 10.5 安装程序 以 使用 openssl 1.0 . <unk> .
all stream readers must provide this constructor interface, 所有 流 都 必须 提供 了 此 函数, 所有 流式 <unk> 必须 提供 此 构造 器 接口
more details in <unk> cpython with dtrace and <unk>, 更 多 更 多 和 <unk> 和 <unk> 的, 更 多 信息 ， 请 参见 使用 dtrace 和 systemtap 检测 cpython
paint character ch at "(y, x)" with attributes attr , <unk> any character previously <unk> at that location, " ' r ' " , " " " " 属性 的 " " " ， 任何 任何 字符 ， <unk> <unk> <unk> <unk> 的 任何 <unk>, 将 带有 属性 attr 的 字符 ch 绘制 到 " ( y , x ) " ， 覆盖 之前 在 该 位置 上 绘制 的 任何 字符
is there a way to get a non <unk> <unk>, 是否 有 一个 的 的 的 <unk> :, 是否 有 办法 得到 一个 非 指数 表示 形式 ？
changed in version 3.6: now only called for exceptions derived from the <unk> class., 在 3.6 版 更改 : 现在 只能 从 " __ aiter __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __, 在 3.6 版 更改 : now only called for exceptions <unk> from the " exception " class .
the python core uses several <unk> functions to implement cyclic garbage <unk> it's not expected that users will need to write their own <unk> functions., python 使用 使用 " <unk> ( ) " 函数 来 实现 实现 的 ， ， ， ， ， ， 这 意味着 需要 自己 的 的 的 的 的, python 核心 使用 多个 <unk> 函数 实现 循环 引用 的 垃圾 检测 ， 不 需要 用户 自行 实现 <unk> 函数
the byte <unk> version of this character <unk> is an illegal character that may not appear in a unicode text, 结构 的 " <unk> " 的 版本号 ， " " " " 是 一个 一个 字符 的 但 但 在 不 在 在 中 的, 此 字符 的 字节 <unk> 版本 ( " <unk> " ) 是 一个 不可 出现 于 unicode 文本 中 的 非法 字符
<unk> number of the mouse <unk> defaults to 1 <unk> mouse <unk>, <unk> <unk> <unk> <unk> 的 的 默认值 为 " <unk> " , " <unk> ", <unk> 鼠标 按钮 编号 ， 默认值 为 1 ( 鼠标 <unk> )
to run the global interpreter, either <unk> the virtual environment, or explicitly specify the global python <unk>, 要 运行 全局 ， " <unk> " " " 或者 " __ main __ " python python python 的 python python, 要 运行 全局 解释器 ， 请 <unk> 虚拟环境 ， 或 显式 指定 全局 python 版本
the timeout argument sets the timeout parameter for the appropriate <unk> or "poll()" call, measured in <unk> the default is 30 seconds, timeout 参数 参数 的 的 的 的 的 " 或 " 或 " ， " 在 " 中 的 " " ", timeout 形参为 适当 的 " select ( ) " 或 " poll ( ) " 调用 设置 超时 参数 ， 以 秒 为 单位 ; 默认值 为 30 秒
print a short description of all command line <unk>, 打印 一个 " 所有 " 的 所有 的 命令行, 打印 全部 命令行 选项 的 简短 描述
docs for legacy message class moved to <unk> representing an email message using the <unk> api., " optparse " 的 消息 " " " " " " " " " " " " " " " " " " " " " " " " " " " " ", <unk> 的 文档 被 移动 至 email . message . message : <unk> an email message using the <unk> api
with minor variations on that <unk> it is easy to implement forth style stack <unk> such as <unk> <unk> <unk> <unk> <unk> <unk> and <unk>, 在 " " " 的 ， 它 是 通过 " " " " " <unk> " , " <unk> " , " <unk> " , " <unk> " , " <unk> " , " <unk> " , " <unk> ", 这个 方法 可以 最小 代价 实现 <unk> 的 栈 操作 ， 诸如 " <unk> " , " <unk> " , " <unk> " , " <unk> " , " <unk> " , " <unk> " , 和 " <unk> "
changed in version 3.5: added support for the <unk> format., 在 3.5 版 更改 : 添加 了 " " " " <unk> ", 在 3.5 版 更改 : 添加 了 对 <unk> 格式 的 支持
because there is only one instance of each module, any changes made to the module object get <unk> <unk>, 由于 有 " __ " __ " 实例 ， 每个 实例 化 任何 模块 的 模块 的 对象 的 模块, 因为 每个 模块 只有 一个 实例 ， 所以 对 模块 对象 所 做 的 任何 更改 都 会 在 任何 地方 反映 出来
what can be pickled and <unk>, 可以 可以 为 " 和 ", 可以 被 封存 / 解封 的 对象
return the length of the list object in list ; this is equivalent to <unk> on a list object., 返回 列表 列表 中 列表 列表 列表 列表 列表 列表 ， " " " " " " 对象, 返回 list 中 列表 对象 的 长度 ； 这 等于 在 列表 对象 调用 " len ( list ) "
now what can we do with instance <unk> the only operations <unk> by instance objects are attribute references, 现在 也 可以 通过 " 实例 实例 实例 （ 仅 只有 " 实例 的 实例 对象 的 实例 对象, 现在 我们 能 用 实例 对象 做 什么 ？ 实例 对象 理解 的 唯一 操作 是 属性 引用
the return value consists of two <unk> the first is a list of <unk> <unk> <unk> the second is the list of program arguments left after the option list was stripped (this is a trailing slice of args ), 返回值 的 的 的 的 是 第一个 是 是 <unk> 的 的 列表 ， 是 列表 ， 除非 列表 ， 除非 列表 ， 列表 是 是 列表 的 的 元素 为 零 的 的 的 的, 返回值 由 两个 元素 组成 ： 第一个 是 " ( option , value ) " 对 的 列表 ； 第二个 是 在 去除 该 选项 列表 后 <unk> 的 程序 参数 列表 （ 这 也 就是 args 的 尾部 切片 ）
<unk> heap queue algorithm, " <unk> " <unk> " 队列 队列, " <unk> " 堆 队列 算法
since version <unk> the ncurses library <unk> how to interpret non ascii data using the <unk> function, 由于 版本 版 更改 : the <unk> " " " " " " " " 数据 的 数据 数据 使用 数据 的 数据, 从 <unk> 版本 开始 ， ncurses 库 使用 " nl _ <unk> " 函数 来 决定 如何 解释 非 ascii 数据
<unk> actually does two things:, " ' _ false " ) " 两个 两个 两个 ：, " refresh ( ) " 实际上 做 了 <unk> ：
parsing arguments and building values, 解析 参数 和 变量 变量, 语句 解释 及 变量 编译
returns "true" if x is a <unk> <unk> otherwise returns "false"., 如果 x 是 是 " <unk> " ， 否则 返回 " true " ； 否则 返回 " false ", 如果 x 是 显式 nan 则 返回 " true " ； 否则 返回 " false "
other types of objects need to be converted either to a string (in text mode) or a bytes object (in binary mode) before writing <unk>, 其他 需要 的 对象 为 为 字符串 或 为 字符串 或 " str ( ) " 对象 ， 字节 串 ） ， " " " " " " " " ", 在 写入 其他 类型 的 对象 之前 ， 需要 先 把 它们 转化 为 字符串 （ 在 文本 模式 下 ） 或者 字节 对象 （ 在 二进制 模式 下 ） :
if x is not a python "int" object, it has to define an "__index__()" method that returns an integer, 如果 x 不是 不是 一个 python python ， 则 它 将 返回 " __ ( ) " 方法 返回 一个 一个 整数, 如果 x 不是 python " int " 对象 ， 则 必须 定义 返回 整数 的 " __ index __ ( ) " 方法
python is a <unk> programming language which has <unk> a <unk> for <unk>, python 是 一种 编程 编程 编程 编程 的 ， <unk> <unk> <unk> <unk> <unk> <unk> <unk>, python 是 <unk> 以 稳定 <unk> 的 编程语言
<unk> documentation and code for the <unk> <unk>, " 文档 " 文档 代码 代码 代码, <unk> <unk> 工具 链 的 文档 和 代码
changed in version 3.5: the <unk> method was added., 在 3.5 版 更改 : the 了 _ _ _ _ _ argument _ argument _ argument _ argument _ argument _, 在 3.5 版 更改 : the " sendfile ( ) " method was added .
elements are <unk> from an iterable or from another mapping (or <unk>, 元素 从 一个 或 可 迭代 对象 的 的 的 （ 或 ） ）, 从 迭代 对象 或 映射 对象 减去 元素
changed in version 3.3: added the policy keyword., 在 3.3 版 更改 : added policy 关键字, 在 3.3 版 更改 : 添加 了 policy 关键字
to obtain a valid <unk> see <unk>, 要 使用 " ' " ' " ' " ' " ' " ' " ' " ' ", 要 获取 有效 路径 ， 参见 " <unk> ( ) "
module <unk> general calendar related functions, 模块 " <unk> " " " <unk> " 函数, 模块 " calendar " 一般 日历 相关 功能
the standard type hierarchy, 标准 标准 类型, 标准 类型 层级 结构
(contributed by victor stinner in bpo <unk>, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）, （ 由 victor stinner 在 bpo <unk> 中 贡献 。 ）
<unk> <unk> / <unk> entity expansion the <unk> <unk> attack also known as <unk> entity expansion uses multiple levels of nested entities, " <unk> / <unk> / <unk> / <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> 的 的, <unk> <unk> / <unk> <unk> <unk> （ <unk> / 递归 实体 扩展 ） <unk> <unk> 攻击 也 称为 递归 实体 扩展 使用 <unk> 嵌套 实体
setting the <unk> to "int" makes the <unk> useful for counting (like a <unk> or <unk> in other <unk>, 设置 " " " " " " " " <unk> " <unk> 在 <unk> 或 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 设置 " default _ factory " 为 " int " ， 使 " defaultdict " 用于 计数 （ 类似 其他 语言 中 的 <unk> 或 <unk> ） ：
the behavior of a "zoneinfo" file depends on how it was <unk>, " 的 " 的 的 的 <unk> 如何 <unk>, " zoneinfo " 文件 的 行为 取决于 它 的 构造 方式 :
when used for writing, the file object should be <unk> unless you know <unk> of time how many samples you are going to write in total and use <unk> and <unk>, 当 创建 文件 描述符 对象 的 <unk> ， 你 你 <unk> <unk> 的 的 的 ， ， 你 应该 在 你 使用 使用 使用 " 和 " <unk> " 和 " <unk> " 和 " <unk> " 和 ", 当 文件 用于 写入 时 ， 文件 对象 应该 支持 seek 操作 ， 除非 提前 <unk> 写入 的 采样 总数 ， 并 使用 " <unk> ( ) " 和 " <unk> ( ) "
release date: 2019 02 03, 发布 日期 : 2019 03, 发布 日期 : 2019 02 03
"d" ("float") <unk> convert a python floating point number to a c <unk>, " " " ( " ) [ ] ] " float " int " 浮点数 python 浮点数 浮点数 浮点数, " d " ( " float " ) [ double ] 将 一个 python 浮点数 转化成 一个 c " double " 双 精度 浮点数
the default value is "true", 默认值 为 " true ", 默认值 为 " true "
a key function is a callable that accepts one argument and returns another value to be used as the sort key., key key 函数 一个 一个 一个 参数 ， 接受 一个 参数 参数 ， 并 返回 一个 值 作为 参数, key function 则 是 一个 接受 一个 参数 ， 并 返回 另 一个 <unk> 排序 的 值 的 可 调用 对象
return an iterator that applies function to every item of iterable , <unk> the results, 返回 一个 函数 的 <unk> 函数 的 <unk> ( ) " 的 的 的 的 的, 返回 一个 将 function 应用 于 iterable 中 <unk> 并 输出 其 结果 的 迭代 器
when the timeout argument is omitted the function blocks until at least one file descriptor is ready, 当 timeout 参数 时 ， 函数 函数 会 被 执行 ， 则 会 被 描述符 描述符, 当 省略 timeout 参数 时该 函数 将 阻塞 直到 至少 有 一个 文件 描述符 <unk>
return the value for var if var has the value in the context object, 如果 给定 的 对象 的 对象 的 值 对象 的 值, 如果 var 在 上下文 对象 中 具有 值则 返回 var 的 值
how do i make an executable from a python <unk>, 从 python 从 python 中 ？ ？ ？ ？ ？, 我 怎样 使用 python 脚本 <unk> 可执行文件 ？
the basic idea <unk> both modules is to create one or more network channels , instances of class <unk> and <unk>, 基本 的 的 的 " 是 " 是 一个 创建 或 或 多个 <unk> ， ， ， 类 类 的 类 实例, 这 两个 模块 <unk> 的 基本 <unk> 是 创建 一个 或 多个 网络 通道 ， 类 的 实例 " asyncore . <unk> " 和 " asynchat . async _ <unk> "
the <unk> algorithm used in python does multiple sorts efficiently because it can take advantage of any ordering already present in a <unk>, python python python 中 的 python 中 的 的 ， ， 因为 ， 因为 它 可以 在 " 中 " 中 的 ", python 中 使用 的 <unk> 算法 可以 有效 地 进行 多种 排序 ， 因为 它 可以 利用 数据 集中 已 存在 的 任何 排序
changed in version 3.4: use <unk> ': ')" as default if indent is not "none"., 在 3.4 版 更改 : use " ' _ as _ as _ none " ， 如果 " none " none ", 在 3.4 版 更改 : <unk> indent 不是 " none " 时 ， 采用 " ( ' , ' , ' : ' ) " 作为 默认值
typical reference counting implementations are not able to <unk> the memory <unk> to any objects in a reference <unk> or referenced from the objects in the <unk> even though there are no further references to the cycle itself., 典型 引用 计数 计数 引用 不会 被 在 到 对象 中 引用 的 引用 的 引用 的 引用 的 引用 的 引用 的 引用 的 引用 的 引用 的 引用 的 引用 的 引用 的 引用 的 引用, 典型 的 引用 计数 实现 无法 回收 处于 引用 循环 中 的 对象 ， 或者 被 循环 所 引用 的 对象 ， <unk> 没有 循环 以外 的 引用 了
the expression "x or y" first evaluates x ; if x is true, its value is <unk> otherwise, y is evaluated and the resulting value is returned., " x x 或 或 x x x x x 为 " 1 " ， 否则 返回 " 1 " ； 否则 返回 真值 ， 返回 真值, 表达式 " x or y " 首先 对 x 求值 ； 如果 x 为 <unk> 返回 该值 ； 否则 对 y 求值 并 返回 其 结果 值
this method returns the window contents as a <unk> whether blanks in the window are included is affected by the <unk> attribute., 此 返回 返回 的 内容 的 " ， 指明 " " " 的 " ， 否则 会 被 " " " ", 此 方法 会以 字符串 形式 返回 窗口 内容 ； 是否 包括 窗口 中 的 空白 将 受到 " stripspaces " 属性 的 影响
replaces tos with <unk> <unk>, " " " " " <unk> " " ", 将 tos 替换 为 " getattr ( tos , co _ names [ namei ] ) "
using a custom "__new__()", 使用 自定义 的 " __ ( ) ", 使用 自定义 的 " __ new __ ( ) "
there are a number of ides that support python programming language, 有 支持 的 支持 的 python 支持 的 语言, 有 很多 支持 python 编程语言 的 集成 开发 环境
if <unk> this parameter defaults to "true", 如果 <unk> ， 此 参数 的 默认 为 " true ", 如果 省略 ， 则 此 形参 默认 为 " true "
for example, <unk> will return "true" when the "emailmessage" is of type <unk>, 例如 ， " ' " ' " ， " " " " " " " " " " " " " " " " " " " " " ", 举个 例子 ， " is _ multipart " 在 " emailmessage " 是 " message / <unk> " 类型 的 信息 的 情况 下 ， 其 返回值 也 是 " true "
for a literal match, wrap the meta characters in brackets, 对于 " ' " ' " ' " ' 字符 ' 字符 ' " ' 字符 ' ", 对于 字 面值 匹配 ， 请 将 原 字符 用 方括号 括 起来
remove any common leading whitespace from every line in text ., 从 任何 任何 在 的 中 中 的 的 位置 中, 移除 text 中 每 一行 的 任何 相同 前缀 空白符
these nested fields may include their own conversion fields and format <unk> but may not include more <unk> nested replacement fields, 这些 嵌套 可能 可能 包含 包含 的 的 字 段 ， 包括 和 可能 ， 但 不 包含 更 多 的 的, 这些 嵌套 字段 也 可以 包含 有 它们 自己 的 转换 字段 和 格式 说明符 ， 但 不可 再 包含 更 深层 嵌套 的 替换 字 段
supported ini file structure, 支持 的 的 文件 文件 结构, 受 支持 的 ini 文件 结构
if additional arguments and/or keyword arguments are given, they will be given to the method as well, 如果 额外 参数 参数 参数 关键字 参数 参数 ， 它们 将 它们 为 " none ", 如果 给出 额外 的 参数 和 / 或 关键字 参数 ， 它们 也 将 被 传给 该 方法
reset the time conversion rules used by the library routines, 重置 时间 的 库 所 使用 的 库, 重置 库 例程 使用 的 时间 <unk>
pep <unk> qualified name for classes and functions pep written and implemented by antoine <unk>, pep <unk> : 类 、 类 和 函数 和 pep 由 antoine pitrou 撰写 并 实现, pep <unk> 类 和 函数 的 限定 名称 pep 由 antoine pitrou 撰写 并 实现
return a context manager that returns <unk> from <unk> but otherwise does nothing, 返回 一个 上下文 对象 ， 返回 " <unk> ( ) " ， 否则 返回 " 0 ", 返回 一个 从 " __ enter __ " 返回 enter _ result 的 上下文 管理器 ， 除此之外 不 执行 任何 操作
if the <unk> thread of control was not created through the "threading" module, a dummy thread object with limited functionality is returned., 如果 该 线程 的 线程 ， ， " " " " ， 则 会 使用 线程 的 线程 ， 则 会 引发 " none ", 如果 调用者 的 控制线 程 不是 利用 " threading " 创建 ， 会 返回 一个 功能 受限 的 虚拟 线程 对象
pep <unk> main module explicit relative imports pep written and implemented by nick <unk>, pep <unk> 模块 导入 导入 导入 pep 由 nick coghlan 撰写 撰写 撰写 并 实现, pep <unk> main module <unk> <unk> <unk> pep 由 nick coghlan 撰写 并 实现
the body of the loop is indented : indentation is python's way of grouping statements, 最后 是 是 是 的 的 是 是 是 语句 的 语句, <unk> 是 缩进 的 ： 缩进 是 python 组织 语句 的 方式
if specified, default should be a function that gets called for objects that can't otherwise be <unk>, 如果 指定 了 指定 ， 则 是 一个 函数 的 函数 ， 则 调用 " get _ factory ( ) ", 当 default 被 指定 时 ， 其 应该 是 一个 函数 ， 每当 某个 对象 无法 被 序列化 时 它 会 被 调用
"aifc" read and write aiff and aifc files, " aifc " 读写 aiff 和 aifc 文件, " aifc " 读写 aiff 和 aifc 文件
if the data being <unk> is not a valid json <unk> a <unk> will be raised., 如果 data 的 数据 ， 则 将 引发 " " " " " " " " ", 如果 反 序列化 的 数据 不是 有效 json 文档 ， 引发 " <unk> " 错误
however, if you are <unk> that you need custom levels, <unk> care should be <unk> when doing this, and it is possibly a very bad idea to define custom levels if you are developing a library, 但是 ， 如果 你 你 的 的 ， ， ， 当 你 当 <unk> ， ， ， ， ， ， ， ， 它 在 你 的 情况 下 ， 它 定义 ， 如果 你 的 定义 时 ， 如果 你 的, 但是 ， 如果 你 <unk> 需要 自定义 级别 ， 那么 在 执行 此 操作 时应 特别 小心 ， 如果 你 正在 开发 库 ， 则 定义 自定义 级别 可能 是 一个 非常 <unk> 的 <unk>
pep <unk> format specifier for thousands separator pep written by raymond hettinger and implemented by eric smith and mark <unk>, pep <unk> 确定性 由 pep 由 pep 由 由 raymond hettinger 撰写 并 实现, pep <unk> 千位 分隔符 的 格式 说明符 pep 由 raymond hettinger 撰写 ， 并 由 eric smith 和 mark dickinson 实现
writing programs with <unk> a lengthy tutorial for c <unk>, 编写 " <unk> " <unk> " ， 表示 一个 c 的 c " c " 的 c ", 使用 ncurses <unk> : <unk> 面向 c 程序员 的 详细 教程
the python curses module, python 模块 的 模块, python 的 curses 模块
close the cursor now <unk> than whenever <unk> is <unk>, 关闭 光标 光标 现在 会 被 " " " " " " " " " " ", 立即 关闭 cursor （ 而 不是 在 当 " __ del __ " 被 调用 的 时候 ）
if you need to parse untrusted or unauthenticated data see the xml <unk> and the <unk> package sections., 如果 you need to untrusted untrusted or unauthenticated data data ， <unk> <unk> <unk> <unk> 包, 如果 你 需要 解析 不 受 信任 或 未经 身份验证 的 数据 ， 请参阅 xml 漏洞 和 <unk> 包 部分
as is true for modules, classes <unk> of the dynamic nature of python: they are created at <unk> and can be modified further after <unk>, 作为 是 与 <unk> 的 的 ， ， ， ， ， 是 是 ， 的 是 在 " 的 " " " " 可以 被 在, 和 模块 一样 ， 类 也 拥有 python <unk> 的 动态 特性 ： 它们 在 运行 时 创建 ， 可以 在 创建 后 修改
changed in version 3.3: <unk> bpo <unk> in earlier versions, there was no facility for an <unk> or <unk> prefix to identify the source of the message, 在 3.3 版 更改 : 在 bpo <unk> 中 in <unk> in <unk> in " ， " 中 没有 " <unk> " <unk> " <unk> " <unk> " 的 的, 在 3.3 版 更改 : ( 参见 : bpo <unk> 。 ) 在 较 早 的 版本 中 ， 没有 " ident " 或 " tag " 前缀 工具 可以 用来 标识 消息 的 来源
<unk> & <unk> <unk> call <unk> on value before formatting it., " ' ( ' ( ' ) " , " ) " 在 在 在 上 的 值, " ( flags & <unk> ) <unk> " : 在 格式化 value 之前 调用 其 " ascii ( ) "
this is a useful return value when an invalid result needs to interrupt a <unk> for special handling., 这是 一个 函数 的 的 的 的 结果 ， 需要 需要 需要 的 特殊 的 的, 当 对于 无效 结果 需要 中断 计算 进行 特别 处理 时 ， 这是 一个 很 有用 的 返回值
changed in version 3.8: the "bytes" type is now accepted, 在 3.8 版 更改 : " bytes " type 现在 现在 现在, 在 3.8 版 更改 : 现在 可以 接受 " bytes " 类型
new in version 3.6: <unk> <unk> <unk>, 3.6 新版 功能 : " pyexc _ <unk> " , " _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _, 3.6 新版 功能 : " flag " , " intflag " , " auto "
this is <unk> as the best default behaviour., 这是 " 作为 " 的 默认值 默认, 这 被 认为 是 最好 的 默认 行为
<unk> key <unk> reverse <unk> collects all the elements of the iterable into a list, sorts the list, and returns the sorted result, " ' : ' " , " ) " " " 将 所有 所有 元素 的 所有 元素 ， 所有 元素 ， 结果 返回 结果 结果 结果 结果 结果 结果, " sorted ( iterable , key none , reverse false ) " 会 将 iterable 中 的 元素 收集 到 一个 列表 中 ， 然后 排序 并 返回 结果
new in version 3.3., 3.3 新版 功能 ., 3.3 新版 功能 .
only run test methods and classes that match the pattern or substring, 只有 运行 的 测试 方法 和 类 类 类 " " " " ", 只 运行 匹配 模式 或 子串 的 测试方法 和 类
this line should begin with a capital letter and end with a <unk>, 这 应当 使用 " <unk> " , " 和 " <unk> ", 这 一行 应 以 大写字母 开头 ， 以 <unk> 结尾
this provides documentation options similar to what we already have for <unk> <unk> and <unk>, 此 提供 了 一些 选项 的 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 这 提供 了 类似 于 目前 已有 的 " property ( ) " , " <unk> ( ) " 和 " staticmethod ( ) " 等 函数 的 文档 选项 :
displaying the date/time in messages, 在 <unk> 中 的, 在 消息 中 显示 日期 / 时间
<unk> the appropriate metaclass, " 的 " 的 ", 确定 适当 的 元类
this code is exactly equivalent to the first example, 这 代码 会 相当于 相当于 的 第一个, 上述 代码 与 第一个 例子 完全 等价
in other cases, you may have to construct a new tuple to pass as the argument list, 换句话说 ， ， 你 可能 需要 一个 新 的 元组 ， 参数 作为 参数 列表, 另外 一些 时候 你 要 构造 一个 新 的 tuple 来 传递 参数
other methods must be called with the associated lock held, 其他 方法 必须 是 可 迭代 的 的 方法, 其它 方法 必须 在 持有 关联 的 锁 的 情况 下 调用
would raise a "keyerror" exception because the id of the <unk> <unk> used in the second line differs from that in the first line, 在 " 情况 下 ， " 将 引发 " 异常 ， 并 将 在 命令行 中 删除 命令行 中 删除, 会 引发 一个 " keyerror " 异常 ， 因为 <unk> 中 使用 的 " [ 1 , 2 ] " 的 id 与 第一行 中 的 id 不同
pep <unk> new generator features, pep 372 : 新 的 生成器 的, pep <unk> : 生成器 的 新 特性
(contributed by <unk> smith in bpo <unk>, （ 由 <unk> 在 bpo <unk> 中 贡献 。 ）, （ 由 <unk> smith 在 bpo <unk> 中 贡献 ）
new in version 3.9., 3.9 新版 功能 ., 3.9 新版 功能 .
<unk> values contain information specifying whether the function call failed or <unk> together with additional error code, " 值 包含 包含 包含 的 的 的 的 函数 或 调用 或 <unk> 的 的 的, " <unk> " 的 值 包含 的 信息 说明 函数调用 成功 还是 失败 ， 以及 额外 错误码
by returning a tuple of the results:, 由 一个 <unk> 的 元组, 通过 返回 一个 结果 元组 :
note however that, although the help display looks nice and all, it currently is not as helpful as it can be, 请 注意 ， 注意 ， 帮助 的 的 的 ， ， ， 它 并 它 " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ " __ ", 然而 请 注意 ， 尽管 显示 的 帮助 看起来 清楚 完整 ， 但 它 可以 比 现在 更 有 帮助
return the "charset" parameter of the content type header, <unk> to lower case, 返回 content content 的 的 的 的 的 的 " <unk> ", 返回 content type 头字 段 中 的 " charset " 参数 ， 强制 小写
there are some exceptions to this <unk> where ctypes accepts other objects, 有 一些 异常 的 ， ， 这个 方法 的 其他 其他 其他 其他 其他 对象, 也 有 一些 例外
"time" has the same format as <unk> except that no leading sign <unk> ' or <unk> is allowed, " " " " " " " " " " " " " " " " " " " " " " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' " ' ", " time " 的 格式 与 " offset " 的 格式 相同 ， 但 不 允许 使用 前导 符号 （ ' ' 或 ' + ' ）
if "false", "read()" will raise "oserror"., 如果 " 将 " 将 " " " " " " ", 否则 为 " false " ， 且 " read ( ) " 将 引发 " oserror " 错误
the values <unk> <unk> <unk> <unk> <unk> <unk> and <unk> are provided for convenience, 值 值 " <unk> ( ) " , " , " , " , " , " , " , " , " 和 " <unk> " 和 " ' " ' " ' ", calendar 还 提供 了 " <unk> " , " <unk> " , " <unk> " , " <unk> " , " <unk> " , " <unk> " 和 " <unk> " 几个 常量 <unk>
the parameter may be "null"., 形参 可以 为 " null ", 形参 可以 为 " null "
string conversion and formatting, 字符串 和 和 格式, 字符串 转换 与 格式化
the typical usage to break into the debugger from a running program is to insert, 要 要 到 到 到 到 从 <unk> 的 的 程序 的, 从 正在 运行 的 程序 进入 调试器 的 典型 用法 是 插入
for example, <unk> will <unk> if the exact contents of group 1 can be found at the current position, and fails otherwise, 例如 ， " ' " ' 如果 " " " " " 的 内容 ， 如果 " ， 则 会 在 当前 和 的 情况 下 ， 并 返回 ", 例如 ， 如果 可以 在 当前 位置 找到 组 1 的 <unk> 内容 ， 则 " \ 1 " 将 成功 ， 否则 将 失败
programmer's note: functions are first class objects, 函数 有 函数 都 是 一个 类 的 类, 程序员 注意事项 : 函数 属于 <unk> 对象
<unk> <unk> <unk> now returns "s" instead of an empty string for all non zero "n", " _ _ ( ( ) " , " ) " 现在 现在 返回 " 空 字符串 的 字符串 ， 返回 " true ", " " " . replace ( " " , s , n ) " 对于 所有 非零 的 " n " 都 将 返回 " s " 而 不是 空 字符串
allows <unk> to produce a bytes object containing the <unk> message., 允许 " <unk> " 到 一个 字节 串 对象 的 " <unk> ", 这 将 让 " bytes ( msg ) " 产生 一个 包含 序列化 <unk> 的 字节 序列 对象
the size argument indicates the approximate maximum number of encoded bytes or code points to read for decoding, 如果 参数 是 个 的 的 的 字节 码 或 或 写入 的 的 的, size 参数 指明 要 读取 并 解码 的 已 编码 字节 或 码位 的 最大 数量 近似值
if facility is not specified, <unk> is used, 如果 未指定 为 " ， 则 " " . <unk> ", 如果 未指定 <unk> ， 则 使用 " log _ user "
there is also <unk> for setting values in a dictionary just during a scope and restoring the dictionary to its original state when the test <unk>, 在 也 在 字典 中 中 中 ， 字典 中 ， 字典 中 ， 字典 中 ， 字典 中 ， 字典 将 其 字典 到 其 内存 的 内存, 还有 一个 " <unk> . dict ( ) " 用于 在 一定 范围 内 设置 字典 中 的 值 ， 并 在 测试 结束 时 将 字典 恢复 为 其 原始 状态 ：
it is <unk> to configure handlers for a top level logger and create child loggers as needed, 它 被 用于 日志 记录器 层级 级别 的 级别 ， 创建 创建 一个 和 作为 作为, 为 <unk> 记录器 配置 处理程序 并 根据 需要 创建 子 记录器 就 足够 了
the exception classes are exported from the <unk> module., 异常 类 " " " " " " 的 ", 异常 类 从 " urllib . error " 模块 中 导出
changed in version 3.3: the locking scheme has changed to per module locks for the most part, 在 3.3 版 更改 : the 除了 " 的 " to " 模块 的 模块 的 " 模块, 在 3.3 版 更改 : the <unk> <unk> has <unk> to per module <unk> for the <unk> part
blank lines are ignored, as are <unk> which run from a "'#'" character until the end of the line, 空白行 行 被 被 从 ， 从 从 被 从 ， 被 被 被 被 被 被 终止, 空白行 会 被 忽略 ， 以 一个 " ' # ' " 开始 的 注释 行 也 是 如此
if size is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero <unk>, 如果 size 为 假值 ， 则 被 用作 字符串 的 字符串 ， 字符 的 字符串, 如果 指定 了 size ， 则 将 其 用作 字符串 中 的 字符 数量 ， 否则 将 假定 字符串 <unk> 结尾
reset the encoder to the initial state, 重置 海龟 的 初始状态, 将 编码器 重置 为 初始状态
it allows you to replace parts of your system under test with mock objects and make assertions about how they have been used., 它 允许 你 的 的 程序 的 测试 ， ， ， 并 在 其他 如何 使用 的 的, 它 允许 使用 mock 对象 替换 受 测试 系统 的 部分 ， 并 对 它们 如何 已经 被 使用 进行 断言
bpo <unk> raise <unk> if a member variable of a dataclass is of type field, but doesn't have a type <unk>, bpo <unk> : 如果 " 了 一个 " 的 " 的 " 的 " 类型 ， 但 不是 " 类型 " 类型 ， 但 " 类型 " 类型, bpo <unk> : 如果 数据 类 的 成员 变量 的 类型 为 field ， 但 没有 类型 注解 ， 则 引发 typeerror
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
in versions prior to python <unk> and <unk> it <unk> <unk> to "0" which was <unk> and allowed short reads, 在 3.4 版本 版本 ， python <unk> <unk> 和 <unk> <unk> ， 它 <unk> <unk> " " " " " " " " ", 在 python 3.2 . 4 和 3.3 . 1 之前 的 版本 中 ， 它 错误 地 将 默认值 设 为了 为 " 0 " ， 这 是 无 缓冲 的 并且 允许 短 读取
converts the <unk> statement to the "exec()" function., 将 " " " " " " " " " " ", 将 " exec " 语句 转换 为 " exec ( ) " 函数调用
the modules described in this chapter help you write software, 本章 描述 的 模块 描述 的 帮助 你 你, 本章 中 描述 的 各 模块 <unk> 你 编写 python 程序
changed in version 3.8: platform specific fast copy <unk> may be used internally in order to copy the file more efficiently, 在 3.8 版 更改 : 在 windows 版本 中 ， <unk> <unk> <unk> <unk> 拷贝 拷贝 拷贝 拷贝 拷贝 文件, 在 3.8 版 更改 : 可能 会 在 内部 使用 平台 专属 的 快速 拷贝 系统 调用 以 更 高效 地 拷贝 文件
the program is written so as to display something when " <unk> is specified and display nothing when not., 程序 是 被 为 " " " " " " " " " " " 时 ， 当 在 时 时 时 时, 这一 程序 被 设计 为 当 指定 " <unk> " 选项 时 显示 某些 东西 ， 否则 不 显示
using logging in multiple modules, 使用 日志 记录 模块 的 模块, 在 多个 模块 中 使用 日志
the nested contexts <unk> has options to control whether writes and other <unk> apply only to the first mapping or to any mapping in the <unk>, 嵌套 的 的 <unk> 被 设计 的 的 的 其他 其他 其他 ， 将 将 其 到 到 到 到 到 的 的 的 <unk>, <unk> <unk> <unk> 提供 了 是否 对 第一个 映射 或 其他 映射 进行 写 和 其他 修改 的 选项
raises an auditing event <unk> with no arguments., 引发 一个 审计 事件 " ctypes . get _ last _ last _ error " 不 附带 参数, 引发 一个 审计 事件 " syslog . <unk> " 不 附带 任何 参数
stdin , stdout and stderr specify the executed program's standard input, standard output and standard error file <unk> respectively, " stdout " 和 " 和 " 和 " 标准 标准 标准 标准 标准 标准 标准 <unk>, stdin , stdout 和 stderr 分别 指定 被 运行 的 程序 的 标准 输入 、 输出 和 标准 错误 的 文件 句柄
raise <unk> as an exception., 引发 " null " 异常 异常, 引发 exc 作为 异常
this mapping serves as a cache of all modules that have been previously imported, including the intermediate paths, 这 将 使得 " <unk> " 模块 的 所有 模块 的 的 模块 的 " <unk> ", 这个 映射 <unk> 缓存 之前 导入 的 所有 模块 的 作用 （ 包括 其中 间 路径 ）
this doesn't work because if you construct a new list with the same value it won't be <unk> e.g.:, 此 不会 不会 如果 你 ， 如果 你 将 一个 新 的 的 ， 则 将 其 新 的, 这 不起作用 ， 因为 如果 你 构造 一个 具有 相同 值 的 新 列表 ， 它 将 无法 找到 ； 例如 :
how are enums <unk>, 如何 是 ？ ？, 各种 枚举 <unk> 区别 ？
exceptions raised in the child process, before the new program has started to <unk> will be re raised in the <unk>, 在 在 之前 中 中 的 " asyncio . <unk> " ， 则 将 " " " " " " " " ", 在子 进程 中 抛出 的 异常 ， 在 新 的 进程 开始 执行 前 ， 将会 被 再次 在 父 进程 中 抛出
<unk> a message <unk> to be a <unk> but had no boundary parameter., <unk> 一个 消息 消息 消息 宣称 一个 一个 ， 但 但 ， 但 不 不 为, " <unk> " 一条 消息 宣称 有 多个 部分 ， 但 却 没有 boundary 形参
<unk> package extension utility, " pkgutil " 包 扩展 工具, " pkgutil " 包 扩展 工具
they can refer to urls, database <unk> or any other location that can be specified as a string., 它们 可以 通过 数据库 数据库 的 数据库 或 或者 ， 或者 任何 其他 任意 的 可 可 调用 对象, 它们 可以 指向 url 、 数据库 查询 或 可以 用 字符串 指定 的 任何 其他 位置
see pep <unk> for more details., 请参阅 pep <unk> 了解 详情, 详情 见 pep <unk>
<unk> <unk> should be inserted at <unk>, <unk> : <unk> 是 在 在 <unk> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /, " ' <unk> ' " " b [ j1 : j2 ] " 应 插入 到 " a [ i1 : i1 ] "
lambda functions can be used <unk> function objects are required, 在 函数 函数 可 被 函数 对象 函数 函数 函数 对象 函数 对象, lambda 函数 可以 在 需要 函数 对象 的 任何 地方 使用
bpo <unk> update hmac <unk> default to a <unk> <unk> <unk> to 3.8., bpo <unk> : 更新 windows 的 默认 默认 默认 的 默认值 为 " <unk> . <unk> _ <unk> _ <unk> ", bpo <unk> : 更新 hmac <unk> 默认 报告 deprecationwarning ， 并 将 在 3.8 移除
the value for the built in variable is determined when the interpreter <unk>, 用于 内置 的 " " " " " " " " ", 该 内置 变量 的 值会 在 解释器 启动 时 确定
new in version 3.5.4., 3.5 . 4 新版 功能 ., 3.5 . 4 新版 功能 .
on unix, the configure script will attempt to locate the appropriate header file to simplify building this module., 在 unix 上 ， 将 将 将 将 记录 日志 记录 日志 记录 模块 的 模块, 在 unix 上 ， <unk> 脚本 将 尝试 定位 适当 的 头文件 来 简化 此 模块 的 构建
if key is not in the dictionary, "keyerror" is raised, 如果 key 为 " ， 则 会 引发 " keyerror ", 如果 字典 中 没有 key ， 则 会 引发 " keyerror "
it can be used for example, for comparing files, and can produce information about file differences in various formats, including html and context and <unk> <unk>, 它 可以 用于 用于 ， 可以 在 文件 中 的 的 ， 可以 在 文件 中 的 的 文件 中 的 的 和, 例如 ， 它 可 被 用于 比较 文件 ， 并 可 产生 多种 格式 的 不同 文件 差异 信息 ， 包括 html 和 上下文 以及 统一 的 diff 数据
see also the <unk> class., 另 请参阅 " <unk> ., 参见 " <unk> " 类
these modules were deprecated since python 3.7 which requires threading support, 这些 模块 已 自 python 3.8 已 移除 的 python ， ， 请 支持, 这些 模块 自 python 3.7 起 已 被 弃用 ， 它们 需要 线程 支持
this method returns a ctypes type instance exported by a shared library, 此 方法 返回 类型 类型 类型 实例 类型 的 类型, 此 方法 返回 一个 由 共享 库 导出 的 ctypes 类型
the "nonlocal" statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals, " nonlocal " 语句 在 之前 的 的 的 的 中 ， 在 在 当前 中 的 的, " nonlocal " 语句 会 使得 所 列出 的 名称 指向 之前 在 最近 的 包含 作用域 中 绑定 的 除 全局变量 以外 的 变量
the <unk> may implement different error handling schemes by providing the errors keyword argument, " <unk> " 可以 " 实现 " 关键字 参数 关键字 参数 来 访问 的 的 的, " <unk> " 可以 通过 提供 errors 关键字 参数 来 实现 不同 的 错误处理 方案
when invoked on an unlocked lock, a "runtimeerror" is raised., 当 在 时 ， 时 ， 引发 的 引发 " runtimeerror " runtimeerror ", 在 未 锁定 的 锁 调用 时 ， 会 引发 " runtimeerror " 异常
is <unk> equivalent to:, 等价 于 :, 在 <unk> 等价 于 :
this document was <unk> and <unk> by <unk> <unk>, <unk> <unk> <unk> 和 <unk> <unk> <unk> <unk> <unk> <unk>, 这篇 文档 由 <unk> <unk> <unk>
as an alternative to using the <unk> method described above, you can also send your request step by <unk> by using the four functions below., 作为 使用 使用 使用 " 方法 的 方法 ， 请 使用 你 的 可以 使用 以下 使用 的 的 来 使用 你 的 的 来 使用 的 的 来 使用 的 的, 作为 对 使用 上述 " request ( ) " 方法 的 替代 同 ， 你 也 可以 通过 使用 下面 的 四个 函数 ， 分 步骤 发送 请 的 请求
it will back up until it has <unk> zero matches for "[bcd] ", and if that <unk> fails, the engine will <unk> that the string doesn't match the re at <unk>, 它 将 被 忽略 的 （ 如果 " " " " " " " " " ， 如果 " 将 匹配 将 匹配 将 匹配 将 匹配 将 匹配 " ' " ' " ' " ' " ' ", 它 将 回退 ， 直到 它 为 " [ bcd ] " 尝试 零 匹配 ， 如果 随后 失败 ， 引擎 将 <unk> 该 字符串 与 正则 完全 不 匹配
the modules <unk> <unk> <unk> <unk> use the openssl library for added performance if made available by the operating system, 模块 模块 " <unk> ( ) " , " <unk> ( ) " ， 在 使用 了 使用 的 选项 中 使用 的 选项, 如果 操作系统 可用 ， 则 " hashlib " , " posix " , " ssl " , " <unk> " 模块 使用 openssl <unk> 提高 性能
<unk> usage information that will be displayed with sub command <unk> by default the name of the program and any positional arguments before the <unk> argument, " <unk> . <unk> ( ) " 的 的 的 默认 的 参数 参数 参数 参数 参数 参数 参数 参数 参数 参数 参数 参数 参数, prog 将 与 子 命令 帮助 <unk> 显示 的 用法 信息 ， 默认 为 程序 名称 和子 解析器 参数 之前 的 任何 位置 参数
changed in version 3.4: namespace packages are also supported, 在 3.4 版 更改 : 命名 空间 are are " are ", 在 3.4 版 更改 : 同样 支持 命名 空间 包
if you code or decode <unk> on non macintosh platforms they will still use the old macintosh newline convention <unk> return as end of <unk>, 如果 你 或 在 " " " " " " " " " ， 使用 " " " " " " " " " " " " " " " " " " " " " " " ", 如果 您 在 非 <unk> 平台 上 编码 或 解码 文本文件 ， 它们 仍 将 使用 旧 的 <unk> 换行符 约定 （ 回车符 作为 行尾 ）
<unk> , if given, is passed as the size argument to the stream's "read()" method., 如果 <unk> 为 假值 ， 则 将 被 作为 参数 参数 " true " ) " 方法 返回 " true ", 如果 给定 了 <unk> ， 则 将 其 作为 size 参数传递 给 流 的 " read ( ) " 方法
these files are in the <unk> directory., 这些 文件 <unk> <unk> <unk>, 这些 文件 位于 " <unk> " 目录 中
if x is not a python "int" object, it has to define an "__index__()" method that returns an integer, 如果 x 不是 不是 一个 python python ， 则 它 将 返回 " __ ( ) " 方法 返回 一个 一个 整数, 如果 x 不是 python 的 " int " 对象 ， 那 它 需要 定义 " __ index __ ( ) " 方法 返回 一个 整数
right now, cpython works with anything that implements <unk> and <unk> <unk>, 下面 的 的 cpython " <unk> " 和 " <unk> " 和 " <unk> ", 现在 ， cpython 可以 正确 地 实现 malloc ( ) 和 free ( )
it is recommended that you use <unk> implementations to group tests together according to the features they test, 它 你 你 应该 使用 " <unk> " 来 ， ， 测试 <unk> 的 测试, 建议 你 根据 所 测试 的 功能 ， 将 测试 用 testcase 实现 <unk>
negative position values will be treated as being relative to the end of the input string, 负值 位置 值 将 被 写入 到 输入 字符串 的 的, 负 的 位置 值 将 被 视为 相对 于 输入 字符串 的 末尾
this is useful in <unk> catch logical <unk>, 这 在 很 <unk> 的 <unk> <unk>, 这 对于 帮助 <unk> 逻辑 错误 非常 有用 :
another capability is that you can specify that portions of the re must be repeated a certain number of times., 另 ， 这样 ， 你 可以 必须 必须 必须 是 必须 是 一个 整数 的 的, 另 一个 功能 是 你 可以 指定 正则 的 某些 部分 必须 重复 一定 次数
<unk> fun to mouse move events on this turtle, <unk> 在 在 进程 上 的 的 的 的, 将 fun 指定 的 函数 绑定 到 在 此 海龟 上 移动 鼠标 事件
below is a table showing the mapping of legacy converters into real argument <unk> converters, 该 是 一个 字典 的 " 的 " 的 " 的 " 的 " 参数 " 参数 " 的 ", 下表 显示 了 传统 转换器 映射 到 实参 转换器 的 情况
use "false" to disable the feature again., 使用 " false " " " " " " ", 再次 使用 " false " 来 禁用 该 功能
you can specify a destination (such as console or file) by using "basicconfig()" as in the tutorial examples, 你 可以 是 一个 c 字符串 ， 以 使用 " ' " 或 " 的 " 来 表示 的 的 的, 你 可以 使用 " basicconfig ( ) " 指定 目标 （ 例如 控制台 或 文件 ） ， 如 教程 示例 中 所示
the import machinery is <unk> so new finders can be added to extend the range and scope of module <unk>, 导入 是 是 为了 ， ， ， 可以 用 可以 用 可以 是 在 <unk> 和 模块 的 的 模块 的 模块, 导入 机制 是 可 扩展 的 ， 因此 可以 加入 新 的 查找 <unk> 扩展 模块 搜索 的 范围 和 作用域
<unk> when the earlier <unk> attempts to print the <unk> local variable and an error <unk>, " <unk> . <unk> ( ) " 将 被 设为 " <unk> " 时 ， 并 将 被 设置 错误, 因此 ， 当 先前 的 " print ( x ) " 尝试 打印 未 初始化 的 局部变量 时会 导致 错误
changed in version 3.8: use "__index__()" if available., 在 3.8 版 更改 : 如果 使用 " __ index __ " __ " __ ", 在 3.8 版 更改 : 如果 可用 将 使用 " __ index __ ( ) "
how do i keep editors from <unk> tabs into my python <unk>, 如何 从 python 从 python 中 的 python python ？ ？, 如何 让 编辑器 不要 在 我 的 python 源代码 中 插入 tab ？
skip the decorated test unless condition is true., 关闭 的 的 测试 <unk> 的 为 真值, 跳过 被 装饰 的 测试 ， 除非 condition 为 真
this should be <unk> or <unk>, 这 应当 是 " 或 " 或 " 或 ", 这 应当 小于 或 等于 273
mock is based on the <unk> > <unk> pattern instead of <unk> > <unk> used by many <unk> <unk>, mock " " " " " " " " " " " " <unk> ( <unk> , " <unk> ( ) " " " " <unk> ( ) " ) ", 模拟 基于 ' action > <unk> ' 模式 ， 而 不是 许多 模拟 框架 所 使用 的 ' <unk> > <unk> ' 模式
at least one of fileobj and filename must be given a non <unk> value., 至少 的 一个 " 和 " ， 必须 为 一个 字符串 为 一个 字符串, fileobj 和 filename 至少 有 一个 不为 空
"tokenize" tokenizer for python source, " tokenize " 对 python 的 的 解析器, " tokenize " 对 python 代码 使用 的 标记 解析器
(the <unk> module is lower level, used to support compiling a possibly incomplete chunk of python <unk>, （ " <unk> " 模块 模块 （ 在 <unk> 支持 的 的 的 python 的 的 python 的 的, （ " <unk> " 模块 是 低 层级 的 ， 用于 支持 编译 可能 不 完整 的 python 代码 块 。 ）
added <unk> and <unk> to <unk> to support <unk> for <unk> and <unk>, 添加 了 " <unk> _ <unk> " 和 " <unk> " 和 " <unk> " <unk> " <unk> 支持 <unk> <unk> <unk> <unk> <unk> <unk> <unk>, unittest 添加 了 " <unk> ( ) " 和 " <unk> ( ) " 以 支持 对 " <unk> ( ) " 和 " <unk> ( ) " 进行 清理
returns "null" on failure, 如果 失败 ， 返回 " null ", 如果 失败 ， 返回 " null "
if <unk> is not defined then it falls back to "__float__()", 如果 <unk> 为 " true " 则 则 它 将 回退 " __ index __ ", 如果 " __ complex __ ( ) " 未定义 则 将 回退 至 " __ float __ ( ) "
the default for <unk> was dependent on the system libraries, and often was "python" instead of the name of the python program file., 对于 " ' " ' 系统 系统 系统 的 的 和 " <unk> python 程序 的 的, ident 的 默认值 依赖于 系统 库 ， 它 往往 为 " python " 而 不是 python 程序 文件 的 实际 名称
if a derived class does not wish to <unk> with this <unk> all of the special methods supported by this class will need to be <unk> please consult the sources for information about the methods which need to be provided in that case., 如果 一个 类 的 " 实例 " ， 则 所有 的 的 方法 的 方法 的 方法 的 " __ main __ " 的 方法 来 ， ， 的 的 方法 ， ， 的 方法 ， 以便 的 方法, 如果 一个 分离 的 类 不 希望 <unk> 这个 需求 ， 所有 的 特殊 方法 就 必须 重写 ； 请 <unk> 源代码 进行 修改
the <unk> function transforms option names to a canonical form, " math . math " 函数 将 添加 到 " <unk> " 的 名称, <unk> 函数 会 将 选项 名称 转换 为 规范 形式
"\s" matches any non whitespace <unk> this is equivalent to the class <unk> <unk>, " 匹配 " 任何 任何 任何 " " " " ， 等价 于 " <unk> " " " " ", " \ s " 匹配 任何 非 空白 字符 ； 这 相当于 类 " [ ^ \ t \ n \ r \ f \ v ] "
(see <unk> for information on how capsule names are <unk>, （ 请参阅 在 windows 上 的 如何 如何 如何 如何 <unk>, （ 请参阅 " pycapsule _ <unk> ( ) " 了解 如何 对 capsule 名称 进行 比较 的 有关 信息 。 ）
sometimes it is useful to be able to <unk> the sequences given by a pseudo random number generator, 有时 ， 有时 很 <unk> 的 的 的 的 的 的, 有时 能够 <unk> 伪 随机数 生成器 给出 的 序列 是 很 有 用处 的
if a compression method is not supported, <unk> is raised., 如果 " 了 " 方法 " 方法 ， 则 会 引发 " " " ", 如果 某种 压缩 方法 不 受 支持 ， 则 会 引发 " <unk> "
a string with all available type <unk>, 带有 所有 的 类型 的 类型, 包含 所有 可用 类型 码 的 字符串
the web installer is a small initial <unk> and it will automatically <unk> the required components as necessary, 该 是 是 一个 <unk> 的 ， ， ， 它 它 将 其 它 将 其 <unk>, web <unk> （ 网络 安装包 ） 是 一个 小 的 初始化 工具 ， 它 将 在 安装 过程 中 ， 根据 需要 自动 下载 所 需 的 组件
named tuple the term <unk> <unk> applies to any type or class that inherits from tuple and whose <unk> elements are also accessible using named attributes, 命名 元组 的 的 " <unk> " " " " " 类型 的 " 、 " 、 " 的 实例 的 的 类型 ， 并且 可 通过 " 属性 " 属性, named tuple 具名 元组 术语 “ 具名 元组 ” 可 用于 任何 继承 自 元组 ， 并且 其中 的 可 索引 元素 还 能 使用 名称 属性 来 访问 的 类型 或类
new in version 3.4., 3.4 新版 功能 ., 3.4 新版 功能 .
sqlite natively supports only the types text, integer, <unk> <unk> and null, sqlite 支持 支持 支持 类型 类型 ， " " " , " , " , " , ", sqlite 原生 只 支持 5 <unk> 类型 ： text ， integer ， real ， <unk> 和 null
an example consumer of the buffer interface is the "write()" method of file objects: any object that can export a series of bytes through the buffer interface can be written to a file, 缓冲区 缓冲区 缓冲区 缓冲区 缓冲区 是 " 文件 对象 的 方法 方法 的 方法 的 方法 ， " " " " " 的 " 的 " 的 " 的 " 的 文件, 缓冲区 接口 的 消费者 的 一个 例子 是 文件 对象 的 " write ( ) " 方法 ： 任何 可以 输出 为 一系列 字节 流 的 对象 可以 被 写入 文件
this conversion can often require 53 or more digits of precision, 这 可以 可以 通过 " 或 " 或 " 的 更 多, 此 转换 通常 需要 53 位 或 更 <unk> 的 精度
the output parameter can either be a filename or a file like object <unk> object supporting a "write()" and "close()" <unk>, 输出 形参 形参 可以 是 一个 文件名 或 一个 文件 对象 对象 ， 并 返回 一个 " 和 " 对象 ", 输出 参数 可以 是 文件名 或类 文件 对象 （ " write ( ) " 和 " close ( ) " 方法 的 任何 对象 ）
after that, you can take a look at the logging <unk>, 在 你 <unk> 你 可以 可以 一个 日志 日志 日志 日志 日志, 之后 ， 你 可以 看 一下 日志 操作手册
<unk> must be <unk> or a tuple of cell objects., " 必须 _ or _ or ( or ( or 或 ) " 的 一个 元组, <unk> 必须 为 " py _ none " 或 cell 对象 的 元组
<unk> the class has a <unk> even though it is bound to two names and invoked through the name b the created instance is still reported as an instance of class a, " 类 " 类 具有 具有 具有 " __ " __ " ， 它 是 两个 两个 是 ， 并且 的 的 名称 ， 的 属性 是 " 的 " 实例 的 实例 的 实例 的 实例, 不 <unk> 地 讲 ， 该类 有 一个 名称 ： 虽然 它 是 绑定 了 两个 名称 并 通过 名称 b 发起 调用 ， 所 创建 的 实例 仍然 被 视为 类 a 的 一个 实例
changed in version <unk> require <unk> for <unk> format characters, 在 3.9 版 更改 : <unk> _ <unk> _ <unk> " 格式 格式 格式, 在 3.8 . 2 版 更改 : <unk> " py _ ssize _ t " for " # " format characters
from file <unk> <unk>, 由于 文件 通配符 <unk> <unk>, 从文件 关联 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
return a list of all available password database <unk> in arbitrary order., 返回 所有 列表 中 所有 所有 的 所有 列表 的 列表, 返回 密码 数据库 中 所有 项目 的 列表 ， 顺序 不是 固定 的
a new reference to the <unk> object, 一个 新 的 引用 引用 引用, 对 导出 对象 的 新 引用
common methods of ctypes data types, these are all class methods (to be <unk> they are methods of the metaclass <unk>, python ctypes 方法 的 数据 都 是 所有 类 类 都 是 方法 的 方法 都 是 它们 是 它们 的 方法 是 它们 的 方法, ctypes 数据类型 的 通用 方法 ， 它们 都 是 类 方法 （ <unk> <unk> ， 它们 是 <unk> 的 方法 ） :
why are <unk> required for the <unk> statements?, 为什么 是 <unk> <unk> <unk> <unk>, 为什么 if / while / def / class 语句 需要 冒号 ？
which is equivalent to:, 它 等价 于 :, 这 等价 于 :
an "oserror" is raised if the io object does not use a file descriptor., 如果 对象 对象 不是 不 存在 则 使用 " file . file . file ( ) ", 如果 io 对象 不 使用 文件 描述符 ， 则 会 引发 " oserror "
another window will be <unk>, 另 将 将 被 截断, 另 一个 窗口 将 被 激活
<unk> : set to true to strip whitespace before and after text content (default: <unk>, " <unk> . <unk> " 将 在 到 在 之前 之前 ， 并 在 文本 文本 文本 文本 <unk> 为 <unk>, <unk> _ text : set to true to <unk> <unk> <unk> and after text content （ 默认值 ： <unk> ）
otherwise, the "argumentparser" will see two " <unk> help" options (one in the parent and one in the <unk> and raise an error., 否则 ， ， " 将 " " " " " " " " ， " ， " ， " 中 ， " 将 在 " 中 " 中 并 将 引发 " 异常, 否则 ， " <unk> " 将会 看到 两个 " h / help " 选项 （ 一个 在 父 参数 中 一个 在子 参数 中 ） 并且 产生 一个 错误
<unk> should be used for converting character references to the corresponding unicode characters., " <unk> " 应当 用于 用于 字符 以 为 " ' " 的 的, 应当 使用 " html . <unk> ( ) " 来 将 字符 引用 转换 为 对应 的 unicode 字符
if there is no associated file, do save as instead., 如果 没有 没有 存在 则 则 则 将 被, 如果 没有 对应 的 文件 ， 则 使用 “ <unk> ” 代替
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
<unk> <unk> is the only accepted value for <unk> ., " <unk> _ <unk> " 是 " <unk> 的 的 值, 目前 ， " clock _ <unk> " 是 <unk> _ id 唯一 可 接受 的 值
<unk> , if specified, must be a list of strings with the names of the long options which should be supported, " _ <unk> _ size ， 如果 必须 是 一个 的 的 的 列表 ， 则 返回 一个 的 的, 如果 指定 了 <unk> ， 则 必须 为 一个 由 应当 被 支持 的 长 选项 名称 组成 的 列表
makes a normal distribution instance with <unk> and <unk> parameters <unk> from the data using <unk> and <unk>, 使用 " <unk> " 实例 的 实例 ， " <unk> " 和 " <unk> " 和 " <unk> " 和 " <unk> " 和 " <unk> " 和 " <unk> ", 传入 使用 " <unk> ( ) " 和 " <unk> ( ) " 基于 data <unk> 出 的 <unk> 和 <unk> 形参 创建 一个 正态分布 实例
the test function should return a string describing the image type if the test <unk> or "none" if it <unk>, 函数 函数 应当 返回 返回 的 如果 或者 如果 如果 或者 的 或者 如果 或者 如果 " none ", 如果 测试 成功 ， 这个 <unk> 应当 返回 一个 描述 图像 类型 的 字符串 ， 否则 返回 " none "
new in version 3.1., 3.1 新版 功能 ., 3.1 新版 功能 .
please refer to <unk> in the python source distribution for more detailed information., 请 python 3 中 的 python <unk> python 3 ， 详情 more information ., 有关 更 多 详细信息 ， 请参阅 python 源代码 中 的 " <unk> / <unk> . txt "
"json" json encoder and decoder, " json " json 解码器 和 解码器, " json " json 编码 和 解码器
<unk> core distutils functionality, " 核心 . 1 / / / 示例, " distutils . <unk> " 分发 包 功能 的 核心
opening with flags "'r'" and "'w'" no longer creates a database if it does not <unk>, " dst " 和 " ' " 和 " 时 ， 如果 没有 任何 时 ， 如果, 附带 " ' r ' " 和 " ' w ' " 旗 标的 打开 操作 不会 再 创建 数据库
its methods create and return proxy objects for a number of commonly used data types to be synchronized across processes, " __ " __ ( ) " 方法 返回 返回 对象 的 对象 对象 的 对象 对象, 它 拥有 一系列 方法 ， 可以 为 大部分 常用 数据类型 创建 并 返回 代理 对象 代理 ， 用于 进程 间 同步
all of the usual math operations and special methods apply, 所有 的 的 " 和 " 和 " 的 特殊 方法, 所有 常用 的 数学 运算 和 特殊 方法 都 适用
<unk> can be one of two values:, " 可以 _ compile ( ) " 两个 两个 值 ：, <unk> 可 为 以下 <unk> 之一 ：
future objects are used to <unk> low level callback based code with high level <unk> code., future 对象 被 用来 基于 基于 的 基于 基于 的 的 " __ " __ " __ " 的 的, future 对象 用来 链接 底层 回 <unk> 代码 和 高层 异步 / 等待 式 代码
when invoked with a timeout other than "none", it will block for at most timeout seconds, 当 执行 其他 时 ， 其他 时 ， " " " " 阻塞 阻塞 阻塞 阻塞 阻塞 阻塞 阻塞 阻塞, 当 发起 调用 时 如果 timeout 不 为 " none " ， 则 它 将 阻塞 最 多 timeout 秒
see a command line interface to difflib for a more detailed example., 请参阅 difflib 命令行 命令行 命令行 更 更 多 的, 请参阅 difflib 的 命令行 接口 获取 更 详细 的 示例
flags is deprecated and completely ignored, 为 为 " 的 和 ", flags 已经 弃用 且 完全 被 忽略
the function has an o(1) <unk> i.e. works equally fast for contexts with a few context variables and for contexts that have a lot of them., 函数 函数 是 一个 " <unk> ( ) " ， ， 该 上下文 上下文 上下文 上下文 变量 上下文 的 的 和 的 的, 此 函数 复杂度 为 o ( 1 ) ， 也就是说 对于 只 包含 几个 上下文 变量 和 很多 上下文 变量 的 情况 ， 他们 是 一样 快 的
the abc <unk> defines the standard iterable method, <unk> as an abstract method, " " . <unk> " 定义 了 " __ ( ) " 方法 的 方法 " " ( ) " 方法 的 抽象 方法, abc " <unk> " 定义 了 标准 的 迭代 方法 " __ iter __ ( ) " 作为 一个 抽象 方法
in any situation where the size of the resource is <unk> you should use a bounded semaphore, 在 任何 中 的 的 的 的 ， ， 应当 应当 应当 使用 应该 使用, 在 资源 数量 固定 的 任何 情况 下 ， 都 应该 使用 有 界 信号量
changed in version 3.4: support width and precision formatter for <unk> <unk> <unk> <unk> <unk> <unk> added., 在 3.4 版 更改 : 支持 了 " 和 " for " <unk> " <unk> " <unk> " <unk> " <unk> " <unk> ", 在 3.4 版 更改 : support width and precision formatter for " " % s " " , " " % a " " , " " % u " " , " " % v " " , " " % s " " , " " % r " " added .
converts the old metaclass syntax <unk> <unk> in the class <unk> to the new <unk> <unk> <unk>, 将 " <unk> ( ) " " " " 类 的 " " ( ) " 新 的 新 的 " <unk> ( ) " ) " " " " " " ", 将 老 的 元类 语法 （ <unk> 中 的 " __ <unk> __ meta " ） 替换 为 新 的 （ " class x ( <unk> meta ) " ）
a small number of constants live in the built in namespace, 在 内置 中 的 的 的 描述 的, 有 少数 的 常量 存在 于 内置 命名 空间 中
up to this point, we've simply performed searches against a static string, 将 这个 变量 提供 了 提供 ， ， 一个 字符串 字符串, 到 目前为止 ， 我们 只是 针对 静态 字符串 执行 搜索
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
(en_us); so, <unk> ..., <unk> (de_de) <unk> weekday as locale's full name, <unk> （ <unk> <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , ... ) ", sun , <unk> , ... , <unk> ( 1 ) ( en _ us ) ; so , <unk> , ... , <unk> ( de _ de ) " % a " 本地化 的 星期 中 <unk> 的 完整 名称
changed in version 3.2: previously, windows registry settings were ignored., 在 3.2 版 更改 : 在 windows 版本 中 的 支持, 在 3.2 版 更改 : previously , windows registry <unk> were ignored .
if a file named in filenames cannot be <unk> that file will be ignored, 如果 一个 文件 中 的 文件 描述符 则 将 将 文件 描述符, 如果 <unk> 中 名称 对应 的 某个 文件 无法 被 打开 ， 该 文件 将 被 忽略
when run with the appropriate arguments, it prints either the sum or the <unk> of the command line <unk>, 当 运行 时 将 被 执行 ， ， 将 将 被 移除 的 或者 将 被 移除, 当 使用 适当 的 参数 运行 时 ， 它会 输出 命令行 传入 整数 的 总和 或者 最大值 ：
on some platforms, this function may return "false" if permission is not <unk> to execute "os.stat()" on the requested file, even if the path <unk> <unk>, 在 某些 上 ， 此 函数 会 被 不 存在 如果 没有 ， 如果 在 ， 则 如果 在 ， 则 如果 " <unk> " " ", 在 某些 平台 上 ， 如果 使用 " os . stat ( ) " 查询 到 目标 文件 没有 执行 权限 ， 即使 path 确实 存在 ， 本 函数 也 可能 返回 " false "
<unk> is the module name, <unk> indicates if module was successfully <unk>, " <unk> " 是 模块 模块 （ 如果 模块 （ 如果 " <unk> " ）, " <unk> " 是 模块 名称 ， " arg1 " 表示 模块 是否 成功 加载
if you used a python dictionary to map names to <unk> or <unk> to names, the image objects would remain alive just because they <unk> as values or keys in the dictionaries, 如果 你 需要 一个 字典 到 到 " 或 " <unk> " 或 " 对象 " 对象 ， ， 的 对象 ， ， 它们 将 它们 它们 在 在 字典 中 中 的 值, 如果 您 使用 python 字典 将 名称 映射 到 图像 ， 或 将 图像 映射 到 名称 ， 则 图像 对象 将 保持 <unk> ， 因为 它们 在 字典 中 显示 为值 <unk>
if there is no <unk> in path , head will be empty, 如果 没有 没有 中 ， 则 则 将 将 被 视为, 如果 path 中 没有 斜杠 ， head 将 为 空
for a list of the files in a tar archive, use the " l" <unk>, 对于 指定 的 的 的 列表 ， ， 请 使用 " " " ", 要 获取 一个 tar 归档 中 文件 的 列表 ， 请 使用 " l " 选项 :
return "true" if the stream can be read from, 如果 流 可 被 读取 读取 读取 读取, 如果 可以 读取 流 ， 则 返回 " true "
complex numbers as python objects, 复数 复数 的 python 对象, 表示 复数 的 python 对象
these are often useful for test <unk> <unk> tools, and prototypes that will later be wrapped in a more sophisticated interface., 这些 是 适用 于 <unk> 的 的 ， ， ， ， ， 在 在 的 情况 下 ， 以 在 更 多 的, 这些 通常 对 <unk> ， <unk> 和 原型 有用 ， 这些 工具 随后 将 被 包含 在 更 复杂 的 接口 中
data can be a sequence or iterable., data 可以 是 序列 或 序列 对象, data 可以 是 序列 或 可 迭代 对象
the "try" clause is executed, including any "except" and "else" clauses, " try " 子句 被 被 包括 任何 任何 和 任何 扩展, " try " 子句 会 被 执行 ， 包括 任何 " except " 和 " else " 子句
with <unk> <unk> has no effect., 使用 " <unk> _ <unk> " ， 不 不 不 不, <unk> 对 " <unk> " 没有 效果
return number rounded to <unk> precision after the decimal point, 返回 小时 为 <unk> 数 月 月 月 月, 返回 number 舍入 到 <unk> 后 <unk> 位 精度 的 值
it returns a string similar to that returned by the built in function of the same name, but with limits on most <unk>, 它 返回 返回 的 的 的 字符串 的 字符串 ， 返回 " 的 " 的 的 的 相同 的, 它会 返回 与 同名 内置 函数 所 返回 字符串 相似 的 字符串 ， 区别 在于 附带 了 对 多数 类型 的 大小 限制
in particular, <unk> is an enhanced alternative to "distutils" that <unk>, 在 3.2 情况 下 ， " 是 一个 <unk> ， 就 将 <unk> <unk> <unk>, 特别 地 ， <unk> 是 一个 对于 " distutils " 的 增强 选项 ， 它 能 提供 ：
parameters: n <unk> integer, 参数 : n 数 整数, 参数 : n <unk> 整型 数
optional keyword parameters linejunk and charjunk are filtering functions (or <unk>, 可选 的 关键字 参数 linejunk linejunk 和 和 字典 的 为 函数 或 " none ", 可 选 关键 字形 参 linejunk 和 charjunk 均 为 过滤 函数 ( 或 为 " none " ) ：
for example, <unk> 2" returns <unk> but <unk> 2" returns <unk>, 例如 ， " ' + ' ' " ' " 返回 " ' ， ， 返回 " ' [ 1 ] " ， 返回 " " ", 例如 ， " 10 2 " 返回 " 100 " ， 而 " 10 2 " 返回 " <unk> "
this function does not <unk> a reference to v ., 此 函数 不会 不会 <unk> 引用 引用 引用 引用, 此 函数 不会 增加 对 v 的 引用
if the future is already done when this method is called, the callback is scheduled with <unk>, 如果 future 是 " __ ( ) " 方法 时 ， 此 方法 会 被 " " " " ", 调用 这个 方法 时 future 已经 完成 , 回调 函数 已 被 " loop . call _ <unk> ( ) " 调度
names must not be longer than <unk> characters, there is no <unk> name information, 如果 未 被 的 的 ， 则 ， 则 没有 的 的 ； 名称 名称, 名称 长度 不能 超过 100 个字符 ， 并且 没有 用户 / 分组 名 信息
when used on object types for which they do not <unk> they will raise a python exception., 当 在 对象 时 ， 它们 ， 不 不 " " " ， 将 引发 " valueerror ", 当 使用 对象 类型 并 不 适用 时 ， 他们 会 产生 一个 python 异常
define an <unk> method which returns an object with a "__next__()" method, " " _ _ _ _ _ _ _ _ _ ( ) " 方法 返回 一个 方法 的 方法 对象 的 一个 对象, 定义 一个 " __ iter __ ( ) " 方法 来 返回 一个 带有 " __ next __ ( ) " 方法 的 对象
locate the insertion point for x in a to maintain sorted order, 将 在 缓冲区 中 的 的 顺序 顺序 顺序 顺序 顺序 顺序 顺序 顺序, 在 a 中 找到 x 合适 的 插入 <unk> 维持 有序
ordered comparisons between enumeration values are not supported, 在 ， 之间 之间 的 值 值, 枚举 值 之间 的 排序 比较 不 被 支持
(if you are already familiar with the basic concepts of <unk> you might want to skip to the list of <unk> <unk>, 如果 你 可以 使用 " 的 " ， ， 你 你 希望 " " " " " " " " " 的 列表 列表, （ 如果 你 已经 对 测试 的 概念 比较 熟悉 了 ， 你 可能 想 直接 跳转 到 这 一部分 断言 方法 。 ）
this time the character at the current position is <unk> so it succeeds., 此 时间 字符 字符 的 的 位置 被 被 <unk> ， 因此 被, <unk> 当前 位置 的 字 <unk> " ' b ' " ， 所以 它 成功 了
pep <unk> using <unk> as the index type, pep <unk> : 使用 作为 类型 类型, pep <unk> : 使用 ssize _ t 作为 索引 类型
interrupt execution stop a running program., 在 执行 执行 的 执行 运行 运行 运行, 中断 执行 停止 正在 运行 的 程序
determine whether code is in <unk> <unk> for plain <unk>, 确定 是否 是否 是否 是否 是 <unk> <unk> <unk> <unk>, 确定 code 是否 属于 <unk> ( 不适 用于 纯 文本 )
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
the return value is "true" unless a given timeout <unk> in which case it is "false"., 返回值 是 一个 " true " ， 则 返回 " true " 的 ， 它, 返回 " true " ， 除非 提供 的 timeout <unk> ， 这种 情况 下 返回 " false "
"copyreg" register "pickle" support functions, " copyreg " 注册 " 注册 " pickle " 模块 的 函数, " copyreg " 注册 配合 " pickle " 模块 使用 的 函数
the default is <unk>, 默认值 为 " " rb " ", 默认值 为 " 40 "
it is highly recommended to have good code coverage <unk> unit testing or any other <unk> before potentially introducing <unk> hidden in sophisticated <unk>, 它 是 为了 <unk> 的 代码 的 " " " 或 " <unk> ( ) " 其他 任何 其他 的 的 其他 （ 其他 ） ）, 强烈建议 在 可能 引入 隐藏 在 复杂 优化 中 的 <unk> 之前 ， 要 有 良好 的 代码 <unk> （ 通过 单元测试 或 任何 其他 技术 ）
this function drops you into the debugger at the call site, 此 函数 会 你 你 在 调试器 的 <unk> 调试器, 此 函数 会 在 调用 时 将 你 <unk> 调试器 中
the resulting string can be used directly as an attribute value:, 可以 字符串 的 用作 用作 用作 属性 属性 :, 结果 字符串 可 被 直接 用作 属性 值 :
(note that ignoring encoding errors can lead to data <unk> "'replace'" causes a replacement marker (such as <unk> to be inserted where there is malformed data, 请 注意 ， ， 编码 格式 可以 可以 <unk> " " " " " " " " " " " " " " ", ( 请 注意 忽略 编码 格式 错误 会 导致 数据 丢失 。 ) " ' replace ' " 会 在 出现 错误 数据 时 插入 一个 替换 标记 ( 例如 " ' ? ' " )
appends items from the string, <unk> the string as an array of machine values (as if it had been read from a file using the <unk> <unk>, 从 字符串 中 字符串 字符串 字符串 字符串 作为 字符串 ， ， 如果 从 " 文件 . stdin " 文件 ， 从 一个 文件 文件 读取 读取, 添加 来自 字符串 的 项 ， 将 字符串 解读 为 机器 值 的 数组 （ 相当于 使用 " <unk> ( ) " 方法 从文件 中 读取数据 ）
return the path of <unk>, 返回 路径 路径 的 路径, 返回 " <unk> " 的 目录
on all platforms, the configured value is available as the <unk> key in <unk>, 在 所有 中 的 ， 值 会 被 " " " " " " " " 中 的 键 ", 在 所有 平台 上 ， 配置 值会 在 " <unk> . get _ config _ var ( ) " <unk> " <unk> " 键 的 形式 提供
for more information on static methods, see the standard type <unk>, 有关 " for " 的 ， 请参阅 " 类型 " 类型 " 类型 " 类型, 想 了解 更 多 有关 静态方法 的 信息 ， 请参阅 标准 类型 层级 结构
if tos is true, sets the bytecode counter to target and leaves tos on the stack, 如果 为 为 真值 ， 则 将 其 到 到 为 " null ", 如果 tos 为 真值 ， 则 将 字节 码 计数器 的 值 设为 target 并 将 tos 留在 栈顶
these two fractions have identical values, the only real difference being that the first is written in base 10 fractional notation, and the second in base 2., 这些 两个 两个 ， ， ， 只有 只 在 ， 在 输出 中 的 的 字 段 ， 在 在 基数 中 的 基数, 这 两个 小数 具有 相同 的 值 ， 唯一 真正 的 区别 是 第一个 是 以 10 为 基数 的 小数 表示法 ， 第二个 则 是 2 为 基数
the python <unk> index is a public repository of open source <unk> packages made available for use by other python users, python 3.5 索引 是 一种 ， ， 的 ， ， ， python python 其他 python 其他 python 的, python <unk> index 是 一个 开源 许可 的 软件包 公共 存储 库 ， 可 供 所有 python 用户 使用
changed in version 3.5: the <unk> structure was <unk> to <unk> and a new <unk> field was added., 在 3.5 版 更改 : the <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> and <unk> <unk> <unk> 新, 在 3.5 版 更改 : the " <unk> " structure was <unk> to " <unk> " and a new " calloc " field was added .
the parameters to these classes may also need to include external objects such as "sys.stderr", 这些 参数 的 这些 类 还 可以 需要 " __ ( ) " 方法 来 实现, 这些 类 的 形参 可能 还 需要 包括 " sys . stderr " 这样 的 外部 对象
determine whether code is in <unk> <unk> with <unk> property <unk> or <unk>, 确定 是否 是否 是否 是否 <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>, 确定 code 是否 属于 <unk> ( 带有 双向 属性 " r " 或 " <unk> " 的 字符 )
it returns an instance of the second argument, which references the same memory block as the first argument:, 它 返回 " none " 实例 实例 ， ， ， 与 内存 的 第一个 第一个 第一个 的 的, 返回 第二个 类型 的 一个 实例 ， 该 返回 实例 和 第一个 参数 指向 同 <unk> <unk> :
it returns a new python object, suitable for returning from a c function called from python., 它 返回 一个 新 的 python 一个 新 的 ， ， 它 的 新 的 函数, 最终 返回 一个 python 对象 适合 于 返回 c 函数调用 给 python 代码
<unk> and <unk> objects, <unk> 和 <unk> 对象, cookiejar 和 <unk> 对象
pep 370: per user "site packages" directory, pep 370 : 分 用户 的 site packages 目录, pep 370 : 分 用户 的 site packages 目录
if it can be determined, mode is overridden by fileobj 's mode, 如果 它 可以 通过 mode mode 模式 则 会 引发 " mode . mode ", 如果 可以 被 确定 ， 则 mode 会 被 fileobj 的 模式 所 覆盖
get an encoder function for the given encoding ., 获取 给定 的 给定 的 函数 函数, 为 给定 的 encoding 获取 一个 编码器 函数
<unk> is used by default now, " default _ default _ mode _ mode _ mode _ mode, 现在 默认 采用 " select . epoll _ <unk> " 标志
changed in version 3.4: added support for unseekable files., 在 3.4 版 更改 : 添加 了 对 " 支持 ", 在 3.4 版 更改 : 添加 了 对 不可 搜索 文件 的 支持
this code will then be turned back into the same byte when the <unk> error handler is used when encoding the data, 这 代码 将 被 在 " " " " " " " " " 时 时 ， 当 执行 时 时 时 被, 当 在 编码数据 时 使用 " ' <unk> ' " 错误处理 方案 时 ， 此 代理 将 被 转换 回 相同 的 字节
the "binascii" module contains a number of methods to convert between binary and various ascii encoded binary representations, " binascii " 模块 包含 包含 方法 的 的 二进制 二进制 和 二进制 二进制 的 二进制 二进制 二进制, " binascii " 模块 包含 很多 在 二进制 和 二进制 表示 的 各种 ascii 码 之间 转换 的 方法
the default character <unk> "'utf 8'" on windows, the value returned by "sys.getfilesystemencoding()" otherwise., 默认 字符 字符 " ' " ' " " " " 返回 " " " " 返回 " " ", 默认 的 字符 编码 格式 ： 在 windows 上 为 " ' utf 8 ' " ， 其他 系统 上 则 为 " sys . getfilesystemencoding ( ) " 所 返回 的 值
when <unk> is available then backwards compatible functionality is provided., 当 " <unk> _ <unk> ( ) " ， ， ， 时 ， 会 被 " ， ", 当 " exec _ module ( ) " 可用 的 时候 ， 那么 则 提供 了 向 后 兼容 的 功能
release date: 2016 12 06, 发布 日期 : 2016 12 06, 发布 日期 : 2016 12 06
extending python with c or c++, 在 python c c 编译 c 编译 c, 使用 c 或 c++ 扩展 python
for more information about <unk> see the other graphical user interface packages section., 有关 更 多 信息 ， 请 其他 其他 的 的 gui, 更 多 信息 ， 请 参考 其他 图形用户界面 （ gui ） 包 小节
<unk> start by looking at a python language feature that's an important foundation for writing functional style <unk> <unk>, （ 由 <unk> <unk> 在 python python <unk> 的 python ， ， 的 一个 <unk> 的 <unk> （ 例如 <unk> ）, <unk> 从 python 的 一个 语言 特性 ， 编写 函数 式 风格 程序 的 重要 <unk> 开始 <unk> ： 迭代 器
see the <unk> description for examples., 请参阅 <unk> <unk> <unk> <unk> <unk> <unk>, 在 nargs 描述 中 查看 <unk>
no <unk> to host, 没有 <unk> 转换, 没有 到 主机 的 <unk>
the installer adds this location to your shell path, 这个 的 的 的 ， 你 需要 终端 的 路径, 安装程序 将 此 位置 添加 到 shell 路径
path specifies a different directory to extract to, path 将 一个 不同 的 目录 到 目录, path 指定 一个 要 提取 到 的 不同 目录
pep <unk> using utf 8 as the default source encoding, pep <unk> : 使用 utf 8 作为 默认 的 默认, pep <unk> 使用 utf 8 作为 默认 的 源 编码
the value returned is an integer, typically one of <unk> <unk> etc., 返回值 的 值 是 一个 " " " " " 的 一个 一个 " :, 返回 的 值 是 一个 整数 ， 通常 为 " logging . debug " 、 " logging . info " 等等
it is useful for <unk> what subset of the screen windows enclose the location of a mouse <unk>, 它 适用 于 " 的 " 的 的 的 的 的 ， ， 是 的 的 的, 它 适用 于 确定 是 哪个 屏幕 窗口 子集 <unk> 着 某个 鼠标 事件 的 位置
put results in a new output window., 将 在 中 中 的 新 的 新, 将 结果 输出 至 新 的 输出 窗口
if the default value of a field is specified by a call to <unk> then the class attribute for this field will be replaced by the specified "default" value, 如果 给出 value 的 值 ， " " ( ) " 调用 " " " ， 则 " " " " ， 则 将 将 被 指定 为 " 的 ", 如果 通过 调用 " field ( ) " 指定 字段 的 默认值 ， 则 该 字 段 的 类 属性 将 替换 为 指定 的 " default " 值
logs a message with level <unk> on this logger, 在 此 记录器 上 记录 " 级别 " 级别 的 消息, 在 此 记录器 上 记录 " debug " 级别 的 消息
if the wrapped output has no <unk> the returned list is empty., 如果 该 输出 ， ， 没有 没有 ， 则 返回 返回 的 列表, 如果 自动 换行 输出 结果 没有 任何 内容 ， 则 返回 空 列表
set the garbage collection <unk> (the collection <unk>, 设置 垃圾 回收 （ （ （ （ （ ） ） ）, 设置 垃圾 回收 <unk> （ 收集 <unk> ）
the following error handlers are only applicable to text encodings :, 以下 将 将 被 只 在 文本 文本 文本 文本 文本, 以下 错误处理 方案 仅 适用 于 文本 编码 :
implements <unk> <unk> where <unk> is the index of name in <unk>, 实现 实现 <unk> , <unk> , <unk> , <unk> , " 中 的 " 中 的 ", 实现 " tos . name tos1 " ， 其中 namei 是 name 在 " co _ names " 中 的 索引 号
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
deprecated since version 3.9: deprecated in favor of "status"., 3.9 版后 已 移除 : deprecated in favor of " status " status " status ", 3.9 版后 已 移除 : deprecated in favor of " status " .
the same as <unk>, 相当于 " <unk> ( st ) " 相同, 与 " self . date ( ) . <unk> ( ) " 相同
bpo <unk> fix <unk> check <unk> for files containing <unk> <unk>, bpo <unk> : 修复 了 <unk> <unk> 的 <unk> <unk> <unk> <unk> 的 的 <unk> <unk> <unk>, bpo <unk> : 为 包含 " include " 指令 的 文件 修复 " setup . py check <unk> "
the <unk> protocol is added to the python/c api, <unk> 的 协议 了 添加 了 <unk> 的 的, 将 the vectorcall protocol 添加 到 python / c api
if <unk> is true, <unk> are represented by <unk> instead of <unk>, 如果 <unk> 为 " true " ， 则 会 被 " 而 不是 " 而 不是 " 而 不是 ", 如果 <unk> 为 真值 ， <unk> " ' ` ' " 而 不是 空格 来 表示
an example of passing some arguments to an external program as a sequence is:, 下面 参数 是 一个 参数 参数 参数 ， 参数 作为 参数 序列, 向 外部 函数 传入 序列 <unk> 的 一个 例子 如下 :
"email" an email and mime handling package, " email " 电子邮件 与 mime 处理, " email " 电子邮件 与 mime 处理 包
choice of these names is entirely up to the developer who is using <unk>, 这些 这些 名称 是 被 用于 使用 的 的 的, 这些 名称 的 选择 完全 取决于 使用 logging 的 开发者
there are special cases for strings where all code points are below <unk> <unk> or <unk> otherwise, code points must be below <unk> (which is the full unicode <unk>, 有 特殊 有 字符串 中 所有 所有 所有 码位 都 都 是 其他 <unk> 的 的 ， ， ， ， ， 是 是 <unk> 的 是 是 是 是 是 <unk> 的 的, 对于 所有 代码 点 都 <unk> 128 、 256 或 <unk> 的 字符串 ， 有 一些 特殊 情况 ； 否则 ， 代码 点 必须 <unk> <unk> （ 这是 完整 的 unicode 范围 ）
changed in version 3.5: <unk> parameter was added., 在 3.5 版 更改 : 增加 了 _ address _ was added ., 在 3.5 版 更改 : 添加 allow _ <unk> 参数
the call to "basicconfig()" should come before any calls to <unk> <unk> etc, 调用 " 调用 ( ) " 调用 调用 任何 调用 调用 调用 " ( ( ) " ) ", 对 " basicconfig ( ) " 的 调用 应该 在 " debug ( ) " ， " info ( ) " 等 的 前面
when this module is run as a script, the <unk> is used to compile all the files named on the command line, 当 此 模块 被 被 作为 ， ， 在 在 命令行 中 的 所有 中 的 所有 文件, 当 此 模块 作为 脚本 运行 时 ， 会 使用 " main ( ) " 来 编译 命令行 中 指定 的 所有 文件
"decimal" decimal fixed point and floating point arithmetic, " decimal " 十进制 定点 和 浮点运算, " decimal " 十进制 定点 和 浮点运算
incremental codecs can maintain state., 增量 编解码器 已 可以 如下, 增量 式 编解码器 可以 保持 状态
an easy way in which you can pass contextual information to be output along with logging event information is to use the <unk> class, 在 <unk> 中 ， ， 你 可以 可以 让 你 的 日志 记录 日志 记录 日志 的 的 的, 一个 传递 上下文 信息 和 日志 事件 信息 的 简单 办法 是 使用 类 " <unk> "
terms and conditions for accessing or otherwise using python, " c " 和 c 或 的 python 的 使用 的 python, 获取 或 以 其他 方式 使用 python 的 <unk> 和 条件
when these bytes are read by a <unk> with a different <unk> then bytes have to be <unk> though, 当 这些 字节 数据 读取 读取 的 ， ， 不同 的 不同 的 不同 的 ， 将 其 为 字节 的, 当 这些 字节 被 具有 不同 字节 顺序 的 cpu 读取 时 ， 则 必须 进行 字节 <unk>
<unk> traceback manager for cgi scripts, " ' <unk> ' " ' 的 <unk>, " <unk> " 用于 cgi 脚本 的 回溯 管理器
base class for all other "configparser" exceptions., 所有 所有 其他 的 的 异常, 所有 其他 " configparser " 异常 的 基类
changed in version 3.3: connection objects themselves can now be <unk> between processes using <unk> and <unk>, 在 3.3 版 更改 : 当 对象 对象 对象 现在 可以 现在 " <unk> " " " " " " " " " " " ", 在 3.3 版 更改 : 现在 连接 对象 自身 可以 通过 " connection . send ( ) " 和 " connection . recv ( ) " 在 进程 之间 传递
using <unk> to watch an fd for read events., 使用 " loop . create _ string ( ) " 来 使用 的 的, 使用 add _ reader ( ) <unk> fd ( 文件 描述符 ) 的 读取 事件 .
<unk> section in <unk> corrupted, " <unk> . <unk> _ <unk> _ <unk> _ <unk> _ <unk> ( ) " 中 的 <unk>, a . out 中 的 . lib 部分 已损坏
arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained, <unk> 序列 类型 类型 和 " <unk> " , " bytes " ， 但 " 对象 ， 在 在 对象 中 的 的, 数组 属于 序列 类型 ， 其 行为 与 列表 非常 相似 ， 不同之处 在于 其中 存储 的 对象 类型 是 受限 的
if you're matching a fixed string, or a single character class, and you're not using any "re" features such as the <unk> <unk> then the full power of regular expressions may not be required, 如果 你 一个 一个 或 或 或 或 一个 字符 ， ， 使用 " str " ， 并且 使用 " ， 例如 ， 例如 ， ， 的 的 表达式, 如果 你 匹配 固定 字符串 或 单个 字符 类 ， 并且 你 没有 使用 任何 " re " 功能 ， 例如 " <unk> " 标志 ， 那么 正则表达式 的 全部 功能 可能 不是 必需 的
indicates the format that the module uses, 该 格式 的 模块 模块, 指明 模块 所 使用 的 格式
the remaining arguments must be integers in the following <unk>, 其余 参数 必须 必须 是 以下 的 :, 其余 的 参数 必须 是 在 下面 范围 内 的 整数 ：
new in version 3.8., 3.8 新版 功能 ., 3.8 新版 功能 .
if the <unk> fails, the original bytes object at bytes is <unk> bytes is set to "null", <unk> is set, and " 1" is returned., 如果 <unk> <unk> 原始 对象 ， 则 字节 字节 字节 字节 字节 为 " null " ， " " " " " " " " " " ", 如果 <unk> 失败 ， 则 bytes 上 的 原 字节 串 对象 将 被 撤销 分配 ， bytes 会 被 设为 " null " ， 同时 设置 " <unk> " 并 返回 " 1 "
however, there is nothing in python that tells the interpreter this, 但是 ， ， python 解释器 中 ， 在 解释器 解释器, 然而 ， python 中 并 没有 告诉 解释器 这 一点
new in version 3.5., 3.5 新版 功能 ., 3.5 新版 功能 .
the binary and text transforms provided in the standard library are detailed in binary transforms and text <unk>, 二进制 二进制 和 标准 库 标准 库 的 二进制 二进制 和 二进制 转换 和 <unk>, the binary and text <unk> <unk> in the standard library are <unk> in 二进制 转换 and 文字 转换 .
where "/" and " " are optional, " " " " " " " " " " " ", 在 这里 " / " 和 " " 是 可选 的
an aware object represents a specific <unk> in time that is not open to interpretation, 一个 感知 对象 一个 一个 一个 <unk> 的 的 时间 的 时间 ， 但 不 被 设为, 感知 型 对象 是 用来 表示 一个 没有 解释 空间 的 固定 时间 点
execute the python code in command, 在 python 代码 中 代码 代码, 执行 command 中 的 python 代码
protocol family not supported, 协议 不 受 支持, 协议 <unk> 不受 支持
writing and reading a bzip2 compressed file in binary mode:, 编写 和 打开 打开 打开 的 文件 的 文件 打开, 用 二进制 模式 写入 和 读取 bzip2 压缩文件 ：
lbyl look before you leap, 在 之前 中 ， 在 你 需要, lbyl “ 先 查看 后 <unk> ” 的 <unk> 缩写
return true if p is a dict object or an instance of a subtype of the dict type., 如果 p 是 一个 一个 对象 或 " 对象 " 实例 的 实例 类型 的 实例 类型 的 实例, 如果 p 是 字典 对象 或者 字典 类型 的 子 类型 的 实例 ， 则 返回 真
all the variables below are simply symbolic <unk> into the 10 tuple returned by <unk> <unk> or <unk>, 所有 变量 变量 都 是 <unk> 的 的 " " ( ) " " " " " " " " " " " " ) ", 以下 所有 变量 是 一些 简单 的 符号 索引 ， 用于 访问 " os . stat ( ) " , " os . <unk> ( ) " 或 " os . <unk> ( ) " 所 返回 的 10 条目 元组
better to inherit than <unk>, 以 " <unk> " <unk> ", 继承 <unk> 序列化 、 反 序列化
package <unk> third party library with expanded time zone and parsing support., 包 <unk> <unk> <unk> <unk> 和 非 的 的 和 和 解析 的, <unk> 包 具有 扩展 时区 和 解析 支持 的 第三方 库
the "pass" statement does nothing, " pass " 语句 语句, " pass " 语句 什么 也 不 做
declares that function should be used as a <unk> function for objects of type type, 函数 函数 应当 应当 作为 函数 对象 的 函数 函数 函数 函数 的 函数, 声明 该 function 应当 被 用作 type 类型 对象 的 “ <unk> 函数 ”
if no maps are specified, a single empty dictionary is provided so that a new chain always has at least one mapping., 如果 没有 被 一个 字典 字典 字典 ， 则 一个 新 的 的 一个 新 的 " ， 则 会 被 引发, 如果 没有 <unk> 被 指定 ， 就 提供 一个 默认 的 空 字典 ， 这样 一个 <unk> 至少 有 一个 映射
pep 420 implicit namespace packages, pep 420 : 高级 命名 空间, pep 420 隐式 命名 空间 包
another advantage is that strings in python are considered as <unk> as numbers, 另 与 的 是 是 字符串 的 字符串 是 字符串 的 的, 另 一个 优点 是 ， python 中 的 字符串 被 视为 与 数字 一样 “ 基本 ”
here is what is <unk>, 这是 是 是 是 是 是 ？, <unk> 情况 如下 ：
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
"classvar" does not change python runtime behavior, but it can be used by third party type <unk>, " ctypes " 不会 没有 的 的 python ， 但 它 可以 在 其他 情况 下 使用 " 来 使用, " classvar " 并 不 改变 python 运行 时 行为 ， 但 它 可以 被 用于 第三方 类型 检查 器
the "__loader__" attribute must be set to the loader object that the import machinery used when loading the module, " __ " __ 必须 必须 为 " 对象 " 对象 对象 ， 模块 模块 导入 模块, " __ loader __ " 属性 必须 被 设为 导入 系统 在 加载 模块 时 使用 的 加载 器 对象
the hard coded values <unk> and <unk>, " 值 . <unk> ( ) " 和 " <unk> _ <unk> " 和 " <unk> ", 硬 编码 的 值 " utc " 和 " <unk> "
set n to 10 for <unk>, 设置 n 设 为 10 十分 十分 十分, 将 n 设 为 10 以 使用 十分 位
plus corresponds to the unary prefix plus operator in python, 将 于 python python 的 的 python, 对应 于 python 中 的 单 目前 <unk> <unk> 运算符 执行 <unk> 操作
under windows, this gives you the native windows error code, 在 ， 中 ， 你 你 会 错误 错误 的 错误, 在 windows 下 ， 此参数 将 给出 原生 的 windows 错误码
you can try to display text with multiple attribute bits set, but curses doesn't guarantee that all the possible <unk> are available, or that they're all <unk> distinct, 你 可以 通过 使用 多个 <unk> 的 的 文本 ， 但 ， 但 所有 的 所有 的 或者 ， 或者 所有 或者, 你 可以 尝试 以 多种 不 属性 位 组合 来 显示 文本 ， 但 curses 不 保证 所有 的 组合 都 是 有效 的 ， 或者 <unk> 有 明显 不同
all examples assume a native byte order, size, and alignment with a big endian <unk>, 所有 " 一个 " 的 " 、 " 、 " 的 的 ， ， 使用 使用 使用 " <unk> ", 所有 示例 都 假定 使用 <unk> 大 端 机器 的 <unk> 字节 顺序 、 大小 和 对齐 方式
the structure has three <unk>, 结构 体 具有 三个 三个 ：, 这个 结构 <unk> 三个 字 段 ：
return a <unk> object with an <unk> fixed offset represented by the offset argument., 返回 一个 " 对象 " 对象 的 对象 对象 的 " 对象 ， 其中 的 的 的 的 对象, 返回 一个 " datetime . timezone " 对象 ， 该 对象 具有 以 offset 参数 表示 的 <unk> 固定 时差
<unk> <unk> <unk> go to <unk> of file, " py _ <unk> " " " " <unk> " <unk> " 的 倍数 ", " c home " / " c end " 跳转 到 文档 <unk> / <unk>
<unk> is an up and <unk> compiler of python into c++ code, <unk> to support the full python language, <unk> 是 一个 和 python python 的 python python 的 python python 的 python 的 python python 的 python python, <unk> 是 一个 将 python <unk> c++ 代码 的 <unk> 编译器 ， 旨在 支持 完整 的 python 语言
the <unk> exception can be raised in your extension module using a call to <unk> as shown <unk>, " " " " " " 可以 在 你 " 模块 中 使用 " 模块 中 使用 " 模块, " spam . error " 异常 可以 在 扩展 模块 中 抛出 ， 通过 " pyerr _ <unk> ( ) " 函数调用 ， 如下 ：
this method, and others that <unk> call this method, raises an auditing event <unk> with argument <unk>, 此 方法 和 " 调用 . <unk> ( ) " 调用 调用 " asyncio . <unk> ( ) " 调用 " asyncio . <unk> " ， 附带 参数 " " " " ", 引发 一个 审计 事件 " ctypes . <unk> " ， 附带 参数 " address "
this is a class for comparing sequences of lines of text, and producing human readable differences or <unk>, 这是 是 序列 的 的 序列 的 的 和 ， 以及 " ' " ' " ' " ' " ' ", 这个 类 的 作用 是 比较 由 文本 行 组成 的 序列 ， 并 产生 <unk> 人 阅读 的 差异 或 增量 信息
to help <unk> modules and provide a naming <unk> python has a concept of packages ., 为了 帮助 <unk> <unk> 模块 模块 提供 了 一个 python 的 python 版本 python python 一个 python 的 的, 为了 帮助 组织 模块 并 提供 名称 层次结构 ， python 还 引入 了 包 的 概念
thus, calling <unk> with keyword arguments would lead to an error:, " " ( ) " " " 参数 " 参数 " 参数 参数 ， 以 参数, 因此 ， 附带 关键字 参数 调用 " divmod ( ) " 将会 导致 报错 :
however, in some cases it is <unk> to force a type to be formatted as a string, overriding its own definition of formatting, 但是 ， 有些 ， 它 是 为了 为 一个 类型 的 为 作为 值 ， ， 作为 <unk> 的 的 的, 但是 ， 在 某些 情况 下 最好 强制 将 类型 格式化 为 一个 字符串 ， 覆盖 其 本身 的 格式化 定义
the first occurrence of a <unk> substring on a line is considered a delimiter, 第一个 一个 的 的 的 的 的 行 被 被 一个, 在 一行 中 首次 出现 的 分隔 子 字符串 会 被 视为 一个 分隔符
changed in version 3.5: added the two tuple form for the address constructor parameter., 在 3.5 版 更改 : 添加 了 两个 参数 的 " 参数 " 参数 的 形参, 在 3.5 版 更改 : added the <unk> tuple form for the address constructor parameter .
changed in version 3.9: the errors parameter was added., 在 3.9 版 更改 : 增加 了 errors 形参, 在 3.9 版 更改 : 增加 了 errors 形参
note also that updating <unk> will render this dictionary <unk>, 请 注意 ， " " . <unk> ( ) " 将 不会 字典 字典 字典, 还要 注意 更新 " os . <unk> " 将 导致 此 字典 失效
the default <unk> when not otherwise specified can be configured at compile time., 默认值 " default _ default ( ) " 不会 被 被 被 被 被 被 被, 默认 的 " <unk> " 未 通过 其他 方式 指定 时 可 在 编译 时 进行 配置
if <unk> is false and <unk> is true, each tab character will be replaced by a single space, which is not the same as tab <unk>, 如果 <unk> 为 " true " ， 则 会 被 视为 ， 将 被 被 为 为 " true " ， 则 将 被 忽略, 如果 " <unk> _ <unk> " 为 假值 且 " replace _ <unk> " 为 真值 ， 每个 制表符 将 被 替换 为 单个 空格 ， 这 与 制表符 扩展 是 不 一样 的
there are also bindings to <unk>, 有 也 绑定 绑定 绑定 绑定, 此外 也 有 对 <unk> 的 绑定
status code returned by <unk>, " 由 " loop . create _ datagram ( ) " 返回 的 的, 由 <unk> 的 状态 码
the input source can be given as a string, a file like object, or an <unk> object; parsers will use this function to implement the <unk> source argument to their "parse()" method., 可以 通过 可 通过 一个 类 对象 ， 一个 文件 对象 ， 或者 一个 " 或 " 对象 ( ) " 函数 来 实现 函数 的 " ( ) " 方法 来 调用 " __ ( ) " 方法, 输入 源 的 给出 形式 可以 为 字符串 、 文件 类 对象 或 " <unk> " 对象 ； 解析器 将 使用 此 函数 来 针对 它们 的 " parse ( ) " 方法 实现 <unk> source 参数
two common operations on an <unk> output are 1) performing some operation for every element, <unk> selecting a subset of elements that meet some condition, 两个 常见 的 常见 的 操作 （ 例如 在 " <unk> ( ) " 的 的 的 （ 例如 " <unk> ( ) " 的 的 的 的 的 的, 迭代 器 的 输出 有 两个 很 常见 的 使用 方式 ， 1 ) 对 每 一个 元素 执行 操作 ， 2 ) 选择 一个 <unk> 的 元素 子集
<unk> call <unk> <unk> <unk> <unk>, " <unk> _ <unk> ( ) " , " <unk> _ <unk> , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , " , ", <unk> call <unk> ( <unk> ) 过滤器 ： " filter _ <unk> "
the module defines the following functions:, 模块 模块 定义 了 以下 函数 ：, 这个 模块 定义 了 以下 函数 ：
some way of <unk> <unk> <unk> would be <unk> the <unk> variable is not <unk>, 一些 的 的 " <unk> " ， 是 是 " 的 的 是 是 是 的 的 的 是 是 是 是, 一些 可靠 地 检测 <unk> 的 方法 会 很 好 ； 仅 检查 " <unk> " 变量 是 不够 的
<unk> is also a context manager and therefore supports the "with" statement, " 是 " 是 " 上下文 管理器 上下文 支持 支持 " with " 语句, " iobase " 也 是 一个 上下文 管理器 ， 因此 支持 " with " 语句
return the negation of the argument, 返回 的 的 的, 回到 参数 的 <unk>
"random" generate pseudo random numbers, " random " 生成 伪 随机数, " random " 生成 伪 随机数
return a new instance method object, with func being any callable object func is the function that will be called when the instance method is called., 当 " 方法 " 对象 " 对象 ， 对象 对象 ， 对象 对象 对象 对象 对象 调用 对象 对象 调用 " __ ( ) " 方法 被 调用 调用 " 调用 " 实例, 返回 一个 新 的 实例 方法 对象 ， func 应为 任意 可 调用 对象 ， func 将 在 实例 方法 被 调用 时 作为 函数 被 调用
new in version 3.7., 3.7 新版 功能 ., 3.7 新版 功能 .
<unk> : "true" if the clock can be changed automatically (e.g. by a <unk> <unk> or manually by the system <unk> "false" otherwise, " <unk> 如果 如果 如果 通过 为 " ， " " " " " " " " ， " " " " " " " " " " " " ", <unk> ： 如果 时钟 可以 自动 更改 （ 例如 通过 <unk> <unk> 程序 ） 或 由 <unk> 手动 更改 ， 则 为 " true " ， 否则 为 " false "
if it is a string, the string is parsed as a suite of python statements which is then executed (unless a syntax error <unk>, 如果 它 是 字符串 字符串 ， 则 python 语句 ， ， 一个 python 语句 的 一个 ， ， 会 被 移除, 如果 是 字符串 ， 那么 该 字符串 将 被 解析 为 一系列 python 语句 并 执行 （ 除非 发生 语法错误 ）
the instance will be used as global state for the functions of this module, and is also returned to use during iteration, 实例 实例 作为 作为 作为 函数 ， 函数 的 函数 函数 会 使用 " os . __ ( ) " 来 使用 ", 该 实例 将 被 用作 此 模块 中 函数 的 全局 状态 ， 并且 还 将 在 迭代 期间 被 返回 使用
this method is useful for finding rational <unk> to a given floating point <unk>, 此 方法 适用 于 适用 于 " " " " " " " ", 此 方法 适用 于 找出 给定 浮点数 的 <unk> 近似值 ：
packs a fixed length string, s, 打包 一个 字符串 长度 长度, 打包 固定 长度 字符串 s
using those functions, the above examples become simpler and <unk>, 使用 " ， " ， " 示例 " 和 " 和 ", 使用 这些 函数 ， 上述 示例 变得 更 简单 ， 更 <unk> ：
unless explicitly <unk> these functions support "int", "float", "decimal" and "fraction", " ， " ， " 函数 " 函数 支持 " 、 " 、 " 、 " 和 " 和 " 和 ", 除非 明确 注释 ， 这些 函数 支持 " int " ， " float " ， " decimal " 和 " fraction "
the argument to <unk> is wrapped in calls to "open()", <unk> and <unk>, 参数 " <unk> _ <unk> " 被 调用 " <unk> ( ) " 和 " sys . <unk> " ) ", " <unk> ( ) " 的 <unk> 参会 使用 " open ( ) " ， " compile ( ) " 和 " exec ( ) " 包装
macros to extract fields from time delta objects, 从 用来 从 从 时间 的 时间 时间, 一些 用来 从 timedelta 对象 中 提取 字段 的 宏
for loggers other than the root <unk> some additional information is required, 对于 其他 的 的 的 的 ， ， ， 都 会 需要 额外 的 信息, 对于 根 日志 记录器 以外 的 日志 记录器 ， 还 需要 某些 附加 信息
the default message can be overridden with the <unk> " keyword argument:, 默认 消息 可 通过 " " " " " " 关键字 参数, 可以 通过 " usage " 关键字 参数 覆盖 这一 默认 消息 ：
some semantics have changed since the writing of this document (e.g. redirecting based on "none" in <unk>, 有些 有 的 的 的 的 的 的 " " " " " " " " " " " " " ", <unk> 编写 这个 文档 开始 ， 一些 语义 已经 发生 改变 了 （ 比如 基于 " sys . modules " 中 " none " 的 重定向 ）
constructor for a "streamwriter" instance., " struct " 的 的 实例, " streamwriter " 实例 的 构造 器
sequence of operation names, <unk> using the <unk>, 对 操作 的 操作 的 <unk> <unk>, 操作 名称 的 序列 ， 可 使用 字节 <unk> 索引
if you're trying to build a pathname for a <unk> command, try e.g. one of, 如果 要 使用 要 指定 的 的 一个 ， ， ， ， 的 一个 一个 的 的, 如果 您 正在 尝试 为 <unk> 命令 构建 路径名 ， 请 尝试 以下 示例
see also the <unk> method <unk>, 另 请参阅 " <unk> _ <unk> ( ) " 方法, 另 参见 <unk> / turtle 方法 " <unk> ( ) "
added <unk> and its variants, 添加 了 " <unk> " 和 和 其, 添加 了 " <unk> ( ) " 及其 变化 形式
if you have associated levels with names using <unk> then the name you have associated with level is returned, 如果 你 必须 关联 的 " __ " __ ( ) " 方法 ， 则 使用 " 名称 ， 则 使用 的 的 级别, 如果 你 使用 " <unk> ( ) " 将 级别 关联 到 名称 则 会 返回 你 为 level 所 关联 的 名称
"copy" shallow and deep copy operations, " copy " 浅层 ( shallow ) 和 深层 ( deep ) 复制 操作, " copy " 浅层 ( shallow ) 和 深层 ( deep ) 复制 操作
after "f <unk> the call "f(b)" returns <unk>, 在 " ' f ' " ' " ' " 调用 " " ( ) " 返回 返回 " " ( ) ", 在 " f <unk> ( ' name ' ) " 之后 ， 调用 " f ( b ) " 将 返回 " b . name "
return "true" if the "tarinfo" object is a regular file., 如果 object 对象 对象 则 返回 " true ", 如果 " tarinfo " 对象 为 普通 文件 则 返回 " true "
if compact is false (the default) each item of a long sequence will be formatted on a separate line, 如果 为 为 为 " true " ， 则 将 每个 元素 ， 则 将 在 一行 一行, 如果 <unk> 为 假值 （ 默认 ） 则 长 序列 的 <unk> 将 被 格式化 为 单独 的 行
if the optional argument header is present and true, underscore will be decoded as space, 如果 可选 选 参数 参数 ， 则 为 " true " ， 将 被 为 为, 如果 提供 了 可选 参数 header 且 为 真值 ， 下划线 将 被 解码 为 空格
new in version 3.2., 3.2 新版 功能 ., 3.2 新版 功能 .
owner has read <unk>, " 已 " 读取 ., 所有者 具有 读取 权限
return a dictionary of the builtins in the current execution frame, or the interpreter of the thread state if no frame is currently executing., 返回 当前 当前 中 的 的 的 ， 如果 当前 线程 的 的 ， 则 返回 " true ", 返回 当前 执行 帧 中 内置 函数 的 字典 ， 如果 当前 没有 帧 正在 执行 ， 则 返回 线程 状态 的 解释器
many editors and ides provide syntax <unk> debugging tools, and pep 8 <unk>, 许多 许多 、 和 和 两种 的 语法 ， ， 包括 和 pep pep pep <unk>, 大多数 编辑器 和 集成 开发 环境 支持 语法 <unk> ， 调试 工具 和 pep 8 检查
the cython and <unk> libraries offer <unk> over python's c api, cython 的 和 和 c api c api c api c api c api, cython 和 <unk> 库 提供 了 对于 python 的 c api 的 抽象
for integer and pointer types, it is an integer, for character types, it is a single character bytes object or string, for character pointer types it is a python bytes object or string., 对于 整数 的 是 整数 的 是 是 是 是 一个 的 的 的 的 是 一个 " bytes " 对象 ， 或者 是 一个 字节 串 对象 的 类型 字节 串 对象, 对于 整数 和 指针 类型 ， 它 是 一个 整数 ， 对于 字符 类型 ， 它 是 一个 单 字符 字符串 对象 或 字符串 ， 对于 字符 指针 类型 ， 它 是 一个 python 字节 串 对象 或 字符串
